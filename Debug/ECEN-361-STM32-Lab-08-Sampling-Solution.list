
ECEN-361-STM32-Lab-08-Sampling-Solution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  08008588  08008588  00018588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ef0  08008ef0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008ef0  08008ef0  00018ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ef8  08008ef8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ef8  08008ef8  00018ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008efc  08008efc  00018efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  20000070  08008f70  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  08008f70  00020514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017e5a  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031a8  00000000  00000000  00037f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  0003b0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001113  00000000  00000000  0003c6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a81b  00000000  00000000  0003d7f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019480  00000000  00000000  0006800e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010a21b  00000000  00000000  0008148e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006674  00000000  00000000  0018b6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00191d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008570 	.word	0x08008570

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008570 	.word	0x08008570

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__gedf2>:
 800083c:	f04f 3cff 	mov.w	ip, #4294967295
 8000840:	e006      	b.n	8000850 <__cmpdf2+0x4>
 8000842:	bf00      	nop

08000844 <__ledf2>:
 8000844:	f04f 0c01 	mov.w	ip, #1
 8000848:	e002      	b.n	8000850 <__cmpdf2+0x4>
 800084a:	bf00      	nop

0800084c <__cmpdf2>:
 800084c:	f04f 0c01 	mov.w	ip, #1
 8000850:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800085c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000866:	d01b      	beq.n	80008a0 <__cmpdf2+0x54>
 8000868:	b001      	add	sp, #4
 800086a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800086e:	bf0c      	ite	eq
 8000870:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000874:	ea91 0f03 	teqne	r1, r3
 8000878:	bf02      	ittt	eq
 800087a:	ea90 0f02 	teqeq	r0, r2
 800087e:	2000      	moveq	r0, #0
 8000880:	4770      	bxeq	lr
 8000882:	f110 0f00 	cmn.w	r0, #0
 8000886:	ea91 0f03 	teq	r1, r3
 800088a:	bf58      	it	pl
 800088c:	4299      	cmppl	r1, r3
 800088e:	bf08      	it	eq
 8000890:	4290      	cmpeq	r0, r2
 8000892:	bf2c      	ite	cs
 8000894:	17d8      	asrcs	r0, r3, #31
 8000896:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800089a:	f040 0001 	orr.w	r0, r0, #1
 800089e:	4770      	bx	lr
 80008a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a8:	d102      	bne.n	80008b0 <__cmpdf2+0x64>
 80008aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ae:	d107      	bne.n	80008c0 <__cmpdf2+0x74>
 80008b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d1d6      	bne.n	8000868 <__cmpdf2+0x1c>
 80008ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008be:	d0d3      	beq.n	8000868 <__cmpdf2+0x1c>
 80008c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <__aeabi_cdrcmple>:
 80008c8:	4684      	mov	ip, r0
 80008ca:	4610      	mov	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	468c      	mov	ip, r1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4663      	mov	r3, ip
 80008d4:	e000      	b.n	80008d8 <__aeabi_cdcmpeq>
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdcmpeq>:
 80008d8:	b501      	push	{r0, lr}
 80008da:	f7ff ffb7 	bl	800084c <__cmpdf2>
 80008de:	2800      	cmp	r0, #0
 80008e0:	bf48      	it	mi
 80008e2:	f110 0f00 	cmnmi.w	r0, #0
 80008e6:	bd01      	pop	{r0, pc}

080008e8 <__aeabi_dcmpeq>:
 80008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ec:	f7ff fff4 	bl	80008d8 <__aeabi_cdcmpeq>
 80008f0:	bf0c      	ite	eq
 80008f2:	2001      	moveq	r0, #1
 80008f4:	2000      	movne	r0, #0
 80008f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008fa:	bf00      	nop

080008fc <__aeabi_dcmplt>:
 80008fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000900:	f7ff ffea 	bl	80008d8 <__aeabi_cdcmpeq>
 8000904:	bf34      	ite	cc
 8000906:	2001      	movcc	r0, #1
 8000908:	2000      	movcs	r0, #0
 800090a:	f85d fb08 	ldr.w	pc, [sp], #8
 800090e:	bf00      	nop

08000910 <__aeabi_dcmple>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff ffe0 	bl	80008d8 <__aeabi_cdcmpeq>
 8000918:	bf94      	ite	ls
 800091a:	2001      	movls	r0, #1
 800091c:	2000      	movhi	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmpge>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffce 	bl	80008c8 <__aeabi_cdrcmple>
 800092c:	bf94      	ite	ls
 800092e:	2001      	movls	r0, #1
 8000930:	2000      	movhi	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmpgt>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffc4 	bl	80008c8 <__aeabi_cdrcmple>
 8000940:	bf34      	ite	cc
 8000942:	2001      	movcc	r0, #1
 8000944:	2000      	movcs	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_uldivmod>:
 800094c:	b953      	cbnz	r3, 8000964 <__aeabi_uldivmod+0x18>
 800094e:	b94a      	cbnz	r2, 8000964 <__aeabi_uldivmod+0x18>
 8000950:	2900      	cmp	r1, #0
 8000952:	bf08      	it	eq
 8000954:	2800      	cmpeq	r0, #0
 8000956:	bf1c      	itt	ne
 8000958:	f04f 31ff 	movne.w	r1, #4294967295
 800095c:	f04f 30ff 	movne.w	r0, #4294967295
 8000960:	f000 b970 	b.w	8000c44 <__aeabi_idiv0>
 8000964:	f1ad 0c08 	sub.w	ip, sp, #8
 8000968:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800096c:	f000 f806 	bl	800097c <__udivmoddi4>
 8000970:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000978:	b004      	add	sp, #16
 800097a:	4770      	bx	lr

0800097c <__udivmoddi4>:
 800097c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000980:	9e08      	ldr	r6, [sp, #32]
 8000982:	460d      	mov	r5, r1
 8000984:	4604      	mov	r4, r0
 8000986:	460f      	mov	r7, r1
 8000988:	2b00      	cmp	r3, #0
 800098a:	d14a      	bne.n	8000a22 <__udivmoddi4+0xa6>
 800098c:	428a      	cmp	r2, r1
 800098e:	4694      	mov	ip, r2
 8000990:	d965      	bls.n	8000a5e <__udivmoddi4+0xe2>
 8000992:	fab2 f382 	clz	r3, r2
 8000996:	b143      	cbz	r3, 80009aa <__udivmoddi4+0x2e>
 8000998:	fa02 fc03 	lsl.w	ip, r2, r3
 800099c:	f1c3 0220 	rsb	r2, r3, #32
 80009a0:	409f      	lsls	r7, r3
 80009a2:	fa20 f202 	lsr.w	r2, r0, r2
 80009a6:	4317      	orrs	r7, r2
 80009a8:	409c      	lsls	r4, r3
 80009aa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009ae:	fa1f f58c 	uxth.w	r5, ip
 80009b2:	fbb7 f1fe 	udiv	r1, r7, lr
 80009b6:	0c22      	lsrs	r2, r4, #16
 80009b8:	fb0e 7711 	mls	r7, lr, r1, r7
 80009bc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009c0:	fb01 f005 	mul.w	r0, r1, r5
 80009c4:	4290      	cmp	r0, r2
 80009c6:	d90a      	bls.n	80009de <__udivmoddi4+0x62>
 80009c8:	eb1c 0202 	adds.w	r2, ip, r2
 80009cc:	f101 37ff 	add.w	r7, r1, #4294967295
 80009d0:	f080 811c 	bcs.w	8000c0c <__udivmoddi4+0x290>
 80009d4:	4290      	cmp	r0, r2
 80009d6:	f240 8119 	bls.w	8000c0c <__udivmoddi4+0x290>
 80009da:	3902      	subs	r1, #2
 80009dc:	4462      	add	r2, ip
 80009de:	1a12      	subs	r2, r2, r0
 80009e0:	b2a4      	uxth	r4, r4
 80009e2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009e6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009ee:	fb00 f505 	mul.w	r5, r0, r5
 80009f2:	42a5      	cmp	r5, r4
 80009f4:	d90a      	bls.n	8000a0c <__udivmoddi4+0x90>
 80009f6:	eb1c 0404 	adds.w	r4, ip, r4
 80009fa:	f100 32ff 	add.w	r2, r0, #4294967295
 80009fe:	f080 8107 	bcs.w	8000c10 <__udivmoddi4+0x294>
 8000a02:	42a5      	cmp	r5, r4
 8000a04:	f240 8104 	bls.w	8000c10 <__udivmoddi4+0x294>
 8000a08:	4464      	add	r4, ip
 8000a0a:	3802      	subs	r0, #2
 8000a0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a10:	1b64      	subs	r4, r4, r5
 8000a12:	2100      	movs	r1, #0
 8000a14:	b11e      	cbz	r6, 8000a1e <__udivmoddi4+0xa2>
 8000a16:	40dc      	lsrs	r4, r3
 8000a18:	2300      	movs	r3, #0
 8000a1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0xbc>
 8000a26:	2e00      	cmp	r6, #0
 8000a28:	f000 80ed 	beq.w	8000c06 <__udivmoddi4+0x28a>
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000a32:	4608      	mov	r0, r1
 8000a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a38:	fab3 f183 	clz	r1, r3
 8000a3c:	2900      	cmp	r1, #0
 8000a3e:	d149      	bne.n	8000ad4 <__udivmoddi4+0x158>
 8000a40:	42ab      	cmp	r3, r5
 8000a42:	d302      	bcc.n	8000a4a <__udivmoddi4+0xce>
 8000a44:	4282      	cmp	r2, r0
 8000a46:	f200 80f8 	bhi.w	8000c3a <__udivmoddi4+0x2be>
 8000a4a:	1a84      	subs	r4, r0, r2
 8000a4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a50:	2001      	movs	r0, #1
 8000a52:	4617      	mov	r7, r2
 8000a54:	2e00      	cmp	r6, #0
 8000a56:	d0e2      	beq.n	8000a1e <__udivmoddi4+0xa2>
 8000a58:	e9c6 4700 	strd	r4, r7, [r6]
 8000a5c:	e7df      	b.n	8000a1e <__udivmoddi4+0xa2>
 8000a5e:	b902      	cbnz	r2, 8000a62 <__udivmoddi4+0xe6>
 8000a60:	deff      	udf	#255	; 0xff
 8000a62:	fab2 f382 	clz	r3, r2
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f040 8090 	bne.w	8000b8c <__udivmoddi4+0x210>
 8000a6c:	1a8a      	subs	r2, r1, r2
 8000a6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a72:	fa1f fe8c 	uxth.w	lr, ip
 8000a76:	2101      	movs	r1, #1
 8000a78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a80:	0c22      	lsrs	r2, r4, #16
 8000a82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a86:	fb0e f005 	mul.w	r0, lr, r5
 8000a8a:	4290      	cmp	r0, r2
 8000a8c:	d908      	bls.n	8000aa0 <__udivmoddi4+0x124>
 8000a8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a96:	d202      	bcs.n	8000a9e <__udivmoddi4+0x122>
 8000a98:	4290      	cmp	r0, r2
 8000a9a:	f200 80cb 	bhi.w	8000c34 <__udivmoddi4+0x2b8>
 8000a9e:	4645      	mov	r5, r8
 8000aa0:	1a12      	subs	r2, r2, r0
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000aa8:	fb07 2210 	mls	r2, r7, r0, r2
 8000aac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ab0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ab4:	45a6      	cmp	lr, r4
 8000ab6:	d908      	bls.n	8000aca <__udivmoddi4+0x14e>
 8000ab8:	eb1c 0404 	adds.w	r4, ip, r4
 8000abc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ac0:	d202      	bcs.n	8000ac8 <__udivmoddi4+0x14c>
 8000ac2:	45a6      	cmp	lr, r4
 8000ac4:	f200 80bb 	bhi.w	8000c3e <__udivmoddi4+0x2c2>
 8000ac8:	4610      	mov	r0, r2
 8000aca:	eba4 040e 	sub.w	r4, r4, lr
 8000ace:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ad2:	e79f      	b.n	8000a14 <__udivmoddi4+0x98>
 8000ad4:	f1c1 0720 	rsb	r7, r1, #32
 8000ad8:	408b      	lsls	r3, r1
 8000ada:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ade:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ae2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ae6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aea:	40fd      	lsrs	r5, r7
 8000aec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000af0:	4323      	orrs	r3, r4
 8000af2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000af6:	fa1f fe8c 	uxth.w	lr, ip
 8000afa:	fb09 5518 	mls	r5, r9, r8, r5
 8000afe:	0c1c      	lsrs	r4, r3, #16
 8000b00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b04:	fb08 f50e 	mul.w	r5, r8, lr
 8000b08:	42a5      	cmp	r5, r4
 8000b0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b12:	d90b      	bls.n	8000b2c <__udivmoddi4+0x1b0>
 8000b14:	eb1c 0404 	adds.w	r4, ip, r4
 8000b18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b1c:	f080 8088 	bcs.w	8000c30 <__udivmoddi4+0x2b4>
 8000b20:	42a5      	cmp	r5, r4
 8000b22:	f240 8085 	bls.w	8000c30 <__udivmoddi4+0x2b4>
 8000b26:	f1a8 0802 	sub.w	r8, r8, #2
 8000b2a:	4464      	add	r4, ip
 8000b2c:	1b64      	subs	r4, r4, r5
 8000b2e:	b29d      	uxth	r5, r3
 8000b30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b34:	fb09 4413 	mls	r4, r9, r3, r4
 8000b38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b40:	45a6      	cmp	lr, r4
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x1da>
 8000b44:	eb1c 0404 	adds.w	r4, ip, r4
 8000b48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b4c:	d26c      	bcs.n	8000c28 <__udivmoddi4+0x2ac>
 8000b4e:	45a6      	cmp	lr, r4
 8000b50:	d96a      	bls.n	8000c28 <__udivmoddi4+0x2ac>
 8000b52:	3b02      	subs	r3, #2
 8000b54:	4464      	add	r4, ip
 8000b56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b5e:	eba4 040e 	sub.w	r4, r4, lr
 8000b62:	42ac      	cmp	r4, r5
 8000b64:	46c8      	mov	r8, r9
 8000b66:	46ae      	mov	lr, r5
 8000b68:	d356      	bcc.n	8000c18 <__udivmoddi4+0x29c>
 8000b6a:	d053      	beq.n	8000c14 <__udivmoddi4+0x298>
 8000b6c:	b156      	cbz	r6, 8000b84 <__udivmoddi4+0x208>
 8000b6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b72:	eb64 040e 	sbc.w	r4, r4, lr
 8000b76:	fa04 f707 	lsl.w	r7, r4, r7
 8000b7a:	40ca      	lsrs	r2, r1
 8000b7c:	40cc      	lsrs	r4, r1
 8000b7e:	4317      	orrs	r7, r2
 8000b80:	e9c6 7400 	strd	r7, r4, [r6]
 8000b84:	4618      	mov	r0, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8c:	f1c3 0120 	rsb	r1, r3, #32
 8000b90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b94:	fa20 f201 	lsr.w	r2, r0, r1
 8000b98:	fa25 f101 	lsr.w	r1, r5, r1
 8000b9c:	409d      	lsls	r5, r3
 8000b9e:	432a      	orrs	r2, r5
 8000ba0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba4:	fa1f fe8c 	uxth.w	lr, ip
 8000ba8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bac:	fb07 1510 	mls	r5, r7, r0, r1
 8000bb0:	0c11      	lsrs	r1, r2, #16
 8000bb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000bb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000bba:	428d      	cmp	r5, r1
 8000bbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x258>
 8000bc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bca:	d22f      	bcs.n	8000c2c <__udivmoddi4+0x2b0>
 8000bcc:	428d      	cmp	r5, r1
 8000bce:	d92d      	bls.n	8000c2c <__udivmoddi4+0x2b0>
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	4461      	add	r1, ip
 8000bd4:	1b49      	subs	r1, r1, r5
 8000bd6:	b292      	uxth	r2, r2
 8000bd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bdc:	fb07 1115 	mls	r1, r7, r5, r1
 8000be0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000be4:	fb05 f10e 	mul.w	r1, r5, lr
 8000be8:	4291      	cmp	r1, r2
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x282>
 8000bec:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bf4:	d216      	bcs.n	8000c24 <__udivmoddi4+0x2a8>
 8000bf6:	4291      	cmp	r1, r2
 8000bf8:	d914      	bls.n	8000c24 <__udivmoddi4+0x2a8>
 8000bfa:	3d02      	subs	r5, #2
 8000bfc:	4462      	add	r2, ip
 8000bfe:	1a52      	subs	r2, r2, r1
 8000c00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c04:	e738      	b.n	8000a78 <__udivmoddi4+0xfc>
 8000c06:	4631      	mov	r1, r6
 8000c08:	4630      	mov	r0, r6
 8000c0a:	e708      	b.n	8000a1e <__udivmoddi4+0xa2>
 8000c0c:	4639      	mov	r1, r7
 8000c0e:	e6e6      	b.n	80009de <__udivmoddi4+0x62>
 8000c10:	4610      	mov	r0, r2
 8000c12:	e6fb      	b.n	8000a0c <__udivmoddi4+0x90>
 8000c14:	4548      	cmp	r0, r9
 8000c16:	d2a9      	bcs.n	8000b6c <__udivmoddi4+0x1f0>
 8000c18:	ebb9 0802 	subs.w	r8, r9, r2
 8000c1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c20:	3b01      	subs	r3, #1
 8000c22:	e7a3      	b.n	8000b6c <__udivmoddi4+0x1f0>
 8000c24:	4645      	mov	r5, r8
 8000c26:	e7ea      	b.n	8000bfe <__udivmoddi4+0x282>
 8000c28:	462b      	mov	r3, r5
 8000c2a:	e794      	b.n	8000b56 <__udivmoddi4+0x1da>
 8000c2c:	4640      	mov	r0, r8
 8000c2e:	e7d1      	b.n	8000bd4 <__udivmoddi4+0x258>
 8000c30:	46d0      	mov	r8, sl
 8000c32:	e77b      	b.n	8000b2c <__udivmoddi4+0x1b0>
 8000c34:	3d02      	subs	r5, #2
 8000c36:	4462      	add	r2, ip
 8000c38:	e732      	b.n	8000aa0 <__udivmoddi4+0x124>
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e70a      	b.n	8000a54 <__udivmoddi4+0xd8>
 8000c3e:	4464      	add	r4, ip
 8000c40:	3802      	subs	r0, #2
 8000c42:	e742      	b.n	8000aca <__udivmoddi4+0x14e>

08000c44 <__aeabi_idiv0>:
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	461a      	mov	r2, r3
 8000c54:	460b      	mov	r3, r1
 8000c56:	817b      	strh	r3, [r7, #10]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	75fb      	strb	r3, [r7, #23]
 8000c60:	e038      	b.n	8000cd4 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000c62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d10f      	bne.n	8000c8a <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 8000c6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	897b      	ldrh	r3, [r7, #10]
 8000c76:	4619      	mov	r1, r3
 8000c78:	68f8      	ldr	r0, [r7, #12]
 8000c7a:	f003 fef3 	bl	8004a64 <HAL_GPIO_WritePin>
			val >>= 1;
 8000c7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c82:	085b      	lsrs	r3, r3, #1
 8000c84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000c88:	e00f      	b.n	8000caa <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 8000c8a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	09db      	lsrs	r3, r3, #7
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	897b      	ldrh	r3, [r7, #10]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f003 fee2 	bl	8004a64 <HAL_GPIO_WritePin>
			val <<= 1;
 8000ca0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 8000caa:	893b      	ldrh	r3, [r7, #8]
 8000cac:	2200      	movs	r2, #0
 8000cae:	4619      	mov	r1, r3
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f003 fed7 	bl	8004a64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 8000cb6:	893b      	ldrh	r3, [r7, #8]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4619      	mov	r1, r3
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f003 fed1 	bl	8004a64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 8000cc2:	893b      	ldrh	r3, [r7, #8]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f003 fecb 	bl	8004a64 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 8000cce:	7dfb      	ldrb	r3, [r7, #23]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	75fb      	strb	r3, [r7, #23]
 8000cd4:	7dfb      	ldrb	r3, [r7, #23]
 8000cd6:	2b07      	cmp	r3, #7
 8000cd8:	d9c3      	bls.n	8000c62 <shiftOut+0x1a>
	}
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <MultiFunctionShield_Display>:
	SEGMENT_VALUE[0] = 0x0e;    // Letter F
	}


void MultiFunctionShield_Display (int16_t value)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	80fb      	strh	r3, [r7, #6]
  if ((value > 9999) || (value < -999))   // out of range
 8000cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	dc04      	bgt.n	8000d04 <MultiFunctionShield_Display+0x20>
 8000cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cfe:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000d02:	dc0c      	bgt.n	8000d1e <MultiFunctionShield_Display+0x3a>
  {
    SEGMENT_VALUE[0] = SEGMENT_MINUS;
 8000d04:	22bf      	movs	r2, #191	; 0xbf
 8000d06:	4b7f      	ldr	r3, [pc, #508]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000d08:	701a      	strb	r2, [r3, #0]
    SEGMENT_VALUE[1] = SEGMENT_MINUS;
 8000d0a:	22bf      	movs	r2, #191	; 0xbf
 8000d0c:	4b7d      	ldr	r3, [pc, #500]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000d0e:	705a      	strb	r2, [r3, #1]
    SEGMENT_VALUE[2] = SEGMENT_MINUS;
 8000d10:	22bf      	movs	r2, #191	; 0xbf
 8000d12:	4b7c      	ldr	r3, [pc, #496]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000d14:	709a      	strb	r2, [r3, #2]
    SEGMENT_VALUE[3] = SEGMENT_MINUS;
 8000d16:	22bf      	movs	r2, #191	; 0xbf
 8000d18:	4b7a      	ldr	r3, [pc, #488]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000d1a:	70da      	strb	r2, [r3, #3]
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;

      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
    }
  }
}
 8000d1c:	e0ec      	b.n	8000ef8 <MultiFunctionShield_Display+0x214>
    if (value > 0)   // positive values
 8000d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	dd72      	ble.n	8000e0c <MultiFunctionShield_Display+0x128>
      if (value > 999)
 8000d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d2e:	db0f      	blt.n	8000d50 <MultiFunctionShield_Display+0x6c>
        SEGMENT_VALUE[0] = SEGMENT_MAP [(uint8_t) (value / 1000)];
 8000d30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d34:	4a74      	ldr	r2, [pc, #464]	; (8000f08 <MultiFunctionShield_Display+0x224>)
 8000d36:	fb82 1203 	smull	r1, r2, r2, r3
 8000d3a:	1192      	asrs	r2, r2, #6
 8000d3c:	17db      	asrs	r3, r3, #31
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b71      	ldr	r3, [pc, #452]	; (8000f0c <MultiFunctionShield_Display+0x228>)
 8000d48:	5c9a      	ldrb	r2, [r3, r2]
 8000d4a:	4b6e      	ldr	r3, [pc, #440]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000d4c:	701a      	strb	r2, [r3, #0]
 8000d4e:	e002      	b.n	8000d56 <MultiFunctionShield_Display+0x72>
        SEGMENT_VALUE[0] = BLANK_OR_ZERO_FILL;
 8000d50:	22ff      	movs	r2, #255	; 0xff
 8000d52:	4b6c      	ldr	r3, [pc, #432]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000d54:	701a      	strb	r2, [r3, #0]
      if (value > 99)
 8000d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d5a:	2b63      	cmp	r3, #99	; 0x63
 8000d5c:	dd1b      	ble.n	8000d96 <MultiFunctionShield_Display+0xb2>
        SEGMENT_VALUE[1] = SEGMENT_MAP [(uint8_t) ((value / 100) % 10)];
 8000d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d62:	4a6b      	ldr	r2, [pc, #428]	; (8000f10 <MultiFunctionShield_Display+0x22c>)
 8000d64:	fb82 1203 	smull	r1, r2, r2, r3
 8000d68:	1152      	asrs	r2, r2, #5
 8000d6a:	17db      	asrs	r3, r3, #31
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	b21a      	sxth	r2, r3
 8000d70:	4b68      	ldr	r3, [pc, #416]	; (8000f14 <MultiFunctionShield_Display+0x230>)
 8000d72:	fb83 1302 	smull	r1, r3, r3, r2
 8000d76:	1099      	asrs	r1, r3, #2
 8000d78:	17d3      	asrs	r3, r2, #31
 8000d7a:	1ac9      	subs	r1, r1, r3
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	440b      	add	r3, r1
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b5f      	ldr	r3, [pc, #380]	; (8000f0c <MultiFunctionShield_Display+0x228>)
 8000d8e:	5c9a      	ldrb	r2, [r3, r2]
 8000d90:	4b5c      	ldr	r3, [pc, #368]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000d92:	705a      	strb	r2, [r3, #1]
 8000d94:	e002      	b.n	8000d9c <MultiFunctionShield_Display+0xb8>
        SEGMENT_VALUE[1] = BLANK_OR_ZERO_FILL;
 8000d96:	22ff      	movs	r2, #255	; 0xff
 8000d98:	4b5a      	ldr	r3, [pc, #360]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000d9a:	705a      	strb	r2, [r3, #1]
      if (value > 9)
 8000d9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da0:	2b09      	cmp	r3, #9
 8000da2:	dd1b      	ble.n	8000ddc <MultiFunctionShield_Display+0xf8>
        SEGMENT_VALUE[2] = SEGMENT_MAP [(uint8_t) ((value / 10) % 10)];
 8000da4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da8:	4a5a      	ldr	r2, [pc, #360]	; (8000f14 <MultiFunctionShield_Display+0x230>)
 8000daa:	fb82 1203 	smull	r1, r2, r2, r3
 8000dae:	1092      	asrs	r2, r2, #2
 8000db0:	17db      	asrs	r3, r3, #31
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	b21a      	sxth	r2, r3
 8000db6:	4b57      	ldr	r3, [pc, #348]	; (8000f14 <MultiFunctionShield_Display+0x230>)
 8000db8:	fb83 1302 	smull	r1, r3, r3, r2
 8000dbc:	1099      	asrs	r1, r3, #2
 8000dbe:	17d3      	asrs	r3, r2, #31
 8000dc0:	1ac9      	subs	r1, r1, r3
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	b21b      	sxth	r3, r3
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b4e      	ldr	r3, [pc, #312]	; (8000f0c <MultiFunctionShield_Display+0x228>)
 8000dd4:	5c9a      	ldrb	r2, [r3, r2]
 8000dd6:	4b4b      	ldr	r3, [pc, #300]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000dd8:	709a      	strb	r2, [r3, #2]
 8000dda:	e002      	b.n	8000de2 <MultiFunctionShield_Display+0xfe>
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;
 8000ddc:	22ff      	movs	r2, #255	; 0xff
 8000dde:	4b49      	ldr	r3, [pc, #292]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000de0:	709a      	strb	r2, [r3, #2]
      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
 8000de2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000de6:	4b4b      	ldr	r3, [pc, #300]	; (8000f14 <MultiFunctionShield_Display+0x230>)
 8000de8:	fb83 1302 	smull	r1, r3, r3, r2
 8000dec:	1099      	asrs	r1, r3, #2
 8000dee:	17d3      	asrs	r3, r2, #31
 8000df0:	1ac9      	subs	r1, r1, r3
 8000df2:	460b      	mov	r3, r1
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	440b      	add	r3, r1
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b42      	ldr	r3, [pc, #264]	; (8000f0c <MultiFunctionShield_Display+0x228>)
 8000e04:	5c9a      	ldrb	r2, [r3, r2]
 8000e06:	4b3f      	ldr	r3, [pc, #252]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000e08:	70da      	strb	r2, [r3, #3]
}
 8000e0a:	e075      	b.n	8000ef8 <MultiFunctionShield_Display+0x214>
    else if (value == 0)   // positive values
 8000e0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10c      	bne.n	8000e2e <MultiFunctionShield_Display+0x14a>
		SEGMENT_VALUE[0] = SEGMENT_MAP[0];
 8000e14:	22c0      	movs	r2, #192	; 0xc0
 8000e16:	4b3b      	ldr	r3, [pc, #236]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000e18:	701a      	strb	r2, [r3, #0]
		SEGMENT_VALUE[1] = SEGMENT_MAP[0];
 8000e1a:	22c0      	movs	r2, #192	; 0xc0
 8000e1c:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000e1e:	705a      	strb	r2, [r3, #1]
		SEGMENT_VALUE[2] = SEGMENT_MAP[0];
 8000e20:	22c0      	movs	r2, #192	; 0xc0
 8000e22:	4b38      	ldr	r3, [pc, #224]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000e24:	709a      	strb	r2, [r3, #2]
		SEGMENT_VALUE[3] = SEGMENT_MAP[0];
 8000e26:	22c0      	movs	r2, #192	; 0xc0
 8000e28:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000e2a:	70da      	strb	r2, [r3, #3]
}
 8000e2c:	e064      	b.n	8000ef8 <MultiFunctionShield_Display+0x214>
    else if (value < 0)      // negative values: "-" left
 8000e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	da60      	bge.n	8000ef8 <MultiFunctionShield_Display+0x214>
      value *= -1;
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	425b      	negs	r3, r3
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	80fb      	strh	r3, [r7, #6]
      SEGMENT_VALUE[0] = SEGMENT_MINUS;
 8000e3e:	22bf      	movs	r2, #191	; 0xbf
 8000e40:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000e42:	701a      	strb	r2, [r3, #0]
      if (value > 99)
 8000e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e48:	2b63      	cmp	r3, #99	; 0x63
 8000e4a:	dd1b      	ble.n	8000e84 <MultiFunctionShield_Display+0x1a0>
        SEGMENT_VALUE[1] = SEGMENT_MAP [(uint8_t) ((value / 100) % 10)];
 8000e4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e50:	4a2f      	ldr	r2, [pc, #188]	; (8000f10 <MultiFunctionShield_Display+0x22c>)
 8000e52:	fb82 1203 	smull	r1, r2, r2, r3
 8000e56:	1152      	asrs	r2, r2, #5
 8000e58:	17db      	asrs	r3, r3, #31
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	b21a      	sxth	r2, r3
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <MultiFunctionShield_Display+0x230>)
 8000e60:	fb83 1302 	smull	r1, r3, r3, r2
 8000e64:	1099      	asrs	r1, r3, #2
 8000e66:	17d3      	asrs	r3, r2, #31
 8000e68:	1ac9      	subs	r1, r1, r3
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	440b      	add	r3, r1
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <MultiFunctionShield_Display+0x228>)
 8000e7c:	5c9a      	ldrb	r2, [r3, r2]
 8000e7e:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000e80:	705a      	strb	r2, [r3, #1]
 8000e82:	e002      	b.n	8000e8a <MultiFunctionShield_Display+0x1a6>
        SEGMENT_VALUE[1] = BLANK_OR_ZERO_FILL;
 8000e84:	22ff      	movs	r2, #255	; 0xff
 8000e86:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000e88:	705a      	strb	r2, [r3, #1]
      if (value > 9)
 8000e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e8e:	2b09      	cmp	r3, #9
 8000e90:	dd1b      	ble.n	8000eca <MultiFunctionShield_Display+0x1e6>
        SEGMENT_VALUE[2] = SEGMENT_MAP [(uint8_t) ((value / 10) % 10)];
 8000e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e96:	4a1f      	ldr	r2, [pc, #124]	; (8000f14 <MultiFunctionShield_Display+0x230>)
 8000e98:	fb82 1203 	smull	r1, r2, r2, r3
 8000e9c:	1092      	asrs	r2, r2, #2
 8000e9e:	17db      	asrs	r3, r3, #31
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	b21a      	sxth	r2, r3
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <MultiFunctionShield_Display+0x230>)
 8000ea6:	fb83 1302 	smull	r1, r3, r3, r2
 8000eaa:	1099      	asrs	r1, r3, #2
 8000eac:	17d3      	asrs	r3, r2, #31
 8000eae:	1ac9      	subs	r1, r1, r3
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MultiFunctionShield_Display+0x228>)
 8000ec2:	5c9a      	ldrb	r2, [r3, r2]
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000ec6:	709a      	strb	r2, [r3, #2]
 8000ec8:	e002      	b.n	8000ed0 <MultiFunctionShield_Display+0x1ec>
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;
 8000eca:	22ff      	movs	r2, #255	; 0xff
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000ece:	709a      	strb	r2, [r3, #2]
      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
 8000ed0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MultiFunctionShield_Display+0x230>)
 8000ed6:	fb83 1302 	smull	r1, r3, r3, r2
 8000eda:	1099      	asrs	r1, r3, #2
 8000edc:	17d3      	asrs	r3, r2, #31
 8000ede:	1ac9      	subs	r1, r1, r3
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MultiFunctionShield_Display+0x228>)
 8000ef2:	5c9a      	ldrb	r2, [r3, r2]
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000ef6:	70da      	strb	r2, [r3, #3]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	20000090 	.word	0x20000090
 8000f08:	10624dd3 	.word	0x10624dd3
 8000f0c:	080085b8 	.word	0x080085b8
 8000f10:	51eb851f 	.word	0x51eb851f
 8000f14:	66666667 	.word	0x66666667

08000f18 <Clear_LEDs>:
		SEGMENT_VALUE[1] = SEGMENT_MAP [1];
		}
	}

void Clear_LEDs(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	  // Clear the LED lights


// LAB-04 needs D1 and D3 for SPI
#ifndef          LAB_04
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2180      	movs	r1, #128	; 0x80
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f003 fd9e 	bl	8004a64 <HAL_GPIO_WritePin>
#endif

  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2140      	movs	r1, #64	; 0x40
 8000f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f30:	f003 fd98 	bl	8004a64 <HAL_GPIO_WritePin>

#ifndef          LAB_06
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	2140      	movs	r1, #64	; 0x40
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <Clear_LEDs+0x38>)
 8000f3a:	f003 fd93 	bl	8004a64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2120      	movs	r1, #32
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f003 fd8d 	bl	8004a64 <HAL_GPIO_WritePin>
#endif
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	48000400 	.word	0x48000400

08000f54 <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 8000f58:	22ff      	movs	r2, #255	; 0xff
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MultiFunctionShield_Clear+0x28>)
 8000f5c:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 8000f5e:	22ff      	movs	r2, #255	; 0xff
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MultiFunctionShield_Clear+0x28>)
 8000f62:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 8000f64:	22ff      	movs	r2, #255	; 0xff
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <MultiFunctionShield_Clear+0x28>)
 8000f68:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 8000f6a:	22ff      	movs	r2, #255	; 0xff
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <MultiFunctionShield_Clear+0x28>)
 8000f6e:	70da      	strb	r2, [r3, #3]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000090 	.word	0x20000090

08000f80 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	4816      	ldr	r0, [pc, #88]	; (8000fe8 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000f90:	f003 fd68 	bl	8004a64 <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000f94:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 8000f96:	4a15      	ldr	r2, [pc, #84]	; (8000fec <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 8000f98:	5cd3      	ldrb	r3, [r2, r3]
 8000f9a:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000faa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb2:	f7ff fe49 	bl	8000c48 <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 8000fba:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd2:	f7ff fe39 	bl	8000c48 <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2120      	movs	r1, #32
 8000fda:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000fdc:	f003 fd42 	bl	8004a64 <HAL_GPIO_WritePin>
	}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	48000400 	.word	0x48000400
 8000fec:	20000090 	.word	0x20000090
 8000ff0:	080085c4 	.word	0x080085c4

08000ff4 <MultiFunctionShield__ISRFunc>:
	}



void MultiFunctionShield__ISRFunc(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MultiFunctionShield__ISRFunc+0x60>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	3301      	adds	r3, #1
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MultiFunctionShield__ISRFunc+0x60>)
 8001004:	4611      	mov	r1, r2
 8001006:	7019      	strb	r1, [r3, #0]
 8001008:	4613      	mov	r3, r2
 800100a:	3b01      	subs	r3, #1
 800100c:	2b03      	cmp	r3, #3
 800100e:	d81e      	bhi.n	800104e <MultiFunctionShield__ISRFunc+0x5a>
 8001010:	a201      	add	r2, pc, #4	; (adr r2, 8001018 <MultiFunctionShield__ISRFunc+0x24>)
 8001012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001016:	bf00      	nop
 8001018:	08001029 	.word	0x08001029
 800101c:	08001031 	.word	0x08001031
 8001020:	08001039 	.word	0x08001039
 8001024:	08001041 	.word	0x08001041
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff ffa9 	bl	8000f80 <MultiFunctionShield_WriteNumberToSegment>
 800102e:	e00e      	b.n	800104e <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff ffa5 	bl	8000f80 <MultiFunctionShield_WriteNumberToSegment>
 8001036:	e00a      	b.n	800104e <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 8001038:	2002      	movs	r0, #2
 800103a:	f7ff ffa1 	bl	8000f80 <MultiFunctionShield_WriteNumberToSegment>
 800103e:	e006      	b.n	800104e <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8001040:	2003      	movs	r0, #3
 8001042:	f7ff ff9d 	bl	8000f80 <MultiFunctionShield_WriteNumberToSegment>
 8001046:	4b03      	ldr	r3, [pc, #12]	; (8001054 <MultiFunctionShield__ISRFunc+0x60>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	bf00      	nop
  }
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000008c 	.word	0x2000008c

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105c:	f001 f8fe 	bl	800225c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001060:	f000 f85a 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001064:	f000 fa9e 	bl	80015a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001068:	f000 fa6a 	bl	8001540 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800106c:	f000 fa38 	bl	80014e0 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8001070:	f000 f90a 	bl	8001288 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001074:	f000 f93a 	bl	80012ec <MX_TIM2_Init>
  MX_TIM17_Init();
 8001078:	f000 fa0c 	bl	8001494 <MX_TIM17_Init>
  MX_ADC3_Init();
 800107c:	f000 f89e 	bl	80011bc <MX_ADC3_Init>
  MX_TIM3_Init();
 8001080:	f000 f982 	bl	8001388 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001084:	f000 f9ce 	bl	8001424 <MX_TIM7_Init>
  // SysTick->LOAD = 79000 - 1;
  // SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
  // HAL_ResumeTick();


  HAL_TIM_Base_Start_IT(&htim2);
 8001088:	4818      	ldr	r0, [pc, #96]	; (80010ec <main+0x94>)
 800108a:	f005 f955 	bl	8006338 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); //Timer3 is the ADC Sample trigger
 800108e:	4818      	ldr	r0, [pc, #96]	; (80010f0 <main+0x98>)
 8001090:	f005 f952 	bl	8006338 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim7); //Timer7 is used to time the period
 8001094:	4817      	ldr	r0, [pc, #92]	; (80010f4 <main+0x9c>)
 8001096:	f005 f8bf 	bl	8006218 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,1);

  printf("\033\143"); printf("Welcome to ECEN-361 SineWave Generator\n\r");
 800109a:	4817      	ldr	r0, [pc, #92]	; (80010f8 <main+0xa0>)
 800109c:	f006 fbf2 	bl	8007884 <iprintf>
 80010a0:	4816      	ldr	r0, [pc, #88]	; (80010fc <main+0xa4>)
 80010a2:	f006 fbef 	bl	8007884 <iprintf>

  // Start timer
  MultiFunctionShield_Clear();								// Clear the 7-seg display
 80010a6:	f7ff ff55 	bl	8000f54 <MultiFunctionShield_Clear>
  HAL_TIM_Base_Start_IT(&htim17);							// LED SevenSeg cycle thru them
 80010aa:	4815      	ldr	r0, [pc, #84]	; (8001100 <main+0xa8>)
 80010ac:	f005 f944 	bl	8006338 <HAL_TIM_Base_Start_IT>
  Clear_LEDs();
 80010b0:	f7ff ff32 	bl	8000f18 <Clear_LEDs>
  MultiFunctionShield_Display(points_to_use_in_a_cycle);
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <main+0xac>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fe12 	bl	8000ce4 <MultiFunctionShield_Display>

  /* Setup the DMA */

  if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)	{while(1);}
 80010c0:	4811      	ldr	r0, [pc, #68]	; (8001108 <main+0xb0>)
 80010c2:	f003 f8ef 	bl	80042a4 <HAL_DMA_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d000      	beq.n	80010ce <main+0x76>
 80010cc:	e7fe      	b.n	80010cc <main+0x74>
  if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)		{while(1);}
 80010ce:	480f      	ldr	r0, [pc, #60]	; (800110c <main+0xb4>)
 80010d0:	f003 f8e8 	bl	80042a4 <HAL_DMA_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d000      	beq.n	80010dc <main+0x84>
 80010da:	e7fe      	b.n	80010da <main+0x82>


  Start_the_DAC_DMA();
 80010dc:	f000 fb54 	bl	8001788 <Start_the_DAC_DMA>

  HAL_ADC_Start_DMA(&hadc3, (uint32_t*) adc_buffer, ADC_BUFFER_LENGTH);
 80010e0:	2208      	movs	r2, #8
 80010e2:	490b      	ldr	r1, [pc, #44]	; (8001110 <main+0xb8>)
 80010e4:	480b      	ldr	r0, [pc, #44]	; (8001114 <main+0xbc>)
 80010e6:	f001 fc63 	bl	80029b0 <HAL_ADC_Start_DMA>
	   //            HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_10_pts, 10,DAC_ALIGN_12B_R);

   // HAL_DMA_Start_IT(&hdma_dac_ch1, (uint32_t) &sineLookupTable_100_pts, (uint32_t) &hdac1, sizeof(sineLookupTable_100_pts));
   //HAL_DMA_PollForTransfer(&hdma_memtomem_dma1_channel1, );

  while (1)
 80010ea:	e7fe      	b.n	80010ea <main+0x92>
 80010ec:	200001ac 	.word	0x200001ac
 80010f0:	200001f8 	.word	0x200001f8
 80010f4:	20000244 	.word	0x20000244
 80010f8:	08008588 	.word	0x08008588
 80010fc:	0800858c 	.word	0x0800858c
 8001100:	20000290 	.word	0x20000290
 8001104:	20000004 	.word	0x20000004
 8001108:	20000164 	.word	0x20000164
 800110c:	20000108 	.word	0x20000108
 8001110:	20000364 	.word	0x20000364
 8001114:	200000a4 	.word	0x200000a4

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b096      	sub	sp, #88	; 0x58
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	2244      	movs	r2, #68	; 0x44
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f006 fc01 	bl	800792e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	463b      	mov	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800113a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800113e:	f003 fccf 	bl	8004ae0 <HAL_PWREx_ControlVoltageScaling>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001148:	f000 fc94 	bl	8001a74 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800114c:	2302      	movs	r3, #2
 800114e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001154:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001156:	2310      	movs	r3, #16
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2302      	movs	r3, #2
 800115c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800115e:	2302      	movs	r3, #2
 8001160:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001162:	2301      	movs	r3, #1
 8001164:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001166:	230a      	movs	r3, #10
 8001168:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800116a:	2307      	movs	r3, #7
 800116c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800116e:	2302      	movs	r3, #2
 8001170:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001172:	2302      	movs	r3, #2
 8001174:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4618      	mov	r0, r3
 800117c:	f003 fd06 	bl	8004b8c <HAL_RCC_OscConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001186:	f000 fc75 	bl	8001a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118a:	230f      	movs	r3, #15
 800118c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118e:	2303      	movs	r3, #3
 8001190:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800119e:	463b      	mov	r3, r7
 80011a0:	2104      	movs	r1, #4
 80011a2:	4618      	mov	r0, r3
 80011a4:	f004 f8ce 	bl	8005344 <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ae:	f000 fc61 	bl	8001a74 <Error_Handler>
  }
}
 80011b2:	bf00      	nop
 80011b4:	3758      	adds	r7, #88	; 0x58
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011c2:	463b      	mov	r3, r7
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <MX_ADC3_Init+0xc0>)
 80011d4:	4a2a      	ldr	r2, [pc, #168]	; (8001280 <MX_ADC3_Init+0xc4>)
 80011d6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011d8:	4b28      	ldr	r3, [pc, #160]	; (800127c <MX_ADC3_Init+0xc0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011de:	4b27      	ldr	r3, [pc, #156]	; (800127c <MX_ADC3_Init+0xc0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <MX_ADC3_Init+0xc0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ea:	4b24      	ldr	r3, [pc, #144]	; (800127c <MX_ADC3_Init+0xc0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <MX_ADC3_Init+0xc0>)
 80011f2:	2204      	movs	r2, #4
 80011f4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <MX_ADC3_Init+0xc0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_ADC3_Init+0xc0>)
 80011fe:	2201      	movs	r2, #1
 8001200:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001202:	4b1e      	ldr	r3, [pc, #120]	; (800127c <MX_ADC3_Init+0xc0>)
 8001204:	2201      	movs	r2, #1
 8001206:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001208:	4b1c      	ldr	r3, [pc, #112]	; (800127c <MX_ADC3_Init+0xc0>)
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_ADC3_Init+0xc0>)
 8001212:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001216:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_ADC3_Init+0xc0>)
 800121a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800121e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_ADC3_Init+0xc0>)
 8001222:	2201      	movs	r2, #1
 8001224:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_ADC3_Init+0xc0>)
 800122a:	2200      	movs	r2, #0
 800122c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_ADC3_Init+0xc0>)
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001236:	4811      	ldr	r0, [pc, #68]	; (800127c <MX_ADC3_Init+0xc0>)
 8001238:	f001 fa6a 	bl	8002710 <HAL_ADC_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8001242:	f000 fc17 	bl	8001a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_ADC3_Init+0xc8>)
 8001248:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800124a:	2306      	movs	r3, #6
 800124c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001252:	237f      	movs	r3, #127	; 0x7f
 8001254:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001256:	2304      	movs	r3, #4
 8001258:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	; (800127c <MX_ADC3_Init+0xc0>)
 8001264:	f001 fe98 	bl	8002f98 <HAL_ADC_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 800126e:	f000 fc01 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200000a4 	.word	0x200000a4
 8001280:	50040200 	.word	0x50040200
 8001284:	10c00010 	.word	0x10c00010

08001288 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2224      	movs	r2, #36	; 0x24
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f006 fb4a 	bl	800792e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_DAC1_Init+0x5c>)
 800129c:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <MX_DAC1_Init+0x60>)
 800129e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012a0:	4810      	ldr	r0, [pc, #64]	; (80012e4 <MX_DAC1_Init+0x5c>)
 80012a2:	f002 fc99 	bl	8003bd8 <HAL_DAC_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012ac:	f000 fbe2 	bl	8001a74 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80012b4:	2324      	movs	r3, #36	; 0x24
 80012b6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2200      	movs	r2, #0
 80012c8:	4619      	mov	r1, r3
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <MX_DAC1_Init+0x5c>)
 80012cc:	f002 fe2f 	bl	8003f2e <HAL_DAC_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80012d6:	f000 fbcd 	bl	8001a74 <Error_Handler>
  /* USER CODE BEGIN DAC1_Init 2 */
  // sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;

  /* USER CODE END DAC1_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	; 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000150 	.word	0x20000150
 80012e8:	40007400 	.word	0x40007400

080012ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <MX_TIM2_Init+0x98>)
 800130c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001310:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_TIM2_Init+0x98>)
 8001314:	224f      	movs	r2, #79	; 0x4f
 8001316:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_TIM2_Init+0x98>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_TIM2_Init+0x98>)
 8001320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001324:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <MX_TIM2_Init+0x98>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <MX_TIM2_Init+0x98>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001332:	4814      	ldr	r0, [pc, #80]	; (8001384 <MX_TIM2_Init+0x98>)
 8001334:	f004 ff18 	bl	8006168 <HAL_TIM_Base_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800133e:	f000 fb99 	bl	8001a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001346:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4619      	mov	r1, r3
 800134e:	480d      	ldr	r0, [pc, #52]	; (8001384 <MX_TIM2_Init+0x98>)
 8001350:	f005 f964 	bl	800661c <HAL_TIM_ConfigClockSource>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800135a:	f000 fb8b 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800135e:	2320      	movs	r3, #32
 8001360:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	4619      	mov	r1, r3
 800136a:	4806      	ldr	r0, [pc, #24]	; (8001384 <MX_TIM2_Init+0x98>)
 800136c:	f005 fb7c 	bl	8006a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001376:	f000 fb7d 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	3720      	adds	r7, #32
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200001ac 	.word	0x200001ac

08001388 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <MX_TIM3_Init+0x94>)
 80013a8:	4a1d      	ldr	r2, [pc, #116]	; (8001420 <MX_TIM3_Init+0x98>)
 80013aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_TIM3_Init+0x94>)
 80013ae:	224f      	movs	r2, #79	; 0x4f
 80013b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <MX_TIM3_Init+0x94>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_TIM3_Init+0x94>)
 80013ba:	220a      	movs	r2, #10
 80013bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <MX_TIM3_Init+0x94>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <MX_TIM3_Init+0x94>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013ca:	4814      	ldr	r0, [pc, #80]	; (800141c <MX_TIM3_Init+0x94>)
 80013cc:	f004 fecc 	bl	8006168 <HAL_TIM_Base_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80013d6:	f000 fb4d 	bl	8001a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	4619      	mov	r1, r3
 80013e6:	480d      	ldr	r0, [pc, #52]	; (800141c <MX_TIM3_Init+0x94>)
 80013e8:	f005 f918 	bl	800661c <HAL_TIM_ConfigClockSource>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80013f2:	f000 fb3f 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013f6:	2320      	movs	r3, #32
 80013f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	4619      	mov	r1, r3
 8001402:	4806      	ldr	r0, [pc, #24]	; (800141c <MX_TIM3_Init+0x94>)
 8001404:	f005 fb30 	bl	8006a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800140e:	f000 fb31 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200001f8 	.word	0x200001f8
 8001420:	40000400 	.word	0x40000400

08001424 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <MX_TIM7_Init+0x68>)
 8001436:	4a16      	ldr	r2, [pc, #88]	; (8001490 <MX_TIM7_Init+0x6c>)
 8001438:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40000-1;
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <MX_TIM7_Init+0x68>)
 800143c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001440:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <MX_TIM7_Init+0x68>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000;
 8001448:	4b10      	ldr	r3, [pc, #64]	; (800148c <MX_TIM7_Init+0x68>)
 800144a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800144e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_TIM7_Init+0x68>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001456:	480d      	ldr	r0, [pc, #52]	; (800148c <MX_TIM7_Init+0x68>)
 8001458:	f004 fe86 	bl	8006168 <HAL_TIM_Base_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001462:	f000 fb07 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	4619      	mov	r1, r3
 8001472:	4806      	ldr	r0, [pc, #24]	; (800148c <MX_TIM7_Init+0x68>)
 8001474:	f005 faf8 	bl	8006a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800147e:	f000 faf9 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000244 	.word	0x20000244
 8001490:	40001400 	.word	0x40001400

08001494 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <MX_TIM17_Init+0x44>)
 800149a:	4a10      	ldr	r2, [pc, #64]	; (80014dc <MX_TIM17_Init+0x48>)
 800149c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_TIM17_Init+0x44>)
 80014a0:	f240 321f 	movw	r2, #799	; 0x31f
 80014a4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_TIM17_Init+0x44>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <MX_TIM17_Init+0x44>)
 80014ae:	2264      	movs	r2, #100	; 0x64
 80014b0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_TIM17_Init+0x44>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <MX_TIM17_Init+0x44>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_TIM17_Init+0x44>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <MX_TIM17_Init+0x44>)
 80014c6:	f004 fe4f 	bl	8006168 <HAL_TIM_Base_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80014d0:	f000 fad0 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000290 	.word	0x20000290
 80014dc:	40014800 	.word	0x40014800

080014e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_USART2_UART_Init+0x58>)
 80014e6:	4a15      	ldr	r2, [pc, #84]	; (800153c <MX_USART2_UART_Init+0x5c>)
 80014e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <MX_USART2_UART_Init+0x58>)
 80014ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_USART2_UART_Init+0x58>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_USART2_UART_Init+0x58>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_USART2_UART_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_USART2_UART_Init+0x58>)
 8001506:	220c      	movs	r2, #12
 8001508:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <MX_USART2_UART_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_USART2_UART_Init+0x58>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <MX_USART2_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_USART2_UART_Init+0x58>)
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_USART2_UART_Init+0x58>)
 8001524:	f005 fb46 	bl	8006bb4 <HAL_UART_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800152e:	f000 faa1 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200002dc 	.word	0x200002dc
 800153c:	40004400 	.word	0x40004400

08001540 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <MX_DMA_Init+0x60>)
 8001548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800154a:	4a15      	ldr	r2, [pc, #84]	; (80015a0 <MX_DMA_Init+0x60>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6493      	str	r3, [r2, #72]	; 0x48
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <MX_DMA_Init+0x60>)
 8001554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <MX_DMA_Init+0x60>)
 8001560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001562:	4a0f      	ldr	r2, [pc, #60]	; (80015a0 <MX_DMA_Init+0x60>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	6493      	str	r3, [r2, #72]	; 0x48
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <MX_DMA_Init+0x60>)
 800156c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2105      	movs	r1, #5
 800157a:	200d      	movs	r0, #13
 800157c:	f002 fb02 	bl	8003b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001580:	200d      	movs	r0, #13
 8001582:	f002 fb1b 	bl	8003bbc <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	203c      	movs	r0, #60	; 0x3c
 800158c:	f002 fafa 	bl	8003b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001590:	203c      	movs	r0, #60	; 0x3c
 8001592:	f002 fb13 	bl	8003bbc <HAL_NVIC_EnableIRQ>

}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000

080015a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ba:	4b62      	ldr	r3, [pc, #392]	; (8001744 <MX_GPIO_Init+0x1a0>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	4a61      	ldr	r2, [pc, #388]	; (8001744 <MX_GPIO_Init+0x1a0>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c6:	4b5f      	ldr	r3, [pc, #380]	; (8001744 <MX_GPIO_Init+0x1a0>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d2:	4b5c      	ldr	r3, [pc, #368]	; (8001744 <MX_GPIO_Init+0x1a0>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	4a5b      	ldr	r2, [pc, #364]	; (8001744 <MX_GPIO_Init+0x1a0>)
 80015d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015de:	4b59      	ldr	r3, [pc, #356]	; (8001744 <MX_GPIO_Init+0x1a0>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4b56      	ldr	r3, [pc, #344]	; (8001744 <MX_GPIO_Init+0x1a0>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	4a55      	ldr	r2, [pc, #340]	; (8001744 <MX_GPIO_Init+0x1a0>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f6:	4b53      	ldr	r3, [pc, #332]	; (8001744 <MX_GPIO_Init+0x1a0>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	4b50      	ldr	r3, [pc, #320]	; (8001744 <MX_GPIO_Init+0x1a0>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	4a4f      	ldr	r2, [pc, #316]	; (8001744 <MX_GPIO_Init+0x1a0>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160e:	4b4d      	ldr	r3, [pc, #308]	; (8001744 <MX_GPIO_Init+0x1a0>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8001620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001624:	f003 fa1e 	bl	8004a64 <HAL_GPIO_WritePin>
                          |SevenSeg_DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Period_Start_GPIO_Port, Period_Start_Pin, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800162e:	4846      	ldr	r0, [pc, #280]	; (8001748 <MX_GPIO_Init+0x1a4>)
 8001630:	f003 fa18 	bl	8004a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SevenSeg_LATCH_Pin|LED_D4_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	2160      	movs	r1, #96	; 0x60
 8001638:	4844      	ldr	r0, [pc, #272]	; (800174c <MX_GPIO_Init+0x1a8>)
 800163a:	f003 fa13 	bl	8004a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800163e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001644:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	483c      	ldr	r0, [pc, #240]	; (8001748 <MX_GPIO_Init+0x1a4>)
 8001656:	f003 f85b 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_1_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin;
 800165a:	2302      	movs	r3, #2
 800165c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800165e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_1_GPIO_Port, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001672:	f003 f84d 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin LED_D2_Pin LED_D3_Pin SevenSeg_CLK_Pin
                           SevenSeg_DATA_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 8001676:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800167a:	617b      	str	r3, [r7, #20]
                          |SevenSeg_DATA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167c:	2301      	movs	r3, #1
 800167e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001692:	f003 f83d 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8001696:	2301      	movs	r3, #1
 8001698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800169a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800169e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	4828      	ldr	r0, [pc, #160]	; (800174c <MX_GPIO_Init+0x1a8>)
 80016ac:	f003 f830 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80016c2:	2303      	movs	r3, #3
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	481e      	ldr	r0, [pc, #120]	; (8001748 <MX_GPIO_Init+0x1a4>)
 80016ce:	f003 f81f 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pin : Period_Start_Pin */
  GPIO_InitStruct.Pin = Period_Start_Pin;
 80016d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Period_Start_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	4817      	ldr	r0, [pc, #92]	; (8001748 <MX_GPIO_Init+0x1a4>)
 80016ec:	f003 f810 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_LATCH_Pin LED_D4_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin|LED_D4_Pin;
 80016f0:	2360      	movs	r3, #96	; 0x60
 80016f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	4619      	mov	r1, r3
 8001706:	4811      	ldr	r0, [pc, #68]	; (800174c <MX_GPIO_Init+0x1a8>)
 8001708:	f003 f802 	bl	8004710 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2100      	movs	r1, #0
 8001710:	2006      	movs	r0, #6
 8001712:	f002 fa37 	bl	8003b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001716:	2006      	movs	r0, #6
 8001718:	f002 fa50 	bl	8003bbc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	2007      	movs	r0, #7
 8001722:	f002 fa2f 	bl	8003b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001726:	2007      	movs	r0, #7
 8001728:	f002 fa48 	bl	8003bbc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800172c:	2200      	movs	r2, #0
 800172e:	2100      	movs	r1, #0
 8001730:	2028      	movs	r0, #40	; 0x28
 8001732:	f002 fa27 	bl	8003b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001736:	2028      	movs	r0, #40	; 0x28
 8001738:	f002 fa40 	bl	8003bbc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800173c:	bf00      	nop
 800173e:	3728      	adds	r7, #40	; 0x28
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000
 8001748:	48000800 	.word	0x48000800
 800174c:	48000400 	.word	0x48000400

08001750 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001758:	1d39      	adds	r1, r7, #4
 800175a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800175e:	2201      	movs	r2, #1
 8001760:	4803      	ldr	r0, [pc, #12]	; (8001770 <__io_putchar+0x20>)
 8001762:	f005 fa75 	bl	8006c50 <HAL_UART_Transmit>

  return ch;
 8001766:	687b      	ldr	r3, [r7, #4]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200002dc 	.word	0x200002dc

08001774 <HAL_DAC_ConvCpltCallbackCh1>:



void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	/* Fill this in when I know what to do if I get here */
// printf("              FINISHED DAC OUT\n\n");
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <Start_the_DAC_DMA>:
		}
	}


void Start_the_DAC_DMA(void)
	{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af02      	add	r7, sp, #8
	 //First stop it, just to be clean (if running)
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800178e:	2100      	movs	r1, #0
 8001790:	4817      	ldr	r0, [pc, #92]	; (80017f0 <Start_the_DAC_DMA+0x68>)
 8001792:	f002 fb0f 	bl	8003db4 <HAL_DAC_Stop_DMA>
	// Just use the global

	switch(points_to_use_in_a_cycle)
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <Start_the_DAC_DMA+0x6c>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800179e:	d019      	beq.n	80017d4 <Start_the_DAC_DMA+0x4c>
 80017a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017a4:	dc20      	bgt.n	80017e8 <Start_the_DAC_DMA+0x60>
 80017a6:	2b0a      	cmp	r3, #10
 80017a8:	d002      	beq.n	80017b0 <Start_the_DAC_DMA+0x28>
 80017aa:	2b64      	cmp	r3, #100	; 0x64
 80017ac:	d009      	beq.n	80017c2 <Start_the_DAC_DMA+0x3a>
			break;
		case thousand:
		   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_1000_pts, 1000,DAC_ALIGN_12B_R);
			break;
		}
	}
 80017ae:	e01b      	b.n	80017e8 <Start_the_DAC_DMA+0x60>
		   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_10_pts, 10,DAC_ALIGN_12B_R);
 80017b0:	2300      	movs	r3, #0
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	230a      	movs	r3, #10
 80017b6:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <Start_the_DAC_DMA+0x70>)
 80017b8:	2100      	movs	r1, #0
 80017ba:	480d      	ldr	r0, [pc, #52]	; (80017f0 <Start_the_DAC_DMA+0x68>)
 80017bc:	f002 fa2e 	bl	8003c1c <HAL_DAC_Start_DMA>
			break;
 80017c0:	e012      	b.n	80017e8 <Start_the_DAC_DMA+0x60>
		   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_100_pts, 100,DAC_ALIGN_12B_R);
 80017c2:	2300      	movs	r3, #0
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2364      	movs	r3, #100	; 0x64
 80017c8:	4a0c      	ldr	r2, [pc, #48]	; (80017fc <Start_the_DAC_DMA+0x74>)
 80017ca:	2100      	movs	r1, #0
 80017cc:	4808      	ldr	r0, [pc, #32]	; (80017f0 <Start_the_DAC_DMA+0x68>)
 80017ce:	f002 fa25 	bl	8003c1c <HAL_DAC_Start_DMA>
			break;
 80017d2:	e009      	b.n	80017e8 <Start_the_DAC_DMA+0x60>
		   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_1000_pts, 1000,DAC_ALIGN_12B_R);
 80017d4:	2300      	movs	r3, #0
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017dc:	4a08      	ldr	r2, [pc, #32]	; (8001800 <Start_the_DAC_DMA+0x78>)
 80017de:	2100      	movs	r1, #0
 80017e0:	4803      	ldr	r0, [pc, #12]	; (80017f0 <Start_the_DAC_DMA+0x68>)
 80017e2:	f002 fa1b 	bl	8003c1c <HAL_DAC_Start_DMA>
			break;
 80017e6:	bf00      	nop
	}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000150 	.word	0x20000150
 80017f4:	20000004 	.word	0x20000004
 80017f8:	080085c8 	.word	0x080085c8
 80017fc:	080085dc 	.word	0x080085dc
 8001800:	080086a4 	.word	0x080086a4

08001804 <change_points_per_cycle>:




void change_points_per_cycle()
	{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	 *  2.) Change the DMA Call to point to the address of that set
	 *      and the new number of points
	 *
	 *  3.) Re-display the new set on the 7-Seg.  It'll show '10', or '100', or '1000'
	 */
	switch(points_to_use_in_a_cycle)
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <change_points_per_cycle+0x4c>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001810:	d010      	beq.n	8001834 <change_points_per_cycle+0x30>
 8001812:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001816:	dc11      	bgt.n	800183c <change_points_per_cycle+0x38>
 8001818:	2b0a      	cmp	r3, #10
 800181a:	d002      	beq.n	8001822 <change_points_per_cycle+0x1e>
 800181c:	2b64      	cmp	r3, #100	; 0x64
 800181e:	d004      	beq.n	800182a <change_points_per_cycle+0x26>
 8001820:	e00c      	b.n	800183c <change_points_per_cycle+0x38>
		{
		case ten:
			points_to_use_in_a_cycle = hundred;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <change_points_per_cycle+0x4c>)
 8001824:	2264      	movs	r2, #100	; 0x64
 8001826:	801a      	strh	r2, [r3, #0]
			break;
 8001828:	e008      	b.n	800183c <change_points_per_cycle+0x38>
		case hundred:
			points_to_use_in_a_cycle = thousand;
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <change_points_per_cycle+0x4c>)
 800182c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001830:	801a      	strh	r2, [r3, #0]
			break;
 8001832:	e003      	b.n	800183c <change_points_per_cycle+0x38>
		case thousand:
			points_to_use_in_a_cycle = ten;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <change_points_per_cycle+0x4c>)
 8001836:	220a      	movs	r2, #10
 8001838:	801a      	strh	r2, [r3, #0]
			break;
 800183a:	bf00      	nop
		}
		Start_the_DAC_DMA();
 800183c:	f7ff ffa4 	bl	8001788 <Start_the_DAC_DMA>
		MultiFunctionShield_Display(points_to_use_in_a_cycle);
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <change_points_per_cycle+0x4c>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	b21b      	sxth	r3, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fa4c 	bl	8000ce4 <MultiFunctionShield_Display>
	}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000004 	.word	0x20000004

08001854 <HAL_GPIO_EXTI_Callback>:
// Callback: timer has rolled over



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
	// When the DAC is being used, Button_2 is unavailable.
	// The other two generate GPIO interrupts
	// Don't spend much time in the ISR because there are other interrupts happening
	switch(GPIO_Pin)
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d004      	beq.n	800186e <HAL_GPIO_EXTI_Callback+0x1a>
 8001864:	2b02      	cmp	r3, #2
 8001866:	d109      	bne.n	800187c <HAL_GPIO_EXTI_Callback+0x28>
	{
	case Button_1_Pin:
		change_points_per_cycle();
 8001868:	f7ff ffcc 	bl	8001804 <change_points_per_cycle>
		break;
 800186c:	e008      	b.n	8001880 <HAL_GPIO_EXTI_Callback+0x2c>
	case Button_3_Pin:
		// Button_3 changes the Frequency of the DAC, going thru different
		// speeds
	  MultiFunctionShield_Display(the_period);
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_GPIO_EXTI_Callback+0x34>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	b21b      	sxth	r3, r3
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fa35 	bl	8000ce4 <MultiFunctionShield_Display>
		break;
 800187a:	e001      	b.n	8001880 <HAL_GPIO_EXTI_Callback+0x2c>
	default:
      __NOP();
 800187c:	bf00      	nop
	}
}
 800187e:	bf00      	nop
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200000a0 	.word	0x200000a0
 800188c:	00000000 	.word	0x00000000

08001890 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc3) {
 8001890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
	/* When the ADC Buffer is filled, come here and do the edge detect */
   // HAL_GPIO_TogglePin(LED_D4_GPIO_Port, LED_D4_Pin);

   // Read the buffer and update the max
   for (int i=0; i<ADC_BUFFER_LENGTH;i++)
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	e00e      	b.n	80018be <HAL_ADC_ConvCpltCallback+0x2e>
	   { adc_highest_seen = (adc_highest_seen < adc_buffer[i])?adc_buffer[i]:adc_highest_seen;}
 80018a0:	4a5d      	ldr	r2, [pc, #372]	; (8001a18 <HAL_ADC_ConvCpltCallback+0x188>)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b5c      	ldr	r3, [pc, #368]	; (8001a1c <HAL_ADC_ConvCpltCallback+0x18c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4293      	cmp	r3, r2
 80018b0:	bfb8      	it	lt
 80018b2:	4613      	movlt	r3, r2
 80018b4:	4a59      	ldr	r2, [pc, #356]	; (8001a1c <HAL_ADC_ConvCpltCallback+0x18c>)
 80018b6:	6013      	str	r3, [r2, #0]
   for (int i=0; i<ADC_BUFFER_LENGTH;i++)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	3301      	adds	r3, #1
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b07      	cmp	r3, #7
 80018c2:	dded      	ble.n	80018a0 <HAL_ADC_ConvCpltCallback+0x10>
   /* Kick_off a timer to measure the elapsed time on the edge rising past 90%
    * Look in the buffer and see if [0] is less than 90% and the top element is greater than the 90%
    */
   hit_low = (((adc_buffer[0] < (0.1 * adc_highest_seen)) |  hit_low));
 80018c4:	4b54      	ldr	r3, [pc, #336]	; (8001a18 <HAL_ADC_ConvCpltCallback+0x188>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe ff4d 	bl	8000768 <__aeabi_i2d>
 80018ce:	4604      	mov	r4, r0
 80018d0:	460d      	mov	r5, r1
 80018d2:	4b52      	ldr	r3, [pc, #328]	; (8001a1c <HAL_ADC_ConvCpltCallback+0x18c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe ff46 	bl	8000768 <__aeabi_i2d>
 80018dc:	a34a      	add	r3, pc, #296	; (adr r3, 8001a08 <HAL_ADC_ConvCpltCallback+0x178>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe fcc5 	bl	8000270 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	2101      	movs	r1, #1
 80018ec:	460e      	mov	r6, r1
 80018ee:	4620      	mov	r0, r4
 80018f0:	4629      	mov	r1, r5
 80018f2:	f7ff f803 	bl	80008fc <__aeabi_dcmplt>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_ADC_ConvCpltCallback+0x70>
 80018fc:	2300      	movs	r3, #0
 80018fe:	461e      	mov	r6, r3
 8001900:	b2f3      	uxtb	r3, r6
 8001902:	461a      	mov	r2, r3
 8001904:	4b46      	ldr	r3, [pc, #280]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x190>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4313      	orrs	r3, r2
 800190a:	4a45      	ldr	r2, [pc, #276]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x190>)
 800190c:	6013      	str	r3, [r2, #0]
   if (hit_low & ((adc_buffer[0] < (0.9 * adc_highest_seen)) & (adc_buffer[ADC_BUFFER_LENGTH -1]>=(.9 * adc_highest_seen))))
 800190e:	4b42      	ldr	r3, [pc, #264]	; (8001a18 <HAL_ADC_ConvCpltCallback+0x188>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe ff28 	bl	8000768 <__aeabi_i2d>
 8001918:	4604      	mov	r4, r0
 800191a:	460d      	mov	r5, r1
 800191c:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <HAL_ADC_ConvCpltCallback+0x18c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe ff21 	bl	8000768 <__aeabi_i2d>
 8001926:	a33a      	add	r3, pc, #232	; (adr r3, 8001a10 <HAL_ADC_ConvCpltCallback+0x180>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fca0 	bl	8000270 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	2101      	movs	r1, #1
 8001936:	460e      	mov	r6, r1
 8001938:	4620      	mov	r0, r4
 800193a:	4629      	mov	r1, r5
 800193c:	f7fe ffde 	bl	80008fc <__aeabi_dcmplt>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_ADC_ConvCpltCallback+0xba>
 8001946:	2300      	movs	r3, #0
 8001948:	461e      	mov	r6, r3
 800194a:	b2f6      	uxtb	r6, r6
 800194c:	4b32      	ldr	r3, [pc, #200]	; (8001a18 <HAL_ADC_ConvCpltCallback+0x188>)
 800194e:	89db      	ldrh	r3, [r3, #14]
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe ff09 	bl	8000768 <__aeabi_i2d>
 8001956:	4604      	mov	r4, r0
 8001958:	460d      	mov	r5, r1
 800195a:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <HAL_ADC_ConvCpltCallback+0x18c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe ff02 	bl	8000768 <__aeabi_i2d>
 8001964:	a32a      	add	r3, pc, #168	; (adr r3, 8001a10 <HAL_ADC_ConvCpltCallback+0x180>)
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	f7fe fc81 	bl	8000270 <__aeabi_dmul>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	2101      	movs	r1, #1
 8001974:	4688      	mov	r8, r1
 8001976:	4620      	mov	r0, r4
 8001978:	4629      	mov	r1, r5
 800197a:	f7fe ffd3 	bl	8000924 <__aeabi_dcmpge>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_ADC_ConvCpltCallback+0xf8>
 8001984:	2300      	movs	r3, #0
 8001986:	4698      	mov	r8, r3
 8001988:	fa5f f388 	uxtb.w	r3, r8
 800198c:	4033      	ands	r3, r6
 800198e:	b2db      	uxtb	r3, r3
 8001990:	461a      	mov	r2, r3
 8001992:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x190>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d02d      	beq.n	80019f8 <HAL_ADC_ConvCpltCallback+0x168>
		{
	    HAL_TIM_Base_Stop(&htim7); //Timer7 is used to time the period
 800199c:	4821      	ldr	r0, [pc, #132]	; (8001a24 <HAL_ADC_ConvCpltCallback+0x194>)
 800199e:	f004 fca3 	bl	80062e8 <HAL_TIM_Base_Stop>
		this_tick = TIM7->CNT;
 80019a2:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <HAL_ADC_ConvCpltCallback+0x198>)
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <HAL_ADC_ConvCpltCallback+0x19c>)
 80019aa:	601a      	str	r2, [r3, #0]
		the_period = this_tick - last_tick;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <HAL_ADC_ConvCpltCallback+0x19c>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	4a1f      	ldr	r2, [pc, #124]	; (8001a34 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80019b8:	6013      	str	r3, [r2, #0]
		MX_TIM7_Init();
 80019ba:	f7ff fd33 	bl	8001424 <MX_TIM7_Init>
		__HAL_TIM_SET_COUNTER(&htim7, 0);
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_ADC_ConvCpltCallback+0x194>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24
		// just toggle a pin to use the LA to see how long in real measured time
		HAL_GPIO_WritePin(Period_Start_GPIO_Port, Period_Start_Pin, GPIO_PIN_SET);
 80019c6:	2201      	movs	r2, #1
 80019c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019cc:	481a      	ldr	r0, [pc, #104]	; (8001a38 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80019ce:	f003 f849 	bl	8004a64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Period_Start_GPIO_Port, Period_Start_Pin, GPIO_PIN_RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019d8:	4817      	ldr	r0, [pc, #92]	; (8001a38 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80019da:	f003 f843 	bl	8004a64 <HAL_GPIO_WritePin>
	    int look = uwTick;
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <HAL_ADC_ConvCpltCallback+0x1ac>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	60bb      	str	r3, [r7, #8]
	    last_tick=this_tick;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <HAL_ADC_ConvCpltCallback+0x19c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a11      	ldr	r2, [pc, #68]	; (8001a30 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80019ea:	6013      	str	r3, [r2, #0]
		hit_low = false;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_ADC_ConvCpltCallback+0x190>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
	    HAL_TIM_Base_Start(&htim7); //Timer7 is used to time the period
 80019f2:	480c      	ldr	r0, [pc, #48]	; (8001a24 <HAL_ADC_ConvCpltCallback+0x194>)
 80019f4:	f004 fc10 	bl	8006218 <HAL_TIM_Base_Start>
		}


}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a02:	bf00      	nop
 8001a04:	f3af 8000 	nop.w
 8001a08:	9999999a 	.word	0x9999999a
 8001a0c:	3fb99999 	.word	0x3fb99999
 8001a10:	cccccccd 	.word	0xcccccccd
 8001a14:	3feccccc 	.word	0x3feccccc
 8001a18:	20000364 	.word	0x20000364
 8001a1c:	20000094 	.word	0x20000094
 8001a20:	20000000 	.word	0x20000000
 8001a24:	20000244 	.word	0x20000244
 8001a28:	40001400 	.word	0x40001400
 8001a2c:	2000009c 	.word	0x2000009c
 8001a30:	20000098 	.word	0x20000098
 8001a34:	200000a0 	.word	0x200000a0
 8001a38:	48000800 	.word	0x48000800
 8001a3c:	200003c4 	.word	0x200003c4

08001a40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	 if (htim == &htim17 ) { MultiFunctionShield__ISRFunc(); }
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d101      	bne.n	8001a54 <HAL_TIM_PeriodElapsedCallback+0x14>
 8001a50:	f7ff fad0 	bl	8000ff4 <MultiFunctionShield__ISRFunc>
		  	// int u = 1;
			// if (sindex >=SINE_WAVE_SAMPLES ) {sindex=0;}
			}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d101      	bne.n	8001a62 <HAL_TIM_PeriodElapsedCallback+0x22>
    HAL_IncTick();
 8001a5e:	f000 fc1d 	bl	800229c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000290 	.word	0x20000290
 8001a70:	40001000 	.word	0x40001000

08001a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a78:	b672      	cpsid	i
}
 8001a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <Error_Handler+0x8>
	...

08001a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <HAL_MspInit+0x44>)
 8001a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <HAL_MspInit+0x44>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6613      	str	r3, [r2, #96]	; 0x60
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_MspInit+0x44>)
 8001a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_MspInit+0x44>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <HAL_MspInit+0x44>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_MspInit+0x44>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b0ac      	sub	sp, #176	; 0xb0
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2288      	movs	r2, #136	; 0x88
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f005 ff20 	bl	800792e <memset>
  if(hadc->Instance==ADC3)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a41      	ldr	r2, [pc, #260]	; (8001bf8 <HAL_ADC_MspInit+0x130>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d17a      	bne.n	8001bee <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001af8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001afc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001afe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001b06:	2302      	movs	r3, #2
 8001b08:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001b0e:	2308      	movs	r3, #8
 8001b10:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b12:	2307      	movs	r3, #7
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b16:	2302      	movs	r3, #2
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b22:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 fe61 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001b34:	f7ff ff9e 	bl	8001a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b38:	4b30      	ldr	r3, [pc, #192]	; (8001bfc <HAL_ADC_MspInit+0x134>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	4a2f      	ldr	r2, [pc, #188]	; (8001bfc <HAL_ADC_MspInit+0x134>)
 8001b3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b44:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <HAL_ADC_MspInit+0x134>)
 8001b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b50:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <HAL_ADC_MspInit+0x134>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	4a29      	ldr	r2, [pc, #164]	; (8001bfc <HAL_ADC_MspInit+0x134>)
 8001b56:	f043 0304 	orr.w	r3, r3, #4
 8001b5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_ADC_MspInit+0x134>)
 8001b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC3     ------> ADC3_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b68:	2308      	movs	r3, #8
 8001b6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b6e:	230b      	movs	r3, #11
 8001b70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b7e:	4619      	mov	r1, r3
 8001b80:	481f      	ldr	r0, [pc, #124]	; (8001c00 <HAL_ADC_MspInit+0x138>)
 8001b82:	f002 fdc5 	bl	8004710 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Channel5;
 8001b86:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <HAL_ADC_MspInit+0x13c>)
 8001b88:	4a1f      	ldr	r2, [pc, #124]	; (8001c08 <HAL_ADC_MspInit+0x140>)
 8001b8a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_0;
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <HAL_ADC_MspInit+0x13c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b92:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <HAL_ADC_MspInit+0x13c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <HAL_ADC_MspInit+0x13c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001b9e:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_ADC_MspInit+0x13c>)
 8001ba0:	2280      	movs	r2, #128	; 0x80
 8001ba2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_ADC_MspInit+0x13c>)
 8001ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001baa:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_ADC_MspInit+0x13c>)
 8001bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bb2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <HAL_ADC_MspInit+0x13c>)
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_ADC_MspInit+0x13c>)
 8001bbc:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001bc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001bc2:	4810      	ldr	r0, [pc, #64]	; (8001c04 <HAL_ADC_MspInit+0x13c>)
 8001bc4:	f002 fb6e 	bl	80042a4 <HAL_DMA_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8001bce:	f7ff ff51 	bl	8001a74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <HAL_ADC_MspInit+0x13c>)
 8001bd6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bd8:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <HAL_ADC_MspInit+0x13c>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	202f      	movs	r0, #47	; 0x2f
 8001be4:	f001 ffce 	bl	8003b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001be8:	202f      	movs	r0, #47	; 0x2f
 8001bea:	f001 ffe7 	bl	8003bbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001bee:	bf00      	nop
 8001bf0:	37b0      	adds	r7, #176	; 0xb0
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	50040200 	.word	0x50040200
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	48000800 	.word	0x48000800
 8001c04:	20000108 	.word	0x20000108
 8001c08:	40020458 	.word	0x40020458

08001c0c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	; 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a2f      	ldr	r2, [pc, #188]	; (8001ce8 <HAL_DAC_MspInit+0xdc>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d158      	bne.n	8001ce0 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001c2e:	4b2f      	ldr	r3, [pc, #188]	; (8001cec <HAL_DAC_MspInit+0xe0>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	4a2e      	ldr	r2, [pc, #184]	; (8001cec <HAL_DAC_MspInit+0xe0>)
 8001c34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c38:	6593      	str	r3, [r2, #88]	; 0x58
 8001c3a:	4b2c      	ldr	r3, [pc, #176]	; (8001cec <HAL_DAC_MspInit+0xe0>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c46:	4b29      	ldr	r3, [pc, #164]	; (8001cec <HAL_DAC_MspInit+0xe0>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	4a28      	ldr	r2, [pc, #160]	; (8001cec <HAL_DAC_MspInit+0xe0>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c52:	4b26      	ldr	r3, [pc, #152]	; (8001cec <HAL_DAC_MspInit+0xe0>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c5e:	2310      	movs	r3, #16
 8001c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c62:	2303      	movs	r3, #3
 8001c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c74:	f002 fd4c 	bl	8004710 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_DAC_MspInit+0xe4>)
 8001c7a:	4a1e      	ldr	r2, [pc, #120]	; (8001cf4 <HAL_DAC_MspInit+0xe8>)
 8001c7c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <HAL_DAC_MspInit+0xe4>)
 8001c80:	2206      	movs	r2, #6
 8001c82:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c84:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <HAL_DAC_MspInit+0xe4>)
 8001c86:	2210      	movs	r2, #16
 8001c88:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_DAC_MspInit+0xe4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c90:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <HAL_DAC_MspInit+0xe4>)
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <HAL_DAC_MspInit+0xe4>)
 8001c98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c9c:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_DAC_MspInit+0xe4>)
 8001ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca4:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_DAC_MspInit+0xe4>)
 8001ca8:	2220      	movs	r2, #32
 8001caa:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <HAL_DAC_MspInit+0xe4>)
 8001cae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cb2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001cb4:	480e      	ldr	r0, [pc, #56]	; (8001cf0 <HAL_DAC_MspInit+0xe4>)
 8001cb6:	f002 faf5 	bl	80042a4 <HAL_DMA_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001cc0:	f7ff fed8 	bl	8001a74 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <HAL_DAC_MspInit+0xe4>)
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	4a09      	ldr	r2, [pc, #36]	; (8001cf0 <HAL_DAC_MspInit+0xe4>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	2036      	movs	r0, #54	; 0x36
 8001cd6:	f001 ff55 	bl	8003b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cda:	2036      	movs	r0, #54	; 0x36
 8001cdc:	f001 ff6e 	bl	8003bbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001ce0:	bf00      	nop
 8001ce2:	3728      	adds	r7, #40	; 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40007400 	.word	0x40007400
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	20000164 	.word	0x20000164
 8001cf4:	40020030 	.word	0x40020030

08001cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d08:	d114      	bne.n	8001d34 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d0a:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	4a2e      	ldr	r2, [pc, #184]	; (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6593      	str	r3, [r2, #88]	; 0x58
 8001d16:	4b2c      	ldr	r3, [pc, #176]	; (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	201c      	movs	r0, #28
 8001d28:	f001 ff2c 	bl	8003b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d2c:	201c      	movs	r0, #28
 8001d2e:	f001 ff45 	bl	8003bbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001d32:	e044      	b.n	8001dbe <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a24      	ldr	r2, [pc, #144]	; (8001dcc <HAL_TIM_Base_MspInit+0xd4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d114      	bne.n	8001d68 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d3e:	4b22      	ldr	r3, [pc, #136]	; (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d42:	4a21      	ldr	r2, [pc, #132]	; (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	6593      	str	r3, [r2, #88]	; 0x58
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2100      	movs	r1, #0
 8001d5a:	201d      	movs	r0, #29
 8001d5c:	f001 ff12 	bl	8003b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d60:	201d      	movs	r0, #29
 8001d62:	f001 ff2b 	bl	8003bbc <HAL_NVIC_EnableIRQ>
}
 8001d66:	e02a      	b.n	8001dbe <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM7)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <HAL_TIM_Base_MspInit+0xd8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d10c      	bne.n	8001d8c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001d78:	f043 0320 	orr.w	r3, r3, #32
 8001d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	f003 0320 	and.w	r3, r3, #32
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
}
 8001d8a:	e018      	b.n	8001dbe <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM17)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <HAL_TIM_Base_MspInit+0xdc>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d113      	bne.n	8001dbe <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d9a:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da0:	6613      	str	r3, [r2, #96]	; 0x60
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_TIM_Base_MspInit+0xd0>)
 8001da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2100      	movs	r1, #0
 8001db2:	201a      	movs	r0, #26
 8001db4:	f001 fee6 	bl	8003b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001db8:	201a      	movs	r0, #26
 8001dba:	f001 feff 	bl	8003bbc <HAL_NVIC_EnableIRQ>
}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40000400 	.word	0x40000400
 8001dd0:	40001400 	.word	0x40001400
 8001dd4:	40014800 	.word	0x40014800

08001dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b0ac      	sub	sp, #176	; 0xb0
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	2288      	movs	r2, #136	; 0x88
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f005 fd98 	bl	800792e <memset>
  if(huart->Instance==USART2)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <HAL_UART_MspInit+0xb0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d13b      	bne.n	8001e80 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4618      	mov	r0, r3
 8001e16:	f003 fceb 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e20:	f7ff fe28 	bl	8001a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_UART_MspInit+0xb4>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <HAL_UART_MspInit+0xb4>)
 8001e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e30:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <HAL_UART_MspInit+0xb4>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_UART_MspInit+0xb4>)
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e40:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <HAL_UART_MspInit+0xb4>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_UART_MspInit+0xb4>)
 8001e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e54:	230c      	movs	r3, #12
 8001e56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e6c:	2307      	movs	r3, #7
 8001e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e76:	4619      	mov	r1, r3
 8001e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7c:	f002 fc48 	bl	8004710 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e80:	bf00      	nop
 8001e82:	37b0      	adds	r7, #176	; 0xb0
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40004400 	.word	0x40004400
 8001e8c:	40021000 	.word	0x40021000

08001e90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08e      	sub	sp, #56	; 0x38
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e9e:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <HAL_InitTick+0xe0>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	4a33      	ldr	r2, [pc, #204]	; (8001f70 <HAL_InitTick+0xe0>)
 8001ea4:	f043 0310 	orr.w	r3, r3, #16
 8001ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eaa:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <HAL_InitTick+0xe0>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eb6:	f107 0210 	add.w	r2, r7, #16
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f003 fc03 	bl	80056cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d103      	bne.n	8001ed8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ed0:	f003 fbd0 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 8001ed4:	6378      	str	r0, [r7, #52]	; 0x34
 8001ed6:	e004      	b.n	8001ee2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ed8:	f003 fbcc 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 8001edc:	4603      	mov	r3, r0
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee4:	4a23      	ldr	r2, [pc, #140]	; (8001f74 <HAL_InitTick+0xe4>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	0c9b      	lsrs	r3, r3, #18
 8001eec:	3b01      	subs	r3, #1
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ef0:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_InitTick+0xe8>)
 8001ef2:	4a22      	ldr	r2, [pc, #136]	; (8001f7c <HAL_InitTick+0xec>)
 8001ef4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <HAL_InitTick+0xe8>)
 8001ef8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001efc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001efe:	4a1e      	ldr	r2, [pc, #120]	; (8001f78 <HAL_InitTick+0xe8>)
 8001f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f02:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f04:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <HAL_InitTick+0xe8>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_InitTick+0xe8>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_InitTick+0xe8>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001f16:	4818      	ldr	r0, [pc, #96]	; (8001f78 <HAL_InitTick+0xe8>)
 8001f18:	f004 f926 	bl	8006168 <HAL_TIM_Base_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001f22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d11b      	bne.n	8001f62 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001f2a:	4813      	ldr	r0, [pc, #76]	; (8001f78 <HAL_InitTick+0xe8>)
 8001f2c:	f004 fa04 	bl	8006338 <HAL_TIM_Base_Start_IT>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001f36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d111      	bne.n	8001f62 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f3e:	2036      	movs	r0, #54	; 0x36
 8001f40:	f001 fe3c 	bl	8003bbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b0f      	cmp	r3, #15
 8001f48:	d808      	bhi.n	8001f5c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	2036      	movs	r0, #54	; 0x36
 8001f50:	f001 fe18 	bl	8003b84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f54:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <HAL_InitTick+0xf0>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e002      	b.n	8001f62 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3738      	adds	r7, #56	; 0x38
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	431bde83 	.word	0x431bde83
 8001f78:	20000374 	.word	0x20000374
 8001f7c:	40001000 	.word	0x40001000
 8001f80:	2000000c 	.word	0x2000000c

08001f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <NMI_Handler+0x4>

08001f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f8e:	e7fe      	b.n	8001f8e <HardFault_Handler+0x4>

08001f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <MemManage_Handler+0x4>

08001f96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f9a:	e7fe      	b.n	8001f9a <BusFault_Handler+0x4>

08001f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <UsageFault_Handler+0x4>

08001fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f002 fd58 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 8001fec:	2002      	movs	r0, #2
 8001fee:	f002 fd51 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001ffc:	4802      	ldr	r0, [pc, #8]	; (8002008 <DMA1_Channel3_IRQHandler+0x10>)
 8001ffe:	f002 faa7 	bl	8004550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000164 	.word	0x20000164

0800200c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002010:	4802      	ldr	r0, [pc, #8]	; (800201c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002012:	f004 fa01 	bl	8006418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000290 	.word	0x20000290

08002020 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002024:	4802      	ldr	r0, [pc, #8]	; (8002030 <TIM2_IRQHandler+0x10>)
 8002026:	f004 f9f7 	bl	8006418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200001ac 	.word	0x200001ac

08002034 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <TIM3_IRQHandler+0x10>)
 800203a:	f004 f9ed 	bl	8006418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200001f8 	.word	0x200001f8

08002048 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800204c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002050:	f002 fd20 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}

08002058 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <ADC3_IRQHandler+0x10>)
 800205e:	f000 fd63 	bl	8002b28 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200000a4 	.word	0x200000a4

0800206c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002070:	4803      	ldr	r0, [pc, #12]	; (8002080 <TIM6_DAC_IRQHandler+0x14>)
 8002072:	f004 f9d1 	bl	8006418 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002076:	4803      	ldr	r0, [pc, #12]	; (8002084 <TIM6_DAC_IRQHandler+0x18>)
 8002078:	f001 fee1 	bl	8003e3e <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000374 	.word	0x20000374
 8002084:	20000150 	.word	0x20000150

08002088 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <DMA2_Channel5_IRQHandler+0x10>)
 800208e:	f002 fa5f 	bl	8004550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000108 	.word	0x20000108

0800209c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	e00a      	b.n	80020c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020ae:	f3af 8000 	nop.w
 80020b2:	4601      	mov	r1, r0
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	60ba      	str	r2, [r7, #8]
 80020ba:	b2ca      	uxtb	r2, r1
 80020bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	3301      	adds	r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	dbf0      	blt.n	80020ae <_read+0x12>
  }

  return len;
 80020cc:	687b      	ldr	r3, [r7, #4]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	e009      	b.n	80020fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	60ba      	str	r2, [r7, #8]
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fb2d 	bl	8001750 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	3301      	adds	r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	429a      	cmp	r2, r3
 8002102:	dbf1      	blt.n	80020e8 <_write+0x12>
  }
  return len;
 8002104:	687b      	ldr	r3, [r7, #4]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <_close>:

int _close(int file)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002116:	f04f 33ff 	mov.w	r3, #4294967295
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002136:	605a      	str	r2, [r3, #4]
  return 0;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <_isatty>:

int _isatty(int file)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800214e:	2301      	movs	r3, #1
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002180:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <_sbrk+0x5c>)
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <_sbrk+0x60>)
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <_sbrk+0x64>)
 8002196:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <_sbrk+0x68>)
 8002198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d207      	bcs.n	80021b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a8:	f005 fc10 	bl	80079cc <__errno>
 80021ac:	4603      	mov	r3, r0
 80021ae:	220c      	movs	r2, #12
 80021b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
 80021b6:	e009      	b.n	80021cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <_sbrk+0x64>)
 80021c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ca:	68fb      	ldr	r3, [r7, #12]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20018000 	.word	0x20018000
 80021d8:	00000400 	.word	0x00000400
 80021dc:	200003c0 	.word	0x200003c0
 80021e0:	20000518 	.word	0x20000518

080021e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <SystemInit+0x20>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	4a05      	ldr	r2, [pc, #20]	; (8002204 <SystemInit+0x20>)
 80021f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002240 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800220c:	f7ff ffea 	bl	80021e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002210:	480c      	ldr	r0, [pc, #48]	; (8002244 <LoopForever+0x6>)
  ldr r1, =_edata
 8002212:	490d      	ldr	r1, [pc, #52]	; (8002248 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002214:	4a0d      	ldr	r2, [pc, #52]	; (800224c <LoopForever+0xe>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002218:	e002      	b.n	8002220 <LoopCopyDataInit>

0800221a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800221c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221e:	3304      	adds	r3, #4

08002220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002224:	d3f9      	bcc.n	800221a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002228:	4c0a      	ldr	r4, [pc, #40]	; (8002254 <LoopForever+0x16>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800222c:	e001      	b.n	8002232 <LoopFillZerobss>

0800222e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002230:	3204      	adds	r2, #4

08002232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002234:	d3fb      	bcc.n	800222e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002236:	f005 fbcf 	bl	80079d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800223a:	f7fe ff0d 	bl	8001058 <main>

0800223e <LoopForever>:

LoopForever:
    b LoopForever
 800223e:	e7fe      	b.n	800223e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002240:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002248:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800224c:	08008f00 	.word	0x08008f00
  ldr r2, =_sbss
 8002250:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002254:	20000514 	.word	0x20000514

08002258 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <ADC1_2_IRQHandler>
	...

0800225c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <HAL_Init+0x3c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <HAL_Init+0x3c>)
 800226c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002270:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002272:	2003      	movs	r0, #3
 8002274:	f001 fc7b 	bl	8003b6e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002278:	200f      	movs	r0, #15
 800227a:	f7ff fe09 	bl	8001e90 <HAL_InitTick>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d002      	beq.n	800228a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	71fb      	strb	r3, [r7, #7]
 8002288:	e001      	b.n	800228e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800228a:	f7ff fbf9 	bl	8001a80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800228e:	79fb      	ldrb	r3, [r7, #7]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40022000 	.word	0x40022000

0800229c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_IncTick+0x20>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_IncTick+0x24>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <HAL_IncTick+0x24>)
 80022ae:	6013      	str	r3, [r2, #0]
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000010 	.word	0x20000010
 80022c0:	200003c4 	.word	0x200003c4

080022c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return uwTick;
 80022c8:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <HAL_GetTick+0x14>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	200003c4 	.word	0x200003c4

080022dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e4:	f7ff ffee 	bl	80022c4 <HAL_GetTick>
 80022e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d005      	beq.n	8002302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_Delay+0x44>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002302:	bf00      	nop
 8002304:	f7ff ffde 	bl	80022c4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	429a      	cmp	r2, r3
 8002312:	d8f7      	bhi.n	8002304 <HAL_Delay+0x28>
  {
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000010 	.word	0x20000010

08002324 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	609a      	str	r2, [r3, #8]
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	609a      	str	r2, [r3, #8]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3360      	adds	r3, #96	; 0x60
 800239e:	461a      	mov	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <LL_ADC_SetOffset+0x44>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80023c4:	bf00      	nop
 80023c6:	371c      	adds	r7, #28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	03fff000 	.word	0x03fff000

080023d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3360      	adds	r3, #96	; 0x60
 80023e2:	461a      	mov	r2, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3360      	adds	r3, #96	; 0x60
 8002410:	461a      	mov	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	431a      	orrs	r2, r3
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800242a:	bf00      	nop
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3330      	adds	r3, #48	; 0x30
 800246c:	461a      	mov	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	f003 030c 	and.w	r3, r3, #12
 8002478:	4413      	add	r3, r2
 800247a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	211f      	movs	r1, #31
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	401a      	ands	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	0e9b      	lsrs	r3, r3, #26
 8002494:	f003 011f 	and.w	r1, r3, #31
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f003 031f 	and.w	r3, r3, #31
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	431a      	orrs	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024a8:	bf00      	nop
 80024aa:	371c      	adds	r7, #28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024da:	b480      	push	{r7}
 80024dc:	b087      	sub	sp, #28
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	3314      	adds	r3, #20
 80024ea:	461a      	mov	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	0e5b      	lsrs	r3, r3, #25
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	4413      	add	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	0d1b      	lsrs	r3, r3, #20
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	2107      	movs	r1, #7
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	401a      	ands	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	0d1b      	lsrs	r3, r3, #20
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	431a      	orrs	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002524:	bf00      	nop
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002548:	43db      	mvns	r3, r3
 800254a:	401a      	ands	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 0318 	and.w	r3, r3, #24
 8002552:	4908      	ldr	r1, [pc, #32]	; (8002574 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002554:	40d9      	lsrs	r1, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	400b      	ands	r3, r1
 800255a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255e:	431a      	orrs	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	0007ffff 	.word	0x0007ffff

08002578 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 031f 	and.w	r3, r3, #31
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80025c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6093      	str	r3, [r2, #8]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025e8:	d101      	bne.n	80025ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800260c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002610:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002634:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002638:	d101      	bne.n	800263e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800265c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002660:	f043 0201 	orr.w	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <LL_ADC_IsEnabled+0x18>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <LL_ADC_IsEnabled+0x1a>
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026ae:	f043 0204 	orr.w	r2, r3, #4
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d101      	bne.n	80026da <LL_ADC_REG_IsConversionOngoing+0x18>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d101      	bne.n	8002700 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b089      	sub	sp, #36	; 0x24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e130      	b.n	800298c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	2b00      	cmp	r3, #0
 8002736:	d109      	bne.n	800274c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff f9c5 	bl	8001ac8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff3f 	bl	80025d4 <LL_ADC_IsDeepPowerDownEnabled>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d004      	beq.n	8002766 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ff25 	bl	80025b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff ff5a 	bl	8002624 <LL_ADC_IsInternalRegulatorEnabled>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d115      	bne.n	80027a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff3e 	bl	80025fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002780:	4b84      	ldr	r3, [pc, #528]	; (8002994 <HAL_ADC_Init+0x284>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	4a84      	ldr	r2, [pc, #528]	; (8002998 <HAL_ADC_Init+0x288>)
 8002788:	fba2 2303 	umull	r2, r3, r2, r3
 800278c:	099b      	lsrs	r3, r3, #6
 800278e:	3301      	adds	r3, #1
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002794:	e002      	b.n	800279c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	3b01      	subs	r3, #1
 800279a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f9      	bne.n	8002796 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ff3c 	bl	8002624 <LL_ADC_IsInternalRegulatorEnabled>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10d      	bne.n	80027ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b6:	f043 0210 	orr.w	r2, r3, #16
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	f043 0201 	orr.w	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ff75 	bl	80026c2 <LL_ADC_REG_IsConversionOngoing>
 80027d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 80c9 	bne.w	800297a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f040 80c5 	bne.w	800297a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027f8:	f043 0202 	orr.w	r2, r3, #2
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff35 	bl	8002674 <LL_ADC_IsEnabled>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d115      	bne.n	800283c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002810:	4862      	ldr	r0, [pc, #392]	; (800299c <HAL_ADC_Init+0x28c>)
 8002812:	f7ff ff2f 	bl	8002674 <LL_ADC_IsEnabled>
 8002816:	4604      	mov	r4, r0
 8002818:	4861      	ldr	r0, [pc, #388]	; (80029a0 <HAL_ADC_Init+0x290>)
 800281a:	f7ff ff2b 	bl	8002674 <LL_ADC_IsEnabled>
 800281e:	4603      	mov	r3, r0
 8002820:	431c      	orrs	r4, r3
 8002822:	4860      	ldr	r0, [pc, #384]	; (80029a4 <HAL_ADC_Init+0x294>)
 8002824:	f7ff ff26 	bl	8002674 <LL_ADC_IsEnabled>
 8002828:	4603      	mov	r3, r0
 800282a:	4323      	orrs	r3, r4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d105      	bne.n	800283c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4619      	mov	r1, r3
 8002836:	485c      	ldr	r0, [pc, #368]	; (80029a8 <HAL_ADC_Init+0x298>)
 8002838:	f7ff fd74 	bl	8002324 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7e5b      	ldrb	r3, [r3, #25]
 8002840:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002846:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800284c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002852:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3020 	ldrb.w	r3, [r3, #32]
 800285a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d106      	bne.n	8002878 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	3b01      	subs	r3, #1
 8002870:	045b      	lsls	r3, r3, #17
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	2b00      	cmp	r3, #0
 800287e:	d009      	beq.n	8002894 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002884:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	4b44      	ldr	r3, [pc, #272]	; (80029ac <HAL_ADC_Init+0x29c>)
 800289c:	4013      	ands	r3, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	69b9      	ldr	r1, [r7, #24]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff1b 	bl	80026e8 <LL_ADC_INJ_IsConversionOngoing>
 80028b2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d13d      	bne.n	8002936 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d13a      	bne.n	8002936 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028c4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028cc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028dc:	f023 0302 	bic.w	r3, r3, #2
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	69b9      	ldr	r1, [r7, #24]
 80028e6:	430b      	orrs	r3, r1
 80028e8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d118      	bne.n	8002926 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80028fe:	f023 0304 	bic.w	r3, r3, #4
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800290a:	4311      	orrs	r1, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002910:	4311      	orrs	r1, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002916:	430a      	orrs	r2, r1
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	611a      	str	r2, [r3, #16]
 8002924:	e007      	b.n	8002936 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0201 	bic.w	r2, r2, #1
 8002934:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d10c      	bne.n	8002958 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	f023 010f 	bic.w	r1, r3, #15
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	1e5a      	subs	r2, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
 8002956:	e007      	b.n	8002968 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 020f 	bic.w	r2, r2, #15
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296c:	f023 0303 	bic.w	r3, r3, #3
 8002970:	f043 0201 	orr.w	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	655a      	str	r2, [r3, #84]	; 0x54
 8002978:	e007      	b.n	800298a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	f043 0210 	orr.w	r2, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800298a:	7ffb      	ldrb	r3, [r7, #31]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3724      	adds	r7, #36	; 0x24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd90      	pop	{r4, r7, pc}
 8002994:	20000008 	.word	0x20000008
 8002998:	053e2d63 	.word	0x053e2d63
 800299c:	50040000 	.word	0x50040000
 80029a0:	50040100 	.word	0x50040100
 80029a4:	50040200 	.word	0x50040200
 80029a8:	50040300 	.word	0x50040300
 80029ac:	fff0c007 	.word	0xfff0c007

080029b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029bc:	4853      	ldr	r0, [pc, #332]	; (8002b0c <HAL_ADC_Start_DMA+0x15c>)
 80029be:	f7ff fddb 	bl	8002578 <LL_ADC_GetMultimode>
 80029c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fe7a 	bl	80026c2 <LL_ADC_REG_IsConversionOngoing>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f040 8093 	bne.w	8002afc <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_ADC_Start_DMA+0x34>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e08e      	b.n	8002b02 <HAL_ADC_Start_DMA+0x152>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a47      	ldr	r2, [pc, #284]	; (8002b10 <HAL_ADC_Start_DMA+0x160>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d008      	beq.n	8002a08 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	2b05      	cmp	r3, #5
 8002a00:	d002      	beq.n	8002a08 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	2b09      	cmp	r3, #9
 8002a06:	d172      	bne.n	8002aee <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 feb7 	bl	800377c <ADC_Enable>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d165      	bne.n	8002ae4 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a38      	ldr	r2, [pc, #224]	; (8002b14 <HAL_ADC_Start_DMA+0x164>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d002      	beq.n	8002a3c <HAL_ADC_Start_DMA+0x8c>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	e000      	b.n	8002a3e <HAL_ADC_Start_DMA+0x8e>
 8002a3c:	4b36      	ldr	r3, [pc, #216]	; (8002b18 <HAL_ADC_Start_DMA+0x168>)
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d002      	beq.n	8002a4c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d006      	beq.n	8002a72 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a68:	f023 0206 	bic.w	r2, r3, #6
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	659a      	str	r2, [r3, #88]	; 0x58
 8002a70:	e002      	b.n	8002a78 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7c:	4a27      	ldr	r2, [pc, #156]	; (8002b1c <HAL_ADC_Start_DMA+0x16c>)
 8002a7e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a84:	4a26      	ldr	r2, [pc, #152]	; (8002b20 <HAL_ADC_Start_DMA+0x170>)
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8c:	4a25      	ldr	r2, [pc, #148]	; (8002b24 <HAL_ADC_Start_DMA+0x174>)
 8002a8e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	221c      	movs	r2, #28
 8002a96:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0210 	orr.w	r2, r2, #16
 8002aae:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3340      	adds	r3, #64	; 0x40
 8002aca:	4619      	mov	r1, r3
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f001 fca0 	bl	8004414 <HAL_DMA_Start_IT>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fddc 	bl	800269a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002ae2:	e00d      	b.n	8002b00 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002aec:	e008      	b.n	8002b00 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002afa:	e001      	b.n	8002b00 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
 8002afe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	50040300 	.word	0x50040300
 8002b10:	50040200 	.word	0x50040200
 8002b14:	50040100 	.word	0x50040100
 8002b18:	50040000 	.word	0x50040000
 8002b1c:	08003889 	.word	0x08003889
 8002b20:	08003961 	.word	0x08003961
 8002b24:	0800397d 	.word	0x0800397d

08002b28 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08a      	sub	sp, #40	; 0x28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002b30:	2300      	movs	r3, #0
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b44:	4882      	ldr	r0, [pc, #520]	; (8002d50 <HAL_ADC_IRQHandler+0x228>)
 8002b46:	f7ff fd17 	bl	8002578 <LL_ADC_GetMultimode>
 8002b4a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d017      	beq.n	8002b86 <HAL_ADC_IRQHandler+0x5e>
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d012      	beq.n	8002b86 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b70:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 ff41 	bl	8003a00 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2202      	movs	r2, #2
 8002b84:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d004      	beq.n	8002b9a <HAL_ADC_IRQHandler+0x72>
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10a      	bne.n	8002bb0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 8083 	beq.w	8002cac <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d07d      	beq.n	8002cac <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d105      	bne.n	8002bc8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff fc32 	bl	8002436 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d062      	beq.n	8002c9e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a5d      	ldr	r2, [pc, #372]	; (8002d54 <HAL_ADC_IRQHandler+0x22c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d002      	beq.n	8002be8 <HAL_ADC_IRQHandler+0xc0>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	e000      	b.n	8002bea <HAL_ADC_IRQHandler+0xc2>
 8002be8:	4b5b      	ldr	r3, [pc, #364]	; (8002d58 <HAL_ADC_IRQHandler+0x230>)
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d008      	beq.n	8002c04 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d002      	beq.n	8002c04 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b09      	cmp	r3, #9
 8002c02:	d104      	bne.n	8002c0e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	623b      	str	r3, [r7, #32]
 8002c0c:	e00c      	b.n	8002c28 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a50      	ldr	r2, [pc, #320]	; (8002d54 <HAL_ADC_IRQHandler+0x22c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d002      	beq.n	8002c1e <HAL_ADC_IRQHandler+0xf6>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	e000      	b.n	8002c20 <HAL_ADC_IRQHandler+0xf8>
 8002c1e:	4b4e      	ldr	r3, [pc, #312]	; (8002d58 <HAL_ADC_IRQHandler+0x230>)
 8002c20:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d135      	bne.n	8002c9e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d12e      	bne.n	8002c9e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fd3c 	bl	80026c2 <LL_ADC_REG_IsConversionOngoing>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d11a      	bne.n	8002c86 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 020c 	bic.w	r2, r2, #12
 8002c5e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d112      	bne.n	8002c9e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7c:	f043 0201 	orr.w	r2, r3, #1
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	655a      	str	r2, [r3, #84]	; 0x54
 8002c84:	e00b      	b.n	8002c9e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	f043 0210 	orr.w	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	f043 0201 	orr.w	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7fe fdf6 	bl	8001890 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	220c      	movs	r2, #12
 8002caa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d004      	beq.n	8002cc0 <HAL_ADC_IRQHandler+0x198>
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10b      	bne.n	8002cd8 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 809f 	beq.w	8002e0a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 8099 	beq.w	8002e0a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d105      	bne.n	8002cf0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fbdd 	bl	80024b4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002cfa:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fb98 	bl	8002436 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d06:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a11      	ldr	r2, [pc, #68]	; (8002d54 <HAL_ADC_IRQHandler+0x22c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d002      	beq.n	8002d18 <HAL_ADC_IRQHandler+0x1f0>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	e000      	b.n	8002d1a <HAL_ADC_IRQHandler+0x1f2>
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <HAL_ADC_IRQHandler+0x230>)
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d008      	beq.n	8002d34 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2b06      	cmp	r3, #6
 8002d2c:	d002      	beq.n	8002d34 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2b07      	cmp	r3, #7
 8002d32:	d104      	bne.n	8002d3e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	623b      	str	r3, [r7, #32]
 8002d3c:	e013      	b.n	8002d66 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <HAL_ADC_IRQHandler+0x22c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d009      	beq.n	8002d5c <HAL_ADC_IRQHandler+0x234>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	e007      	b.n	8002d5e <HAL_ADC_IRQHandler+0x236>
 8002d4e:	bf00      	nop
 8002d50:	50040300 	.word	0x50040300
 8002d54:	50040100 	.word	0x50040100
 8002d58:	50040000 	.word	0x50040000
 8002d5c:	4b7d      	ldr	r3, [pc, #500]	; (8002f54 <HAL_ADC_IRQHandler+0x42c>)
 8002d5e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d047      	beq.n	8002dfc <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <HAL_ADC_IRQHandler+0x25e>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d03f      	beq.n	8002dfc <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d13a      	bne.n	8002dfc <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d90:	2b40      	cmp	r3, #64	; 0x40
 8002d92:	d133      	bne.n	8002dfc <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d12e      	bne.n	8002dfc <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fca0 	bl	80026e8 <LL_ADC_INJ_IsConversionOngoing>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d11a      	bne.n	8002de4 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dbc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d112      	bne.n	8002dfc <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dda:	f043 0201 	orr.w	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	655a      	str	r2, [r3, #84]	; 0x54
 8002de2:	e00b      	b.n	8002dfc <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de8:	f043 0210 	orr.w	r2, r3, #16
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	f043 0201 	orr.w	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fdd7 	bl	80039b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2260      	movs	r2, #96	; 0x60
 8002e08:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d011      	beq.n	8002e38 <HAL_ADC_IRQHandler+0x310>
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00c      	beq.n	8002e38 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f8a0 	bl	8002f70 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d012      	beq.n	8002e68 <HAL_ADC_IRQHandler+0x340>
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00d      	beq.n	8002e68 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e50:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fdbd 	bl	80039d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d012      	beq.n	8002e98 <HAL_ADC_IRQHandler+0x370>
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00d      	beq.n	8002e98 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fdaf 	bl	80039ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e96:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d036      	beq.n	8002f10 <HAL_ADC_IRQHandler+0x3e8>
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d031      	beq.n	8002f10 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb8:	e014      	b.n	8002ee4 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ec0:	4825      	ldr	r0, [pc, #148]	; (8002f58 <HAL_ADC_IRQHandler+0x430>)
 8002ec2:	f7ff fb67 	bl	8002594 <LL_ADC_GetMultiDMATransfer>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00b      	beq.n	8002ee4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed0:	e008      	b.n	8002ee4 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d10e      	bne.n	8002f08 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efa:	f043 0202 	orr.w	r2, r3, #2
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f83e 	bl	8002f84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d018      	beq.n	8002f4c <HAL_ADC_IRQHandler+0x424>
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d013      	beq.n	8002f4c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	f043 0208 	orr.w	r2, r3, #8
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f44:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fd3c 	bl	80039c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002f4c:	bf00      	nop
 8002f4e:	3728      	adds	r7, #40	; 0x28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	50040000 	.word	0x50040000
 8002f58:	50040300 	.word	0x50040300

08002f5c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b0b6      	sub	sp, #216	; 0xd8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x22>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e3c9      	b.n	800374e <HAL_ADC_ConfigChannel+0x7b6>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff fb7b 	bl	80026c2 <LL_ADC_REG_IsConversionOngoing>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f040 83aa 	bne.w	8003728 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b05      	cmp	r3, #5
 8002fe2:	d824      	bhi.n	800302e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	3b02      	subs	r3, #2
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d81b      	bhi.n	8003026 <HAL_ADC_ConfigChannel+0x8e>
 8002fee:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <HAL_ADC_ConfigChannel+0x5c>)
 8002ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff4:	08003005 	.word	0x08003005
 8002ff8:	0800300d 	.word	0x0800300d
 8002ffc:	08003015 	.word	0x08003015
 8003000:	0800301d 	.word	0x0800301d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003004:	230c      	movs	r3, #12
 8003006:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800300a:	e010      	b.n	800302e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800300c:	2312      	movs	r3, #18
 800300e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003012:	e00c      	b.n	800302e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003014:	2318      	movs	r3, #24
 8003016:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800301a:	e008      	b.n	800302e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800301c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003020:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003024:	e003      	b.n	800302e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003026:	2306      	movs	r3, #6
 8003028:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800302c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800303c:	f7ff fa0e 	bl	800245c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fb3c 	bl	80026c2 <LL_ADC_REG_IsConversionOngoing>
 800304a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fb48 	bl	80026e8 <LL_ADC_INJ_IsConversionOngoing>
 8003058:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800305c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003060:	2b00      	cmp	r3, #0
 8003062:	f040 81a4 	bne.w	80033ae <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003066:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800306a:	2b00      	cmp	r3, #0
 800306c:	f040 819f 	bne.w	80033ae <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	6819      	ldr	r1, [r3, #0]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	461a      	mov	r2, r3
 800307e:	f7ff fa2c 	bl	80024da <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	08db      	lsrs	r3, r3, #3
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d00a      	beq.n	80030ba <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6919      	ldr	r1, [r3, #16]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030b4:	f7ff f96a 	bl	800238c <LL_ADC_SetOffset>
 80030b8:	e179      	b.n	80033ae <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff f987 	bl	80023d4 <LL_ADC_GetOffsetChannel>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x14e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2100      	movs	r1, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff f97c 	bl	80023d4 <LL_ADC_GetOffsetChannel>
 80030dc:	4603      	mov	r3, r0
 80030de:	0e9b      	lsrs	r3, r3, #26
 80030e0:	f003 021f 	and.w	r2, r3, #31
 80030e4:	e01e      	b.n	8003124 <HAL_ADC_ConfigChannel+0x18c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff f971 	bl	80023d4 <LL_ADC_GetOffsetChannel>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003104:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003108:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800310c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003114:	2320      	movs	r3, #32
 8003116:	e004      	b.n	8003122 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003118:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <HAL_ADC_ConfigChannel+0x1a4>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	0e9b      	lsrs	r3, r3, #26
 8003136:	f003 031f 	and.w	r3, r3, #31
 800313a:	e018      	b.n	800316e <HAL_ADC_ConfigChannel+0x1d6>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003150:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003158:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003160:	2320      	movs	r3, #32
 8003162:	e004      	b.n	800316e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003164:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003168:	fab3 f383 	clz	r3, r3
 800316c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800316e:	429a      	cmp	r2, r3
 8003170:	d106      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2200      	movs	r2, #0
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff f940 	bl	8002400 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2101      	movs	r1, #1
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff f924 	bl	80023d4 <LL_ADC_GetOffsetChannel>
 800318c:	4603      	mov	r3, r0
 800318e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10a      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x214>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2101      	movs	r1, #1
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff f919 	bl	80023d4 <LL_ADC_GetOffsetChannel>
 80031a2:	4603      	mov	r3, r0
 80031a4:	0e9b      	lsrs	r3, r3, #26
 80031a6:	f003 021f 	and.w	r2, r3, #31
 80031aa:	e01e      	b.n	80031ea <HAL_ADC_ConfigChannel+0x252>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2101      	movs	r1, #1
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff f90e 	bl	80023d4 <LL_ADC_GetOffsetChannel>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031c2:	fa93 f3a3 	rbit	r3, r3
 80031c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80031ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80031d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80031da:	2320      	movs	r3, #32
 80031dc:	e004      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80031de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031e2:	fab3 f383 	clz	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d105      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x26a>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	0e9b      	lsrs	r3, r3, #26
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	e018      	b.n	8003234 <HAL_ADC_ConfigChannel+0x29c>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003216:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800321a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800321e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003226:	2320      	movs	r3, #32
 8003228:	e004      	b.n	8003234 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800322a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003234:	429a      	cmp	r2, r3
 8003236:	d106      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2200      	movs	r2, #0
 800323e:	2101      	movs	r1, #1
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff f8dd 	bl	8002400 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2102      	movs	r1, #2
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff f8c1 	bl	80023d4 <LL_ADC_GetOffsetChannel>
 8003252:	4603      	mov	r3, r0
 8003254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10a      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x2da>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2102      	movs	r1, #2
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff f8b6 	bl	80023d4 <LL_ADC_GetOffsetChannel>
 8003268:	4603      	mov	r3, r0
 800326a:	0e9b      	lsrs	r3, r3, #26
 800326c:	f003 021f 	and.w	r2, r3, #31
 8003270:	e01e      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x318>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2102      	movs	r1, #2
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff f8ab 	bl	80023d4 <LL_ADC_GetOffsetChannel>
 800327e:	4603      	mov	r3, r0
 8003280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003290:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003294:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003298:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80032a0:	2320      	movs	r3, #32
 80032a2:	e004      	b.n	80032ae <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80032a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d105      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x330>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	0e9b      	lsrs	r3, r3, #26
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	e014      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x35a>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032d0:	fa93 f3a3 	rbit	r3, r3
 80032d4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80032d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80032dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80032e4:	2320      	movs	r3, #32
 80032e6:	e004      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80032e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d106      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2200      	movs	r2, #0
 80032fc:	2102      	movs	r1, #2
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff f87e 	bl	8002400 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2103      	movs	r1, #3
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff f862 	bl	80023d4 <LL_ADC_GetOffsetChannel>
 8003310:	4603      	mov	r3, r0
 8003312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x398>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2103      	movs	r1, #3
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff f857 	bl	80023d4 <LL_ADC_GetOffsetChannel>
 8003326:	4603      	mov	r3, r0
 8003328:	0e9b      	lsrs	r3, r3, #26
 800332a:	f003 021f 	and.w	r2, r3, #31
 800332e:	e017      	b.n	8003360 <HAL_ADC_ConfigChannel+0x3c8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2103      	movs	r1, #3
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff f84c 	bl	80023d4 <LL_ADC_GetOffsetChannel>
 800333c:	4603      	mov	r3, r0
 800333e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800334a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800334c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003352:	2320      	movs	r3, #32
 8003354:	e003      	b.n	800335e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003358:	fab3 f383 	clz	r3, r3
 800335c:	b2db      	uxtb	r3, r3
 800335e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x3e0>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	0e9b      	lsrs	r3, r3, #26
 8003372:	f003 031f 	and.w	r3, r3, #31
 8003376:	e011      	b.n	800339c <HAL_ADC_ConfigChannel+0x404>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003380:	fa93 f3a3 	rbit	r3, r3
 8003384:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003388:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800338a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003390:	2320      	movs	r3, #32
 8003392:	e003      	b.n	800339c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003394:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003396:	fab3 f383 	clz	r3, r3
 800339a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800339c:	429a      	cmp	r2, r3
 800339e:	d106      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2200      	movs	r2, #0
 80033a6:	2103      	movs	r1, #3
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff f829 	bl	8002400 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff f95e 	bl	8002674 <LL_ADC_IsEnabled>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f040 8140 	bne.w	8003640 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	6819      	ldr	r1, [r3, #0]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	461a      	mov	r2, r3
 80033ce:	f7ff f8af 	bl	8002530 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	4a8f      	ldr	r2, [pc, #572]	; (8003614 <HAL_ADC_ConfigChannel+0x67c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	f040 8131 	bne.w	8003640 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10b      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x46e>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	0e9b      	lsrs	r3, r3, #26
 80033f4:	3301      	adds	r3, #1
 80033f6:	f003 031f 	and.w	r3, r3, #31
 80033fa:	2b09      	cmp	r3, #9
 80033fc:	bf94      	ite	ls
 80033fe:	2301      	movls	r3, #1
 8003400:	2300      	movhi	r3, #0
 8003402:	b2db      	uxtb	r3, r3
 8003404:	e019      	b.n	800343a <HAL_ADC_ConfigChannel+0x4a2>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003416:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800341e:	2320      	movs	r3, #32
 8003420:	e003      	b.n	800342a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003424:	fab3 f383 	clz	r3, r3
 8003428:	b2db      	uxtb	r3, r3
 800342a:	3301      	adds	r3, #1
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	2b09      	cmp	r3, #9
 8003432:	bf94      	ite	ls
 8003434:	2301      	movls	r3, #1
 8003436:	2300      	movhi	r3, #0
 8003438:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800343a:	2b00      	cmp	r3, #0
 800343c:	d079      	beq.n	8003532 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003446:	2b00      	cmp	r3, #0
 8003448:	d107      	bne.n	800345a <HAL_ADC_ConfigChannel+0x4c2>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	0e9b      	lsrs	r3, r3, #26
 8003450:	3301      	adds	r3, #1
 8003452:	069b      	lsls	r3, r3, #26
 8003454:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003458:	e015      	b.n	8003486 <HAL_ADC_ConfigChannel+0x4ee>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800346a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800346c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003472:	2320      	movs	r3, #32
 8003474:	e003      	b.n	800347e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003478:	fab3 f383 	clz	r3, r3
 800347c:	b2db      	uxtb	r3, r3
 800347e:	3301      	adds	r3, #1
 8003480:	069b      	lsls	r3, r3, #26
 8003482:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x50e>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	0e9b      	lsrs	r3, r3, #26
 8003498:	3301      	adds	r3, #1
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	2101      	movs	r1, #1
 80034a0:	fa01 f303 	lsl.w	r3, r1, r3
 80034a4:	e017      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x53e>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80034b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80034b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80034be:	2320      	movs	r3, #32
 80034c0:	e003      	b.n	80034ca <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80034c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034c4:	fab3 f383 	clz	r3, r3
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	2101      	movs	r1, #1
 80034d2:	fa01 f303 	lsl.w	r3, r1, r3
 80034d6:	ea42 0103 	orr.w	r1, r2, r3
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10a      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x564>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	0e9b      	lsrs	r3, r3, #26
 80034ec:	3301      	adds	r3, #1
 80034ee:	f003 021f 	and.w	r2, r3, #31
 80034f2:	4613      	mov	r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4413      	add	r3, r2
 80034f8:	051b      	lsls	r3, r3, #20
 80034fa:	e018      	b.n	800352e <HAL_ADC_ConfigChannel+0x596>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003504:	fa93 f3a3 	rbit	r3, r3
 8003508:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800350a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800350e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003514:	2320      	movs	r3, #32
 8003516:	e003      	b.n	8003520 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351a:	fab3 f383 	clz	r3, r3
 800351e:	b2db      	uxtb	r3, r3
 8003520:	3301      	adds	r3, #1
 8003522:	f003 021f 	and.w	r2, r3, #31
 8003526:	4613      	mov	r3, r2
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	4413      	add	r3, r2
 800352c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800352e:	430b      	orrs	r3, r1
 8003530:	e081      	b.n	8003636 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353a:	2b00      	cmp	r3, #0
 800353c:	d107      	bne.n	800354e <HAL_ADC_ConfigChannel+0x5b6>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	0e9b      	lsrs	r3, r3, #26
 8003544:	3301      	adds	r3, #1
 8003546:	069b      	lsls	r3, r3, #26
 8003548:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800354c:	e015      	b.n	800357a <HAL_ADC_ConfigChannel+0x5e2>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003556:	fa93 f3a3 	rbit	r3, r3
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003566:	2320      	movs	r3, #32
 8003568:	e003      	b.n	8003572 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356c:	fab3 f383 	clz	r3, r3
 8003570:	b2db      	uxtb	r3, r3
 8003572:	3301      	adds	r3, #1
 8003574:	069b      	lsls	r3, r3, #26
 8003576:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HAL_ADC_ConfigChannel+0x602>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	0e9b      	lsrs	r3, r3, #26
 800358c:	3301      	adds	r3, #1
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	2101      	movs	r1, #1
 8003594:	fa01 f303 	lsl.w	r3, r1, r3
 8003598:	e017      	b.n	80035ca <HAL_ADC_ConfigChannel+0x632>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	61bb      	str	r3, [r7, #24]
  return result;
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80035b2:	2320      	movs	r3, #32
 80035b4:	e003      	b.n	80035be <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	2101      	movs	r1, #1
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	ea42 0103 	orr.w	r1, r2, r3
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10d      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x65e>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	0e9b      	lsrs	r3, r3, #26
 80035e0:	3301      	adds	r3, #1
 80035e2:	f003 021f 	and.w	r2, r3, #31
 80035e6:	4613      	mov	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	3b1e      	subs	r3, #30
 80035ee:	051b      	lsls	r3, r3, #20
 80035f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035f4:	e01e      	b.n	8003634 <HAL_ADC_ConfigChannel+0x69c>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	60fb      	str	r3, [r7, #12]
  return result;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d104      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800360e:	2320      	movs	r3, #32
 8003610:	e006      	b.n	8003620 <HAL_ADC_ConfigChannel+0x688>
 8003612:	bf00      	nop
 8003614:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	fab3 f383 	clz	r3, r3
 800361e:	b2db      	uxtb	r3, r3
 8003620:	3301      	adds	r3, #1
 8003622:	f003 021f 	and.w	r2, r3, #31
 8003626:	4613      	mov	r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	4413      	add	r3, r2
 800362c:	3b1e      	subs	r3, #30
 800362e:	051b      	lsls	r3, r3, #20
 8003630:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003634:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800363a:	4619      	mov	r1, r3
 800363c:	f7fe ff4d 	bl	80024da <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b44      	ldr	r3, [pc, #272]	; (8003758 <HAL_ADC_ConfigChannel+0x7c0>)
 8003646:	4013      	ands	r3, r2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d07a      	beq.n	8003742 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800364c:	4843      	ldr	r0, [pc, #268]	; (800375c <HAL_ADC_ConfigChannel+0x7c4>)
 800364e:	f7fe fe8f 	bl	8002370 <LL_ADC_GetCommonPathInternalCh>
 8003652:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a41      	ldr	r2, [pc, #260]	; (8003760 <HAL_ADC_ConfigChannel+0x7c8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d12c      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003660:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d126      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a3c      	ldr	r2, [pc, #240]	; (8003764 <HAL_ADC_ConfigChannel+0x7cc>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d004      	beq.n	8003680 <HAL_ADC_ConfigChannel+0x6e8>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a3b      	ldr	r2, [pc, #236]	; (8003768 <HAL_ADC_ConfigChannel+0x7d0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d15d      	bne.n	800373c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003680:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003684:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003688:	4619      	mov	r1, r3
 800368a:	4834      	ldr	r0, [pc, #208]	; (800375c <HAL_ADC_ConfigChannel+0x7c4>)
 800368c:	f7fe fe5d 	bl	800234a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003690:	4b36      	ldr	r3, [pc, #216]	; (800376c <HAL_ADC_ConfigChannel+0x7d4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	099b      	lsrs	r3, r3, #6
 8003696:	4a36      	ldr	r2, [pc, #216]	; (8003770 <HAL_ADC_ConfigChannel+0x7d8>)
 8003698:	fba2 2303 	umull	r2, r3, r2, r3
 800369c:	099b      	lsrs	r3, r3, #6
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	4613      	mov	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80036aa:	e002      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f9      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036b8:	e040      	b.n	800373c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a2d      	ldr	r2, [pc, #180]	; (8003774 <HAL_ADC_ConfigChannel+0x7dc>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d118      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d112      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a23      	ldr	r2, [pc, #140]	; (8003764 <HAL_ADC_ConfigChannel+0x7cc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d004      	beq.n	80036e4 <HAL_ADC_ConfigChannel+0x74c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a22      	ldr	r2, [pc, #136]	; (8003768 <HAL_ADC_ConfigChannel+0x7d0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d12d      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ec:	4619      	mov	r1, r3
 80036ee:	481b      	ldr	r0, [pc, #108]	; (800375c <HAL_ADC_ConfigChannel+0x7c4>)
 80036f0:	f7fe fe2b 	bl	800234a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036f4:	e024      	b.n	8003740 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a1f      	ldr	r2, [pc, #124]	; (8003778 <HAL_ADC_ConfigChannel+0x7e0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d120      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003700:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d11a      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a14      	ldr	r2, [pc, #80]	; (8003764 <HAL_ADC_ConfigChannel+0x7cc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d115      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003716:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800371a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800371e:	4619      	mov	r1, r3
 8003720:	480e      	ldr	r0, [pc, #56]	; (800375c <HAL_ADC_ConfigChannel+0x7c4>)
 8003722:	f7fe fe12 	bl	800234a <LL_ADC_SetCommonPathInternalCh>
 8003726:	e00c      	b.n	8003742 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800373a:	e002      	b.n	8003742 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800373c:	bf00      	nop
 800373e:	e000      	b.n	8003742 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003740:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800374a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800374e:	4618      	mov	r0, r3
 8003750:	37d8      	adds	r7, #216	; 0xd8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	80080000 	.word	0x80080000
 800375c:	50040300 	.word	0x50040300
 8003760:	c7520000 	.word	0xc7520000
 8003764:	50040000 	.word	0x50040000
 8003768:	50040200 	.word	0x50040200
 800376c:	20000008 	.word	0x20000008
 8003770:	053e2d63 	.word	0x053e2d63
 8003774:	cb840000 	.word	0xcb840000
 8003778:	80000001 	.word	0x80000001

0800377c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003784:	2300      	movs	r3, #0
 8003786:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7fe ff71 	bl	8002674 <LL_ADC_IsEnabled>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d169      	bne.n	800386c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	4b36      	ldr	r3, [pc, #216]	; (8003878 <ADC_Enable+0xfc>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00d      	beq.n	80037c2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037aa:	f043 0210 	orr.w	r2, r3, #16
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b6:	f043 0201 	orr.w	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e055      	b.n	800386e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fe ff40 	bl	800264c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80037cc:	482b      	ldr	r0, [pc, #172]	; (800387c <ADC_Enable+0x100>)
 80037ce:	f7fe fdcf 	bl	8002370 <LL_ADC_GetCommonPathInternalCh>
 80037d2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80037d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d013      	beq.n	8003804 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037dc:	4b28      	ldr	r3, [pc, #160]	; (8003880 <ADC_Enable+0x104>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	099b      	lsrs	r3, r3, #6
 80037e2:	4a28      	ldr	r2, [pc, #160]	; (8003884 <ADC_Enable+0x108>)
 80037e4:	fba2 2303 	umull	r2, r3, r2, r3
 80037e8:	099b      	lsrs	r3, r3, #6
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	4613      	mov	r3, r2
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037f6:	e002      	b.n	80037fe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f9      	bne.n	80037f8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003804:	f7fe fd5e 	bl	80022c4 <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800380a:	e028      	b.n	800385e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe ff2f 	bl	8002674 <LL_ADC_IsEnabled>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d104      	bne.n	8003826 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7fe ff13 	bl	800264c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003826:	f7fe fd4d 	bl	80022c4 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d914      	bls.n	800385e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b01      	cmp	r3, #1
 8003840:	d00d      	beq.n	800385e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003846:	f043 0210 	orr.w	r2, r3, #16
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003852:	f043 0201 	orr.w	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e007      	b.n	800386e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b01      	cmp	r3, #1
 800386a:	d1cf      	bne.n	800380c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	8000003f 	.word	0x8000003f
 800387c:	50040300 	.word	0x50040300
 8003880:	20000008 	.word	0x20000008
 8003884:	053e2d63 	.word	0x053e2d63

08003888 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d14b      	bne.n	800393a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d021      	beq.n	8003900 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fe fdb8 	bl	8002436 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d032      	beq.n	8003932 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d12b      	bne.n	8003932 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d11f      	bne.n	8003932 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f6:	f043 0201 	orr.w	r2, r3, #1
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54
 80038fe:	e018      	b.n	8003932 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d111      	bne.n	8003932 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003912:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d105      	bne.n	8003932 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	f043 0201 	orr.w	r2, r3, #1
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f7fd ffac 	bl	8001890 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003938:	e00e      	b.n	8003958 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f7ff fb1c 	bl	8002f84 <HAL_ADC_ErrorCallback>
}
 800394c:	e004      	b.n	8003958 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4798      	blx	r3
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f7ff faf4 	bl	8002f5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399a:	f043 0204 	orr.w	r2, r3, #4
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f7ff faee 	bl	8002f84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a30:	4013      	ands	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a46:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	60d3      	str	r3, [r2, #12]
}
 8003a4c:	bf00      	nop
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <__NVIC_GetPriorityGrouping+0x18>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	0a1b      	lsrs	r3, r3, #8
 8003a66:	f003 0307 	and.w	r3, r3, #7
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	db0b      	blt.n	8003aa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	f003 021f 	and.w	r2, r3, #31
 8003a90:	4907      	ldr	r1, [pc, #28]	; (8003ab0 <__NVIC_EnableIRQ+0x38>)
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	2001      	movs	r0, #1
 8003a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e000e100 	.word	0xe000e100

08003ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	6039      	str	r1, [r7, #0]
 8003abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	db0a      	blt.n	8003ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	490c      	ldr	r1, [pc, #48]	; (8003b00 <__NVIC_SetPriority+0x4c>)
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	0112      	lsls	r2, r2, #4
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003adc:	e00a      	b.n	8003af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	4908      	ldr	r1, [pc, #32]	; (8003b04 <__NVIC_SetPriority+0x50>)
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	3b04      	subs	r3, #4
 8003aec:	0112      	lsls	r2, r2, #4
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	440b      	add	r3, r1
 8003af2:	761a      	strb	r2, [r3, #24]
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	e000e100 	.word	0xe000e100
 8003b04:	e000ed00 	.word	0xe000ed00

08003b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b089      	sub	sp, #36	; 0x24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f1c3 0307 	rsb	r3, r3, #7
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	bf28      	it	cs
 8003b26:	2304      	movcs	r3, #4
 8003b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	2b06      	cmp	r3, #6
 8003b30:	d902      	bls.n	8003b38 <NVIC_EncodePriority+0x30>
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3b03      	subs	r3, #3
 8003b36:	e000      	b.n	8003b3a <NVIC_EncodePriority+0x32>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43da      	mvns	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b50:	f04f 31ff 	mov.w	r1, #4294967295
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5a:	43d9      	mvns	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b60:	4313      	orrs	r3, r2
         );
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3724      	adds	r7, #36	; 0x24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff ff4c 	bl	8003a14 <__NVIC_SetPriorityGrouping>
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b96:	f7ff ff61 	bl	8003a5c <__NVIC_GetPriorityGrouping>
 8003b9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	6978      	ldr	r0, [r7, #20]
 8003ba2:	f7ff ffb1 	bl	8003b08 <NVIC_EncodePriority>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bac:	4611      	mov	r1, r2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff ff80 	bl	8003ab4 <__NVIC_SetPriority>
}
 8003bb4:	bf00      	nop
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff ff54 	bl	8003a78 <__NVIC_EnableIRQ>
}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e014      	b.n	8003c14 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	791b      	ldrb	r3, [r3, #4]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d105      	bne.n	8003c00 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fe f806 	bl	8001c0c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	795b      	ldrb	r3, [r3, #5]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_DAC_Start_DMA+0x1e>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e0ab      	b.n	8003d92 <HAL_DAC_Start_DMA+0x176>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2202      	movs	r2, #2
 8003c44:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d12f      	bne.n	8003cac <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4a52      	ldr	r2, [pc, #328]	; (8003d9c <HAL_DAC_Start_DMA+0x180>)
 8003c52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	4a51      	ldr	r2, [pc, #324]	; (8003da0 <HAL_DAC_Start_DMA+0x184>)
 8003c5a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a50      	ldr	r2, [pc, #320]	; (8003da4 <HAL_DAC_Start_DMA+0x188>)
 8003c62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c72:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d013      	beq.n	8003ca2 <HAL_DAC_Start_DMA+0x86>
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d845      	bhi.n	8003d0c <HAL_DAC_Start_DMA+0xf0>
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_DAC_Start_DMA+0x72>
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d005      	beq.n	8003c98 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003c8c:	e03e      	b.n	8003d0c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3308      	adds	r3, #8
 8003c94:	613b      	str	r3, [r7, #16]
        break;
 8003c96:	e03c      	b.n	8003d12 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	330c      	adds	r3, #12
 8003c9e:	613b      	str	r3, [r7, #16]
        break;
 8003ca0:	e037      	b.n	8003d12 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3310      	adds	r3, #16
 8003ca8:	613b      	str	r3, [r7, #16]
        break;
 8003caa:	e032      	b.n	8003d12 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4a3d      	ldr	r2, [pc, #244]	; (8003da8 <HAL_DAC_Start_DMA+0x18c>)
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4a3c      	ldr	r2, [pc, #240]	; (8003dac <HAL_DAC_Start_DMA+0x190>)
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4a3b      	ldr	r2, [pc, #236]	; (8003db0 <HAL_DAC_Start_DMA+0x194>)
 8003cc2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003cd2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d013      	beq.n	8003d02 <HAL_DAC_Start_DMA+0xe6>
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d817      	bhi.n	8003d10 <HAL_DAC_Start_DMA+0xf4>
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_DAC_Start_DMA+0xd2>
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d005      	beq.n	8003cf8 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003cec:	e010      	b.n	8003d10 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3314      	adds	r3, #20
 8003cf4:	613b      	str	r3, [r7, #16]
        break;
 8003cf6:	e00c      	b.n	8003d12 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3318      	adds	r3, #24
 8003cfe:	613b      	str	r3, [r7, #16]
        break;
 8003d00:	e007      	b.n	8003d12 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	331c      	adds	r3, #28
 8003d08:	613b      	str	r3, [r7, #16]
        break;
 8003d0a:	e002      	b.n	8003d12 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003d0c:	bf00      	nop
 8003d0e:	e000      	b.n	8003d12 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003d10:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d111      	bne.n	8003d3c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d26:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6898      	ldr	r0, [r3, #8]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	f000 fb6f 	bl	8004414 <HAL_DMA_Start_IT>
 8003d36:	4603      	mov	r3, r0
 8003d38:	75fb      	strb	r3, [r7, #23]
 8003d3a:	e010      	b.n	8003d5e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003d4a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68d8      	ldr	r0, [r3, #12]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	f000 fb5d 	bl	8004414 <HAL_DMA_Start_IT>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10c      	bne.n	8003d84 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6819      	ldr	r1, [r3, #0]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2201      	movs	r2, #1
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	e005      	b.n	8003d90 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f043 0204 	orr.w	r2, r3, #4
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	0800417d 	.word	0x0800417d
 8003da0:	0800419f 	.word	0x0800419f
 8003da4:	080041bb 	.word	0x080041bb
 8003da8:	08004239 	.word	0x08004239
 8003dac:	0800425b 	.word	0x0800425b
 8003db0:	08004277 	.word	0x08004277

08003db4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6819      	ldr	r1, [r3, #0]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43da      	mvns	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	400a      	ands	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6819      	ldr	r1, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2201      	movs	r2, #1
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43da      	mvns	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	400a      	ands	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10d      	bne.n	8003e1a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fb66 	bl	80044d4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	e00c      	b.n	8003e34 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fb58 	bl	80044d4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003e32:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e54:	d120      	bne.n	8003e98 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e64:	d118      	bne.n	8003e98 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2204      	movs	r2, #4
 8003e6a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f043 0201 	orr.w	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e90:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f841 	bl	8003f1a <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea6:	d120      	bne.n	8003eea <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eb6:	d118      	bne.n	8003eea <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2204      	movs	r2, #4
 8003ebc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f043 0202 	orr.w	r2, r3, #2
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003ed2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003ee2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f99d 	bl	8004224 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b088      	sub	sp, #32
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	795b      	ldrb	r3, [r3, #5]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_DAC_ConfigChannel+0x1c>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e114      	b.n	8004174 <HAL_DAC_ConfigChannel+0x246>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2202      	movs	r2, #2
 8003f54:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	f040 8081 	bne.w	8004062 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003f60:	f7fe f9b0 	bl	80022c4 <HAL_GetTick>
 8003f64:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d140      	bne.n	8003fee <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003f6c:	e018      	b.n	8003fa0 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003f6e:	f7fe f9a9 	bl	80022c4 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d911      	bls.n	8003fa0 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f043 0208 	orr.w	r2, r3, #8
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2203      	movs	r2, #3
 8003f9a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e0e9      	b.n	8004174 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1df      	bne.n	8003f6e <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003fae:	2001      	movs	r0, #1
 8003fb0:	f7fe f994 	bl	80022dc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	6992      	ldr	r2, [r2, #24]
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
 8003fbe:	e023      	b.n	8004008 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003fc0:	f7fe f980 	bl	80022c4 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d90f      	bls.n	8003fee <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	da0a      	bge.n	8003fee <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f043 0208 	orr.w	r2, r3, #8
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e0c2      	b.n	8004174 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	dbe3      	blt.n	8003fc0 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	f7fe f96f 	bl	80022dc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	6992      	ldr	r2, [r2, #24]
 8004006:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004018:	fa01 f303 	lsl.w	r3, r1, r3
 800401c:	43db      	mvns	r3, r3
 800401e:	ea02 0103 	and.w	r1, r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	69da      	ldr	r2, [r3, #28]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	409a      	lsls	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	21ff      	movs	r1, #255	; 0xff
 8004044:	fa01 f303 	lsl.w	r3, r1, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	ea02 0103 	and.w	r1, r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	6a1a      	ldr	r2, [r3, #32]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	409a      	lsls	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d11d      	bne.n	80040a6 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	221f      	movs	r2, #31
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	43db      	mvns	r3, r3
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4013      	ands	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ac:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2207      	movs	r2, #7
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43db      	mvns	r3, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4013      	ands	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6819      	ldr	r1, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	43da      	mvns	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	400a      	ands	r2, r1
 800410a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	f640 72fc 	movw	r2, #4092	; 0xffc
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43db      	mvns	r3, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4013      	ands	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f003 0310 	and.w	r3, r3, #16
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6819      	ldr	r1, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	22c0      	movs	r2, #192	; 0xc0
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	43da      	mvns	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	400a      	ands	r2, r1
 8004164:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f7fd faf2 	bl	8001774 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2201      	movs	r2, #1
 8004194:	711a      	strb	r2, [r3, #4]
}
 8004196:	bf00      	nop
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7ff fea0 	bl	8003ef2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f043 0204 	orr.w	r2, r3, #4
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f7ff fe96 	bl	8003f06 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	711a      	strb	r2, [r3, #4]
}
 80041e0:	bf00      	nop
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f7ff ffce 	bl	80041e8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2201      	movs	r2, #1
 8004250:	711a      	strb	r2, [r3, #4]
}
 8004252:	bf00      	nop
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7ff ffc7 	bl	80041fc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800426e:	bf00      	nop
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f043 0204 	orr.w	r2, r3, #4
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f7ff ffbd 	bl	8004210 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2201      	movs	r2, #1
 800429a:	711a      	strb	r2, [r3, #4]
}
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e098      	b.n	80043e8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	4b4d      	ldr	r3, [pc, #308]	; (80043f4 <HAL_DMA_Init+0x150>)
 80042be:	429a      	cmp	r2, r3
 80042c0:	d80f      	bhi.n	80042e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	4b4b      	ldr	r3, [pc, #300]	; (80043f8 <HAL_DMA_Init+0x154>)
 80042ca:	4413      	add	r3, r2
 80042cc:	4a4b      	ldr	r2, [pc, #300]	; (80043fc <HAL_DMA_Init+0x158>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	091b      	lsrs	r3, r3, #4
 80042d4:	009a      	lsls	r2, r3, #2
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a48      	ldr	r2, [pc, #288]	; (8004400 <HAL_DMA_Init+0x15c>)
 80042de:	641a      	str	r2, [r3, #64]	; 0x40
 80042e0:	e00e      	b.n	8004300 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	4b46      	ldr	r3, [pc, #280]	; (8004404 <HAL_DMA_Init+0x160>)
 80042ea:	4413      	add	r3, r2
 80042ec:	4a43      	ldr	r2, [pc, #268]	; (80043fc <HAL_DMA_Init+0x158>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	091b      	lsrs	r3, r3, #4
 80042f4:	009a      	lsls	r2, r3, #2
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a42      	ldr	r2, [pc, #264]	; (8004408 <HAL_DMA_Init+0x164>)
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004324:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004330:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800433c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800435a:	d039      	beq.n	80043d0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	4a27      	ldr	r2, [pc, #156]	; (8004400 <HAL_DMA_Init+0x15c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d11a      	bne.n	800439c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004366:	4b29      	ldr	r3, [pc, #164]	; (800440c <HAL_DMA_Init+0x168>)
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	f003 031c 	and.w	r3, r3, #28
 8004372:	210f      	movs	r1, #15
 8004374:	fa01 f303 	lsl.w	r3, r1, r3
 8004378:	43db      	mvns	r3, r3
 800437a:	4924      	ldr	r1, [pc, #144]	; (800440c <HAL_DMA_Init+0x168>)
 800437c:	4013      	ands	r3, r2
 800437e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004380:	4b22      	ldr	r3, [pc, #136]	; (800440c <HAL_DMA_Init+0x168>)
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6859      	ldr	r1, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438c:	f003 031c 	and.w	r3, r3, #28
 8004390:	fa01 f303 	lsl.w	r3, r1, r3
 8004394:	491d      	ldr	r1, [pc, #116]	; (800440c <HAL_DMA_Init+0x168>)
 8004396:	4313      	orrs	r3, r2
 8004398:	600b      	str	r3, [r1, #0]
 800439a:	e019      	b.n	80043d0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800439c:	4b1c      	ldr	r3, [pc, #112]	; (8004410 <HAL_DMA_Init+0x16c>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a4:	f003 031c 	and.w	r3, r3, #28
 80043a8:	210f      	movs	r1, #15
 80043aa:	fa01 f303 	lsl.w	r3, r1, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	4917      	ldr	r1, [pc, #92]	; (8004410 <HAL_DMA_Init+0x16c>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80043b6:	4b16      	ldr	r3, [pc, #88]	; (8004410 <HAL_DMA_Init+0x16c>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6859      	ldr	r1, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	f003 031c 	and.w	r3, r3, #28
 80043c6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ca:	4911      	ldr	r1, [pc, #68]	; (8004410 <HAL_DMA_Init+0x16c>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	40020407 	.word	0x40020407
 80043f8:	bffdfff8 	.word	0xbffdfff8
 80043fc:	cccccccd 	.word	0xcccccccd
 8004400:	40020000 	.word	0x40020000
 8004404:	bffdfbf8 	.word	0xbffdfbf8
 8004408:	40020400 	.word	0x40020400
 800440c:	400200a8 	.word	0x400200a8
 8004410:	400204a8 	.word	0x400204a8

08004414 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_DMA_Start_IT+0x20>
 8004430:	2302      	movs	r3, #2
 8004432:	e04b      	b.n	80044cc <HAL_DMA_Start_IT+0xb8>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b01      	cmp	r3, #1
 8004446:	d13a      	bne.n	80044be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0201 	bic.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	68b9      	ldr	r1, [r7, #8]
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f91e 	bl	80046ae <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	2b00      	cmp	r3, #0
 8004478:	d008      	beq.n	800448c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f042 020e 	orr.w	r2, r2, #14
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	e00f      	b.n	80044ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0204 	bic.w	r2, r2, #4
 800449a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 020a 	orr.w	r2, r2, #10
 80044aa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e005      	b.n	80044ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80044c6:	2302      	movs	r3, #2
 80044c8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80044ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d008      	beq.n	80044fe <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2204      	movs	r2, #4
 80044f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e022      	b.n	8004544 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 020e 	bic.w	r2, r2, #14
 800450c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0201 	bic.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004522:	f003 021c 	and.w	r2, r3, #28
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	2101      	movs	r1, #1
 800452c:	fa01 f202 	lsl.w	r2, r1, r2
 8004530:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004542:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004544:	4618      	mov	r0, r3
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456c:	f003 031c 	and.w	r3, r3, #28
 8004570:	2204      	movs	r2, #4
 8004572:	409a      	lsls	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4013      	ands	r3, r2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d026      	beq.n	80045ca <HAL_DMA_IRQHandler+0x7a>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b00      	cmp	r3, #0
 8004584:	d021      	beq.n	80045ca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d107      	bne.n	80045a4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0204 	bic.w	r2, r2, #4
 80045a2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a8:	f003 021c 	and.w	r2, r3, #28
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	2104      	movs	r1, #4
 80045b2:	fa01 f202 	lsl.w	r2, r1, r2
 80045b6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d071      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80045c8:	e06c      	b.n	80046a4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ce:	f003 031c 	and.w	r3, r3, #28
 80045d2:	2202      	movs	r2, #2
 80045d4:	409a      	lsls	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4013      	ands	r3, r2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d02e      	beq.n	800463c <HAL_DMA_IRQHandler+0xec>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d029      	beq.n	800463c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10b      	bne.n	800460e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 020a 	bic.w	r2, r2, #10
 8004604:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	f003 021c 	and.w	r2, r3, #28
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	2102      	movs	r1, #2
 800461c:	fa01 f202 	lsl.w	r2, r1, r2
 8004620:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	2b00      	cmp	r3, #0
 8004630:	d038      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800463a:	e033      	b.n	80046a4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004640:	f003 031c 	and.w	r3, r3, #28
 8004644:	2208      	movs	r2, #8
 8004646:	409a      	lsls	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4013      	ands	r3, r2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d02a      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x156>
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d025      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 020e 	bic.w	r2, r2, #14
 8004668:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466e:	f003 021c 	and.w	r2, r3, #28
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	2101      	movs	r1, #1
 8004678:	fa01 f202 	lsl.w	r2, r1, r2
 800467c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004698:	2b00      	cmp	r3, #0
 800469a:	d004      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
}
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b085      	sub	sp, #20
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c0:	f003 021c 	and.w	r2, r3, #28
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	2101      	movs	r1, #1
 80046ca:	fa01 f202 	lsl.w	r2, r1, r2
 80046ce:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	2b10      	cmp	r3, #16
 80046de:	d108      	bne.n	80046f2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80046f0:	e007      	b.n	8004702 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	60da      	str	r2, [r3, #12]
}
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
	...

08004710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800471e:	e17f      	b.n	8004a20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	2101      	movs	r1, #1
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	fa01 f303 	lsl.w	r3, r1, r3
 800472c:	4013      	ands	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 8171 	beq.w	8004a1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d005      	beq.n	8004750 <HAL_GPIO_Init+0x40>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d130      	bne.n	80047b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	2203      	movs	r2, #3
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4013      	ands	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004786:	2201      	movs	r2, #1
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4013      	ands	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	091b      	lsrs	r3, r3, #4
 800479c:	f003 0201 	and.w	r2, r3, #1
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d118      	bne.n	80047f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80047c4:	2201      	movs	r2, #1
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	43db      	mvns	r3, r3
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4013      	ands	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	08db      	lsrs	r3, r3, #3
 80047da:	f003 0201 	and.w	r2, r3, #1
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	2b03      	cmp	r3, #3
 80047fa:	d017      	beq.n	800482c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	2203      	movs	r2, #3
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	43db      	mvns	r3, r3
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4013      	ands	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d123      	bne.n	8004880 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	08da      	lsrs	r2, r3, #3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3208      	adds	r2, #8
 8004840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004844:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	220f      	movs	r2, #15
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	43db      	mvns	r3, r3
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4013      	ands	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	08da      	lsrs	r2, r3, #3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3208      	adds	r2, #8
 800487a:	6939      	ldr	r1, [r7, #16]
 800487c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	2203      	movs	r2, #3
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	43db      	mvns	r3, r3
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4013      	ands	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 0203 	and.w	r2, r3, #3
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 80ac 	beq.w	8004a1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048c2:	4b5f      	ldr	r3, [pc, #380]	; (8004a40 <HAL_GPIO_Init+0x330>)
 80048c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c6:	4a5e      	ldr	r2, [pc, #376]	; (8004a40 <HAL_GPIO_Init+0x330>)
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	6613      	str	r3, [r2, #96]	; 0x60
 80048ce:	4b5c      	ldr	r3, [pc, #368]	; (8004a40 <HAL_GPIO_Init+0x330>)
 80048d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	60bb      	str	r3, [r7, #8]
 80048d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80048da:	4a5a      	ldr	r2, [pc, #360]	; (8004a44 <HAL_GPIO_Init+0x334>)
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	089b      	lsrs	r3, r3, #2
 80048e0:	3302      	adds	r3, #2
 80048e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	220f      	movs	r2, #15
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43db      	mvns	r3, r3
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4013      	ands	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004904:	d025      	beq.n	8004952 <HAL_GPIO_Init+0x242>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a4f      	ldr	r2, [pc, #316]	; (8004a48 <HAL_GPIO_Init+0x338>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01f      	beq.n	800494e <HAL_GPIO_Init+0x23e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a4e      	ldr	r2, [pc, #312]	; (8004a4c <HAL_GPIO_Init+0x33c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d019      	beq.n	800494a <HAL_GPIO_Init+0x23a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a4d      	ldr	r2, [pc, #308]	; (8004a50 <HAL_GPIO_Init+0x340>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <HAL_GPIO_Init+0x236>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a4c      	ldr	r2, [pc, #304]	; (8004a54 <HAL_GPIO_Init+0x344>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00d      	beq.n	8004942 <HAL_GPIO_Init+0x232>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a4b      	ldr	r2, [pc, #300]	; (8004a58 <HAL_GPIO_Init+0x348>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <HAL_GPIO_Init+0x22e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a4a      	ldr	r2, [pc, #296]	; (8004a5c <HAL_GPIO_Init+0x34c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d101      	bne.n	800493a <HAL_GPIO_Init+0x22a>
 8004936:	2306      	movs	r3, #6
 8004938:	e00c      	b.n	8004954 <HAL_GPIO_Init+0x244>
 800493a:	2307      	movs	r3, #7
 800493c:	e00a      	b.n	8004954 <HAL_GPIO_Init+0x244>
 800493e:	2305      	movs	r3, #5
 8004940:	e008      	b.n	8004954 <HAL_GPIO_Init+0x244>
 8004942:	2304      	movs	r3, #4
 8004944:	e006      	b.n	8004954 <HAL_GPIO_Init+0x244>
 8004946:	2303      	movs	r3, #3
 8004948:	e004      	b.n	8004954 <HAL_GPIO_Init+0x244>
 800494a:	2302      	movs	r3, #2
 800494c:	e002      	b.n	8004954 <HAL_GPIO_Init+0x244>
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <HAL_GPIO_Init+0x244>
 8004952:	2300      	movs	r3, #0
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	f002 0203 	and.w	r2, r2, #3
 800495a:	0092      	lsls	r2, r2, #2
 800495c:	4093      	lsls	r3, r2
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004964:	4937      	ldr	r1, [pc, #220]	; (8004a44 <HAL_GPIO_Init+0x334>)
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	089b      	lsrs	r3, r3, #2
 800496a:	3302      	adds	r3, #2
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004972:	4b3b      	ldr	r3, [pc, #236]	; (8004a60 <HAL_GPIO_Init+0x350>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	43db      	mvns	r3, r3
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4013      	ands	r3, r2
 8004980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004996:	4a32      	ldr	r2, [pc, #200]	; (8004a60 <HAL_GPIO_Init+0x350>)
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800499c:	4b30      	ldr	r3, [pc, #192]	; (8004a60 <HAL_GPIO_Init+0x350>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	43db      	mvns	r3, r3
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4013      	ands	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049c0:	4a27      	ldr	r2, [pc, #156]	; (8004a60 <HAL_GPIO_Init+0x350>)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80049c6:	4b26      	ldr	r3, [pc, #152]	; (8004a60 <HAL_GPIO_Init+0x350>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	43db      	mvns	r3, r3
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4013      	ands	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049ea:	4a1d      	ldr	r2, [pc, #116]	; (8004a60 <HAL_GPIO_Init+0x350>)
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80049f0:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <HAL_GPIO_Init+0x350>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	43db      	mvns	r3, r3
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4013      	ands	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a14:	4a12      	ldr	r2, [pc, #72]	; (8004a60 <HAL_GPIO_Init+0x350>)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f47f ae78 	bne.w	8004720 <HAL_GPIO_Init+0x10>
  }
}
 8004a30:	bf00      	nop
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40021000 	.word	0x40021000
 8004a44:	40010000 	.word	0x40010000
 8004a48:	48000400 	.word	0x48000400
 8004a4c:	48000800 	.word	0x48000800
 8004a50:	48000c00 	.word	0x48000c00
 8004a54:	48001000 	.word	0x48001000
 8004a58:	48001400 	.word	0x48001400
 8004a5c:	48001800 	.word	0x48001800
 8004a60:	40010400 	.word	0x40010400

08004a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	807b      	strh	r3, [r7, #2]
 8004a70:	4613      	mov	r3, r2
 8004a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a74:	787b      	ldrb	r3, [r7, #1]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a7a:	887a      	ldrh	r2, [r7, #2]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a80:	e002      	b.n	8004a88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a82:	887a      	ldrh	r2, [r7, #2]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a9e:	4b08      	ldr	r3, [pc, #32]	; (8004ac0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d006      	beq.n	8004ab8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004aaa:	4a05      	ldr	r2, [pc, #20]	; (8004ac0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004aac:	88fb      	ldrh	r3, [r7, #6]
 8004aae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ab0:	88fb      	ldrh	r3, [r7, #6]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fc fece 	bl	8001854 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ab8:	bf00      	nop
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40010400 	.word	0x40010400

08004ac4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004ac8:	4b04      	ldr	r3, [pc, #16]	; (8004adc <HAL_PWREx_GetVoltageRange+0x18>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40007000 	.word	0x40007000

08004ae0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aee:	d130      	bne.n	8004b52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004af0:	4b23      	ldr	r3, [pc, #140]	; (8004b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004afc:	d038      	beq.n	8004b70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004afe:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b06:	4a1e      	ldr	r2, [pc, #120]	; (8004b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b0e:	4b1d      	ldr	r3, [pc, #116]	; (8004b84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2232      	movs	r2, #50	; 0x32
 8004b14:	fb02 f303 	mul.w	r3, r2, r3
 8004b18:	4a1b      	ldr	r2, [pc, #108]	; (8004b88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1e:	0c9b      	lsrs	r3, r3, #18
 8004b20:	3301      	adds	r3, #1
 8004b22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b24:	e002      	b.n	8004b2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b2c:	4b14      	ldr	r3, [pc, #80]	; (8004b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b38:	d102      	bne.n	8004b40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f2      	bne.n	8004b26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b40:	4b0f      	ldr	r3, [pc, #60]	; (8004b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b4c:	d110      	bne.n	8004b70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e00f      	b.n	8004b72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b52:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b5e:	d007      	beq.n	8004b70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b60:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b68:	4a05      	ldr	r2, [pc, #20]	; (8004b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40007000 	.word	0x40007000
 8004b84:	20000008 	.word	0x20000008
 8004b88:	431bde83 	.word	0x431bde83

08004b8c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e3ca      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b9e:	4b97      	ldr	r3, [pc, #604]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 030c 	and.w	r3, r3, #12
 8004ba6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ba8:	4b94      	ldr	r3, [pc, #592]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0310 	and.w	r3, r3, #16
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 80e4 	beq.w	8004d88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d007      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x4a>
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	2b0c      	cmp	r3, #12
 8004bca:	f040 808b 	bne.w	8004ce4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	f040 8087 	bne.w	8004ce4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bd6:	4b89      	ldr	r3, [pc, #548]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <HAL_RCC_OscConfig+0x62>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e3a2      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1a      	ldr	r2, [r3, #32]
 8004bf2:	4b82      	ldr	r3, [pc, #520]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d004      	beq.n	8004c08 <HAL_RCC_OscConfig+0x7c>
 8004bfe:	4b7f      	ldr	r3, [pc, #508]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c06:	e005      	b.n	8004c14 <HAL_RCC_OscConfig+0x88>
 8004c08:	4b7c      	ldr	r3, [pc, #496]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c0e:	091b      	lsrs	r3, r3, #4
 8004c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d223      	bcs.n	8004c60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fd87 	bl	8005730 <RCC_SetFlashLatencyFromMSIRange>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e383      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c2c:	4b73      	ldr	r3, [pc, #460]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a72      	ldr	r2, [pc, #456]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004c32:	f043 0308 	orr.w	r3, r3, #8
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	4b70      	ldr	r3, [pc, #448]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	496d      	ldr	r1, [pc, #436]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c4a:	4b6c      	ldr	r3, [pc, #432]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	4968      	ldr	r1, [pc, #416]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	604b      	str	r3, [r1, #4]
 8004c5e:	e025      	b.n	8004cac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c60:	4b66      	ldr	r3, [pc, #408]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a65      	ldr	r2, [pc, #404]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004c66:	f043 0308 	orr.w	r3, r3, #8
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	4b63      	ldr	r3, [pc, #396]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	4960      	ldr	r1, [pc, #384]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c7e:	4b5f      	ldr	r3, [pc, #380]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	021b      	lsls	r3, r3, #8
 8004c8c:	495b      	ldr	r1, [pc, #364]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d109      	bne.n	8004cac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fd47 	bl	8005730 <RCC_SetFlashLatencyFromMSIRange>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e343      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cac:	f000 fc4a 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	4b52      	ldr	r3, [pc, #328]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	091b      	lsrs	r3, r3, #4
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	4950      	ldr	r1, [pc, #320]	; (8004e00 <HAL_RCC_OscConfig+0x274>)
 8004cbe:	5ccb      	ldrb	r3, [r1, r3]
 8004cc0:	f003 031f 	and.w	r3, r3, #31
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc8:	4a4e      	ldr	r2, [pc, #312]	; (8004e04 <HAL_RCC_OscConfig+0x278>)
 8004cca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ccc:	4b4e      	ldr	r3, [pc, #312]	; (8004e08 <HAL_RCC_OscConfig+0x27c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fd f8dd 	bl	8001e90 <HAL_InitTick>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d052      	beq.n	8004d86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
 8004ce2:	e327      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d032      	beq.n	8004d52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cec:	4b43      	ldr	r3, [pc, #268]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a42      	ldr	r2, [pc, #264]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cf8:	f7fd fae4 	bl	80022c4 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d00:	f7fd fae0 	bl	80022c4 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e310      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d12:	4b3a      	ldr	r3, [pc, #232]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f0      	beq.n	8004d00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d1e:	4b37      	ldr	r3, [pc, #220]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a36      	ldr	r2, [pc, #216]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004d24:	f043 0308 	orr.w	r3, r3, #8
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	4b34      	ldr	r3, [pc, #208]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	4931      	ldr	r1, [pc, #196]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d3c:	4b2f      	ldr	r3, [pc, #188]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	492c      	ldr	r1, [pc, #176]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	604b      	str	r3, [r1, #4]
 8004d50:	e01a      	b.n	8004d88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d52:	4b2a      	ldr	r3, [pc, #168]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a29      	ldr	r2, [pc, #164]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d5e:	f7fd fab1 	bl	80022c4 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d66:	f7fd faad 	bl	80022c4 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e2dd      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d78:	4b20      	ldr	r3, [pc, #128]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f0      	bne.n	8004d66 <HAL_RCC_OscConfig+0x1da>
 8004d84:	e000      	b.n	8004d88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d074      	beq.n	8004e7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d005      	beq.n	8004da6 <HAL_RCC_OscConfig+0x21a>
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b0c      	cmp	r3, #12
 8004d9e:	d10e      	bne.n	8004dbe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d10b      	bne.n	8004dbe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da6:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d064      	beq.n	8004e7c <HAL_RCC_OscConfig+0x2f0>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d160      	bne.n	8004e7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e2ba      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc6:	d106      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x24a>
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a0b      	ldr	r2, [pc, #44]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	e026      	b.n	8004e24 <HAL_RCC_OscConfig+0x298>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dde:	d115      	bne.n	8004e0c <HAL_RCC_OscConfig+0x280>
 8004de0:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a05      	ldr	r2, [pc, #20]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004de6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	4b03      	ldr	r3, [pc, #12]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a02      	ldr	r2, [pc, #8]	; (8004dfc <HAL_RCC_OscConfig+0x270>)
 8004df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	e014      	b.n	8004e24 <HAL_RCC_OscConfig+0x298>
 8004dfa:	bf00      	nop
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	08008e74 	.word	0x08008e74
 8004e04:	20000008 	.word	0x20000008
 8004e08:	2000000c 	.word	0x2000000c
 8004e0c:	4ba0      	ldr	r3, [pc, #640]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a9f      	ldr	r2, [pc, #636]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	4b9d      	ldr	r3, [pc, #628]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a9c      	ldr	r2, [pc, #624]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d013      	beq.n	8004e54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fd fa4a 	bl	80022c4 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e34:	f7fd fa46 	bl	80022c4 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b64      	cmp	r3, #100	; 0x64
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e276      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e46:	4b92      	ldr	r3, [pc, #584]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCC_OscConfig+0x2a8>
 8004e52:	e014      	b.n	8004e7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e54:	f7fd fa36 	bl	80022c4 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e5c:	f7fd fa32 	bl	80022c4 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b64      	cmp	r3, #100	; 0x64
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e262      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e6e:	4b88      	ldr	r3, [pc, #544]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x2d0>
 8004e7a:	e000      	b.n	8004e7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d060      	beq.n	8004f4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d005      	beq.n	8004e9c <HAL_RCC_OscConfig+0x310>
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	2b0c      	cmp	r3, #12
 8004e94:	d119      	bne.n	8004eca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d116      	bne.n	8004eca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e9c:	4b7c      	ldr	r3, [pc, #496]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x328>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e23f      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb4:	4b76      	ldr	r3, [pc, #472]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	061b      	lsls	r3, r3, #24
 8004ec2:	4973      	ldr	r1, [pc, #460]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ec8:	e040      	b.n	8004f4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d023      	beq.n	8004f1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ed2:	4b6f      	ldr	r3, [pc, #444]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a6e      	ldr	r2, [pc, #440]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ede:	f7fd f9f1 	bl	80022c4 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee6:	f7fd f9ed 	bl	80022c4 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e21d      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ef8:	4b65      	ldr	r3, [pc, #404]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f04:	4b62      	ldr	r3, [pc, #392]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	061b      	lsls	r3, r3, #24
 8004f12:	495f      	ldr	r1, [pc, #380]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	604b      	str	r3, [r1, #4]
 8004f18:	e018      	b.n	8004f4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f1a:	4b5d      	ldr	r3, [pc, #372]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a5c      	ldr	r2, [pc, #368]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f26:	f7fd f9cd 	bl	80022c4 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f2e:	f7fd f9c9 	bl	80022c4 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e1f9      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f40:	4b53      	ldr	r3, [pc, #332]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1f0      	bne.n	8004f2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0308 	and.w	r3, r3, #8
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d03c      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01c      	beq.n	8004f9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f60:	4b4b      	ldr	r3, [pc, #300]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f66:	4a4a      	ldr	r2, [pc, #296]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f70:	f7fd f9a8 	bl	80022c4 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f78:	f7fd f9a4 	bl	80022c4 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e1d4      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f8a:	4b41      	ldr	r3, [pc, #260]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0ef      	beq.n	8004f78 <HAL_RCC_OscConfig+0x3ec>
 8004f98:	e01b      	b.n	8004fd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f9a:	4b3d      	ldr	r3, [pc, #244]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fa0:	4a3b      	ldr	r2, [pc, #236]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004faa:	f7fd f98b 	bl	80022c4 <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fb2:	f7fd f987 	bl	80022c4 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e1b7      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fc4:	4b32      	ldr	r3, [pc, #200]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1ef      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 80a6 	beq.w	800512c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fe4:	4b2a      	ldr	r3, [pc, #168]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10d      	bne.n	800500c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff0:	4b27      	ldr	r3, [pc, #156]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff4:	4a26      	ldr	r2, [pc, #152]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8004ffc:	4b24      	ldr	r3, [pc, #144]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005004:	60bb      	str	r3, [r7, #8]
 8005006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005008:	2301      	movs	r3, #1
 800500a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800500c:	4b21      	ldr	r3, [pc, #132]	; (8005094 <HAL_RCC_OscConfig+0x508>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005014:	2b00      	cmp	r3, #0
 8005016:	d118      	bne.n	800504a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005018:	4b1e      	ldr	r3, [pc, #120]	; (8005094 <HAL_RCC_OscConfig+0x508>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1d      	ldr	r2, [pc, #116]	; (8005094 <HAL_RCC_OscConfig+0x508>)
 800501e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005022:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005024:	f7fd f94e 	bl	80022c4 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800502c:	f7fd f94a 	bl	80022c4 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e17a      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800503e:	4b15      	ldr	r3, [pc, #84]	; (8005094 <HAL_RCC_OscConfig+0x508>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f0      	beq.n	800502c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d108      	bne.n	8005064 <HAL_RCC_OscConfig+0x4d8>
 8005052:	4b0f      	ldr	r3, [pc, #60]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8005054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005058:	4a0d      	ldr	r2, [pc, #52]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 800505a:	f043 0301 	orr.w	r3, r3, #1
 800505e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005062:	e029      	b.n	80050b8 <HAL_RCC_OscConfig+0x52c>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b05      	cmp	r3, #5
 800506a:	d115      	bne.n	8005098 <HAL_RCC_OscConfig+0x50c>
 800506c:	4b08      	ldr	r3, [pc, #32]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005072:	4a07      	ldr	r2, [pc, #28]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8005074:	f043 0304 	orr.w	r3, r3, #4
 8005078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800507c:	4b04      	ldr	r3, [pc, #16]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005082:	4a03      	ldr	r2, [pc, #12]	; (8005090 <HAL_RCC_OscConfig+0x504>)
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800508c:	e014      	b.n	80050b8 <HAL_RCC_OscConfig+0x52c>
 800508e:	bf00      	nop
 8005090:	40021000 	.word	0x40021000
 8005094:	40007000 	.word	0x40007000
 8005098:	4b9c      	ldr	r3, [pc, #624]	; (800530c <HAL_RCC_OscConfig+0x780>)
 800509a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509e:	4a9b      	ldr	r2, [pc, #620]	; (800530c <HAL_RCC_OscConfig+0x780>)
 80050a0:	f023 0301 	bic.w	r3, r3, #1
 80050a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050a8:	4b98      	ldr	r3, [pc, #608]	; (800530c <HAL_RCC_OscConfig+0x780>)
 80050aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ae:	4a97      	ldr	r2, [pc, #604]	; (800530c <HAL_RCC_OscConfig+0x780>)
 80050b0:	f023 0304 	bic.w	r3, r3, #4
 80050b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d016      	beq.n	80050ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c0:	f7fd f900 	bl	80022c4 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050c6:	e00a      	b.n	80050de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c8:	f7fd f8fc 	bl	80022c4 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e12a      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050de:	4b8b      	ldr	r3, [pc, #556]	; (800530c <HAL_RCC_OscConfig+0x780>)
 80050e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0ed      	beq.n	80050c8 <HAL_RCC_OscConfig+0x53c>
 80050ec:	e015      	b.n	800511a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ee:	f7fd f8e9 	bl	80022c4 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050f4:	e00a      	b.n	800510c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f6:	f7fd f8e5 	bl	80022c4 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	f241 3288 	movw	r2, #5000	; 0x1388
 8005104:	4293      	cmp	r3, r2
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e113      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800510c:	4b7f      	ldr	r3, [pc, #508]	; (800530c <HAL_RCC_OscConfig+0x780>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1ed      	bne.n	80050f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800511a:	7ffb      	ldrb	r3, [r7, #31]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d105      	bne.n	800512c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005120:	4b7a      	ldr	r3, [pc, #488]	; (800530c <HAL_RCC_OscConfig+0x780>)
 8005122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005124:	4a79      	ldr	r2, [pc, #484]	; (800530c <HAL_RCC_OscConfig+0x780>)
 8005126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800512a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80fe 	beq.w	8005332 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	2b02      	cmp	r3, #2
 800513c:	f040 80d0 	bne.w	80052e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005140:	4b72      	ldr	r3, [pc, #456]	; (800530c <HAL_RCC_OscConfig+0x780>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f003 0203 	and.w	r2, r3, #3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	429a      	cmp	r2, r3
 8005152:	d130      	bne.n	80051b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	3b01      	subs	r3, #1
 8005160:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005162:	429a      	cmp	r2, r3
 8005164:	d127      	bne.n	80051b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005170:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005172:	429a      	cmp	r2, r3
 8005174:	d11f      	bne.n	80051b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005180:	2a07      	cmp	r2, #7
 8005182:	bf14      	ite	ne
 8005184:	2201      	movne	r2, #1
 8005186:	2200      	moveq	r2, #0
 8005188:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800518a:	4293      	cmp	r3, r2
 800518c:	d113      	bne.n	80051b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	3b01      	subs	r3, #1
 800519c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800519e:	429a      	cmp	r2, r3
 80051a0:	d109      	bne.n	80051b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	085b      	lsrs	r3, r3, #1
 80051ae:	3b01      	subs	r3, #1
 80051b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d06e      	beq.n	8005294 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	d069      	beq.n	8005290 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051bc:	4b53      	ldr	r3, [pc, #332]	; (800530c <HAL_RCC_OscConfig+0x780>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d105      	bne.n	80051d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80051c8:	4b50      	ldr	r3, [pc, #320]	; (800530c <HAL_RCC_OscConfig+0x780>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e0ad      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80051d8:	4b4c      	ldr	r3, [pc, #304]	; (800530c <HAL_RCC_OscConfig+0x780>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a4b      	ldr	r2, [pc, #300]	; (800530c <HAL_RCC_OscConfig+0x780>)
 80051de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051e4:	f7fd f86e 	bl	80022c4 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ec:	f7fd f86a 	bl	80022c4 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e09a      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051fe:	4b43      	ldr	r3, [pc, #268]	; (800530c <HAL_RCC_OscConfig+0x780>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1f0      	bne.n	80051ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800520a:	4b40      	ldr	r3, [pc, #256]	; (800530c <HAL_RCC_OscConfig+0x780>)
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	4b40      	ldr	r3, [pc, #256]	; (8005310 <HAL_RCC_OscConfig+0x784>)
 8005210:	4013      	ands	r3, r2
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800521a:	3a01      	subs	r2, #1
 800521c:	0112      	lsls	r2, r2, #4
 800521e:	4311      	orrs	r1, r2
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005224:	0212      	lsls	r2, r2, #8
 8005226:	4311      	orrs	r1, r2
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800522c:	0852      	lsrs	r2, r2, #1
 800522e:	3a01      	subs	r2, #1
 8005230:	0552      	lsls	r2, r2, #21
 8005232:	4311      	orrs	r1, r2
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005238:	0852      	lsrs	r2, r2, #1
 800523a:	3a01      	subs	r2, #1
 800523c:	0652      	lsls	r2, r2, #25
 800523e:	4311      	orrs	r1, r2
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005244:	0912      	lsrs	r2, r2, #4
 8005246:	0452      	lsls	r2, r2, #17
 8005248:	430a      	orrs	r2, r1
 800524a:	4930      	ldr	r1, [pc, #192]	; (800530c <HAL_RCC_OscConfig+0x780>)
 800524c:	4313      	orrs	r3, r2
 800524e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005250:	4b2e      	ldr	r3, [pc, #184]	; (800530c <HAL_RCC_OscConfig+0x780>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a2d      	ldr	r2, [pc, #180]	; (800530c <HAL_RCC_OscConfig+0x780>)
 8005256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800525a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800525c:	4b2b      	ldr	r3, [pc, #172]	; (800530c <HAL_RCC_OscConfig+0x780>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	4a2a      	ldr	r2, [pc, #168]	; (800530c <HAL_RCC_OscConfig+0x780>)
 8005262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005266:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005268:	f7fd f82c 	bl	80022c4 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005270:	f7fd f828 	bl	80022c4 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e058      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005282:	4b22      	ldr	r3, [pc, #136]	; (800530c <HAL_RCC_OscConfig+0x780>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0f0      	beq.n	8005270 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800528e:	e050      	b.n	8005332 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e04f      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005294:	4b1d      	ldr	r3, [pc, #116]	; (800530c <HAL_RCC_OscConfig+0x780>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d148      	bne.n	8005332 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052a0:	4b1a      	ldr	r3, [pc, #104]	; (800530c <HAL_RCC_OscConfig+0x780>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a19      	ldr	r2, [pc, #100]	; (800530c <HAL_RCC_OscConfig+0x780>)
 80052a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052ac:	4b17      	ldr	r3, [pc, #92]	; (800530c <HAL_RCC_OscConfig+0x780>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	4a16      	ldr	r2, [pc, #88]	; (800530c <HAL_RCC_OscConfig+0x780>)
 80052b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052b8:	f7fd f804 	bl	80022c4 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c0:	f7fd f800 	bl	80022c4 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e030      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052d2:	4b0e      	ldr	r3, [pc, #56]	; (800530c <HAL_RCC_OscConfig+0x780>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0f0      	beq.n	80052c0 <HAL_RCC_OscConfig+0x734>
 80052de:	e028      	b.n	8005332 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	2b0c      	cmp	r3, #12
 80052e4:	d023      	beq.n	800532e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e6:	4b09      	ldr	r3, [pc, #36]	; (800530c <HAL_RCC_OscConfig+0x780>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a08      	ldr	r2, [pc, #32]	; (800530c <HAL_RCC_OscConfig+0x780>)
 80052ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f2:	f7fc ffe7 	bl	80022c4 <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052f8:	e00c      	b.n	8005314 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052fa:	f7fc ffe3 	bl	80022c4 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d905      	bls.n	8005314 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e013      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
 800530c:	40021000 	.word	0x40021000
 8005310:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005314:	4b09      	ldr	r3, [pc, #36]	; (800533c <HAL_RCC_OscConfig+0x7b0>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1ec      	bne.n	80052fa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005320:	4b06      	ldr	r3, [pc, #24]	; (800533c <HAL_RCC_OscConfig+0x7b0>)
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	4905      	ldr	r1, [pc, #20]	; (800533c <HAL_RCC_OscConfig+0x7b0>)
 8005326:	4b06      	ldr	r3, [pc, #24]	; (8005340 <HAL_RCC_OscConfig+0x7b4>)
 8005328:	4013      	ands	r3, r2
 800532a:	60cb      	str	r3, [r1, #12]
 800532c:	e001      	b.n	8005332 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3720      	adds	r7, #32
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40021000 	.word	0x40021000
 8005340:	feeefffc 	.word	0xfeeefffc

08005344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0e7      	b.n	8005528 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005358:	4b75      	ldr	r3, [pc, #468]	; (8005530 <HAL_RCC_ClockConfig+0x1ec>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d910      	bls.n	8005388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005366:	4b72      	ldr	r3, [pc, #456]	; (8005530 <HAL_RCC_ClockConfig+0x1ec>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f023 0207 	bic.w	r2, r3, #7
 800536e:	4970      	ldr	r1, [pc, #448]	; (8005530 <HAL_RCC_ClockConfig+0x1ec>)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	4313      	orrs	r3, r2
 8005374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005376:	4b6e      	ldr	r3, [pc, #440]	; (8005530 <HAL_RCC_ClockConfig+0x1ec>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d001      	beq.n	8005388 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0cf      	b.n	8005528 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d010      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	4b66      	ldr	r3, [pc, #408]	; (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d908      	bls.n	80053b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a4:	4b63      	ldr	r3, [pc, #396]	; (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	4960      	ldr	r1, [pc, #384]	; (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d04c      	beq.n	800545c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	d107      	bne.n	80053da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ca:	4b5a      	ldr	r3, [pc, #360]	; (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d121      	bne.n	800541a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e0a6      	b.n	8005528 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d107      	bne.n	80053f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053e2:	4b54      	ldr	r3, [pc, #336]	; (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d115      	bne.n	800541a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e09a      	b.n	8005528 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d107      	bne.n	800540a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053fa:	4b4e      	ldr	r3, [pc, #312]	; (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d109      	bne.n	800541a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e08e      	b.n	8005528 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800540a:	4b4a      	ldr	r3, [pc, #296]	; (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e086      	b.n	8005528 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800541a:	4b46      	ldr	r3, [pc, #280]	; (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f023 0203 	bic.w	r2, r3, #3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	4943      	ldr	r1, [pc, #268]	; (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 8005428:	4313      	orrs	r3, r2
 800542a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800542c:	f7fc ff4a 	bl	80022c4 <HAL_GetTick>
 8005430:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005432:	e00a      	b.n	800544a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005434:	f7fc ff46 	bl	80022c4 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005442:	4293      	cmp	r3, r2
 8005444:	d901      	bls.n	800544a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e06e      	b.n	8005528 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544a:	4b3a      	ldr	r3, [pc, #232]	; (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 020c 	and.w	r2, r3, #12
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	429a      	cmp	r2, r3
 800545a:	d1eb      	bne.n	8005434 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d010      	beq.n	800548a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	4b31      	ldr	r3, [pc, #196]	; (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005474:	429a      	cmp	r2, r3
 8005476:	d208      	bcs.n	800548a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005478:	4b2e      	ldr	r3, [pc, #184]	; (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	492b      	ldr	r1, [pc, #172]	; (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 8005486:	4313      	orrs	r3, r2
 8005488:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800548a:	4b29      	ldr	r3, [pc, #164]	; (8005530 <HAL_RCC_ClockConfig+0x1ec>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d210      	bcs.n	80054ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005498:	4b25      	ldr	r3, [pc, #148]	; (8005530 <HAL_RCC_ClockConfig+0x1ec>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f023 0207 	bic.w	r2, r3, #7
 80054a0:	4923      	ldr	r1, [pc, #140]	; (8005530 <HAL_RCC_ClockConfig+0x1ec>)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a8:	4b21      	ldr	r3, [pc, #132]	; (8005530 <HAL_RCC_ClockConfig+0x1ec>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d001      	beq.n	80054ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e036      	b.n	8005528 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d008      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054c6:	4b1b      	ldr	r3, [pc, #108]	; (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	4918      	ldr	r1, [pc, #96]	; (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d009      	beq.n	80054f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054e4:	4b13      	ldr	r3, [pc, #76]	; (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	4910      	ldr	r1, [pc, #64]	; (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054f8:	f000 f824 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b0d      	ldr	r3, [pc, #52]	; (8005534 <HAL_RCC_ClockConfig+0x1f0>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	091b      	lsrs	r3, r3, #4
 8005504:	f003 030f 	and.w	r3, r3, #15
 8005508:	490b      	ldr	r1, [pc, #44]	; (8005538 <HAL_RCC_ClockConfig+0x1f4>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
 8005514:	4a09      	ldr	r2, [pc, #36]	; (800553c <HAL_RCC_ClockConfig+0x1f8>)
 8005516:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005518:	4b09      	ldr	r3, [pc, #36]	; (8005540 <HAL_RCC_ClockConfig+0x1fc>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4618      	mov	r0, r3
 800551e:	f7fc fcb7 	bl	8001e90 <HAL_InitTick>
 8005522:	4603      	mov	r3, r0
 8005524:	72fb      	strb	r3, [r7, #11]

  return status;
 8005526:	7afb      	ldrb	r3, [r7, #11]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	40022000 	.word	0x40022000
 8005534:	40021000 	.word	0x40021000
 8005538:	08008e74 	.word	0x08008e74
 800553c:	20000008 	.word	0x20000008
 8005540:	2000000c 	.word	0x2000000c

08005544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005544:	b480      	push	{r7}
 8005546:	b089      	sub	sp, #36	; 0x24
 8005548:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	61fb      	str	r3, [r7, #28]
 800554e:	2300      	movs	r3, #0
 8005550:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005552:	4b3e      	ldr	r3, [pc, #248]	; (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 030c 	and.w	r3, r3, #12
 800555a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800555c:	4b3b      	ldr	r3, [pc, #236]	; (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <HAL_RCC_GetSysClockFreq+0x34>
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2b0c      	cmp	r3, #12
 8005570:	d121      	bne.n	80055b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d11e      	bne.n	80055b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005578:	4b34      	ldr	r3, [pc, #208]	; (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b00      	cmp	r3, #0
 8005582:	d107      	bne.n	8005594 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005584:	4b31      	ldr	r3, [pc, #196]	; (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 8005586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800558a:	0a1b      	lsrs	r3, r3, #8
 800558c:	f003 030f 	and.w	r3, r3, #15
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	e005      	b.n	80055a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005594:	4b2d      	ldr	r3, [pc, #180]	; (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	091b      	lsrs	r3, r3, #4
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80055a0:	4a2b      	ldr	r2, [pc, #172]	; (8005650 <HAL_RCC_GetSysClockFreq+0x10c>)
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10d      	bne.n	80055cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055b4:	e00a      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d102      	bne.n	80055c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055bc:	4b25      	ldr	r3, [pc, #148]	; (8005654 <HAL_RCC_GetSysClockFreq+0x110>)
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	e004      	b.n	80055cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d101      	bne.n	80055cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055c8:	4b23      	ldr	r3, [pc, #140]	; (8005658 <HAL_RCC_GetSysClockFreq+0x114>)
 80055ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	2b0c      	cmp	r3, #12
 80055d0:	d134      	bne.n	800563c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055d2:	4b1e      	ldr	r3, [pc, #120]	; (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d003      	beq.n	80055ea <HAL_RCC_GetSysClockFreq+0xa6>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d003      	beq.n	80055f0 <HAL_RCC_GetSysClockFreq+0xac>
 80055e8:	e005      	b.n	80055f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80055ea:	4b1a      	ldr	r3, [pc, #104]	; (8005654 <HAL_RCC_GetSysClockFreq+0x110>)
 80055ec:	617b      	str	r3, [r7, #20]
      break;
 80055ee:	e005      	b.n	80055fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055f0:	4b19      	ldr	r3, [pc, #100]	; (8005658 <HAL_RCC_GetSysClockFreq+0x114>)
 80055f2:	617b      	str	r3, [r7, #20]
      break;
 80055f4:	e002      	b.n	80055fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	617b      	str	r3, [r7, #20]
      break;
 80055fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055fc:	4b13      	ldr	r3, [pc, #76]	; (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	091b      	lsrs	r3, r3, #4
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	3301      	adds	r3, #1
 8005608:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800560a:	4b10      	ldr	r3, [pc, #64]	; (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	0a1b      	lsrs	r3, r3, #8
 8005610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	fb03 f202 	mul.w	r2, r3, r2
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005620:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005622:	4b0a      	ldr	r3, [pc, #40]	; (800564c <HAL_RCC_GetSysClockFreq+0x108>)
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	0e5b      	lsrs	r3, r3, #25
 8005628:	f003 0303 	and.w	r3, r3, #3
 800562c:	3301      	adds	r3, #1
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	fbb2 f3f3 	udiv	r3, r2, r3
 800563a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800563c:	69bb      	ldr	r3, [r7, #24]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3724      	adds	r7, #36	; 0x24
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40021000 	.word	0x40021000
 8005650:	08008e8c 	.word	0x08008e8c
 8005654:	00f42400 	.word	0x00f42400
 8005658:	007a1200 	.word	0x007a1200

0800565c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005660:	4b03      	ldr	r3, [pc, #12]	; (8005670 <HAL_RCC_GetHCLKFreq+0x14>)
 8005662:	681b      	ldr	r3, [r3, #0]
}
 8005664:	4618      	mov	r0, r3
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	20000008 	.word	0x20000008

08005674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005678:	f7ff fff0 	bl	800565c <HAL_RCC_GetHCLKFreq>
 800567c:	4602      	mov	r2, r0
 800567e:	4b06      	ldr	r3, [pc, #24]	; (8005698 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	0a1b      	lsrs	r3, r3, #8
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	4904      	ldr	r1, [pc, #16]	; (800569c <HAL_RCC_GetPCLK1Freq+0x28>)
 800568a:	5ccb      	ldrb	r3, [r1, r3]
 800568c:	f003 031f 	and.w	r3, r3, #31
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005694:	4618      	mov	r0, r3
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40021000 	.word	0x40021000
 800569c:	08008e84 	.word	0x08008e84

080056a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056a4:	f7ff ffda 	bl	800565c <HAL_RCC_GetHCLKFreq>
 80056a8:	4602      	mov	r2, r0
 80056aa:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	0adb      	lsrs	r3, r3, #11
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	4904      	ldr	r1, [pc, #16]	; (80056c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056b6:	5ccb      	ldrb	r3, [r1, r3]
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40021000 	.word	0x40021000
 80056c8:	08008e84 	.word	0x08008e84

080056cc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	220f      	movs	r2, #15
 80056da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80056dc:	4b12      	ldr	r3, [pc, #72]	; (8005728 <HAL_RCC_GetClockConfig+0x5c>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 0203 	and.w	r2, r3, #3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80056e8:	4b0f      	ldr	r3, [pc, #60]	; (8005728 <HAL_RCC_GetClockConfig+0x5c>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80056f4:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <HAL_RCC_GetClockConfig+0x5c>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005700:	4b09      	ldr	r3, [pc, #36]	; (8005728 <HAL_RCC_GetClockConfig+0x5c>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	08db      	lsrs	r3, r3, #3
 8005706:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800570e:	4b07      	ldr	r3, [pc, #28]	; (800572c <HAL_RCC_GetClockConfig+0x60>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0207 	and.w	r2, r3, #7
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	601a      	str	r2, [r3, #0]
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40021000 	.word	0x40021000
 800572c:	40022000 	.word	0x40022000

08005730 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005738:	2300      	movs	r3, #0
 800573a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800573c:	4b2a      	ldr	r3, [pc, #168]	; (80057e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800573e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005748:	f7ff f9bc 	bl	8004ac4 <HAL_PWREx_GetVoltageRange>
 800574c:	6178      	str	r0, [r7, #20]
 800574e:	e014      	b.n	800577a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005750:	4b25      	ldr	r3, [pc, #148]	; (80057e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005754:	4a24      	ldr	r2, [pc, #144]	; (80057e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800575a:	6593      	str	r3, [r2, #88]	; 0x58
 800575c:	4b22      	ldr	r3, [pc, #136]	; (80057e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800575e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005768:	f7ff f9ac 	bl	8004ac4 <HAL_PWREx_GetVoltageRange>
 800576c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800576e:	4b1e      	ldr	r3, [pc, #120]	; (80057e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005772:	4a1d      	ldr	r2, [pc, #116]	; (80057e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005778:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005780:	d10b      	bne.n	800579a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b80      	cmp	r3, #128	; 0x80
 8005786:	d919      	bls.n	80057bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2ba0      	cmp	r3, #160	; 0xa0
 800578c:	d902      	bls.n	8005794 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800578e:	2302      	movs	r3, #2
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	e013      	b.n	80057bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005794:	2301      	movs	r3, #1
 8005796:	613b      	str	r3, [r7, #16]
 8005798:	e010      	b.n	80057bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b80      	cmp	r3, #128	; 0x80
 800579e:	d902      	bls.n	80057a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80057a0:	2303      	movs	r3, #3
 80057a2:	613b      	str	r3, [r7, #16]
 80057a4:	e00a      	b.n	80057bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b80      	cmp	r3, #128	; 0x80
 80057aa:	d102      	bne.n	80057b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057ac:	2302      	movs	r3, #2
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	e004      	b.n	80057bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b70      	cmp	r3, #112	; 0x70
 80057b6:	d101      	bne.n	80057bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057b8:	2301      	movs	r3, #1
 80057ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80057bc:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f023 0207 	bic.w	r2, r3, #7
 80057c4:	4909      	ldr	r1, [pc, #36]	; (80057ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80057cc:	4b07      	ldr	r3, [pc, #28]	; (80057ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d001      	beq.n	80057de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40021000 	.word	0x40021000
 80057ec:	40022000 	.word	0x40022000

080057f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057f8:	2300      	movs	r3, #0
 80057fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057fc:	2300      	movs	r3, #0
 80057fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005808:	2b00      	cmp	r3, #0
 800580a:	d041      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005810:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005814:	d02a      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005816:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800581a:	d824      	bhi.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800581c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005820:	d008      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005822:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005826:	d81e      	bhi.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800582c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005830:	d010      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005832:	e018      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005834:	4b86      	ldr	r3, [pc, #536]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	4a85      	ldr	r2, [pc, #532]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800583a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800583e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005840:	e015      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3304      	adds	r3, #4
 8005846:	2100      	movs	r1, #0
 8005848:	4618      	mov	r0, r3
 800584a:	f000 fabb 	bl	8005dc4 <RCCEx_PLLSAI1_Config>
 800584e:	4603      	mov	r3, r0
 8005850:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005852:	e00c      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3320      	adds	r3, #32
 8005858:	2100      	movs	r1, #0
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fba6 	bl	8005fac <RCCEx_PLLSAI2_Config>
 8005860:	4603      	mov	r3, r0
 8005862:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005864:	e003      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	74fb      	strb	r3, [r7, #19]
      break;
 800586a:	e000      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800586c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800586e:	7cfb      	ldrb	r3, [r7, #19]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10b      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005874:	4b76      	ldr	r3, [pc, #472]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005882:	4973      	ldr	r1, [pc, #460]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800588a:	e001      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588c:	7cfb      	ldrb	r3, [r7, #19]
 800588e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d041      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058a4:	d02a      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80058a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058aa:	d824      	bhi.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80058ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058b0:	d008      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80058b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058b6:	d81e      	bhi.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80058bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058c0:	d010      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80058c2:	e018      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058c4:	4b62      	ldr	r3, [pc, #392]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4a61      	ldr	r2, [pc, #388]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058d0:	e015      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3304      	adds	r3, #4
 80058d6:	2100      	movs	r1, #0
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 fa73 	bl	8005dc4 <RCCEx_PLLSAI1_Config>
 80058de:	4603      	mov	r3, r0
 80058e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058e2:	e00c      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3320      	adds	r3, #32
 80058e8:	2100      	movs	r1, #0
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fb5e 	bl	8005fac <RCCEx_PLLSAI2_Config>
 80058f0:	4603      	mov	r3, r0
 80058f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80058f4:	e003      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	74fb      	strb	r3, [r7, #19]
      break;
 80058fa:	e000      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80058fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058fe:	7cfb      	ldrb	r3, [r7, #19]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10b      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005904:	4b52      	ldr	r3, [pc, #328]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005912:	494f      	ldr	r1, [pc, #316]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800591a:	e001      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591c:	7cfb      	ldrb	r3, [r7, #19]
 800591e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 80a0 	beq.w	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800592e:	2300      	movs	r3, #0
 8005930:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005932:	4b47      	ldr	r3, [pc, #284]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005942:	2300      	movs	r3, #0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00d      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005948:	4b41      	ldr	r3, [pc, #260]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800594a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594c:	4a40      	ldr	r2, [pc, #256]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800594e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005952:	6593      	str	r3, [r2, #88]	; 0x58
 8005954:	4b3e      	ldr	r3, [pc, #248]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800595c:	60bb      	str	r3, [r7, #8]
 800595e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005960:	2301      	movs	r3, #1
 8005962:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005964:	4b3b      	ldr	r3, [pc, #236]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a3a      	ldr	r2, [pc, #232]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800596a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800596e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005970:	f7fc fca8 	bl	80022c4 <HAL_GetTick>
 8005974:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005976:	e009      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005978:	f7fc fca4 	bl	80022c4 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d902      	bls.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	74fb      	strb	r3, [r7, #19]
        break;
 800598a:	e005      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800598c:	4b31      	ldr	r3, [pc, #196]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0ef      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005998:	7cfb      	ldrb	r3, [r7, #19]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d15c      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800599e:	4b2c      	ldr	r3, [pc, #176]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01f      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d019      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059bc:	4b24      	ldr	r3, [pc, #144]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059c8:	4b21      	ldr	r3, [pc, #132]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ce:	4a20      	ldr	r2, [pc, #128]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059d8:	4b1d      	ldr	r3, [pc, #116]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059de:	4a1c      	ldr	r2, [pc, #112]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059e8:	4a19      	ldr	r2, [pc, #100]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d016      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fa:	f7fc fc63 	bl	80022c4 <HAL_GetTick>
 80059fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a00:	e00b      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a02:	f7fc fc5f 	bl	80022c4 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d902      	bls.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	74fb      	strb	r3, [r7, #19]
            break;
 8005a18:	e006      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a1a:	4b0d      	ldr	r3, [pc, #52]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0ec      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005a28:	7cfb      	ldrb	r3, [r7, #19]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10c      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a2e:	4b08      	ldr	r3, [pc, #32]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a3e:	4904      	ldr	r1, [pc, #16]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a46:	e009      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a48:	7cfb      	ldrb	r3, [r7, #19]
 8005a4a:	74bb      	strb	r3, [r7, #18]
 8005a4c:	e006      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005a4e:	bf00      	nop
 8005a50:	40021000 	.word	0x40021000
 8005a54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a58:	7cfb      	ldrb	r3, [r7, #19]
 8005a5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a5c:	7c7b      	ldrb	r3, [r7, #17]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d105      	bne.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a62:	4b9e      	ldr	r3, [pc, #632]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a66:	4a9d      	ldr	r2, [pc, #628]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a7a:	4b98      	ldr	r3, [pc, #608]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a80:	f023 0203 	bic.w	r2, r3, #3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	4994      	ldr	r1, [pc, #592]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00a      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a9c:	4b8f      	ldr	r3, [pc, #572]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa2:	f023 020c 	bic.w	r2, r3, #12
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aaa:	498c      	ldr	r1, [pc, #560]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005abe:	4b87      	ldr	r3, [pc, #540]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005acc:	4983      	ldr	r1, [pc, #524]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00a      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ae0:	4b7e      	ldr	r3, [pc, #504]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aee:	497b      	ldr	r1, [pc, #492]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0310 	and.w	r3, r3, #16
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b02:	4b76      	ldr	r3, [pc, #472]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b10:	4972      	ldr	r1, [pc, #456]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0320 	and.w	r3, r3, #32
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00a      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b24:	4b6d      	ldr	r3, [pc, #436]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b32:	496a      	ldr	r1, [pc, #424]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b46:	4b65      	ldr	r3, [pc, #404]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b54:	4961      	ldr	r1, [pc, #388]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00a      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b68:	4b5c      	ldr	r3, [pc, #368]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b76:	4959      	ldr	r1, [pc, #356]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b8a:	4b54      	ldr	r3, [pc, #336]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b98:	4950      	ldr	r1, [pc, #320]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00a      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bac:	4b4b      	ldr	r3, [pc, #300]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bba:	4948      	ldr	r1, [pc, #288]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bce:	4b43      	ldr	r3, [pc, #268]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bdc:	493f      	ldr	r1, [pc, #252]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d028      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bf0:	4b3a      	ldr	r3, [pc, #232]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bfe:	4937      	ldr	r1, [pc, #220]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c0e:	d106      	bne.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c10:	4b32      	ldr	r3, [pc, #200]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	4a31      	ldr	r2, [pc, #196]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c1a:	60d3      	str	r3, [r2, #12]
 8005c1c:	e011      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c26:	d10c      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 f8c8 	bl	8005dc4 <RCCEx_PLLSAI1_Config>
 8005c34:	4603      	mov	r3, r0
 8005c36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005c38:	7cfb      	ldrb	r3, [r7, #19]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005c3e:	7cfb      	ldrb	r3, [r7, #19]
 8005c40:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d028      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c4e:	4b23      	ldr	r3, [pc, #140]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5c:	491f      	ldr	r1, [pc, #124]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c6c:	d106      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c6e:	4b1b      	ldr	r3, [pc, #108]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	4a1a      	ldr	r2, [pc, #104]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c78:	60d3      	str	r3, [r2, #12]
 8005c7a:	e011      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c84:	d10c      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 f899 	bl	8005dc4 <RCCEx_PLLSAI1_Config>
 8005c92:	4603      	mov	r3, r0
 8005c94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c96:	7cfb      	ldrb	r3, [r7, #19]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005c9c:	7cfb      	ldrb	r3, [r7, #19]
 8005c9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d02b      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cac:	4b0b      	ldr	r3, [pc, #44]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cba:	4908      	ldr	r1, [pc, #32]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cca:	d109      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ccc:	4b03      	ldr	r3, [pc, #12]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	4a02      	ldr	r2, [pc, #8]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cd6:	60d3      	str	r3, [r2, #12]
 8005cd8:	e014      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005cda:	bf00      	nop
 8005cdc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ce8:	d10c      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3304      	adds	r3, #4
 8005cee:	2101      	movs	r1, #1
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 f867 	bl	8005dc4 <RCCEx_PLLSAI1_Config>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cfa:	7cfb      	ldrb	r3, [r7, #19]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005d00:	7cfb      	ldrb	r3, [r7, #19]
 8005d02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d02f      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d10:	4b2b      	ldr	r3, [pc, #172]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d1e:	4928      	ldr	r1, [pc, #160]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d2e:	d10d      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3304      	adds	r3, #4
 8005d34:	2102      	movs	r1, #2
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 f844 	bl	8005dc4 <RCCEx_PLLSAI1_Config>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d40:	7cfb      	ldrb	r3, [r7, #19]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d014      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005d46:	7cfb      	ldrb	r3, [r7, #19]
 8005d48:	74bb      	strb	r3, [r7, #18]
 8005d4a:	e011      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d54:	d10c      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	3320      	adds	r3, #32
 8005d5a:	2102      	movs	r1, #2
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 f925 	bl	8005fac <RCCEx_PLLSAI2_Config>
 8005d62:	4603      	mov	r3, r0
 8005d64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d66:	7cfb      	ldrb	r3, [r7, #19]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005d6c:	7cfb      	ldrb	r3, [r7, #19]
 8005d6e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00a      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d7c:	4b10      	ldr	r3, [pc, #64]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d82:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d8a:	490d      	ldr	r1, [pc, #52]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00b      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d9e:	4b08      	ldr	r3, [pc, #32]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dae:	4904      	ldr	r1, [pc, #16]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005db6:	7cbb      	ldrb	r3, [r7, #18]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	40021000 	.word	0x40021000

08005dc4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005dd2:	4b75      	ldr	r3, [pc, #468]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d018      	beq.n	8005e10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005dde:	4b72      	ldr	r3, [pc, #456]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f003 0203 	and.w	r2, r3, #3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d10d      	bne.n	8005e0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
       ||
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d009      	beq.n	8005e0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005df6:	4b6c      	ldr	r3, [pc, #432]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	091b      	lsrs	r3, r3, #4
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
       ||
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d047      	beq.n	8005e9a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	73fb      	strb	r3, [r7, #15]
 8005e0e:	e044      	b.n	8005e9a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	d018      	beq.n	8005e4a <RCCEx_PLLSAI1_Config+0x86>
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d825      	bhi.n	8005e68 <RCCEx_PLLSAI1_Config+0xa4>
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d002      	beq.n	8005e26 <RCCEx_PLLSAI1_Config+0x62>
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d009      	beq.n	8005e38 <RCCEx_PLLSAI1_Config+0x74>
 8005e24:	e020      	b.n	8005e68 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e26:	4b60      	ldr	r3, [pc, #384]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d11d      	bne.n	8005e6e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e36:	e01a      	b.n	8005e6e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e38:	4b5b      	ldr	r3, [pc, #364]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d116      	bne.n	8005e72 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e48:	e013      	b.n	8005e72 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e4a:	4b57      	ldr	r3, [pc, #348]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10f      	bne.n	8005e76 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e56:	4b54      	ldr	r3, [pc, #336]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d109      	bne.n	8005e76 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e66:	e006      	b.n	8005e76 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e6c:	e004      	b.n	8005e78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e6e:	bf00      	nop
 8005e70:	e002      	b.n	8005e78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e72:	bf00      	nop
 8005e74:	e000      	b.n	8005e78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005e76:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10d      	bne.n	8005e9a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e7e:	4b4a      	ldr	r3, [pc, #296]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6819      	ldr	r1, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	011b      	lsls	r3, r3, #4
 8005e92:	430b      	orrs	r3, r1
 8005e94:	4944      	ldr	r1, [pc, #272]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d17d      	bne.n	8005f9c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ea0:	4b41      	ldr	r3, [pc, #260]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a40      	ldr	r2, [pc, #256]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ea6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eac:	f7fc fa0a 	bl	80022c4 <HAL_GetTick>
 8005eb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005eb2:	e009      	b.n	8005ec8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005eb4:	f7fc fa06 	bl	80022c4 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d902      	bls.n	8005ec8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	73fb      	strb	r3, [r7, #15]
        break;
 8005ec6:	e005      	b.n	8005ed4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ec8:	4b37      	ldr	r3, [pc, #220]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1ef      	bne.n	8005eb4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d160      	bne.n	8005f9c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d111      	bne.n	8005f04 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ee0:	4b31      	ldr	r3, [pc, #196]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6892      	ldr	r2, [r2, #8]
 8005ef0:	0211      	lsls	r1, r2, #8
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	68d2      	ldr	r2, [r2, #12]
 8005ef6:	0912      	lsrs	r2, r2, #4
 8005ef8:	0452      	lsls	r2, r2, #17
 8005efa:	430a      	orrs	r2, r1
 8005efc:	492a      	ldr	r1, [pc, #168]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	610b      	str	r3, [r1, #16]
 8005f02:	e027      	b.n	8005f54 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d112      	bne.n	8005f30 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f0a:	4b27      	ldr	r3, [pc, #156]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005f12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	6892      	ldr	r2, [r2, #8]
 8005f1a:	0211      	lsls	r1, r2, #8
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	6912      	ldr	r2, [r2, #16]
 8005f20:	0852      	lsrs	r2, r2, #1
 8005f22:	3a01      	subs	r2, #1
 8005f24:	0552      	lsls	r2, r2, #21
 8005f26:	430a      	orrs	r2, r1
 8005f28:	491f      	ldr	r1, [pc, #124]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	610b      	str	r3, [r1, #16]
 8005f2e:	e011      	b.n	8005f54 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f30:	4b1d      	ldr	r3, [pc, #116]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005f38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6892      	ldr	r2, [r2, #8]
 8005f40:	0211      	lsls	r1, r2, #8
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	6952      	ldr	r2, [r2, #20]
 8005f46:	0852      	lsrs	r2, r2, #1
 8005f48:	3a01      	subs	r2, #1
 8005f4a:	0652      	lsls	r2, r2, #25
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	4916      	ldr	r1, [pc, #88]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005f54:	4b14      	ldr	r3, [pc, #80]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a13      	ldr	r2, [pc, #76]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f60:	f7fc f9b0 	bl	80022c4 <HAL_GetTick>
 8005f64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f66:	e009      	b.n	8005f7c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f68:	f7fc f9ac 	bl	80022c4 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d902      	bls.n	8005f7c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	73fb      	strb	r3, [r7, #15]
          break;
 8005f7a:	e005      	b.n	8005f88 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f7c:	4b0a      	ldr	r3, [pc, #40]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0ef      	beq.n	8005f68 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d106      	bne.n	8005f9c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005f8e:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f90:	691a      	ldr	r2, [r3, #16]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	4904      	ldr	r1, [pc, #16]	; (8005fa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	40021000 	.word	0x40021000

08005fac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005fba:	4b6a      	ldr	r3, [pc, #424]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d018      	beq.n	8005ff8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005fc6:	4b67      	ldr	r3, [pc, #412]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	f003 0203 	and.w	r2, r3, #3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d10d      	bne.n	8005ff2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
       ||
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d009      	beq.n	8005ff2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005fde:	4b61      	ldr	r3, [pc, #388]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	091b      	lsrs	r3, r3, #4
 8005fe4:	f003 0307 	and.w	r3, r3, #7
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
       ||
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d047      	beq.n	8006082 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	73fb      	strb	r3, [r7, #15]
 8005ff6:	e044      	b.n	8006082 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d018      	beq.n	8006032 <RCCEx_PLLSAI2_Config+0x86>
 8006000:	2b03      	cmp	r3, #3
 8006002:	d825      	bhi.n	8006050 <RCCEx_PLLSAI2_Config+0xa4>
 8006004:	2b01      	cmp	r3, #1
 8006006:	d002      	beq.n	800600e <RCCEx_PLLSAI2_Config+0x62>
 8006008:	2b02      	cmp	r3, #2
 800600a:	d009      	beq.n	8006020 <RCCEx_PLLSAI2_Config+0x74>
 800600c:	e020      	b.n	8006050 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800600e:	4b55      	ldr	r3, [pc, #340]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d11d      	bne.n	8006056 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800601e:	e01a      	b.n	8006056 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006020:	4b50      	ldr	r3, [pc, #320]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006028:	2b00      	cmp	r3, #0
 800602a:	d116      	bne.n	800605a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006030:	e013      	b.n	800605a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006032:	4b4c      	ldr	r3, [pc, #304]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10f      	bne.n	800605e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800603e:	4b49      	ldr	r3, [pc, #292]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d109      	bne.n	800605e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800604e:	e006      	b.n	800605e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	73fb      	strb	r3, [r7, #15]
      break;
 8006054:	e004      	b.n	8006060 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006056:	bf00      	nop
 8006058:	e002      	b.n	8006060 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800605a:	bf00      	nop
 800605c:	e000      	b.n	8006060 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800605e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006060:	7bfb      	ldrb	r3, [r7, #15]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10d      	bne.n	8006082 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006066:	4b3f      	ldr	r3, [pc, #252]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6819      	ldr	r1, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	3b01      	subs	r3, #1
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	430b      	orrs	r3, r1
 800607c:	4939      	ldr	r1, [pc, #228]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 800607e:	4313      	orrs	r3, r2
 8006080:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d167      	bne.n	8006158 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006088:	4b36      	ldr	r3, [pc, #216]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a35      	ldr	r2, [pc, #212]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 800608e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006092:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006094:	f7fc f916 	bl	80022c4 <HAL_GetTick>
 8006098:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800609a:	e009      	b.n	80060b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800609c:	f7fc f912 	bl	80022c4 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d902      	bls.n	80060b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	73fb      	strb	r3, [r7, #15]
        break;
 80060ae:	e005      	b.n	80060bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060b0:	4b2c      	ldr	r3, [pc, #176]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1ef      	bne.n	800609c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d14a      	bne.n	8006158 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d111      	bne.n	80060ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060c8:	4b26      	ldr	r3, [pc, #152]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80060d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	6892      	ldr	r2, [r2, #8]
 80060d8:	0211      	lsls	r1, r2, #8
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	68d2      	ldr	r2, [r2, #12]
 80060de:	0912      	lsrs	r2, r2, #4
 80060e0:	0452      	lsls	r2, r2, #17
 80060e2:	430a      	orrs	r2, r1
 80060e4:	491f      	ldr	r1, [pc, #124]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	614b      	str	r3, [r1, #20]
 80060ea:	e011      	b.n	8006110 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060ec:	4b1d      	ldr	r3, [pc, #116]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80060f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	6892      	ldr	r2, [r2, #8]
 80060fc:	0211      	lsls	r1, r2, #8
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	6912      	ldr	r2, [r2, #16]
 8006102:	0852      	lsrs	r2, r2, #1
 8006104:	3a01      	subs	r2, #1
 8006106:	0652      	lsls	r2, r2, #25
 8006108:	430a      	orrs	r2, r1
 800610a:	4916      	ldr	r1, [pc, #88]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 800610c:	4313      	orrs	r3, r2
 800610e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006110:	4b14      	ldr	r3, [pc, #80]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a13      	ldr	r2, [pc, #76]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800611a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800611c:	f7fc f8d2 	bl	80022c4 <HAL_GetTick>
 8006120:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006122:	e009      	b.n	8006138 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006124:	f7fc f8ce 	bl	80022c4 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b02      	cmp	r3, #2
 8006130:	d902      	bls.n	8006138 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	73fb      	strb	r3, [r7, #15]
          break;
 8006136:	e005      	b.n	8006144 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006138:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d0ef      	beq.n	8006124 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d106      	bne.n	8006158 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800614a:	4b06      	ldr	r3, [pc, #24]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 800614c:	695a      	ldr	r2, [r3, #20]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	4904      	ldr	r1, [pc, #16]	; (8006164 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006154:	4313      	orrs	r3, r2
 8006156:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006158:	7bfb      	ldrb	r3, [r7, #15]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	40021000 	.word	0x40021000

08006168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e049      	b.n	800620e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d106      	bne.n	8006194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7fb fdb2 	bl	8001cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4619      	mov	r1, r3
 80061a6:	4610      	mov	r0, r2
 80061a8:	f000 fb2a 	bl	8006800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b01      	cmp	r3, #1
 800622a:	d001      	beq.n	8006230 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e047      	b.n	80062c0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a23      	ldr	r2, [pc, #140]	; (80062cc <HAL_TIM_Base_Start+0xb4>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01d      	beq.n	800627e <HAL_TIM_Base_Start+0x66>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800624a:	d018      	beq.n	800627e <HAL_TIM_Base_Start+0x66>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a1f      	ldr	r2, [pc, #124]	; (80062d0 <HAL_TIM_Base_Start+0xb8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <HAL_TIM_Base_Start+0x66>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a1e      	ldr	r2, [pc, #120]	; (80062d4 <HAL_TIM_Base_Start+0xbc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00e      	beq.n	800627e <HAL_TIM_Base_Start+0x66>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a1c      	ldr	r2, [pc, #112]	; (80062d8 <HAL_TIM_Base_Start+0xc0>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d009      	beq.n	800627e <HAL_TIM_Base_Start+0x66>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a1b      	ldr	r2, [pc, #108]	; (80062dc <HAL_TIM_Base_Start+0xc4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d004      	beq.n	800627e <HAL_TIM_Base_Start+0x66>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a19      	ldr	r2, [pc, #100]	; (80062e0 <HAL_TIM_Base_Start+0xc8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d115      	bne.n	80062aa <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	4b17      	ldr	r3, [pc, #92]	; (80062e4 <HAL_TIM_Base_Start+0xcc>)
 8006286:	4013      	ands	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b06      	cmp	r3, #6
 800628e:	d015      	beq.n	80062bc <HAL_TIM_Base_Start+0xa4>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006296:	d011      	beq.n	80062bc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0201 	orr.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a8:	e008      	b.n	80062bc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f042 0201 	orr.w	r2, r2, #1
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	e000      	b.n	80062be <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	40012c00 	.word	0x40012c00
 80062d0:	40000400 	.word	0x40000400
 80062d4:	40000800 	.word	0x40000800
 80062d8:	40000c00 	.word	0x40000c00
 80062dc:	40013400 	.word	0x40013400
 80062e0:	40014000 	.word	0x40014000
 80062e4:	00010007 	.word	0x00010007

080062e8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6a1a      	ldr	r2, [r3, #32]
 80062f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80062fa:	4013      	ands	r3, r2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10f      	bne.n	8006320 <HAL_TIM_Base_Stop+0x38>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6a1a      	ldr	r2, [r3, #32]
 8006306:	f240 4344 	movw	r3, #1092	; 0x444
 800630a:	4013      	ands	r3, r2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d107      	bne.n	8006320 <HAL_TIM_Base_Stop+0x38>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0201 	bic.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
	...

08006338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b01      	cmp	r3, #1
 800634a:	d001      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e04f      	b.n	80063f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a23      	ldr	r2, [pc, #140]	; (80063fc <HAL_TIM_Base_Start_IT+0xc4>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d01d      	beq.n	80063ae <HAL_TIM_Base_Start_IT+0x76>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800637a:	d018      	beq.n	80063ae <HAL_TIM_Base_Start_IT+0x76>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a1f      	ldr	r2, [pc, #124]	; (8006400 <HAL_TIM_Base_Start_IT+0xc8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d013      	beq.n	80063ae <HAL_TIM_Base_Start_IT+0x76>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a1e      	ldr	r2, [pc, #120]	; (8006404 <HAL_TIM_Base_Start_IT+0xcc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d00e      	beq.n	80063ae <HAL_TIM_Base_Start_IT+0x76>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a1c      	ldr	r2, [pc, #112]	; (8006408 <HAL_TIM_Base_Start_IT+0xd0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d009      	beq.n	80063ae <HAL_TIM_Base_Start_IT+0x76>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a1b      	ldr	r2, [pc, #108]	; (800640c <HAL_TIM_Base_Start_IT+0xd4>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d004      	beq.n	80063ae <HAL_TIM_Base_Start_IT+0x76>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a19      	ldr	r2, [pc, #100]	; (8006410 <HAL_TIM_Base_Start_IT+0xd8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d115      	bne.n	80063da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	4b17      	ldr	r3, [pc, #92]	; (8006414 <HAL_TIM_Base_Start_IT+0xdc>)
 80063b6:	4013      	ands	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b06      	cmp	r3, #6
 80063be:	d015      	beq.n	80063ec <HAL_TIM_Base_Start_IT+0xb4>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c6:	d011      	beq.n	80063ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0201 	orr.w	r2, r2, #1
 80063d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d8:	e008      	b.n	80063ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f042 0201 	orr.w	r2, r2, #1
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	e000      	b.n	80063ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	40012c00 	.word	0x40012c00
 8006400:	40000400 	.word	0x40000400
 8006404:	40000800 	.word	0x40000800
 8006408:	40000c00 	.word	0x40000c00
 800640c:	40013400 	.word	0x40013400
 8006410:	40014000 	.word	0x40014000
 8006414:	00010007 	.word	0x00010007

08006418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d020      	beq.n	800647c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d01b      	beq.n	800647c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f06f 0202 	mvn.w	r2, #2
 800644c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f9ad 	bl	80067c2 <HAL_TIM_IC_CaptureCallback>
 8006468:	e005      	b.n	8006476 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f99f 	bl	80067ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f9b0 	bl	80067d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f003 0304 	and.w	r3, r3, #4
 8006482:	2b00      	cmp	r3, #0
 8006484:	d020      	beq.n	80064c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01b      	beq.n	80064c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f06f 0204 	mvn.w	r2, #4
 8006498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2202      	movs	r2, #2
 800649e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f987 	bl	80067c2 <HAL_TIM_IC_CaptureCallback>
 80064b4:	e005      	b.n	80064c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f979 	bl	80067ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f98a 	bl	80067d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 0308 	and.w	r3, r3, #8
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d020      	beq.n	8006514 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f003 0308 	and.w	r3, r3, #8
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d01b      	beq.n	8006514 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f06f 0208 	mvn.w	r2, #8
 80064e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2204      	movs	r2, #4
 80064ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f961 	bl	80067c2 <HAL_TIM_IC_CaptureCallback>
 8006500:	e005      	b.n	800650e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f953 	bl	80067ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f964 	bl	80067d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f003 0310 	and.w	r3, r3, #16
 800651a:	2b00      	cmp	r3, #0
 800651c:	d020      	beq.n	8006560 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f003 0310 	and.w	r3, r3, #16
 8006524:	2b00      	cmp	r3, #0
 8006526:	d01b      	beq.n	8006560 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f06f 0210 	mvn.w	r2, #16
 8006530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2208      	movs	r2, #8
 8006536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f93b 	bl	80067c2 <HAL_TIM_IC_CaptureCallback>
 800654c:	e005      	b.n	800655a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f92d 	bl	80067ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f93e 	bl	80067d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00c      	beq.n	8006584 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d007      	beq.n	8006584 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f06f 0201 	mvn.w	r2, #1
 800657c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7fb fa5e 	bl	8001a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00c      	beq.n	80065a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006594:	2b00      	cmp	r3, #0
 8006596:	d007      	beq.n	80065a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 faf2 	bl	8006b8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00c      	beq.n	80065cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d007      	beq.n	80065cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 faea 	bl	8006ba0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00c      	beq.n	80065f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d007      	beq.n	80065f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f8fd 	bl	80067ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f003 0320 	and.w	r3, r3, #32
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00c      	beq.n	8006614 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f003 0320 	and.w	r3, r3, #32
 8006600:	2b00      	cmp	r3, #0
 8006602:	d007      	beq.n	8006614 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f06f 0220 	mvn.w	r2, #32
 800660c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fab2 	bl	8006b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006614:	bf00      	nop
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006630:	2b01      	cmp	r3, #1
 8006632:	d101      	bne.n	8006638 <HAL_TIM_ConfigClockSource+0x1c>
 8006634:	2302      	movs	r3, #2
 8006636:	e0b6      	b.n	80067a6 <HAL_TIM_ConfigClockSource+0x18a>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006656:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800665a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006662:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006674:	d03e      	beq.n	80066f4 <HAL_TIM_ConfigClockSource+0xd8>
 8006676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800667a:	f200 8087 	bhi.w	800678c <HAL_TIM_ConfigClockSource+0x170>
 800667e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006682:	f000 8086 	beq.w	8006792 <HAL_TIM_ConfigClockSource+0x176>
 8006686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668a:	d87f      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x170>
 800668c:	2b70      	cmp	r3, #112	; 0x70
 800668e:	d01a      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0xaa>
 8006690:	2b70      	cmp	r3, #112	; 0x70
 8006692:	d87b      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x170>
 8006694:	2b60      	cmp	r3, #96	; 0x60
 8006696:	d050      	beq.n	800673a <HAL_TIM_ConfigClockSource+0x11e>
 8006698:	2b60      	cmp	r3, #96	; 0x60
 800669a:	d877      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x170>
 800669c:	2b50      	cmp	r3, #80	; 0x50
 800669e:	d03c      	beq.n	800671a <HAL_TIM_ConfigClockSource+0xfe>
 80066a0:	2b50      	cmp	r3, #80	; 0x50
 80066a2:	d873      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x170>
 80066a4:	2b40      	cmp	r3, #64	; 0x40
 80066a6:	d058      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x13e>
 80066a8:	2b40      	cmp	r3, #64	; 0x40
 80066aa:	d86f      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x170>
 80066ac:	2b30      	cmp	r3, #48	; 0x30
 80066ae:	d064      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x15e>
 80066b0:	2b30      	cmp	r3, #48	; 0x30
 80066b2:	d86b      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x170>
 80066b4:	2b20      	cmp	r3, #32
 80066b6:	d060      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x15e>
 80066b8:	2b20      	cmp	r3, #32
 80066ba:	d867      	bhi.n	800678c <HAL_TIM_ConfigClockSource+0x170>
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d05c      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x15e>
 80066c0:	2b10      	cmp	r3, #16
 80066c2:	d05a      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x15e>
 80066c4:	e062      	b.n	800678c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066d6:	f000 f9a7 	bl	8006a28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	609a      	str	r2, [r3, #8]
      break;
 80066f2:	e04f      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006704:	f000 f990 	bl	8006a28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006716:	609a      	str	r2, [r3, #8]
      break;
 8006718:	e03c      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006726:	461a      	mov	r2, r3
 8006728:	f000 f904 	bl	8006934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2150      	movs	r1, #80	; 0x50
 8006732:	4618      	mov	r0, r3
 8006734:	f000 f95d 	bl	80069f2 <TIM_ITRx_SetConfig>
      break;
 8006738:	e02c      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006746:	461a      	mov	r2, r3
 8006748:	f000 f923 	bl	8006992 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2160      	movs	r1, #96	; 0x60
 8006752:	4618      	mov	r0, r3
 8006754:	f000 f94d 	bl	80069f2 <TIM_ITRx_SetConfig>
      break;
 8006758:	e01c      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006766:	461a      	mov	r2, r3
 8006768:	f000 f8e4 	bl	8006934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2140      	movs	r1, #64	; 0x40
 8006772:	4618      	mov	r0, r3
 8006774:	f000 f93d 	bl	80069f2 <TIM_ITRx_SetConfig>
      break;
 8006778:	e00c      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4619      	mov	r1, r3
 8006784:	4610      	mov	r0, r2
 8006786:	f000 f934 	bl	80069f2 <TIM_ITRx_SetConfig>
      break;
 800678a:	e003      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	73fb      	strb	r3, [r7, #15]
      break;
 8006790:	e000      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006792:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
	...

08006800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a40      	ldr	r2, [pc, #256]	; (8006914 <TIM_Base_SetConfig+0x114>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d013      	beq.n	8006840 <TIM_Base_SetConfig+0x40>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681e:	d00f      	beq.n	8006840 <TIM_Base_SetConfig+0x40>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a3d      	ldr	r2, [pc, #244]	; (8006918 <TIM_Base_SetConfig+0x118>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00b      	beq.n	8006840 <TIM_Base_SetConfig+0x40>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a3c      	ldr	r2, [pc, #240]	; (800691c <TIM_Base_SetConfig+0x11c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d007      	beq.n	8006840 <TIM_Base_SetConfig+0x40>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a3b      	ldr	r2, [pc, #236]	; (8006920 <TIM_Base_SetConfig+0x120>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d003      	beq.n	8006840 <TIM_Base_SetConfig+0x40>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a3a      	ldr	r2, [pc, #232]	; (8006924 <TIM_Base_SetConfig+0x124>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d108      	bne.n	8006852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a2f      	ldr	r2, [pc, #188]	; (8006914 <TIM_Base_SetConfig+0x114>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d01f      	beq.n	800689a <TIM_Base_SetConfig+0x9a>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006860:	d01b      	beq.n	800689a <TIM_Base_SetConfig+0x9a>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a2c      	ldr	r2, [pc, #176]	; (8006918 <TIM_Base_SetConfig+0x118>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d017      	beq.n	800689a <TIM_Base_SetConfig+0x9a>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a2b      	ldr	r2, [pc, #172]	; (800691c <TIM_Base_SetConfig+0x11c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d013      	beq.n	800689a <TIM_Base_SetConfig+0x9a>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a2a      	ldr	r2, [pc, #168]	; (8006920 <TIM_Base_SetConfig+0x120>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d00f      	beq.n	800689a <TIM_Base_SetConfig+0x9a>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a29      	ldr	r2, [pc, #164]	; (8006924 <TIM_Base_SetConfig+0x124>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d00b      	beq.n	800689a <TIM_Base_SetConfig+0x9a>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a28      	ldr	r2, [pc, #160]	; (8006928 <TIM_Base_SetConfig+0x128>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d007      	beq.n	800689a <TIM_Base_SetConfig+0x9a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a27      	ldr	r2, [pc, #156]	; (800692c <TIM_Base_SetConfig+0x12c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d003      	beq.n	800689a <TIM_Base_SetConfig+0x9a>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a26      	ldr	r2, [pc, #152]	; (8006930 <TIM_Base_SetConfig+0x130>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d108      	bne.n	80068ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a10      	ldr	r2, [pc, #64]	; (8006914 <TIM_Base_SetConfig+0x114>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d00f      	beq.n	80068f8 <TIM_Base_SetConfig+0xf8>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a12      	ldr	r2, [pc, #72]	; (8006924 <TIM_Base_SetConfig+0x124>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d00b      	beq.n	80068f8 <TIM_Base_SetConfig+0xf8>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a11      	ldr	r2, [pc, #68]	; (8006928 <TIM_Base_SetConfig+0x128>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d007      	beq.n	80068f8 <TIM_Base_SetConfig+0xf8>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a10      	ldr	r2, [pc, #64]	; (800692c <TIM_Base_SetConfig+0x12c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d003      	beq.n	80068f8 <TIM_Base_SetConfig+0xf8>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a0f      	ldr	r2, [pc, #60]	; (8006930 <TIM_Base_SetConfig+0x130>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d103      	bne.n	8006900 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	691a      	ldr	r2, [r3, #16]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	615a      	str	r2, [r3, #20]
}
 8006906:	bf00      	nop
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40012c00 	.word	0x40012c00
 8006918:	40000400 	.word	0x40000400
 800691c:	40000800 	.word	0x40000800
 8006920:	40000c00 	.word	0x40000c00
 8006924:	40013400 	.word	0x40013400
 8006928:	40014000 	.word	0x40014000
 800692c:	40014400 	.word	0x40014400
 8006930:	40014800 	.word	0x40014800

08006934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	f023 0201 	bic.w	r2, r3, #1
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800695e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f023 030a 	bic.w	r3, r3, #10
 8006970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	621a      	str	r2, [r3, #32]
}
 8006986:	bf00      	nop
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006992:	b480      	push	{r7}
 8006994:	b087      	sub	sp, #28
 8006996:	af00      	add	r7, sp, #0
 8006998:	60f8      	str	r0, [r7, #12]
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	f023 0210 	bic.w	r2, r3, #16
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	031b      	lsls	r3, r3, #12
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	621a      	str	r2, [r3, #32]
}
 80069e6:	bf00      	nop
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b085      	sub	sp, #20
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	f043 0307 	orr.w	r3, r3, #7
 8006a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	609a      	str	r2, [r3, #8]
}
 8006a1c:	bf00      	nop
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	021a      	lsls	r2, r3, #8
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	609a      	str	r2, [r3, #8]
}
 8006a5c:	bf00      	nop
 8006a5e:	371c      	adds	r7, #28
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e068      	b.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a2e      	ldr	r2, [pc, #184]	; (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d004      	beq.n	8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a2d      	ldr	r2, [pc, #180]	; (8006b64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d108      	bne.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006aba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006acc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a1e      	ldr	r2, [pc, #120]	; (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d01d      	beq.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af2:	d018      	beq.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a1b      	ldr	r2, [pc, #108]	; (8006b68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d013      	beq.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a1a      	ldr	r2, [pc, #104]	; (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d00e      	beq.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a18      	ldr	r2, [pc, #96]	; (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d009      	beq.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a13      	ldr	r2, [pc, #76]	; (8006b64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d004      	beq.n	8006b26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a14      	ldr	r2, [pc, #80]	; (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d10c      	bne.n	8006b40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	40012c00 	.word	0x40012c00
 8006b64:	40013400 	.word	0x40013400
 8006b68:	40000400 	.word	0x40000400
 8006b6c:	40000800 	.word	0x40000800
 8006b70:	40000c00 	.word	0x40000c00
 8006b74:	40014000 	.word	0x40014000

08006b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e040      	b.n	8006c48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fb f8fe 	bl	8001dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2224      	movs	r2, #36	; 0x24
 8006be0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0201 	bic.w	r2, r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fb6a 	bl	80072d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f8af 	bl	8006d64 <UART_SetConfig>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e01b      	b.n	8006c48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689a      	ldr	r2, [r3, #8]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f042 0201 	orr.w	r2, r2, #1
 8006c3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fbe9 	bl	8007418 <UART_CheckIdleState>
 8006c46:	4603      	mov	r3, r0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b08a      	sub	sp, #40	; 0x28
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	603b      	str	r3, [r7, #0]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c64:	2b20      	cmp	r3, #32
 8006c66:	d178      	bne.n	8006d5a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <HAL_UART_Transmit+0x24>
 8006c6e:	88fb      	ldrh	r3, [r7, #6]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e071      	b.n	8006d5c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2221      	movs	r2, #33	; 0x21
 8006c84:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c86:	f7fb fb1d 	bl	80022c4 <HAL_GetTick>
 8006c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	88fa      	ldrh	r2, [r7, #6]
 8006c90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	88fa      	ldrh	r2, [r7, #6]
 8006c98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ca4:	d108      	bne.n	8006cb8 <HAL_UART_Transmit+0x68>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d104      	bne.n	8006cb8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	61bb      	str	r3, [r7, #24]
 8006cb6:	e003      	b.n	8006cc0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cc0:	e030      	b.n	8006d24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2180      	movs	r1, #128	; 0x80
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 fc4b 	bl	8007568 <UART_WaitOnFlagUntilTimeout>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d004      	beq.n	8006ce2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e03c      	b.n	8006d5c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10b      	bne.n	8006d00 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	881a      	ldrh	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cf4:	b292      	uxth	r2, r2
 8006cf6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	3302      	adds	r3, #2
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	e008      	b.n	8006d12 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	781a      	ldrb	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	b292      	uxth	r2, r2
 8006d0a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1c8      	bne.n	8006cc2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2200      	movs	r2, #0
 8006d38:	2140      	movs	r1, #64	; 0x40
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f000 fc14 	bl	8007568 <UART_WaitOnFlagUntilTimeout>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d004      	beq.n	8006d50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e005      	b.n	8006d5c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2220      	movs	r2, #32
 8006d54:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	e000      	b.n	8006d5c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006d5a:	2302      	movs	r3, #2
  }
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3720      	adds	r7, #32
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d68:	b08a      	sub	sp, #40	; 0x28
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	69db      	ldr	r3, [r3, #28]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	4ba4      	ldr	r3, [pc, #656]	; (8007024 <UART_SetConfig+0x2c0>)
 8006d94:	4013      	ands	r3, r2
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	6812      	ldr	r2, [r2, #0]
 8006d9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d9c:	430b      	orrs	r3, r1
 8006d9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	68da      	ldr	r2, [r3, #12]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a99      	ldr	r2, [pc, #612]	; (8007028 <UART_SetConfig+0x2c4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d004      	beq.n	8006dd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de0:	430a      	orrs	r2, r1
 8006de2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a90      	ldr	r2, [pc, #576]	; (800702c <UART_SetConfig+0x2c8>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d126      	bne.n	8006e3c <UART_SetConfig+0xd8>
 8006dee:	4b90      	ldr	r3, [pc, #576]	; (8007030 <UART_SetConfig+0x2cc>)
 8006df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df4:	f003 0303 	and.w	r3, r3, #3
 8006df8:	2b03      	cmp	r3, #3
 8006dfa:	d81b      	bhi.n	8006e34 <UART_SetConfig+0xd0>
 8006dfc:	a201      	add	r2, pc, #4	; (adr r2, 8006e04 <UART_SetConfig+0xa0>)
 8006dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e02:	bf00      	nop
 8006e04:	08006e15 	.word	0x08006e15
 8006e08:	08006e25 	.word	0x08006e25
 8006e0c:	08006e1d 	.word	0x08006e1d
 8006e10:	08006e2d 	.word	0x08006e2d
 8006e14:	2301      	movs	r3, #1
 8006e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e1a:	e116      	b.n	800704a <UART_SetConfig+0x2e6>
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e22:	e112      	b.n	800704a <UART_SetConfig+0x2e6>
 8006e24:	2304      	movs	r3, #4
 8006e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e2a:	e10e      	b.n	800704a <UART_SetConfig+0x2e6>
 8006e2c:	2308      	movs	r3, #8
 8006e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e32:	e10a      	b.n	800704a <UART_SetConfig+0x2e6>
 8006e34:	2310      	movs	r3, #16
 8006e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e3a:	e106      	b.n	800704a <UART_SetConfig+0x2e6>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a7c      	ldr	r2, [pc, #496]	; (8007034 <UART_SetConfig+0x2d0>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d138      	bne.n	8006eb8 <UART_SetConfig+0x154>
 8006e46:	4b7a      	ldr	r3, [pc, #488]	; (8007030 <UART_SetConfig+0x2cc>)
 8006e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e4c:	f003 030c 	and.w	r3, r3, #12
 8006e50:	2b0c      	cmp	r3, #12
 8006e52:	d82d      	bhi.n	8006eb0 <UART_SetConfig+0x14c>
 8006e54:	a201      	add	r2, pc, #4	; (adr r2, 8006e5c <UART_SetConfig+0xf8>)
 8006e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5a:	bf00      	nop
 8006e5c:	08006e91 	.word	0x08006e91
 8006e60:	08006eb1 	.word	0x08006eb1
 8006e64:	08006eb1 	.word	0x08006eb1
 8006e68:	08006eb1 	.word	0x08006eb1
 8006e6c:	08006ea1 	.word	0x08006ea1
 8006e70:	08006eb1 	.word	0x08006eb1
 8006e74:	08006eb1 	.word	0x08006eb1
 8006e78:	08006eb1 	.word	0x08006eb1
 8006e7c:	08006e99 	.word	0x08006e99
 8006e80:	08006eb1 	.word	0x08006eb1
 8006e84:	08006eb1 	.word	0x08006eb1
 8006e88:	08006eb1 	.word	0x08006eb1
 8006e8c:	08006ea9 	.word	0x08006ea9
 8006e90:	2300      	movs	r3, #0
 8006e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e96:	e0d8      	b.n	800704a <UART_SetConfig+0x2e6>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e9e:	e0d4      	b.n	800704a <UART_SetConfig+0x2e6>
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ea6:	e0d0      	b.n	800704a <UART_SetConfig+0x2e6>
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eae:	e0cc      	b.n	800704a <UART_SetConfig+0x2e6>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eb6:	e0c8      	b.n	800704a <UART_SetConfig+0x2e6>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a5e      	ldr	r2, [pc, #376]	; (8007038 <UART_SetConfig+0x2d4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d125      	bne.n	8006f0e <UART_SetConfig+0x1aa>
 8006ec2:	4b5b      	ldr	r3, [pc, #364]	; (8007030 <UART_SetConfig+0x2cc>)
 8006ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ecc:	2b30      	cmp	r3, #48	; 0x30
 8006ece:	d016      	beq.n	8006efe <UART_SetConfig+0x19a>
 8006ed0:	2b30      	cmp	r3, #48	; 0x30
 8006ed2:	d818      	bhi.n	8006f06 <UART_SetConfig+0x1a2>
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	d00a      	beq.n	8006eee <UART_SetConfig+0x18a>
 8006ed8:	2b20      	cmp	r3, #32
 8006eda:	d814      	bhi.n	8006f06 <UART_SetConfig+0x1a2>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <UART_SetConfig+0x182>
 8006ee0:	2b10      	cmp	r3, #16
 8006ee2:	d008      	beq.n	8006ef6 <UART_SetConfig+0x192>
 8006ee4:	e00f      	b.n	8006f06 <UART_SetConfig+0x1a2>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eec:	e0ad      	b.n	800704a <UART_SetConfig+0x2e6>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ef4:	e0a9      	b.n	800704a <UART_SetConfig+0x2e6>
 8006ef6:	2304      	movs	r3, #4
 8006ef8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006efc:	e0a5      	b.n	800704a <UART_SetConfig+0x2e6>
 8006efe:	2308      	movs	r3, #8
 8006f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f04:	e0a1      	b.n	800704a <UART_SetConfig+0x2e6>
 8006f06:	2310      	movs	r3, #16
 8006f08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f0c:	e09d      	b.n	800704a <UART_SetConfig+0x2e6>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a4a      	ldr	r2, [pc, #296]	; (800703c <UART_SetConfig+0x2d8>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d125      	bne.n	8006f64 <UART_SetConfig+0x200>
 8006f18:	4b45      	ldr	r3, [pc, #276]	; (8007030 <UART_SetConfig+0x2cc>)
 8006f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f22:	2bc0      	cmp	r3, #192	; 0xc0
 8006f24:	d016      	beq.n	8006f54 <UART_SetConfig+0x1f0>
 8006f26:	2bc0      	cmp	r3, #192	; 0xc0
 8006f28:	d818      	bhi.n	8006f5c <UART_SetConfig+0x1f8>
 8006f2a:	2b80      	cmp	r3, #128	; 0x80
 8006f2c:	d00a      	beq.n	8006f44 <UART_SetConfig+0x1e0>
 8006f2e:	2b80      	cmp	r3, #128	; 0x80
 8006f30:	d814      	bhi.n	8006f5c <UART_SetConfig+0x1f8>
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <UART_SetConfig+0x1d8>
 8006f36:	2b40      	cmp	r3, #64	; 0x40
 8006f38:	d008      	beq.n	8006f4c <UART_SetConfig+0x1e8>
 8006f3a:	e00f      	b.n	8006f5c <UART_SetConfig+0x1f8>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f42:	e082      	b.n	800704a <UART_SetConfig+0x2e6>
 8006f44:	2302      	movs	r3, #2
 8006f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f4a:	e07e      	b.n	800704a <UART_SetConfig+0x2e6>
 8006f4c:	2304      	movs	r3, #4
 8006f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f52:	e07a      	b.n	800704a <UART_SetConfig+0x2e6>
 8006f54:	2308      	movs	r3, #8
 8006f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f5a:	e076      	b.n	800704a <UART_SetConfig+0x2e6>
 8006f5c:	2310      	movs	r3, #16
 8006f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f62:	e072      	b.n	800704a <UART_SetConfig+0x2e6>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a35      	ldr	r2, [pc, #212]	; (8007040 <UART_SetConfig+0x2dc>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d12a      	bne.n	8006fc4 <UART_SetConfig+0x260>
 8006f6e:	4b30      	ldr	r3, [pc, #192]	; (8007030 <UART_SetConfig+0x2cc>)
 8006f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f7c:	d01a      	beq.n	8006fb4 <UART_SetConfig+0x250>
 8006f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f82:	d81b      	bhi.n	8006fbc <UART_SetConfig+0x258>
 8006f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f88:	d00c      	beq.n	8006fa4 <UART_SetConfig+0x240>
 8006f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f8e:	d815      	bhi.n	8006fbc <UART_SetConfig+0x258>
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d003      	beq.n	8006f9c <UART_SetConfig+0x238>
 8006f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f98:	d008      	beq.n	8006fac <UART_SetConfig+0x248>
 8006f9a:	e00f      	b.n	8006fbc <UART_SetConfig+0x258>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fa2:	e052      	b.n	800704a <UART_SetConfig+0x2e6>
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006faa:	e04e      	b.n	800704a <UART_SetConfig+0x2e6>
 8006fac:	2304      	movs	r3, #4
 8006fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fb2:	e04a      	b.n	800704a <UART_SetConfig+0x2e6>
 8006fb4:	2308      	movs	r3, #8
 8006fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fba:	e046      	b.n	800704a <UART_SetConfig+0x2e6>
 8006fbc:	2310      	movs	r3, #16
 8006fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fc2:	e042      	b.n	800704a <UART_SetConfig+0x2e6>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a17      	ldr	r2, [pc, #92]	; (8007028 <UART_SetConfig+0x2c4>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d13a      	bne.n	8007044 <UART_SetConfig+0x2e0>
 8006fce:	4b18      	ldr	r3, [pc, #96]	; (8007030 <UART_SetConfig+0x2cc>)
 8006fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fdc:	d01a      	beq.n	8007014 <UART_SetConfig+0x2b0>
 8006fde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fe2:	d81b      	bhi.n	800701c <UART_SetConfig+0x2b8>
 8006fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fe8:	d00c      	beq.n	8007004 <UART_SetConfig+0x2a0>
 8006fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fee:	d815      	bhi.n	800701c <UART_SetConfig+0x2b8>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <UART_SetConfig+0x298>
 8006ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ff8:	d008      	beq.n	800700c <UART_SetConfig+0x2a8>
 8006ffa:	e00f      	b.n	800701c <UART_SetConfig+0x2b8>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007002:	e022      	b.n	800704a <UART_SetConfig+0x2e6>
 8007004:	2302      	movs	r3, #2
 8007006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800700a:	e01e      	b.n	800704a <UART_SetConfig+0x2e6>
 800700c:	2304      	movs	r3, #4
 800700e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007012:	e01a      	b.n	800704a <UART_SetConfig+0x2e6>
 8007014:	2308      	movs	r3, #8
 8007016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800701a:	e016      	b.n	800704a <UART_SetConfig+0x2e6>
 800701c:	2310      	movs	r3, #16
 800701e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007022:	e012      	b.n	800704a <UART_SetConfig+0x2e6>
 8007024:	efff69f3 	.word	0xefff69f3
 8007028:	40008000 	.word	0x40008000
 800702c:	40013800 	.word	0x40013800
 8007030:	40021000 	.word	0x40021000
 8007034:	40004400 	.word	0x40004400
 8007038:	40004800 	.word	0x40004800
 800703c:	40004c00 	.word	0x40004c00
 8007040:	40005000 	.word	0x40005000
 8007044:	2310      	movs	r3, #16
 8007046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a9f      	ldr	r2, [pc, #636]	; (80072cc <UART_SetConfig+0x568>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d17a      	bne.n	800714a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007054:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007058:	2b08      	cmp	r3, #8
 800705a:	d824      	bhi.n	80070a6 <UART_SetConfig+0x342>
 800705c:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <UART_SetConfig+0x300>)
 800705e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007062:	bf00      	nop
 8007064:	08007089 	.word	0x08007089
 8007068:	080070a7 	.word	0x080070a7
 800706c:	08007091 	.word	0x08007091
 8007070:	080070a7 	.word	0x080070a7
 8007074:	08007097 	.word	0x08007097
 8007078:	080070a7 	.word	0x080070a7
 800707c:	080070a7 	.word	0x080070a7
 8007080:	080070a7 	.word	0x080070a7
 8007084:	0800709f 	.word	0x0800709f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007088:	f7fe faf4 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 800708c:	61f8      	str	r0, [r7, #28]
        break;
 800708e:	e010      	b.n	80070b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007090:	4b8f      	ldr	r3, [pc, #572]	; (80072d0 <UART_SetConfig+0x56c>)
 8007092:	61fb      	str	r3, [r7, #28]
        break;
 8007094:	e00d      	b.n	80070b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007096:	f7fe fa55 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 800709a:	61f8      	str	r0, [r7, #28]
        break;
 800709c:	e009      	b.n	80070b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800709e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070a2:	61fb      	str	r3, [r7, #28]
        break;
 80070a4:	e005      	b.n	80070b2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80070b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 80fb 	beq.w	80072b0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	4613      	mov	r3, r2
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	4413      	add	r3, r2
 80070c4:	69fa      	ldr	r2, [r7, #28]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d305      	bcc.n	80070d6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070d0:	69fa      	ldr	r2, [r7, #28]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d903      	bls.n	80070de <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80070dc:	e0e8      	b.n	80072b0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	2200      	movs	r2, #0
 80070e2:	461c      	mov	r4, r3
 80070e4:	4615      	mov	r5, r2
 80070e6:	f04f 0200 	mov.w	r2, #0
 80070ea:	f04f 0300 	mov.w	r3, #0
 80070ee:	022b      	lsls	r3, r5, #8
 80070f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80070f4:	0222      	lsls	r2, r4, #8
 80070f6:	68f9      	ldr	r1, [r7, #12]
 80070f8:	6849      	ldr	r1, [r1, #4]
 80070fa:	0849      	lsrs	r1, r1, #1
 80070fc:	2000      	movs	r0, #0
 80070fe:	4688      	mov	r8, r1
 8007100:	4681      	mov	r9, r0
 8007102:	eb12 0a08 	adds.w	sl, r2, r8
 8007106:	eb43 0b09 	adc.w	fp, r3, r9
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	603b      	str	r3, [r7, #0]
 8007112:	607a      	str	r2, [r7, #4]
 8007114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007118:	4650      	mov	r0, sl
 800711a:	4659      	mov	r1, fp
 800711c:	f7f9 fc16 	bl	800094c <__aeabi_uldivmod>
 8007120:	4602      	mov	r2, r0
 8007122:	460b      	mov	r3, r1
 8007124:	4613      	mov	r3, r2
 8007126:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800712e:	d308      	bcc.n	8007142 <UART_SetConfig+0x3de>
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007136:	d204      	bcs.n	8007142 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	60da      	str	r2, [r3, #12]
 8007140:	e0b6      	b.n	80072b0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007148:	e0b2      	b.n	80072b0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	69db      	ldr	r3, [r3, #28]
 800714e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007152:	d15e      	bne.n	8007212 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007154:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007158:	2b08      	cmp	r3, #8
 800715a:	d828      	bhi.n	80071ae <UART_SetConfig+0x44a>
 800715c:	a201      	add	r2, pc, #4	; (adr r2, 8007164 <UART_SetConfig+0x400>)
 800715e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007162:	bf00      	nop
 8007164:	08007189 	.word	0x08007189
 8007168:	08007191 	.word	0x08007191
 800716c:	08007199 	.word	0x08007199
 8007170:	080071af 	.word	0x080071af
 8007174:	0800719f 	.word	0x0800719f
 8007178:	080071af 	.word	0x080071af
 800717c:	080071af 	.word	0x080071af
 8007180:	080071af 	.word	0x080071af
 8007184:	080071a7 	.word	0x080071a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007188:	f7fe fa74 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 800718c:	61f8      	str	r0, [r7, #28]
        break;
 800718e:	e014      	b.n	80071ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007190:	f7fe fa86 	bl	80056a0 <HAL_RCC_GetPCLK2Freq>
 8007194:	61f8      	str	r0, [r7, #28]
        break;
 8007196:	e010      	b.n	80071ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007198:	4b4d      	ldr	r3, [pc, #308]	; (80072d0 <UART_SetConfig+0x56c>)
 800719a:	61fb      	str	r3, [r7, #28]
        break;
 800719c:	e00d      	b.n	80071ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800719e:	f7fe f9d1 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 80071a2:	61f8      	str	r0, [r7, #28]
        break;
 80071a4:	e009      	b.n	80071ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071aa:	61fb      	str	r3, [r7, #28]
        break;
 80071ac:	e005      	b.n	80071ba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80071b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d077      	beq.n	80072b0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	005a      	lsls	r2, r3, #1
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	085b      	lsrs	r3, r3, #1
 80071ca:	441a      	add	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	2b0f      	cmp	r3, #15
 80071da:	d916      	bls.n	800720a <UART_SetConfig+0x4a6>
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071e2:	d212      	bcs.n	800720a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	f023 030f 	bic.w	r3, r3, #15
 80071ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	085b      	lsrs	r3, r3, #1
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	f003 0307 	and.w	r3, r3, #7
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	8afb      	ldrh	r3, [r7, #22]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	8afa      	ldrh	r2, [r7, #22]
 8007206:	60da      	str	r2, [r3, #12]
 8007208:	e052      	b.n	80072b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007210:	e04e      	b.n	80072b0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007212:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007216:	2b08      	cmp	r3, #8
 8007218:	d827      	bhi.n	800726a <UART_SetConfig+0x506>
 800721a:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <UART_SetConfig+0x4bc>)
 800721c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007220:	08007245 	.word	0x08007245
 8007224:	0800724d 	.word	0x0800724d
 8007228:	08007255 	.word	0x08007255
 800722c:	0800726b 	.word	0x0800726b
 8007230:	0800725b 	.word	0x0800725b
 8007234:	0800726b 	.word	0x0800726b
 8007238:	0800726b 	.word	0x0800726b
 800723c:	0800726b 	.word	0x0800726b
 8007240:	08007263 	.word	0x08007263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007244:	f7fe fa16 	bl	8005674 <HAL_RCC_GetPCLK1Freq>
 8007248:	61f8      	str	r0, [r7, #28]
        break;
 800724a:	e014      	b.n	8007276 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800724c:	f7fe fa28 	bl	80056a0 <HAL_RCC_GetPCLK2Freq>
 8007250:	61f8      	str	r0, [r7, #28]
        break;
 8007252:	e010      	b.n	8007276 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007254:	4b1e      	ldr	r3, [pc, #120]	; (80072d0 <UART_SetConfig+0x56c>)
 8007256:	61fb      	str	r3, [r7, #28]
        break;
 8007258:	e00d      	b.n	8007276 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800725a:	f7fe f973 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 800725e:	61f8      	str	r0, [r7, #28]
        break;
 8007260:	e009      	b.n	8007276 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007266:	61fb      	str	r3, [r7, #28]
        break;
 8007268:	e005      	b.n	8007276 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007274:	bf00      	nop
    }

    if (pclk != 0U)
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d019      	beq.n	80072b0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	085a      	lsrs	r2, r3, #1
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	441a      	add	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	fbb2 f3f3 	udiv	r3, r2, r3
 800728e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	2b0f      	cmp	r3, #15
 8007294:	d909      	bls.n	80072aa <UART_SetConfig+0x546>
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800729c:	d205      	bcs.n	80072aa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60da      	str	r2, [r3, #12]
 80072a8:	e002      	b.n	80072b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80072bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3728      	adds	r7, #40	; 0x28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072ca:	bf00      	nop
 80072cc:	40008000 	.word	0x40008000
 80072d0:	00f42400 	.word	0x00f42400

080072d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	f003 0308 	and.w	r3, r3, #8
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00a      	beq.n	80072fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00a      	beq.n	8007320 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00a      	beq.n	8007342 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	f003 0304 	and.w	r3, r3, #4
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	430a      	orrs	r2, r1
 8007362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	f003 0310 	and.w	r3, r3, #16
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00a      	beq.n	8007386 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00a      	beq.n	80073a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d01a      	beq.n	80073ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073d2:	d10a      	bne.n	80073ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	430a      	orrs	r2, r1
 800740a:	605a      	str	r2, [r3, #4]
  }
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b098      	sub	sp, #96	; 0x60
 800741c:	af02      	add	r7, sp, #8
 800741e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007428:	f7fa ff4c 	bl	80022c4 <HAL_GetTick>
 800742c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0308 	and.w	r3, r3, #8
 8007438:	2b08      	cmp	r3, #8
 800743a:	d12e      	bne.n	800749a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800743c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007444:	2200      	movs	r2, #0
 8007446:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f88c 	bl	8007568 <UART_WaitOnFlagUntilTimeout>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d021      	beq.n	800749a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745e:	e853 3f00 	ldrex	r3, [r3]
 8007462:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800746a:	653b      	str	r3, [r7, #80]	; 0x50
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	461a      	mov	r2, r3
 8007472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007474:	647b      	str	r3, [r7, #68]	; 0x44
 8007476:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800747a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800747c:	e841 2300 	strex	r3, r2, [r1]
 8007480:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e6      	bne.n	8007456 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2220      	movs	r2, #32
 800748c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e062      	b.n	8007560 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0304 	and.w	r3, r3, #4
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	d149      	bne.n	800753c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074b0:	2200      	movs	r2, #0
 80074b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f856 	bl	8007568 <UART_WaitOnFlagUntilTimeout>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d03c      	beq.n	800753c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	e853 3f00 	ldrex	r3, [r3]
 80074ce:	623b      	str	r3, [r7, #32]
   return(result);
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074e0:	633b      	str	r3, [r7, #48]	; 0x30
 80074e2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e8:	e841 2300 	strex	r3, r2, [r1]
 80074ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1e6      	bne.n	80074c2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3308      	adds	r3, #8
 80074fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	e853 3f00 	ldrex	r3, [r3]
 8007502:	60fb      	str	r3, [r7, #12]
   return(result);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0301 	bic.w	r3, r3, #1
 800750a:	64bb      	str	r3, [r7, #72]	; 0x48
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3308      	adds	r3, #8
 8007512:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007514:	61fa      	str	r2, [r7, #28]
 8007516:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007518:	69b9      	ldr	r1, [r7, #24]
 800751a:	69fa      	ldr	r2, [r7, #28]
 800751c:	e841 2300 	strex	r3, r2, [r1]
 8007520:	617b      	str	r3, [r7, #20]
   return(result);
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1e5      	bne.n	80074f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2220      	movs	r2, #32
 800752c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e011      	b.n	8007560 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2220      	movs	r2, #32
 8007546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3758      	adds	r7, #88	; 0x58
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	603b      	str	r3, [r7, #0]
 8007574:	4613      	mov	r3, r2
 8007576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007578:	e049      	b.n	800760e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007580:	d045      	beq.n	800760e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007582:	f7fa fe9f 	bl	80022c4 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	429a      	cmp	r2, r3
 8007590:	d302      	bcc.n	8007598 <UART_WaitOnFlagUntilTimeout+0x30>
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e048      	b.n	800762e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0304 	and.w	r3, r3, #4
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d031      	beq.n	800760e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	f003 0308 	and.w	r3, r3, #8
 80075b4:	2b08      	cmp	r3, #8
 80075b6:	d110      	bne.n	80075da <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2208      	movs	r2, #8
 80075be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f000 f838 	bl	8007636 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2208      	movs	r2, #8
 80075ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e029      	b.n	800762e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075e8:	d111      	bne.n	800760e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 f81e 	bl	8007636 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e00f      	b.n	800762e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	69da      	ldr	r2, [r3, #28]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	4013      	ands	r3, r2
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	429a      	cmp	r2, r3
 800761c:	bf0c      	ite	eq
 800761e:	2301      	moveq	r3, #1
 8007620:	2300      	movne	r3, #0
 8007622:	b2db      	uxtb	r3, r3
 8007624:	461a      	mov	r2, r3
 8007626:	79fb      	ldrb	r3, [r7, #7]
 8007628:	429a      	cmp	r2, r3
 800762a:	d0a6      	beq.n	800757a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007636:	b480      	push	{r7}
 8007638:	b095      	sub	sp, #84	; 0x54
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007646:	e853 3f00 	ldrex	r3, [r3]
 800764a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	461a      	mov	r2, r3
 800765a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800765c:	643b      	str	r3, [r7, #64]	; 0x40
 800765e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007660:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007662:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007664:	e841 2300 	strex	r3, r2, [r1]
 8007668:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800766a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1e6      	bne.n	800763e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3308      	adds	r3, #8
 8007676:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	e853 3f00 	ldrex	r3, [r3]
 800767e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	f023 0301 	bic.w	r3, r3, #1
 8007686:	64bb      	str	r3, [r7, #72]	; 0x48
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3308      	adds	r3, #8
 800768e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007690:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007692:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007698:	e841 2300 	strex	r3, r2, [r1]
 800769c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e5      	bne.n	8007670 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d118      	bne.n	80076de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	e853 3f00 	ldrex	r3, [r3]
 80076b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f023 0310 	bic.w	r3, r3, #16
 80076c0:	647b      	str	r3, [r7, #68]	; 0x44
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	461a      	mov	r2, r3
 80076c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ca:	61bb      	str	r3, [r7, #24]
 80076cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	6979      	ldr	r1, [r7, #20]
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	e841 2300 	strex	r3, r2, [r1]
 80076d6:	613b      	str	r3, [r7, #16]
   return(result);
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1e6      	bne.n	80076ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80076f2:	bf00      	nop
 80076f4:	3754      	adds	r7, #84	; 0x54
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
	...

08007700 <std>:
 8007700:	2300      	movs	r3, #0
 8007702:	b510      	push	{r4, lr}
 8007704:	4604      	mov	r4, r0
 8007706:	e9c0 3300 	strd	r3, r3, [r0]
 800770a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800770e:	6083      	str	r3, [r0, #8]
 8007710:	8181      	strh	r1, [r0, #12]
 8007712:	6643      	str	r3, [r0, #100]	; 0x64
 8007714:	81c2      	strh	r2, [r0, #14]
 8007716:	6183      	str	r3, [r0, #24]
 8007718:	4619      	mov	r1, r3
 800771a:	2208      	movs	r2, #8
 800771c:	305c      	adds	r0, #92	; 0x5c
 800771e:	f000 f906 	bl	800792e <memset>
 8007722:	4b0d      	ldr	r3, [pc, #52]	; (8007758 <std+0x58>)
 8007724:	6263      	str	r3, [r4, #36]	; 0x24
 8007726:	4b0d      	ldr	r3, [pc, #52]	; (800775c <std+0x5c>)
 8007728:	62a3      	str	r3, [r4, #40]	; 0x28
 800772a:	4b0d      	ldr	r3, [pc, #52]	; (8007760 <std+0x60>)
 800772c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800772e:	4b0d      	ldr	r3, [pc, #52]	; (8007764 <std+0x64>)
 8007730:	6323      	str	r3, [r4, #48]	; 0x30
 8007732:	4b0d      	ldr	r3, [pc, #52]	; (8007768 <std+0x68>)
 8007734:	6224      	str	r4, [r4, #32]
 8007736:	429c      	cmp	r4, r3
 8007738:	d006      	beq.n	8007748 <std+0x48>
 800773a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800773e:	4294      	cmp	r4, r2
 8007740:	d002      	beq.n	8007748 <std+0x48>
 8007742:	33d0      	adds	r3, #208	; 0xd0
 8007744:	429c      	cmp	r4, r3
 8007746:	d105      	bne.n	8007754 <std+0x54>
 8007748:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800774c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007750:	f000 b966 	b.w	8007a20 <__retarget_lock_init_recursive>
 8007754:	bd10      	pop	{r4, pc}
 8007756:	bf00      	nop
 8007758:	080078a9 	.word	0x080078a9
 800775c:	080078cb 	.word	0x080078cb
 8007760:	08007903 	.word	0x08007903
 8007764:	08007927 	.word	0x08007927
 8007768:	200003c8 	.word	0x200003c8

0800776c <stdio_exit_handler>:
 800776c:	4a02      	ldr	r2, [pc, #8]	; (8007778 <stdio_exit_handler+0xc>)
 800776e:	4903      	ldr	r1, [pc, #12]	; (800777c <stdio_exit_handler+0x10>)
 8007770:	4803      	ldr	r0, [pc, #12]	; (8007780 <stdio_exit_handler+0x14>)
 8007772:	f000 b869 	b.w	8007848 <_fwalk_sglue>
 8007776:	bf00      	nop
 8007778:	20000014 	.word	0x20000014
 800777c:	080082cd 	.word	0x080082cd
 8007780:	20000020 	.word	0x20000020

08007784 <cleanup_stdio>:
 8007784:	6841      	ldr	r1, [r0, #4]
 8007786:	4b0c      	ldr	r3, [pc, #48]	; (80077b8 <cleanup_stdio+0x34>)
 8007788:	4299      	cmp	r1, r3
 800778a:	b510      	push	{r4, lr}
 800778c:	4604      	mov	r4, r0
 800778e:	d001      	beq.n	8007794 <cleanup_stdio+0x10>
 8007790:	f000 fd9c 	bl	80082cc <_fflush_r>
 8007794:	68a1      	ldr	r1, [r4, #8]
 8007796:	4b09      	ldr	r3, [pc, #36]	; (80077bc <cleanup_stdio+0x38>)
 8007798:	4299      	cmp	r1, r3
 800779a:	d002      	beq.n	80077a2 <cleanup_stdio+0x1e>
 800779c:	4620      	mov	r0, r4
 800779e:	f000 fd95 	bl	80082cc <_fflush_r>
 80077a2:	68e1      	ldr	r1, [r4, #12]
 80077a4:	4b06      	ldr	r3, [pc, #24]	; (80077c0 <cleanup_stdio+0x3c>)
 80077a6:	4299      	cmp	r1, r3
 80077a8:	d004      	beq.n	80077b4 <cleanup_stdio+0x30>
 80077aa:	4620      	mov	r0, r4
 80077ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b0:	f000 bd8c 	b.w	80082cc <_fflush_r>
 80077b4:	bd10      	pop	{r4, pc}
 80077b6:	bf00      	nop
 80077b8:	200003c8 	.word	0x200003c8
 80077bc:	20000430 	.word	0x20000430
 80077c0:	20000498 	.word	0x20000498

080077c4 <global_stdio_init.part.0>:
 80077c4:	b510      	push	{r4, lr}
 80077c6:	4b0b      	ldr	r3, [pc, #44]	; (80077f4 <global_stdio_init.part.0+0x30>)
 80077c8:	4c0b      	ldr	r4, [pc, #44]	; (80077f8 <global_stdio_init.part.0+0x34>)
 80077ca:	4a0c      	ldr	r2, [pc, #48]	; (80077fc <global_stdio_init.part.0+0x38>)
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	4620      	mov	r0, r4
 80077d0:	2200      	movs	r2, #0
 80077d2:	2104      	movs	r1, #4
 80077d4:	f7ff ff94 	bl	8007700 <std>
 80077d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80077dc:	2201      	movs	r2, #1
 80077de:	2109      	movs	r1, #9
 80077e0:	f7ff ff8e 	bl	8007700 <std>
 80077e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80077e8:	2202      	movs	r2, #2
 80077ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ee:	2112      	movs	r1, #18
 80077f0:	f7ff bf86 	b.w	8007700 <std>
 80077f4:	20000500 	.word	0x20000500
 80077f8:	200003c8 	.word	0x200003c8
 80077fc:	0800776d 	.word	0x0800776d

08007800 <__sfp_lock_acquire>:
 8007800:	4801      	ldr	r0, [pc, #4]	; (8007808 <__sfp_lock_acquire+0x8>)
 8007802:	f000 b90e 	b.w	8007a22 <__retarget_lock_acquire_recursive>
 8007806:	bf00      	nop
 8007808:	20000509 	.word	0x20000509

0800780c <__sfp_lock_release>:
 800780c:	4801      	ldr	r0, [pc, #4]	; (8007814 <__sfp_lock_release+0x8>)
 800780e:	f000 b909 	b.w	8007a24 <__retarget_lock_release_recursive>
 8007812:	bf00      	nop
 8007814:	20000509 	.word	0x20000509

08007818 <__sinit>:
 8007818:	b510      	push	{r4, lr}
 800781a:	4604      	mov	r4, r0
 800781c:	f7ff fff0 	bl	8007800 <__sfp_lock_acquire>
 8007820:	6a23      	ldr	r3, [r4, #32]
 8007822:	b11b      	cbz	r3, 800782c <__sinit+0x14>
 8007824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007828:	f7ff bff0 	b.w	800780c <__sfp_lock_release>
 800782c:	4b04      	ldr	r3, [pc, #16]	; (8007840 <__sinit+0x28>)
 800782e:	6223      	str	r3, [r4, #32]
 8007830:	4b04      	ldr	r3, [pc, #16]	; (8007844 <__sinit+0x2c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1f5      	bne.n	8007824 <__sinit+0xc>
 8007838:	f7ff ffc4 	bl	80077c4 <global_stdio_init.part.0>
 800783c:	e7f2      	b.n	8007824 <__sinit+0xc>
 800783e:	bf00      	nop
 8007840:	08007785 	.word	0x08007785
 8007844:	20000500 	.word	0x20000500

08007848 <_fwalk_sglue>:
 8007848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800784c:	4607      	mov	r7, r0
 800784e:	4688      	mov	r8, r1
 8007850:	4614      	mov	r4, r2
 8007852:	2600      	movs	r6, #0
 8007854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007858:	f1b9 0901 	subs.w	r9, r9, #1
 800785c:	d505      	bpl.n	800786a <_fwalk_sglue+0x22>
 800785e:	6824      	ldr	r4, [r4, #0]
 8007860:	2c00      	cmp	r4, #0
 8007862:	d1f7      	bne.n	8007854 <_fwalk_sglue+0xc>
 8007864:	4630      	mov	r0, r6
 8007866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800786a:	89ab      	ldrh	r3, [r5, #12]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d907      	bls.n	8007880 <_fwalk_sglue+0x38>
 8007870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007874:	3301      	adds	r3, #1
 8007876:	d003      	beq.n	8007880 <_fwalk_sglue+0x38>
 8007878:	4629      	mov	r1, r5
 800787a:	4638      	mov	r0, r7
 800787c:	47c0      	blx	r8
 800787e:	4306      	orrs	r6, r0
 8007880:	3568      	adds	r5, #104	; 0x68
 8007882:	e7e9      	b.n	8007858 <_fwalk_sglue+0x10>

08007884 <iprintf>:
 8007884:	b40f      	push	{r0, r1, r2, r3}
 8007886:	b507      	push	{r0, r1, r2, lr}
 8007888:	4906      	ldr	r1, [pc, #24]	; (80078a4 <iprintf+0x20>)
 800788a:	ab04      	add	r3, sp, #16
 800788c:	6808      	ldr	r0, [r1, #0]
 800788e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007892:	6881      	ldr	r1, [r0, #8]
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	f000 f9e9 	bl	8007c6c <_vfiprintf_r>
 800789a:	b003      	add	sp, #12
 800789c:	f85d eb04 	ldr.w	lr, [sp], #4
 80078a0:	b004      	add	sp, #16
 80078a2:	4770      	bx	lr
 80078a4:	2000006c 	.word	0x2000006c

080078a8 <__sread>:
 80078a8:	b510      	push	{r4, lr}
 80078aa:	460c      	mov	r4, r1
 80078ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b0:	f000 f868 	bl	8007984 <_read_r>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	bfab      	itete	ge
 80078b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078ba:	89a3      	ldrhlt	r3, [r4, #12]
 80078bc:	181b      	addge	r3, r3, r0
 80078be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078c2:	bfac      	ite	ge
 80078c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80078c6:	81a3      	strhlt	r3, [r4, #12]
 80078c8:	bd10      	pop	{r4, pc}

080078ca <__swrite>:
 80078ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ce:	461f      	mov	r7, r3
 80078d0:	898b      	ldrh	r3, [r1, #12]
 80078d2:	05db      	lsls	r3, r3, #23
 80078d4:	4605      	mov	r5, r0
 80078d6:	460c      	mov	r4, r1
 80078d8:	4616      	mov	r6, r2
 80078da:	d505      	bpl.n	80078e8 <__swrite+0x1e>
 80078dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078e0:	2302      	movs	r3, #2
 80078e2:	2200      	movs	r2, #0
 80078e4:	f000 f83c 	bl	8007960 <_lseek_r>
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078f2:	81a3      	strh	r3, [r4, #12]
 80078f4:	4632      	mov	r2, r6
 80078f6:	463b      	mov	r3, r7
 80078f8:	4628      	mov	r0, r5
 80078fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078fe:	f000 b853 	b.w	80079a8 <_write_r>

08007902 <__sseek>:
 8007902:	b510      	push	{r4, lr}
 8007904:	460c      	mov	r4, r1
 8007906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800790a:	f000 f829 	bl	8007960 <_lseek_r>
 800790e:	1c43      	adds	r3, r0, #1
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	bf15      	itete	ne
 8007914:	6560      	strne	r0, [r4, #84]	; 0x54
 8007916:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800791a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800791e:	81a3      	strheq	r3, [r4, #12]
 8007920:	bf18      	it	ne
 8007922:	81a3      	strhne	r3, [r4, #12]
 8007924:	bd10      	pop	{r4, pc}

08007926 <__sclose>:
 8007926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800792a:	f000 b809 	b.w	8007940 <_close_r>

0800792e <memset>:
 800792e:	4402      	add	r2, r0
 8007930:	4603      	mov	r3, r0
 8007932:	4293      	cmp	r3, r2
 8007934:	d100      	bne.n	8007938 <memset+0xa>
 8007936:	4770      	bx	lr
 8007938:	f803 1b01 	strb.w	r1, [r3], #1
 800793c:	e7f9      	b.n	8007932 <memset+0x4>
	...

08007940 <_close_r>:
 8007940:	b538      	push	{r3, r4, r5, lr}
 8007942:	4d06      	ldr	r5, [pc, #24]	; (800795c <_close_r+0x1c>)
 8007944:	2300      	movs	r3, #0
 8007946:	4604      	mov	r4, r0
 8007948:	4608      	mov	r0, r1
 800794a:	602b      	str	r3, [r5, #0]
 800794c:	f7fa fbdf 	bl	800210e <_close>
 8007950:	1c43      	adds	r3, r0, #1
 8007952:	d102      	bne.n	800795a <_close_r+0x1a>
 8007954:	682b      	ldr	r3, [r5, #0]
 8007956:	b103      	cbz	r3, 800795a <_close_r+0x1a>
 8007958:	6023      	str	r3, [r4, #0]
 800795a:	bd38      	pop	{r3, r4, r5, pc}
 800795c:	20000504 	.word	0x20000504

08007960 <_lseek_r>:
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	4d07      	ldr	r5, [pc, #28]	; (8007980 <_lseek_r+0x20>)
 8007964:	4604      	mov	r4, r0
 8007966:	4608      	mov	r0, r1
 8007968:	4611      	mov	r1, r2
 800796a:	2200      	movs	r2, #0
 800796c:	602a      	str	r2, [r5, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	f7fa fbf4 	bl	800215c <_lseek>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	d102      	bne.n	800797e <_lseek_r+0x1e>
 8007978:	682b      	ldr	r3, [r5, #0]
 800797a:	b103      	cbz	r3, 800797e <_lseek_r+0x1e>
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	bd38      	pop	{r3, r4, r5, pc}
 8007980:	20000504 	.word	0x20000504

08007984 <_read_r>:
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	4d07      	ldr	r5, [pc, #28]	; (80079a4 <_read_r+0x20>)
 8007988:	4604      	mov	r4, r0
 800798a:	4608      	mov	r0, r1
 800798c:	4611      	mov	r1, r2
 800798e:	2200      	movs	r2, #0
 8007990:	602a      	str	r2, [r5, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	f7fa fb82 	bl	800209c <_read>
 8007998:	1c43      	adds	r3, r0, #1
 800799a:	d102      	bne.n	80079a2 <_read_r+0x1e>
 800799c:	682b      	ldr	r3, [r5, #0]
 800799e:	b103      	cbz	r3, 80079a2 <_read_r+0x1e>
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
 80079a4:	20000504 	.word	0x20000504

080079a8 <_write_r>:
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	4d07      	ldr	r5, [pc, #28]	; (80079c8 <_write_r+0x20>)
 80079ac:	4604      	mov	r4, r0
 80079ae:	4608      	mov	r0, r1
 80079b0:	4611      	mov	r1, r2
 80079b2:	2200      	movs	r2, #0
 80079b4:	602a      	str	r2, [r5, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	f7fa fb8d 	bl	80020d6 <_write>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	d102      	bne.n	80079c6 <_write_r+0x1e>
 80079c0:	682b      	ldr	r3, [r5, #0]
 80079c2:	b103      	cbz	r3, 80079c6 <_write_r+0x1e>
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	bd38      	pop	{r3, r4, r5, pc}
 80079c8:	20000504 	.word	0x20000504

080079cc <__errno>:
 80079cc:	4b01      	ldr	r3, [pc, #4]	; (80079d4 <__errno+0x8>)
 80079ce:	6818      	ldr	r0, [r3, #0]
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	2000006c 	.word	0x2000006c

080079d8 <__libc_init_array>:
 80079d8:	b570      	push	{r4, r5, r6, lr}
 80079da:	4d0d      	ldr	r5, [pc, #52]	; (8007a10 <__libc_init_array+0x38>)
 80079dc:	4c0d      	ldr	r4, [pc, #52]	; (8007a14 <__libc_init_array+0x3c>)
 80079de:	1b64      	subs	r4, r4, r5
 80079e0:	10a4      	asrs	r4, r4, #2
 80079e2:	2600      	movs	r6, #0
 80079e4:	42a6      	cmp	r6, r4
 80079e6:	d109      	bne.n	80079fc <__libc_init_array+0x24>
 80079e8:	4d0b      	ldr	r5, [pc, #44]	; (8007a18 <__libc_init_array+0x40>)
 80079ea:	4c0c      	ldr	r4, [pc, #48]	; (8007a1c <__libc_init_array+0x44>)
 80079ec:	f000 fdc0 	bl	8008570 <_init>
 80079f0:	1b64      	subs	r4, r4, r5
 80079f2:	10a4      	asrs	r4, r4, #2
 80079f4:	2600      	movs	r6, #0
 80079f6:	42a6      	cmp	r6, r4
 80079f8:	d105      	bne.n	8007a06 <__libc_init_array+0x2e>
 80079fa:	bd70      	pop	{r4, r5, r6, pc}
 80079fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a00:	4798      	blx	r3
 8007a02:	3601      	adds	r6, #1
 8007a04:	e7ee      	b.n	80079e4 <__libc_init_array+0xc>
 8007a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a0a:	4798      	blx	r3
 8007a0c:	3601      	adds	r6, #1
 8007a0e:	e7f2      	b.n	80079f6 <__libc_init_array+0x1e>
 8007a10:	08008ef8 	.word	0x08008ef8
 8007a14:	08008ef8 	.word	0x08008ef8
 8007a18:	08008ef8 	.word	0x08008ef8
 8007a1c:	08008efc 	.word	0x08008efc

08007a20 <__retarget_lock_init_recursive>:
 8007a20:	4770      	bx	lr

08007a22 <__retarget_lock_acquire_recursive>:
 8007a22:	4770      	bx	lr

08007a24 <__retarget_lock_release_recursive>:
 8007a24:	4770      	bx	lr
	...

08007a28 <_free_r>:
 8007a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a2a:	2900      	cmp	r1, #0
 8007a2c:	d044      	beq.n	8007ab8 <_free_r+0x90>
 8007a2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a32:	9001      	str	r0, [sp, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f1a1 0404 	sub.w	r4, r1, #4
 8007a3a:	bfb8      	it	lt
 8007a3c:	18e4      	addlt	r4, r4, r3
 8007a3e:	f000 f8df 	bl	8007c00 <__malloc_lock>
 8007a42:	4a1e      	ldr	r2, [pc, #120]	; (8007abc <_free_r+0x94>)
 8007a44:	9801      	ldr	r0, [sp, #4]
 8007a46:	6813      	ldr	r3, [r2, #0]
 8007a48:	b933      	cbnz	r3, 8007a58 <_free_r+0x30>
 8007a4a:	6063      	str	r3, [r4, #4]
 8007a4c:	6014      	str	r4, [r2, #0]
 8007a4e:	b003      	add	sp, #12
 8007a50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a54:	f000 b8da 	b.w	8007c0c <__malloc_unlock>
 8007a58:	42a3      	cmp	r3, r4
 8007a5a:	d908      	bls.n	8007a6e <_free_r+0x46>
 8007a5c:	6825      	ldr	r5, [r4, #0]
 8007a5e:	1961      	adds	r1, r4, r5
 8007a60:	428b      	cmp	r3, r1
 8007a62:	bf01      	itttt	eq
 8007a64:	6819      	ldreq	r1, [r3, #0]
 8007a66:	685b      	ldreq	r3, [r3, #4]
 8007a68:	1949      	addeq	r1, r1, r5
 8007a6a:	6021      	streq	r1, [r4, #0]
 8007a6c:	e7ed      	b.n	8007a4a <_free_r+0x22>
 8007a6e:	461a      	mov	r2, r3
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	b10b      	cbz	r3, 8007a78 <_free_r+0x50>
 8007a74:	42a3      	cmp	r3, r4
 8007a76:	d9fa      	bls.n	8007a6e <_free_r+0x46>
 8007a78:	6811      	ldr	r1, [r2, #0]
 8007a7a:	1855      	adds	r5, r2, r1
 8007a7c:	42a5      	cmp	r5, r4
 8007a7e:	d10b      	bne.n	8007a98 <_free_r+0x70>
 8007a80:	6824      	ldr	r4, [r4, #0]
 8007a82:	4421      	add	r1, r4
 8007a84:	1854      	adds	r4, r2, r1
 8007a86:	42a3      	cmp	r3, r4
 8007a88:	6011      	str	r1, [r2, #0]
 8007a8a:	d1e0      	bne.n	8007a4e <_free_r+0x26>
 8007a8c:	681c      	ldr	r4, [r3, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	6053      	str	r3, [r2, #4]
 8007a92:	440c      	add	r4, r1
 8007a94:	6014      	str	r4, [r2, #0]
 8007a96:	e7da      	b.n	8007a4e <_free_r+0x26>
 8007a98:	d902      	bls.n	8007aa0 <_free_r+0x78>
 8007a9a:	230c      	movs	r3, #12
 8007a9c:	6003      	str	r3, [r0, #0]
 8007a9e:	e7d6      	b.n	8007a4e <_free_r+0x26>
 8007aa0:	6825      	ldr	r5, [r4, #0]
 8007aa2:	1961      	adds	r1, r4, r5
 8007aa4:	428b      	cmp	r3, r1
 8007aa6:	bf04      	itt	eq
 8007aa8:	6819      	ldreq	r1, [r3, #0]
 8007aaa:	685b      	ldreq	r3, [r3, #4]
 8007aac:	6063      	str	r3, [r4, #4]
 8007aae:	bf04      	itt	eq
 8007ab0:	1949      	addeq	r1, r1, r5
 8007ab2:	6021      	streq	r1, [r4, #0]
 8007ab4:	6054      	str	r4, [r2, #4]
 8007ab6:	e7ca      	b.n	8007a4e <_free_r+0x26>
 8007ab8:	b003      	add	sp, #12
 8007aba:	bd30      	pop	{r4, r5, pc}
 8007abc:	2000050c 	.word	0x2000050c

08007ac0 <sbrk_aligned>:
 8007ac0:	b570      	push	{r4, r5, r6, lr}
 8007ac2:	4e0e      	ldr	r6, [pc, #56]	; (8007afc <sbrk_aligned+0x3c>)
 8007ac4:	460c      	mov	r4, r1
 8007ac6:	6831      	ldr	r1, [r6, #0]
 8007ac8:	4605      	mov	r5, r0
 8007aca:	b911      	cbnz	r1, 8007ad2 <sbrk_aligned+0x12>
 8007acc:	f000 fcbc 	bl	8008448 <_sbrk_r>
 8007ad0:	6030      	str	r0, [r6, #0]
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	f000 fcb7 	bl	8008448 <_sbrk_r>
 8007ada:	1c43      	adds	r3, r0, #1
 8007adc:	d00a      	beq.n	8007af4 <sbrk_aligned+0x34>
 8007ade:	1cc4      	adds	r4, r0, #3
 8007ae0:	f024 0403 	bic.w	r4, r4, #3
 8007ae4:	42a0      	cmp	r0, r4
 8007ae6:	d007      	beq.n	8007af8 <sbrk_aligned+0x38>
 8007ae8:	1a21      	subs	r1, r4, r0
 8007aea:	4628      	mov	r0, r5
 8007aec:	f000 fcac 	bl	8008448 <_sbrk_r>
 8007af0:	3001      	adds	r0, #1
 8007af2:	d101      	bne.n	8007af8 <sbrk_aligned+0x38>
 8007af4:	f04f 34ff 	mov.w	r4, #4294967295
 8007af8:	4620      	mov	r0, r4
 8007afa:	bd70      	pop	{r4, r5, r6, pc}
 8007afc:	20000510 	.word	0x20000510

08007b00 <_malloc_r>:
 8007b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b04:	1ccd      	adds	r5, r1, #3
 8007b06:	f025 0503 	bic.w	r5, r5, #3
 8007b0a:	3508      	adds	r5, #8
 8007b0c:	2d0c      	cmp	r5, #12
 8007b0e:	bf38      	it	cc
 8007b10:	250c      	movcc	r5, #12
 8007b12:	2d00      	cmp	r5, #0
 8007b14:	4607      	mov	r7, r0
 8007b16:	db01      	blt.n	8007b1c <_malloc_r+0x1c>
 8007b18:	42a9      	cmp	r1, r5
 8007b1a:	d905      	bls.n	8007b28 <_malloc_r+0x28>
 8007b1c:	230c      	movs	r3, #12
 8007b1e:	603b      	str	r3, [r7, #0]
 8007b20:	2600      	movs	r6, #0
 8007b22:	4630      	mov	r0, r6
 8007b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007bfc <_malloc_r+0xfc>
 8007b2c:	f000 f868 	bl	8007c00 <__malloc_lock>
 8007b30:	f8d8 3000 	ldr.w	r3, [r8]
 8007b34:	461c      	mov	r4, r3
 8007b36:	bb5c      	cbnz	r4, 8007b90 <_malloc_r+0x90>
 8007b38:	4629      	mov	r1, r5
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	f7ff ffc0 	bl	8007ac0 <sbrk_aligned>
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	4604      	mov	r4, r0
 8007b44:	d155      	bne.n	8007bf2 <_malloc_r+0xf2>
 8007b46:	f8d8 4000 	ldr.w	r4, [r8]
 8007b4a:	4626      	mov	r6, r4
 8007b4c:	2e00      	cmp	r6, #0
 8007b4e:	d145      	bne.n	8007bdc <_malloc_r+0xdc>
 8007b50:	2c00      	cmp	r4, #0
 8007b52:	d048      	beq.n	8007be6 <_malloc_r+0xe6>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	4631      	mov	r1, r6
 8007b58:	4638      	mov	r0, r7
 8007b5a:	eb04 0903 	add.w	r9, r4, r3
 8007b5e:	f000 fc73 	bl	8008448 <_sbrk_r>
 8007b62:	4581      	cmp	r9, r0
 8007b64:	d13f      	bne.n	8007be6 <_malloc_r+0xe6>
 8007b66:	6821      	ldr	r1, [r4, #0]
 8007b68:	1a6d      	subs	r5, r5, r1
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	4638      	mov	r0, r7
 8007b6e:	f7ff ffa7 	bl	8007ac0 <sbrk_aligned>
 8007b72:	3001      	adds	r0, #1
 8007b74:	d037      	beq.n	8007be6 <_malloc_r+0xe6>
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	442b      	add	r3, r5
 8007b7a:	6023      	str	r3, [r4, #0]
 8007b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d038      	beq.n	8007bf6 <_malloc_r+0xf6>
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	42a2      	cmp	r2, r4
 8007b88:	d12b      	bne.n	8007be2 <_malloc_r+0xe2>
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	605a      	str	r2, [r3, #4]
 8007b8e:	e00f      	b.n	8007bb0 <_malloc_r+0xb0>
 8007b90:	6822      	ldr	r2, [r4, #0]
 8007b92:	1b52      	subs	r2, r2, r5
 8007b94:	d41f      	bmi.n	8007bd6 <_malloc_r+0xd6>
 8007b96:	2a0b      	cmp	r2, #11
 8007b98:	d917      	bls.n	8007bca <_malloc_r+0xca>
 8007b9a:	1961      	adds	r1, r4, r5
 8007b9c:	42a3      	cmp	r3, r4
 8007b9e:	6025      	str	r5, [r4, #0]
 8007ba0:	bf18      	it	ne
 8007ba2:	6059      	strne	r1, [r3, #4]
 8007ba4:	6863      	ldr	r3, [r4, #4]
 8007ba6:	bf08      	it	eq
 8007ba8:	f8c8 1000 	streq.w	r1, [r8]
 8007bac:	5162      	str	r2, [r4, r5]
 8007bae:	604b      	str	r3, [r1, #4]
 8007bb0:	4638      	mov	r0, r7
 8007bb2:	f104 060b 	add.w	r6, r4, #11
 8007bb6:	f000 f829 	bl	8007c0c <__malloc_unlock>
 8007bba:	f026 0607 	bic.w	r6, r6, #7
 8007bbe:	1d23      	adds	r3, r4, #4
 8007bc0:	1af2      	subs	r2, r6, r3
 8007bc2:	d0ae      	beq.n	8007b22 <_malloc_r+0x22>
 8007bc4:	1b9b      	subs	r3, r3, r6
 8007bc6:	50a3      	str	r3, [r4, r2]
 8007bc8:	e7ab      	b.n	8007b22 <_malloc_r+0x22>
 8007bca:	42a3      	cmp	r3, r4
 8007bcc:	6862      	ldr	r2, [r4, #4]
 8007bce:	d1dd      	bne.n	8007b8c <_malloc_r+0x8c>
 8007bd0:	f8c8 2000 	str.w	r2, [r8]
 8007bd4:	e7ec      	b.n	8007bb0 <_malloc_r+0xb0>
 8007bd6:	4623      	mov	r3, r4
 8007bd8:	6864      	ldr	r4, [r4, #4]
 8007bda:	e7ac      	b.n	8007b36 <_malloc_r+0x36>
 8007bdc:	4634      	mov	r4, r6
 8007bde:	6876      	ldr	r6, [r6, #4]
 8007be0:	e7b4      	b.n	8007b4c <_malloc_r+0x4c>
 8007be2:	4613      	mov	r3, r2
 8007be4:	e7cc      	b.n	8007b80 <_malloc_r+0x80>
 8007be6:	230c      	movs	r3, #12
 8007be8:	603b      	str	r3, [r7, #0]
 8007bea:	4638      	mov	r0, r7
 8007bec:	f000 f80e 	bl	8007c0c <__malloc_unlock>
 8007bf0:	e797      	b.n	8007b22 <_malloc_r+0x22>
 8007bf2:	6025      	str	r5, [r4, #0]
 8007bf4:	e7dc      	b.n	8007bb0 <_malloc_r+0xb0>
 8007bf6:	605b      	str	r3, [r3, #4]
 8007bf8:	deff      	udf	#255	; 0xff
 8007bfa:	bf00      	nop
 8007bfc:	2000050c 	.word	0x2000050c

08007c00 <__malloc_lock>:
 8007c00:	4801      	ldr	r0, [pc, #4]	; (8007c08 <__malloc_lock+0x8>)
 8007c02:	f7ff bf0e 	b.w	8007a22 <__retarget_lock_acquire_recursive>
 8007c06:	bf00      	nop
 8007c08:	20000508 	.word	0x20000508

08007c0c <__malloc_unlock>:
 8007c0c:	4801      	ldr	r0, [pc, #4]	; (8007c14 <__malloc_unlock+0x8>)
 8007c0e:	f7ff bf09 	b.w	8007a24 <__retarget_lock_release_recursive>
 8007c12:	bf00      	nop
 8007c14:	20000508 	.word	0x20000508

08007c18 <__sfputc_r>:
 8007c18:	6893      	ldr	r3, [r2, #8]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	b410      	push	{r4}
 8007c20:	6093      	str	r3, [r2, #8]
 8007c22:	da08      	bge.n	8007c36 <__sfputc_r+0x1e>
 8007c24:	6994      	ldr	r4, [r2, #24]
 8007c26:	42a3      	cmp	r3, r4
 8007c28:	db01      	blt.n	8007c2e <__sfputc_r+0x16>
 8007c2a:	290a      	cmp	r1, #10
 8007c2c:	d103      	bne.n	8007c36 <__sfputc_r+0x1e>
 8007c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c32:	f000 bb73 	b.w	800831c <__swbuf_r>
 8007c36:	6813      	ldr	r3, [r2, #0]
 8007c38:	1c58      	adds	r0, r3, #1
 8007c3a:	6010      	str	r0, [r2, #0]
 8007c3c:	7019      	strb	r1, [r3, #0]
 8007c3e:	4608      	mov	r0, r1
 8007c40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <__sfputs_r>:
 8007c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c48:	4606      	mov	r6, r0
 8007c4a:	460f      	mov	r7, r1
 8007c4c:	4614      	mov	r4, r2
 8007c4e:	18d5      	adds	r5, r2, r3
 8007c50:	42ac      	cmp	r4, r5
 8007c52:	d101      	bne.n	8007c58 <__sfputs_r+0x12>
 8007c54:	2000      	movs	r0, #0
 8007c56:	e007      	b.n	8007c68 <__sfputs_r+0x22>
 8007c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c5c:	463a      	mov	r2, r7
 8007c5e:	4630      	mov	r0, r6
 8007c60:	f7ff ffda 	bl	8007c18 <__sfputc_r>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	d1f3      	bne.n	8007c50 <__sfputs_r+0xa>
 8007c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c6c <_vfiprintf_r>:
 8007c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c70:	460d      	mov	r5, r1
 8007c72:	b09d      	sub	sp, #116	; 0x74
 8007c74:	4614      	mov	r4, r2
 8007c76:	4698      	mov	r8, r3
 8007c78:	4606      	mov	r6, r0
 8007c7a:	b118      	cbz	r0, 8007c84 <_vfiprintf_r+0x18>
 8007c7c:	6a03      	ldr	r3, [r0, #32]
 8007c7e:	b90b      	cbnz	r3, 8007c84 <_vfiprintf_r+0x18>
 8007c80:	f7ff fdca 	bl	8007818 <__sinit>
 8007c84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c86:	07d9      	lsls	r1, r3, #31
 8007c88:	d405      	bmi.n	8007c96 <_vfiprintf_r+0x2a>
 8007c8a:	89ab      	ldrh	r3, [r5, #12]
 8007c8c:	059a      	lsls	r2, r3, #22
 8007c8e:	d402      	bmi.n	8007c96 <_vfiprintf_r+0x2a>
 8007c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c92:	f7ff fec6 	bl	8007a22 <__retarget_lock_acquire_recursive>
 8007c96:	89ab      	ldrh	r3, [r5, #12]
 8007c98:	071b      	lsls	r3, r3, #28
 8007c9a:	d501      	bpl.n	8007ca0 <_vfiprintf_r+0x34>
 8007c9c:	692b      	ldr	r3, [r5, #16]
 8007c9e:	b99b      	cbnz	r3, 8007cc8 <_vfiprintf_r+0x5c>
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	f000 fb78 	bl	8008398 <__swsetup_r>
 8007ca8:	b170      	cbz	r0, 8007cc8 <_vfiprintf_r+0x5c>
 8007caa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cac:	07dc      	lsls	r4, r3, #31
 8007cae:	d504      	bpl.n	8007cba <_vfiprintf_r+0x4e>
 8007cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb4:	b01d      	add	sp, #116	; 0x74
 8007cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cba:	89ab      	ldrh	r3, [r5, #12]
 8007cbc:	0598      	lsls	r0, r3, #22
 8007cbe:	d4f7      	bmi.n	8007cb0 <_vfiprintf_r+0x44>
 8007cc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cc2:	f7ff feaf 	bl	8007a24 <__retarget_lock_release_recursive>
 8007cc6:	e7f3      	b.n	8007cb0 <_vfiprintf_r+0x44>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	9309      	str	r3, [sp, #36]	; 0x24
 8007ccc:	2320      	movs	r3, #32
 8007cce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cd6:	2330      	movs	r3, #48	; 0x30
 8007cd8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007e8c <_vfiprintf_r+0x220>
 8007cdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ce0:	f04f 0901 	mov.w	r9, #1
 8007ce4:	4623      	mov	r3, r4
 8007ce6:	469a      	mov	sl, r3
 8007ce8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cec:	b10a      	cbz	r2, 8007cf2 <_vfiprintf_r+0x86>
 8007cee:	2a25      	cmp	r2, #37	; 0x25
 8007cf0:	d1f9      	bne.n	8007ce6 <_vfiprintf_r+0x7a>
 8007cf2:	ebba 0b04 	subs.w	fp, sl, r4
 8007cf6:	d00b      	beq.n	8007d10 <_vfiprintf_r+0xa4>
 8007cf8:	465b      	mov	r3, fp
 8007cfa:	4622      	mov	r2, r4
 8007cfc:	4629      	mov	r1, r5
 8007cfe:	4630      	mov	r0, r6
 8007d00:	f7ff ffa1 	bl	8007c46 <__sfputs_r>
 8007d04:	3001      	adds	r0, #1
 8007d06:	f000 80a9 	beq.w	8007e5c <_vfiprintf_r+0x1f0>
 8007d0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d0c:	445a      	add	r2, fp
 8007d0e:	9209      	str	r2, [sp, #36]	; 0x24
 8007d10:	f89a 3000 	ldrb.w	r3, [sl]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f000 80a1 	beq.w	8007e5c <_vfiprintf_r+0x1f0>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d24:	f10a 0a01 	add.w	sl, sl, #1
 8007d28:	9304      	str	r3, [sp, #16]
 8007d2a:	9307      	str	r3, [sp, #28]
 8007d2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d30:	931a      	str	r3, [sp, #104]	; 0x68
 8007d32:	4654      	mov	r4, sl
 8007d34:	2205      	movs	r2, #5
 8007d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d3a:	4854      	ldr	r0, [pc, #336]	; (8007e8c <_vfiprintf_r+0x220>)
 8007d3c:	f7f8 fa48 	bl	80001d0 <memchr>
 8007d40:	9a04      	ldr	r2, [sp, #16]
 8007d42:	b9d8      	cbnz	r0, 8007d7c <_vfiprintf_r+0x110>
 8007d44:	06d1      	lsls	r1, r2, #27
 8007d46:	bf44      	itt	mi
 8007d48:	2320      	movmi	r3, #32
 8007d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d4e:	0713      	lsls	r3, r2, #28
 8007d50:	bf44      	itt	mi
 8007d52:	232b      	movmi	r3, #43	; 0x2b
 8007d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d58:	f89a 3000 	ldrb.w	r3, [sl]
 8007d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d5e:	d015      	beq.n	8007d8c <_vfiprintf_r+0x120>
 8007d60:	9a07      	ldr	r2, [sp, #28]
 8007d62:	4654      	mov	r4, sl
 8007d64:	2000      	movs	r0, #0
 8007d66:	f04f 0c0a 	mov.w	ip, #10
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d70:	3b30      	subs	r3, #48	; 0x30
 8007d72:	2b09      	cmp	r3, #9
 8007d74:	d94d      	bls.n	8007e12 <_vfiprintf_r+0x1a6>
 8007d76:	b1b0      	cbz	r0, 8007da6 <_vfiprintf_r+0x13a>
 8007d78:	9207      	str	r2, [sp, #28]
 8007d7a:	e014      	b.n	8007da6 <_vfiprintf_r+0x13a>
 8007d7c:	eba0 0308 	sub.w	r3, r0, r8
 8007d80:	fa09 f303 	lsl.w	r3, r9, r3
 8007d84:	4313      	orrs	r3, r2
 8007d86:	9304      	str	r3, [sp, #16]
 8007d88:	46a2      	mov	sl, r4
 8007d8a:	e7d2      	b.n	8007d32 <_vfiprintf_r+0xc6>
 8007d8c:	9b03      	ldr	r3, [sp, #12]
 8007d8e:	1d19      	adds	r1, r3, #4
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	9103      	str	r1, [sp, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	bfbb      	ittet	lt
 8007d98:	425b      	neglt	r3, r3
 8007d9a:	f042 0202 	orrlt.w	r2, r2, #2
 8007d9e:	9307      	strge	r3, [sp, #28]
 8007da0:	9307      	strlt	r3, [sp, #28]
 8007da2:	bfb8      	it	lt
 8007da4:	9204      	strlt	r2, [sp, #16]
 8007da6:	7823      	ldrb	r3, [r4, #0]
 8007da8:	2b2e      	cmp	r3, #46	; 0x2e
 8007daa:	d10c      	bne.n	8007dc6 <_vfiprintf_r+0x15a>
 8007dac:	7863      	ldrb	r3, [r4, #1]
 8007dae:	2b2a      	cmp	r3, #42	; 0x2a
 8007db0:	d134      	bne.n	8007e1c <_vfiprintf_r+0x1b0>
 8007db2:	9b03      	ldr	r3, [sp, #12]
 8007db4:	1d1a      	adds	r2, r3, #4
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	9203      	str	r2, [sp, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	bfb8      	it	lt
 8007dbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dc2:	3402      	adds	r4, #2
 8007dc4:	9305      	str	r3, [sp, #20]
 8007dc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007e9c <_vfiprintf_r+0x230>
 8007dca:	7821      	ldrb	r1, [r4, #0]
 8007dcc:	2203      	movs	r2, #3
 8007dce:	4650      	mov	r0, sl
 8007dd0:	f7f8 f9fe 	bl	80001d0 <memchr>
 8007dd4:	b138      	cbz	r0, 8007de6 <_vfiprintf_r+0x17a>
 8007dd6:	9b04      	ldr	r3, [sp, #16]
 8007dd8:	eba0 000a 	sub.w	r0, r0, sl
 8007ddc:	2240      	movs	r2, #64	; 0x40
 8007dde:	4082      	lsls	r2, r0
 8007de0:	4313      	orrs	r3, r2
 8007de2:	3401      	adds	r4, #1
 8007de4:	9304      	str	r3, [sp, #16]
 8007de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dea:	4829      	ldr	r0, [pc, #164]	; (8007e90 <_vfiprintf_r+0x224>)
 8007dec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007df0:	2206      	movs	r2, #6
 8007df2:	f7f8 f9ed 	bl	80001d0 <memchr>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d03f      	beq.n	8007e7a <_vfiprintf_r+0x20e>
 8007dfa:	4b26      	ldr	r3, [pc, #152]	; (8007e94 <_vfiprintf_r+0x228>)
 8007dfc:	bb1b      	cbnz	r3, 8007e46 <_vfiprintf_r+0x1da>
 8007dfe:	9b03      	ldr	r3, [sp, #12]
 8007e00:	3307      	adds	r3, #7
 8007e02:	f023 0307 	bic.w	r3, r3, #7
 8007e06:	3308      	adds	r3, #8
 8007e08:	9303      	str	r3, [sp, #12]
 8007e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e0c:	443b      	add	r3, r7
 8007e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e10:	e768      	b.n	8007ce4 <_vfiprintf_r+0x78>
 8007e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e16:	460c      	mov	r4, r1
 8007e18:	2001      	movs	r0, #1
 8007e1a:	e7a6      	b.n	8007d6a <_vfiprintf_r+0xfe>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	3401      	adds	r4, #1
 8007e20:	9305      	str	r3, [sp, #20]
 8007e22:	4619      	mov	r1, r3
 8007e24:	f04f 0c0a 	mov.w	ip, #10
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e2e:	3a30      	subs	r2, #48	; 0x30
 8007e30:	2a09      	cmp	r2, #9
 8007e32:	d903      	bls.n	8007e3c <_vfiprintf_r+0x1d0>
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d0c6      	beq.n	8007dc6 <_vfiprintf_r+0x15a>
 8007e38:	9105      	str	r1, [sp, #20]
 8007e3a:	e7c4      	b.n	8007dc6 <_vfiprintf_r+0x15a>
 8007e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e40:	4604      	mov	r4, r0
 8007e42:	2301      	movs	r3, #1
 8007e44:	e7f0      	b.n	8007e28 <_vfiprintf_r+0x1bc>
 8007e46:	ab03      	add	r3, sp, #12
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	462a      	mov	r2, r5
 8007e4c:	4b12      	ldr	r3, [pc, #72]	; (8007e98 <_vfiprintf_r+0x22c>)
 8007e4e:	a904      	add	r1, sp, #16
 8007e50:	4630      	mov	r0, r6
 8007e52:	f3af 8000 	nop.w
 8007e56:	4607      	mov	r7, r0
 8007e58:	1c78      	adds	r0, r7, #1
 8007e5a:	d1d6      	bne.n	8007e0a <_vfiprintf_r+0x19e>
 8007e5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e5e:	07d9      	lsls	r1, r3, #31
 8007e60:	d405      	bmi.n	8007e6e <_vfiprintf_r+0x202>
 8007e62:	89ab      	ldrh	r3, [r5, #12]
 8007e64:	059a      	lsls	r2, r3, #22
 8007e66:	d402      	bmi.n	8007e6e <_vfiprintf_r+0x202>
 8007e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e6a:	f7ff fddb 	bl	8007a24 <__retarget_lock_release_recursive>
 8007e6e:	89ab      	ldrh	r3, [r5, #12]
 8007e70:	065b      	lsls	r3, r3, #25
 8007e72:	f53f af1d 	bmi.w	8007cb0 <_vfiprintf_r+0x44>
 8007e76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e78:	e71c      	b.n	8007cb4 <_vfiprintf_r+0x48>
 8007e7a:	ab03      	add	r3, sp, #12
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	462a      	mov	r2, r5
 8007e80:	4b05      	ldr	r3, [pc, #20]	; (8007e98 <_vfiprintf_r+0x22c>)
 8007e82:	a904      	add	r1, sp, #16
 8007e84:	4630      	mov	r0, r6
 8007e86:	f000 f879 	bl	8007f7c <_printf_i>
 8007e8a:	e7e4      	b.n	8007e56 <_vfiprintf_r+0x1ea>
 8007e8c:	08008ebc 	.word	0x08008ebc
 8007e90:	08008ec6 	.word	0x08008ec6
 8007e94:	00000000 	.word	0x00000000
 8007e98:	08007c47 	.word	0x08007c47
 8007e9c:	08008ec2 	.word	0x08008ec2

08007ea0 <_printf_common>:
 8007ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea4:	4616      	mov	r6, r2
 8007ea6:	4699      	mov	r9, r3
 8007ea8:	688a      	ldr	r2, [r1, #8]
 8007eaa:	690b      	ldr	r3, [r1, #16]
 8007eac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	bfb8      	it	lt
 8007eb4:	4613      	movlt	r3, r2
 8007eb6:	6033      	str	r3, [r6, #0]
 8007eb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ebc:	4607      	mov	r7, r0
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	b10a      	cbz	r2, 8007ec6 <_printf_common+0x26>
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	6033      	str	r3, [r6, #0]
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	0699      	lsls	r1, r3, #26
 8007eca:	bf42      	ittt	mi
 8007ecc:	6833      	ldrmi	r3, [r6, #0]
 8007ece:	3302      	addmi	r3, #2
 8007ed0:	6033      	strmi	r3, [r6, #0]
 8007ed2:	6825      	ldr	r5, [r4, #0]
 8007ed4:	f015 0506 	ands.w	r5, r5, #6
 8007ed8:	d106      	bne.n	8007ee8 <_printf_common+0x48>
 8007eda:	f104 0a19 	add.w	sl, r4, #25
 8007ede:	68e3      	ldr	r3, [r4, #12]
 8007ee0:	6832      	ldr	r2, [r6, #0]
 8007ee2:	1a9b      	subs	r3, r3, r2
 8007ee4:	42ab      	cmp	r3, r5
 8007ee6:	dc26      	bgt.n	8007f36 <_printf_common+0x96>
 8007ee8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007eec:	1e13      	subs	r3, r2, #0
 8007eee:	6822      	ldr	r2, [r4, #0]
 8007ef0:	bf18      	it	ne
 8007ef2:	2301      	movne	r3, #1
 8007ef4:	0692      	lsls	r2, r2, #26
 8007ef6:	d42b      	bmi.n	8007f50 <_printf_common+0xb0>
 8007ef8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007efc:	4649      	mov	r1, r9
 8007efe:	4638      	mov	r0, r7
 8007f00:	47c0      	blx	r8
 8007f02:	3001      	adds	r0, #1
 8007f04:	d01e      	beq.n	8007f44 <_printf_common+0xa4>
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	6922      	ldr	r2, [r4, #16]
 8007f0a:	f003 0306 	and.w	r3, r3, #6
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	bf02      	ittt	eq
 8007f12:	68e5      	ldreq	r5, [r4, #12]
 8007f14:	6833      	ldreq	r3, [r6, #0]
 8007f16:	1aed      	subeq	r5, r5, r3
 8007f18:	68a3      	ldr	r3, [r4, #8]
 8007f1a:	bf0c      	ite	eq
 8007f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f20:	2500      	movne	r5, #0
 8007f22:	4293      	cmp	r3, r2
 8007f24:	bfc4      	itt	gt
 8007f26:	1a9b      	subgt	r3, r3, r2
 8007f28:	18ed      	addgt	r5, r5, r3
 8007f2a:	2600      	movs	r6, #0
 8007f2c:	341a      	adds	r4, #26
 8007f2e:	42b5      	cmp	r5, r6
 8007f30:	d11a      	bne.n	8007f68 <_printf_common+0xc8>
 8007f32:	2000      	movs	r0, #0
 8007f34:	e008      	b.n	8007f48 <_printf_common+0xa8>
 8007f36:	2301      	movs	r3, #1
 8007f38:	4652      	mov	r2, sl
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	47c0      	blx	r8
 8007f40:	3001      	adds	r0, #1
 8007f42:	d103      	bne.n	8007f4c <_printf_common+0xac>
 8007f44:	f04f 30ff 	mov.w	r0, #4294967295
 8007f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f4c:	3501      	adds	r5, #1
 8007f4e:	e7c6      	b.n	8007ede <_printf_common+0x3e>
 8007f50:	18e1      	adds	r1, r4, r3
 8007f52:	1c5a      	adds	r2, r3, #1
 8007f54:	2030      	movs	r0, #48	; 0x30
 8007f56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f5a:	4422      	add	r2, r4
 8007f5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f64:	3302      	adds	r3, #2
 8007f66:	e7c7      	b.n	8007ef8 <_printf_common+0x58>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	4622      	mov	r2, r4
 8007f6c:	4649      	mov	r1, r9
 8007f6e:	4638      	mov	r0, r7
 8007f70:	47c0      	blx	r8
 8007f72:	3001      	adds	r0, #1
 8007f74:	d0e6      	beq.n	8007f44 <_printf_common+0xa4>
 8007f76:	3601      	adds	r6, #1
 8007f78:	e7d9      	b.n	8007f2e <_printf_common+0x8e>
	...

08007f7c <_printf_i>:
 8007f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f80:	7e0f      	ldrb	r7, [r1, #24]
 8007f82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f84:	2f78      	cmp	r7, #120	; 0x78
 8007f86:	4691      	mov	r9, r2
 8007f88:	4680      	mov	r8, r0
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	469a      	mov	sl, r3
 8007f8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f92:	d807      	bhi.n	8007fa4 <_printf_i+0x28>
 8007f94:	2f62      	cmp	r7, #98	; 0x62
 8007f96:	d80a      	bhi.n	8007fae <_printf_i+0x32>
 8007f98:	2f00      	cmp	r7, #0
 8007f9a:	f000 80d4 	beq.w	8008146 <_printf_i+0x1ca>
 8007f9e:	2f58      	cmp	r7, #88	; 0x58
 8007fa0:	f000 80c0 	beq.w	8008124 <_printf_i+0x1a8>
 8007fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fac:	e03a      	b.n	8008024 <_printf_i+0xa8>
 8007fae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fb2:	2b15      	cmp	r3, #21
 8007fb4:	d8f6      	bhi.n	8007fa4 <_printf_i+0x28>
 8007fb6:	a101      	add	r1, pc, #4	; (adr r1, 8007fbc <_printf_i+0x40>)
 8007fb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fbc:	08008015 	.word	0x08008015
 8007fc0:	08008029 	.word	0x08008029
 8007fc4:	08007fa5 	.word	0x08007fa5
 8007fc8:	08007fa5 	.word	0x08007fa5
 8007fcc:	08007fa5 	.word	0x08007fa5
 8007fd0:	08007fa5 	.word	0x08007fa5
 8007fd4:	08008029 	.word	0x08008029
 8007fd8:	08007fa5 	.word	0x08007fa5
 8007fdc:	08007fa5 	.word	0x08007fa5
 8007fe0:	08007fa5 	.word	0x08007fa5
 8007fe4:	08007fa5 	.word	0x08007fa5
 8007fe8:	0800812d 	.word	0x0800812d
 8007fec:	08008055 	.word	0x08008055
 8007ff0:	080080e7 	.word	0x080080e7
 8007ff4:	08007fa5 	.word	0x08007fa5
 8007ff8:	08007fa5 	.word	0x08007fa5
 8007ffc:	0800814f 	.word	0x0800814f
 8008000:	08007fa5 	.word	0x08007fa5
 8008004:	08008055 	.word	0x08008055
 8008008:	08007fa5 	.word	0x08007fa5
 800800c:	08007fa5 	.word	0x08007fa5
 8008010:	080080ef 	.word	0x080080ef
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	1d1a      	adds	r2, r3, #4
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	602a      	str	r2, [r5, #0]
 800801c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008024:	2301      	movs	r3, #1
 8008026:	e09f      	b.n	8008168 <_printf_i+0x1ec>
 8008028:	6820      	ldr	r0, [r4, #0]
 800802a:	682b      	ldr	r3, [r5, #0]
 800802c:	0607      	lsls	r7, r0, #24
 800802e:	f103 0104 	add.w	r1, r3, #4
 8008032:	6029      	str	r1, [r5, #0]
 8008034:	d501      	bpl.n	800803a <_printf_i+0xbe>
 8008036:	681e      	ldr	r6, [r3, #0]
 8008038:	e003      	b.n	8008042 <_printf_i+0xc6>
 800803a:	0646      	lsls	r6, r0, #25
 800803c:	d5fb      	bpl.n	8008036 <_printf_i+0xba>
 800803e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008042:	2e00      	cmp	r6, #0
 8008044:	da03      	bge.n	800804e <_printf_i+0xd2>
 8008046:	232d      	movs	r3, #45	; 0x2d
 8008048:	4276      	negs	r6, r6
 800804a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800804e:	485a      	ldr	r0, [pc, #360]	; (80081b8 <_printf_i+0x23c>)
 8008050:	230a      	movs	r3, #10
 8008052:	e012      	b.n	800807a <_printf_i+0xfe>
 8008054:	682b      	ldr	r3, [r5, #0]
 8008056:	6820      	ldr	r0, [r4, #0]
 8008058:	1d19      	adds	r1, r3, #4
 800805a:	6029      	str	r1, [r5, #0]
 800805c:	0605      	lsls	r5, r0, #24
 800805e:	d501      	bpl.n	8008064 <_printf_i+0xe8>
 8008060:	681e      	ldr	r6, [r3, #0]
 8008062:	e002      	b.n	800806a <_printf_i+0xee>
 8008064:	0641      	lsls	r1, r0, #25
 8008066:	d5fb      	bpl.n	8008060 <_printf_i+0xe4>
 8008068:	881e      	ldrh	r6, [r3, #0]
 800806a:	4853      	ldr	r0, [pc, #332]	; (80081b8 <_printf_i+0x23c>)
 800806c:	2f6f      	cmp	r7, #111	; 0x6f
 800806e:	bf0c      	ite	eq
 8008070:	2308      	moveq	r3, #8
 8008072:	230a      	movne	r3, #10
 8008074:	2100      	movs	r1, #0
 8008076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800807a:	6865      	ldr	r5, [r4, #4]
 800807c:	60a5      	str	r5, [r4, #8]
 800807e:	2d00      	cmp	r5, #0
 8008080:	bfa2      	ittt	ge
 8008082:	6821      	ldrge	r1, [r4, #0]
 8008084:	f021 0104 	bicge.w	r1, r1, #4
 8008088:	6021      	strge	r1, [r4, #0]
 800808a:	b90e      	cbnz	r6, 8008090 <_printf_i+0x114>
 800808c:	2d00      	cmp	r5, #0
 800808e:	d04b      	beq.n	8008128 <_printf_i+0x1ac>
 8008090:	4615      	mov	r5, r2
 8008092:	fbb6 f1f3 	udiv	r1, r6, r3
 8008096:	fb03 6711 	mls	r7, r3, r1, r6
 800809a:	5dc7      	ldrb	r7, [r0, r7]
 800809c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080a0:	4637      	mov	r7, r6
 80080a2:	42bb      	cmp	r3, r7
 80080a4:	460e      	mov	r6, r1
 80080a6:	d9f4      	bls.n	8008092 <_printf_i+0x116>
 80080a8:	2b08      	cmp	r3, #8
 80080aa:	d10b      	bne.n	80080c4 <_printf_i+0x148>
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	07de      	lsls	r6, r3, #31
 80080b0:	d508      	bpl.n	80080c4 <_printf_i+0x148>
 80080b2:	6923      	ldr	r3, [r4, #16]
 80080b4:	6861      	ldr	r1, [r4, #4]
 80080b6:	4299      	cmp	r1, r3
 80080b8:	bfde      	ittt	le
 80080ba:	2330      	movle	r3, #48	; 0x30
 80080bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080c4:	1b52      	subs	r2, r2, r5
 80080c6:	6122      	str	r2, [r4, #16]
 80080c8:	f8cd a000 	str.w	sl, [sp]
 80080cc:	464b      	mov	r3, r9
 80080ce:	aa03      	add	r2, sp, #12
 80080d0:	4621      	mov	r1, r4
 80080d2:	4640      	mov	r0, r8
 80080d4:	f7ff fee4 	bl	8007ea0 <_printf_common>
 80080d8:	3001      	adds	r0, #1
 80080da:	d14a      	bne.n	8008172 <_printf_i+0x1f6>
 80080dc:	f04f 30ff 	mov.w	r0, #4294967295
 80080e0:	b004      	add	sp, #16
 80080e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	f043 0320 	orr.w	r3, r3, #32
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	4833      	ldr	r0, [pc, #204]	; (80081bc <_printf_i+0x240>)
 80080f0:	2778      	movs	r7, #120	; 0x78
 80080f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	6829      	ldr	r1, [r5, #0]
 80080fa:	061f      	lsls	r7, r3, #24
 80080fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008100:	d402      	bmi.n	8008108 <_printf_i+0x18c>
 8008102:	065f      	lsls	r7, r3, #25
 8008104:	bf48      	it	mi
 8008106:	b2b6      	uxthmi	r6, r6
 8008108:	07df      	lsls	r7, r3, #31
 800810a:	bf48      	it	mi
 800810c:	f043 0320 	orrmi.w	r3, r3, #32
 8008110:	6029      	str	r1, [r5, #0]
 8008112:	bf48      	it	mi
 8008114:	6023      	strmi	r3, [r4, #0]
 8008116:	b91e      	cbnz	r6, 8008120 <_printf_i+0x1a4>
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	f023 0320 	bic.w	r3, r3, #32
 800811e:	6023      	str	r3, [r4, #0]
 8008120:	2310      	movs	r3, #16
 8008122:	e7a7      	b.n	8008074 <_printf_i+0xf8>
 8008124:	4824      	ldr	r0, [pc, #144]	; (80081b8 <_printf_i+0x23c>)
 8008126:	e7e4      	b.n	80080f2 <_printf_i+0x176>
 8008128:	4615      	mov	r5, r2
 800812a:	e7bd      	b.n	80080a8 <_printf_i+0x12c>
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	6826      	ldr	r6, [r4, #0]
 8008130:	6961      	ldr	r1, [r4, #20]
 8008132:	1d18      	adds	r0, r3, #4
 8008134:	6028      	str	r0, [r5, #0]
 8008136:	0635      	lsls	r5, r6, #24
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	d501      	bpl.n	8008140 <_printf_i+0x1c4>
 800813c:	6019      	str	r1, [r3, #0]
 800813e:	e002      	b.n	8008146 <_printf_i+0x1ca>
 8008140:	0670      	lsls	r0, r6, #25
 8008142:	d5fb      	bpl.n	800813c <_printf_i+0x1c0>
 8008144:	8019      	strh	r1, [r3, #0]
 8008146:	2300      	movs	r3, #0
 8008148:	6123      	str	r3, [r4, #16]
 800814a:	4615      	mov	r5, r2
 800814c:	e7bc      	b.n	80080c8 <_printf_i+0x14c>
 800814e:	682b      	ldr	r3, [r5, #0]
 8008150:	1d1a      	adds	r2, r3, #4
 8008152:	602a      	str	r2, [r5, #0]
 8008154:	681d      	ldr	r5, [r3, #0]
 8008156:	6862      	ldr	r2, [r4, #4]
 8008158:	2100      	movs	r1, #0
 800815a:	4628      	mov	r0, r5
 800815c:	f7f8 f838 	bl	80001d0 <memchr>
 8008160:	b108      	cbz	r0, 8008166 <_printf_i+0x1ea>
 8008162:	1b40      	subs	r0, r0, r5
 8008164:	6060      	str	r0, [r4, #4]
 8008166:	6863      	ldr	r3, [r4, #4]
 8008168:	6123      	str	r3, [r4, #16]
 800816a:	2300      	movs	r3, #0
 800816c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008170:	e7aa      	b.n	80080c8 <_printf_i+0x14c>
 8008172:	6923      	ldr	r3, [r4, #16]
 8008174:	462a      	mov	r2, r5
 8008176:	4649      	mov	r1, r9
 8008178:	4640      	mov	r0, r8
 800817a:	47d0      	blx	sl
 800817c:	3001      	adds	r0, #1
 800817e:	d0ad      	beq.n	80080dc <_printf_i+0x160>
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	079b      	lsls	r3, r3, #30
 8008184:	d413      	bmi.n	80081ae <_printf_i+0x232>
 8008186:	68e0      	ldr	r0, [r4, #12]
 8008188:	9b03      	ldr	r3, [sp, #12]
 800818a:	4298      	cmp	r0, r3
 800818c:	bfb8      	it	lt
 800818e:	4618      	movlt	r0, r3
 8008190:	e7a6      	b.n	80080e0 <_printf_i+0x164>
 8008192:	2301      	movs	r3, #1
 8008194:	4632      	mov	r2, r6
 8008196:	4649      	mov	r1, r9
 8008198:	4640      	mov	r0, r8
 800819a:	47d0      	blx	sl
 800819c:	3001      	adds	r0, #1
 800819e:	d09d      	beq.n	80080dc <_printf_i+0x160>
 80081a0:	3501      	adds	r5, #1
 80081a2:	68e3      	ldr	r3, [r4, #12]
 80081a4:	9903      	ldr	r1, [sp, #12]
 80081a6:	1a5b      	subs	r3, r3, r1
 80081a8:	42ab      	cmp	r3, r5
 80081aa:	dcf2      	bgt.n	8008192 <_printf_i+0x216>
 80081ac:	e7eb      	b.n	8008186 <_printf_i+0x20a>
 80081ae:	2500      	movs	r5, #0
 80081b0:	f104 0619 	add.w	r6, r4, #25
 80081b4:	e7f5      	b.n	80081a2 <_printf_i+0x226>
 80081b6:	bf00      	nop
 80081b8:	08008ecd 	.word	0x08008ecd
 80081bc:	08008ede 	.word	0x08008ede

080081c0 <__sflush_r>:
 80081c0:	898a      	ldrh	r2, [r1, #12]
 80081c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c6:	4605      	mov	r5, r0
 80081c8:	0710      	lsls	r0, r2, #28
 80081ca:	460c      	mov	r4, r1
 80081cc:	d458      	bmi.n	8008280 <__sflush_r+0xc0>
 80081ce:	684b      	ldr	r3, [r1, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	dc05      	bgt.n	80081e0 <__sflush_r+0x20>
 80081d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	dc02      	bgt.n	80081e0 <__sflush_r+0x20>
 80081da:	2000      	movs	r0, #0
 80081dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081e2:	2e00      	cmp	r6, #0
 80081e4:	d0f9      	beq.n	80081da <__sflush_r+0x1a>
 80081e6:	2300      	movs	r3, #0
 80081e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081ec:	682f      	ldr	r7, [r5, #0]
 80081ee:	6a21      	ldr	r1, [r4, #32]
 80081f0:	602b      	str	r3, [r5, #0]
 80081f2:	d032      	beq.n	800825a <__sflush_r+0x9a>
 80081f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081f6:	89a3      	ldrh	r3, [r4, #12]
 80081f8:	075a      	lsls	r2, r3, #29
 80081fa:	d505      	bpl.n	8008208 <__sflush_r+0x48>
 80081fc:	6863      	ldr	r3, [r4, #4]
 80081fe:	1ac0      	subs	r0, r0, r3
 8008200:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008202:	b10b      	cbz	r3, 8008208 <__sflush_r+0x48>
 8008204:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008206:	1ac0      	subs	r0, r0, r3
 8008208:	2300      	movs	r3, #0
 800820a:	4602      	mov	r2, r0
 800820c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800820e:	6a21      	ldr	r1, [r4, #32]
 8008210:	4628      	mov	r0, r5
 8008212:	47b0      	blx	r6
 8008214:	1c43      	adds	r3, r0, #1
 8008216:	89a3      	ldrh	r3, [r4, #12]
 8008218:	d106      	bne.n	8008228 <__sflush_r+0x68>
 800821a:	6829      	ldr	r1, [r5, #0]
 800821c:	291d      	cmp	r1, #29
 800821e:	d82b      	bhi.n	8008278 <__sflush_r+0xb8>
 8008220:	4a29      	ldr	r2, [pc, #164]	; (80082c8 <__sflush_r+0x108>)
 8008222:	410a      	asrs	r2, r1
 8008224:	07d6      	lsls	r6, r2, #31
 8008226:	d427      	bmi.n	8008278 <__sflush_r+0xb8>
 8008228:	2200      	movs	r2, #0
 800822a:	6062      	str	r2, [r4, #4]
 800822c:	04d9      	lsls	r1, r3, #19
 800822e:	6922      	ldr	r2, [r4, #16]
 8008230:	6022      	str	r2, [r4, #0]
 8008232:	d504      	bpl.n	800823e <__sflush_r+0x7e>
 8008234:	1c42      	adds	r2, r0, #1
 8008236:	d101      	bne.n	800823c <__sflush_r+0x7c>
 8008238:	682b      	ldr	r3, [r5, #0]
 800823a:	b903      	cbnz	r3, 800823e <__sflush_r+0x7e>
 800823c:	6560      	str	r0, [r4, #84]	; 0x54
 800823e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008240:	602f      	str	r7, [r5, #0]
 8008242:	2900      	cmp	r1, #0
 8008244:	d0c9      	beq.n	80081da <__sflush_r+0x1a>
 8008246:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800824a:	4299      	cmp	r1, r3
 800824c:	d002      	beq.n	8008254 <__sflush_r+0x94>
 800824e:	4628      	mov	r0, r5
 8008250:	f7ff fbea 	bl	8007a28 <_free_r>
 8008254:	2000      	movs	r0, #0
 8008256:	6360      	str	r0, [r4, #52]	; 0x34
 8008258:	e7c0      	b.n	80081dc <__sflush_r+0x1c>
 800825a:	2301      	movs	r3, #1
 800825c:	4628      	mov	r0, r5
 800825e:	47b0      	blx	r6
 8008260:	1c41      	adds	r1, r0, #1
 8008262:	d1c8      	bne.n	80081f6 <__sflush_r+0x36>
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0c5      	beq.n	80081f6 <__sflush_r+0x36>
 800826a:	2b1d      	cmp	r3, #29
 800826c:	d001      	beq.n	8008272 <__sflush_r+0xb2>
 800826e:	2b16      	cmp	r3, #22
 8008270:	d101      	bne.n	8008276 <__sflush_r+0xb6>
 8008272:	602f      	str	r7, [r5, #0]
 8008274:	e7b1      	b.n	80081da <__sflush_r+0x1a>
 8008276:	89a3      	ldrh	r3, [r4, #12]
 8008278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800827c:	81a3      	strh	r3, [r4, #12]
 800827e:	e7ad      	b.n	80081dc <__sflush_r+0x1c>
 8008280:	690f      	ldr	r7, [r1, #16]
 8008282:	2f00      	cmp	r7, #0
 8008284:	d0a9      	beq.n	80081da <__sflush_r+0x1a>
 8008286:	0793      	lsls	r3, r2, #30
 8008288:	680e      	ldr	r6, [r1, #0]
 800828a:	bf08      	it	eq
 800828c:	694b      	ldreq	r3, [r1, #20]
 800828e:	600f      	str	r7, [r1, #0]
 8008290:	bf18      	it	ne
 8008292:	2300      	movne	r3, #0
 8008294:	eba6 0807 	sub.w	r8, r6, r7
 8008298:	608b      	str	r3, [r1, #8]
 800829a:	f1b8 0f00 	cmp.w	r8, #0
 800829e:	dd9c      	ble.n	80081da <__sflush_r+0x1a>
 80082a0:	6a21      	ldr	r1, [r4, #32]
 80082a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082a4:	4643      	mov	r3, r8
 80082a6:	463a      	mov	r2, r7
 80082a8:	4628      	mov	r0, r5
 80082aa:	47b0      	blx	r6
 80082ac:	2800      	cmp	r0, #0
 80082ae:	dc06      	bgt.n	80082be <__sflush_r+0xfe>
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b6:	81a3      	strh	r3, [r4, #12]
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295
 80082bc:	e78e      	b.n	80081dc <__sflush_r+0x1c>
 80082be:	4407      	add	r7, r0
 80082c0:	eba8 0800 	sub.w	r8, r8, r0
 80082c4:	e7e9      	b.n	800829a <__sflush_r+0xda>
 80082c6:	bf00      	nop
 80082c8:	dfbffffe 	.word	0xdfbffffe

080082cc <_fflush_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	690b      	ldr	r3, [r1, #16]
 80082d0:	4605      	mov	r5, r0
 80082d2:	460c      	mov	r4, r1
 80082d4:	b913      	cbnz	r3, 80082dc <_fflush_r+0x10>
 80082d6:	2500      	movs	r5, #0
 80082d8:	4628      	mov	r0, r5
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	b118      	cbz	r0, 80082e6 <_fflush_r+0x1a>
 80082de:	6a03      	ldr	r3, [r0, #32]
 80082e0:	b90b      	cbnz	r3, 80082e6 <_fflush_r+0x1a>
 80082e2:	f7ff fa99 	bl	8007818 <__sinit>
 80082e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0f3      	beq.n	80082d6 <_fflush_r+0xa>
 80082ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082f0:	07d0      	lsls	r0, r2, #31
 80082f2:	d404      	bmi.n	80082fe <_fflush_r+0x32>
 80082f4:	0599      	lsls	r1, r3, #22
 80082f6:	d402      	bmi.n	80082fe <_fflush_r+0x32>
 80082f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082fa:	f7ff fb92 	bl	8007a22 <__retarget_lock_acquire_recursive>
 80082fe:	4628      	mov	r0, r5
 8008300:	4621      	mov	r1, r4
 8008302:	f7ff ff5d 	bl	80081c0 <__sflush_r>
 8008306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008308:	07da      	lsls	r2, r3, #31
 800830a:	4605      	mov	r5, r0
 800830c:	d4e4      	bmi.n	80082d8 <_fflush_r+0xc>
 800830e:	89a3      	ldrh	r3, [r4, #12]
 8008310:	059b      	lsls	r3, r3, #22
 8008312:	d4e1      	bmi.n	80082d8 <_fflush_r+0xc>
 8008314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008316:	f7ff fb85 	bl	8007a24 <__retarget_lock_release_recursive>
 800831a:	e7dd      	b.n	80082d8 <_fflush_r+0xc>

0800831c <__swbuf_r>:
 800831c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831e:	460e      	mov	r6, r1
 8008320:	4614      	mov	r4, r2
 8008322:	4605      	mov	r5, r0
 8008324:	b118      	cbz	r0, 800832e <__swbuf_r+0x12>
 8008326:	6a03      	ldr	r3, [r0, #32]
 8008328:	b90b      	cbnz	r3, 800832e <__swbuf_r+0x12>
 800832a:	f7ff fa75 	bl	8007818 <__sinit>
 800832e:	69a3      	ldr	r3, [r4, #24]
 8008330:	60a3      	str	r3, [r4, #8]
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	071a      	lsls	r2, r3, #28
 8008336:	d525      	bpl.n	8008384 <__swbuf_r+0x68>
 8008338:	6923      	ldr	r3, [r4, #16]
 800833a:	b31b      	cbz	r3, 8008384 <__swbuf_r+0x68>
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	6922      	ldr	r2, [r4, #16]
 8008340:	1a98      	subs	r0, r3, r2
 8008342:	6963      	ldr	r3, [r4, #20]
 8008344:	b2f6      	uxtb	r6, r6
 8008346:	4283      	cmp	r3, r0
 8008348:	4637      	mov	r7, r6
 800834a:	dc04      	bgt.n	8008356 <__swbuf_r+0x3a>
 800834c:	4621      	mov	r1, r4
 800834e:	4628      	mov	r0, r5
 8008350:	f7ff ffbc 	bl	80082cc <_fflush_r>
 8008354:	b9e0      	cbnz	r0, 8008390 <__swbuf_r+0x74>
 8008356:	68a3      	ldr	r3, [r4, #8]
 8008358:	3b01      	subs	r3, #1
 800835a:	60a3      	str	r3, [r4, #8]
 800835c:	6823      	ldr	r3, [r4, #0]
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	6022      	str	r2, [r4, #0]
 8008362:	701e      	strb	r6, [r3, #0]
 8008364:	6962      	ldr	r2, [r4, #20]
 8008366:	1c43      	adds	r3, r0, #1
 8008368:	429a      	cmp	r2, r3
 800836a:	d004      	beq.n	8008376 <__swbuf_r+0x5a>
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	07db      	lsls	r3, r3, #31
 8008370:	d506      	bpl.n	8008380 <__swbuf_r+0x64>
 8008372:	2e0a      	cmp	r6, #10
 8008374:	d104      	bne.n	8008380 <__swbuf_r+0x64>
 8008376:	4621      	mov	r1, r4
 8008378:	4628      	mov	r0, r5
 800837a:	f7ff ffa7 	bl	80082cc <_fflush_r>
 800837e:	b938      	cbnz	r0, 8008390 <__swbuf_r+0x74>
 8008380:	4638      	mov	r0, r7
 8008382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008384:	4621      	mov	r1, r4
 8008386:	4628      	mov	r0, r5
 8008388:	f000 f806 	bl	8008398 <__swsetup_r>
 800838c:	2800      	cmp	r0, #0
 800838e:	d0d5      	beq.n	800833c <__swbuf_r+0x20>
 8008390:	f04f 37ff 	mov.w	r7, #4294967295
 8008394:	e7f4      	b.n	8008380 <__swbuf_r+0x64>
	...

08008398 <__swsetup_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	4b2a      	ldr	r3, [pc, #168]	; (8008444 <__swsetup_r+0xac>)
 800839c:	4605      	mov	r5, r0
 800839e:	6818      	ldr	r0, [r3, #0]
 80083a0:	460c      	mov	r4, r1
 80083a2:	b118      	cbz	r0, 80083ac <__swsetup_r+0x14>
 80083a4:	6a03      	ldr	r3, [r0, #32]
 80083a6:	b90b      	cbnz	r3, 80083ac <__swsetup_r+0x14>
 80083a8:	f7ff fa36 	bl	8007818 <__sinit>
 80083ac:	89a3      	ldrh	r3, [r4, #12]
 80083ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083b2:	0718      	lsls	r0, r3, #28
 80083b4:	d422      	bmi.n	80083fc <__swsetup_r+0x64>
 80083b6:	06d9      	lsls	r1, r3, #27
 80083b8:	d407      	bmi.n	80083ca <__swsetup_r+0x32>
 80083ba:	2309      	movs	r3, #9
 80083bc:	602b      	str	r3, [r5, #0]
 80083be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083c2:	81a3      	strh	r3, [r4, #12]
 80083c4:	f04f 30ff 	mov.w	r0, #4294967295
 80083c8:	e034      	b.n	8008434 <__swsetup_r+0x9c>
 80083ca:	0758      	lsls	r0, r3, #29
 80083cc:	d512      	bpl.n	80083f4 <__swsetup_r+0x5c>
 80083ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083d0:	b141      	cbz	r1, 80083e4 <__swsetup_r+0x4c>
 80083d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083d6:	4299      	cmp	r1, r3
 80083d8:	d002      	beq.n	80083e0 <__swsetup_r+0x48>
 80083da:	4628      	mov	r0, r5
 80083dc:	f7ff fb24 	bl	8007a28 <_free_r>
 80083e0:	2300      	movs	r3, #0
 80083e2:	6363      	str	r3, [r4, #52]	; 0x34
 80083e4:	89a3      	ldrh	r3, [r4, #12]
 80083e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083ea:	81a3      	strh	r3, [r4, #12]
 80083ec:	2300      	movs	r3, #0
 80083ee:	6063      	str	r3, [r4, #4]
 80083f0:	6923      	ldr	r3, [r4, #16]
 80083f2:	6023      	str	r3, [r4, #0]
 80083f4:	89a3      	ldrh	r3, [r4, #12]
 80083f6:	f043 0308 	orr.w	r3, r3, #8
 80083fa:	81a3      	strh	r3, [r4, #12]
 80083fc:	6923      	ldr	r3, [r4, #16]
 80083fe:	b94b      	cbnz	r3, 8008414 <__swsetup_r+0x7c>
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800840a:	d003      	beq.n	8008414 <__swsetup_r+0x7c>
 800840c:	4621      	mov	r1, r4
 800840e:	4628      	mov	r0, r5
 8008410:	f000 f850 	bl	80084b4 <__smakebuf_r>
 8008414:	89a0      	ldrh	r0, [r4, #12]
 8008416:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800841a:	f010 0301 	ands.w	r3, r0, #1
 800841e:	d00a      	beq.n	8008436 <__swsetup_r+0x9e>
 8008420:	2300      	movs	r3, #0
 8008422:	60a3      	str	r3, [r4, #8]
 8008424:	6963      	ldr	r3, [r4, #20]
 8008426:	425b      	negs	r3, r3
 8008428:	61a3      	str	r3, [r4, #24]
 800842a:	6923      	ldr	r3, [r4, #16]
 800842c:	b943      	cbnz	r3, 8008440 <__swsetup_r+0xa8>
 800842e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008432:	d1c4      	bne.n	80083be <__swsetup_r+0x26>
 8008434:	bd38      	pop	{r3, r4, r5, pc}
 8008436:	0781      	lsls	r1, r0, #30
 8008438:	bf58      	it	pl
 800843a:	6963      	ldrpl	r3, [r4, #20]
 800843c:	60a3      	str	r3, [r4, #8]
 800843e:	e7f4      	b.n	800842a <__swsetup_r+0x92>
 8008440:	2000      	movs	r0, #0
 8008442:	e7f7      	b.n	8008434 <__swsetup_r+0x9c>
 8008444:	2000006c 	.word	0x2000006c

08008448 <_sbrk_r>:
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	4d06      	ldr	r5, [pc, #24]	; (8008464 <_sbrk_r+0x1c>)
 800844c:	2300      	movs	r3, #0
 800844e:	4604      	mov	r4, r0
 8008450:	4608      	mov	r0, r1
 8008452:	602b      	str	r3, [r5, #0]
 8008454:	f7f9 fe90 	bl	8002178 <_sbrk>
 8008458:	1c43      	adds	r3, r0, #1
 800845a:	d102      	bne.n	8008462 <_sbrk_r+0x1a>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	b103      	cbz	r3, 8008462 <_sbrk_r+0x1a>
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	bd38      	pop	{r3, r4, r5, pc}
 8008464:	20000504 	.word	0x20000504

08008468 <__swhatbuf_r>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	460c      	mov	r4, r1
 800846c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008470:	2900      	cmp	r1, #0
 8008472:	b096      	sub	sp, #88	; 0x58
 8008474:	4615      	mov	r5, r2
 8008476:	461e      	mov	r6, r3
 8008478:	da0d      	bge.n	8008496 <__swhatbuf_r+0x2e>
 800847a:	89a3      	ldrh	r3, [r4, #12]
 800847c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008480:	f04f 0100 	mov.w	r1, #0
 8008484:	bf0c      	ite	eq
 8008486:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800848a:	2340      	movne	r3, #64	; 0x40
 800848c:	2000      	movs	r0, #0
 800848e:	6031      	str	r1, [r6, #0]
 8008490:	602b      	str	r3, [r5, #0]
 8008492:	b016      	add	sp, #88	; 0x58
 8008494:	bd70      	pop	{r4, r5, r6, pc}
 8008496:	466a      	mov	r2, sp
 8008498:	f000 f848 	bl	800852c <_fstat_r>
 800849c:	2800      	cmp	r0, #0
 800849e:	dbec      	blt.n	800847a <__swhatbuf_r+0x12>
 80084a0:	9901      	ldr	r1, [sp, #4]
 80084a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80084a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80084aa:	4259      	negs	r1, r3
 80084ac:	4159      	adcs	r1, r3
 80084ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084b2:	e7eb      	b.n	800848c <__swhatbuf_r+0x24>

080084b4 <__smakebuf_r>:
 80084b4:	898b      	ldrh	r3, [r1, #12]
 80084b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084b8:	079d      	lsls	r5, r3, #30
 80084ba:	4606      	mov	r6, r0
 80084bc:	460c      	mov	r4, r1
 80084be:	d507      	bpl.n	80084d0 <__smakebuf_r+0x1c>
 80084c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084c4:	6023      	str	r3, [r4, #0]
 80084c6:	6123      	str	r3, [r4, #16]
 80084c8:	2301      	movs	r3, #1
 80084ca:	6163      	str	r3, [r4, #20]
 80084cc:	b002      	add	sp, #8
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
 80084d0:	ab01      	add	r3, sp, #4
 80084d2:	466a      	mov	r2, sp
 80084d4:	f7ff ffc8 	bl	8008468 <__swhatbuf_r>
 80084d8:	9900      	ldr	r1, [sp, #0]
 80084da:	4605      	mov	r5, r0
 80084dc:	4630      	mov	r0, r6
 80084de:	f7ff fb0f 	bl	8007b00 <_malloc_r>
 80084e2:	b948      	cbnz	r0, 80084f8 <__smakebuf_r+0x44>
 80084e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084e8:	059a      	lsls	r2, r3, #22
 80084ea:	d4ef      	bmi.n	80084cc <__smakebuf_r+0x18>
 80084ec:	f023 0303 	bic.w	r3, r3, #3
 80084f0:	f043 0302 	orr.w	r3, r3, #2
 80084f4:	81a3      	strh	r3, [r4, #12]
 80084f6:	e7e3      	b.n	80084c0 <__smakebuf_r+0xc>
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	6020      	str	r0, [r4, #0]
 80084fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008500:	81a3      	strh	r3, [r4, #12]
 8008502:	9b00      	ldr	r3, [sp, #0]
 8008504:	6163      	str	r3, [r4, #20]
 8008506:	9b01      	ldr	r3, [sp, #4]
 8008508:	6120      	str	r0, [r4, #16]
 800850a:	b15b      	cbz	r3, 8008524 <__smakebuf_r+0x70>
 800850c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008510:	4630      	mov	r0, r6
 8008512:	f000 f81d 	bl	8008550 <_isatty_r>
 8008516:	b128      	cbz	r0, 8008524 <__smakebuf_r+0x70>
 8008518:	89a3      	ldrh	r3, [r4, #12]
 800851a:	f023 0303 	bic.w	r3, r3, #3
 800851e:	f043 0301 	orr.w	r3, r3, #1
 8008522:	81a3      	strh	r3, [r4, #12]
 8008524:	89a3      	ldrh	r3, [r4, #12]
 8008526:	431d      	orrs	r5, r3
 8008528:	81a5      	strh	r5, [r4, #12]
 800852a:	e7cf      	b.n	80084cc <__smakebuf_r+0x18>

0800852c <_fstat_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4d07      	ldr	r5, [pc, #28]	; (800854c <_fstat_r+0x20>)
 8008530:	2300      	movs	r3, #0
 8008532:	4604      	mov	r4, r0
 8008534:	4608      	mov	r0, r1
 8008536:	4611      	mov	r1, r2
 8008538:	602b      	str	r3, [r5, #0]
 800853a:	f7f9 fdf4 	bl	8002126 <_fstat>
 800853e:	1c43      	adds	r3, r0, #1
 8008540:	d102      	bne.n	8008548 <_fstat_r+0x1c>
 8008542:	682b      	ldr	r3, [r5, #0]
 8008544:	b103      	cbz	r3, 8008548 <_fstat_r+0x1c>
 8008546:	6023      	str	r3, [r4, #0]
 8008548:	bd38      	pop	{r3, r4, r5, pc}
 800854a:	bf00      	nop
 800854c:	20000504 	.word	0x20000504

08008550 <_isatty_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	4d06      	ldr	r5, [pc, #24]	; (800856c <_isatty_r+0x1c>)
 8008554:	2300      	movs	r3, #0
 8008556:	4604      	mov	r4, r0
 8008558:	4608      	mov	r0, r1
 800855a:	602b      	str	r3, [r5, #0]
 800855c:	f7f9 fdf3 	bl	8002146 <_isatty>
 8008560:	1c43      	adds	r3, r0, #1
 8008562:	d102      	bne.n	800856a <_isatty_r+0x1a>
 8008564:	682b      	ldr	r3, [r5, #0]
 8008566:	b103      	cbz	r3, 800856a <_isatty_r+0x1a>
 8008568:	6023      	str	r3, [r4, #0]
 800856a:	bd38      	pop	{r3, r4, r5, pc}
 800856c:	20000504 	.word	0x20000504

08008570 <_init>:
 8008570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008572:	bf00      	nop
 8008574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008576:	bc08      	pop	{r3}
 8008578:	469e      	mov	lr, r3
 800857a:	4770      	bx	lr

0800857c <_fini>:
 800857c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857e:	bf00      	nop
 8008580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008582:	bc08      	pop	{r3}
 8008584:	469e      	mov	lr, r3
 8008586:	4770      	bx	lr
