
ECEN-361-STM32-Lab-08-Sampling-Solution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000096c  08008cac  08008cac  00018cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009618  08009618  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009618  08009618  00019618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009620  08009620  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009620  08009620  00019620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009624  08009624  00019624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  20000070  08009698  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  08009698  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ecf  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031a8  00000000  00000000  00037fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  0003b160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001113  00000000  00000000  0003c758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a81b  00000000  00000000  0003d86b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000194c6  00000000  00000000  00068086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010a242  00000000  00000000  0008154c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000682c  00000000  00000000  0018b790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00191fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c94 	.word	0x08008c94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008c94 	.word	0x08008c94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__gedf2>:
 800083c:	f04f 3cff 	mov.w	ip, #4294967295
 8000840:	e006      	b.n	8000850 <__cmpdf2+0x4>
 8000842:	bf00      	nop

08000844 <__ledf2>:
 8000844:	f04f 0c01 	mov.w	ip, #1
 8000848:	e002      	b.n	8000850 <__cmpdf2+0x4>
 800084a:	bf00      	nop

0800084c <__cmpdf2>:
 800084c:	f04f 0c01 	mov.w	ip, #1
 8000850:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800085c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000866:	d01b      	beq.n	80008a0 <__cmpdf2+0x54>
 8000868:	b001      	add	sp, #4
 800086a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800086e:	bf0c      	ite	eq
 8000870:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000874:	ea91 0f03 	teqne	r1, r3
 8000878:	bf02      	ittt	eq
 800087a:	ea90 0f02 	teqeq	r0, r2
 800087e:	2000      	moveq	r0, #0
 8000880:	4770      	bxeq	lr
 8000882:	f110 0f00 	cmn.w	r0, #0
 8000886:	ea91 0f03 	teq	r1, r3
 800088a:	bf58      	it	pl
 800088c:	4299      	cmppl	r1, r3
 800088e:	bf08      	it	eq
 8000890:	4290      	cmpeq	r0, r2
 8000892:	bf2c      	ite	cs
 8000894:	17d8      	asrcs	r0, r3, #31
 8000896:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800089a:	f040 0001 	orr.w	r0, r0, #1
 800089e:	4770      	bx	lr
 80008a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a8:	d102      	bne.n	80008b0 <__cmpdf2+0x64>
 80008aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ae:	d107      	bne.n	80008c0 <__cmpdf2+0x74>
 80008b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d1d6      	bne.n	8000868 <__cmpdf2+0x1c>
 80008ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008be:	d0d3      	beq.n	8000868 <__cmpdf2+0x1c>
 80008c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <__aeabi_cdrcmple>:
 80008c8:	4684      	mov	ip, r0
 80008ca:	4610      	mov	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	468c      	mov	ip, r1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4663      	mov	r3, ip
 80008d4:	e000      	b.n	80008d8 <__aeabi_cdcmpeq>
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdcmpeq>:
 80008d8:	b501      	push	{r0, lr}
 80008da:	f7ff ffb7 	bl	800084c <__cmpdf2>
 80008de:	2800      	cmp	r0, #0
 80008e0:	bf48      	it	mi
 80008e2:	f110 0f00 	cmnmi.w	r0, #0
 80008e6:	bd01      	pop	{r0, pc}

080008e8 <__aeabi_dcmpeq>:
 80008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ec:	f7ff fff4 	bl	80008d8 <__aeabi_cdcmpeq>
 80008f0:	bf0c      	ite	eq
 80008f2:	2001      	moveq	r0, #1
 80008f4:	2000      	movne	r0, #0
 80008f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008fa:	bf00      	nop

080008fc <__aeabi_dcmplt>:
 80008fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000900:	f7ff ffea 	bl	80008d8 <__aeabi_cdcmpeq>
 8000904:	bf34      	ite	cc
 8000906:	2001      	movcc	r0, #1
 8000908:	2000      	movcs	r0, #0
 800090a:	f85d fb08 	ldr.w	pc, [sp], #8
 800090e:	bf00      	nop

08000910 <__aeabi_dcmple>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff ffe0 	bl	80008d8 <__aeabi_cdcmpeq>
 8000918:	bf94      	ite	ls
 800091a:	2001      	movls	r0, #1
 800091c:	2000      	movhi	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmpge>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffce 	bl	80008c8 <__aeabi_cdrcmple>
 800092c:	bf94      	ite	ls
 800092e:	2001      	movls	r0, #1
 8000930:	2000      	movhi	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmpgt>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffc4 	bl	80008c8 <__aeabi_cdrcmple>
 8000940:	bf34      	ite	cc
 8000942:	2001      	movcc	r0, #1
 8000944:	2000      	movcs	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_uldivmod>:
 800094c:	b953      	cbnz	r3, 8000964 <__aeabi_uldivmod+0x18>
 800094e:	b94a      	cbnz	r2, 8000964 <__aeabi_uldivmod+0x18>
 8000950:	2900      	cmp	r1, #0
 8000952:	bf08      	it	eq
 8000954:	2800      	cmpeq	r0, #0
 8000956:	bf1c      	itt	ne
 8000958:	f04f 31ff 	movne.w	r1, #4294967295
 800095c:	f04f 30ff 	movne.w	r0, #4294967295
 8000960:	f000 b970 	b.w	8000c44 <__aeabi_idiv0>
 8000964:	f1ad 0c08 	sub.w	ip, sp, #8
 8000968:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800096c:	f000 f806 	bl	800097c <__udivmoddi4>
 8000970:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000978:	b004      	add	sp, #16
 800097a:	4770      	bx	lr

0800097c <__udivmoddi4>:
 800097c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000980:	9e08      	ldr	r6, [sp, #32]
 8000982:	460d      	mov	r5, r1
 8000984:	4604      	mov	r4, r0
 8000986:	460f      	mov	r7, r1
 8000988:	2b00      	cmp	r3, #0
 800098a:	d14a      	bne.n	8000a22 <__udivmoddi4+0xa6>
 800098c:	428a      	cmp	r2, r1
 800098e:	4694      	mov	ip, r2
 8000990:	d965      	bls.n	8000a5e <__udivmoddi4+0xe2>
 8000992:	fab2 f382 	clz	r3, r2
 8000996:	b143      	cbz	r3, 80009aa <__udivmoddi4+0x2e>
 8000998:	fa02 fc03 	lsl.w	ip, r2, r3
 800099c:	f1c3 0220 	rsb	r2, r3, #32
 80009a0:	409f      	lsls	r7, r3
 80009a2:	fa20 f202 	lsr.w	r2, r0, r2
 80009a6:	4317      	orrs	r7, r2
 80009a8:	409c      	lsls	r4, r3
 80009aa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009ae:	fa1f f58c 	uxth.w	r5, ip
 80009b2:	fbb7 f1fe 	udiv	r1, r7, lr
 80009b6:	0c22      	lsrs	r2, r4, #16
 80009b8:	fb0e 7711 	mls	r7, lr, r1, r7
 80009bc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009c0:	fb01 f005 	mul.w	r0, r1, r5
 80009c4:	4290      	cmp	r0, r2
 80009c6:	d90a      	bls.n	80009de <__udivmoddi4+0x62>
 80009c8:	eb1c 0202 	adds.w	r2, ip, r2
 80009cc:	f101 37ff 	add.w	r7, r1, #4294967295
 80009d0:	f080 811c 	bcs.w	8000c0c <__udivmoddi4+0x290>
 80009d4:	4290      	cmp	r0, r2
 80009d6:	f240 8119 	bls.w	8000c0c <__udivmoddi4+0x290>
 80009da:	3902      	subs	r1, #2
 80009dc:	4462      	add	r2, ip
 80009de:	1a12      	subs	r2, r2, r0
 80009e0:	b2a4      	uxth	r4, r4
 80009e2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009e6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009ee:	fb00 f505 	mul.w	r5, r0, r5
 80009f2:	42a5      	cmp	r5, r4
 80009f4:	d90a      	bls.n	8000a0c <__udivmoddi4+0x90>
 80009f6:	eb1c 0404 	adds.w	r4, ip, r4
 80009fa:	f100 32ff 	add.w	r2, r0, #4294967295
 80009fe:	f080 8107 	bcs.w	8000c10 <__udivmoddi4+0x294>
 8000a02:	42a5      	cmp	r5, r4
 8000a04:	f240 8104 	bls.w	8000c10 <__udivmoddi4+0x294>
 8000a08:	4464      	add	r4, ip
 8000a0a:	3802      	subs	r0, #2
 8000a0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a10:	1b64      	subs	r4, r4, r5
 8000a12:	2100      	movs	r1, #0
 8000a14:	b11e      	cbz	r6, 8000a1e <__udivmoddi4+0xa2>
 8000a16:	40dc      	lsrs	r4, r3
 8000a18:	2300      	movs	r3, #0
 8000a1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0xbc>
 8000a26:	2e00      	cmp	r6, #0
 8000a28:	f000 80ed 	beq.w	8000c06 <__udivmoddi4+0x28a>
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000a32:	4608      	mov	r0, r1
 8000a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a38:	fab3 f183 	clz	r1, r3
 8000a3c:	2900      	cmp	r1, #0
 8000a3e:	d149      	bne.n	8000ad4 <__udivmoddi4+0x158>
 8000a40:	42ab      	cmp	r3, r5
 8000a42:	d302      	bcc.n	8000a4a <__udivmoddi4+0xce>
 8000a44:	4282      	cmp	r2, r0
 8000a46:	f200 80f8 	bhi.w	8000c3a <__udivmoddi4+0x2be>
 8000a4a:	1a84      	subs	r4, r0, r2
 8000a4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a50:	2001      	movs	r0, #1
 8000a52:	4617      	mov	r7, r2
 8000a54:	2e00      	cmp	r6, #0
 8000a56:	d0e2      	beq.n	8000a1e <__udivmoddi4+0xa2>
 8000a58:	e9c6 4700 	strd	r4, r7, [r6]
 8000a5c:	e7df      	b.n	8000a1e <__udivmoddi4+0xa2>
 8000a5e:	b902      	cbnz	r2, 8000a62 <__udivmoddi4+0xe6>
 8000a60:	deff      	udf	#255	; 0xff
 8000a62:	fab2 f382 	clz	r3, r2
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f040 8090 	bne.w	8000b8c <__udivmoddi4+0x210>
 8000a6c:	1a8a      	subs	r2, r1, r2
 8000a6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a72:	fa1f fe8c 	uxth.w	lr, ip
 8000a76:	2101      	movs	r1, #1
 8000a78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a80:	0c22      	lsrs	r2, r4, #16
 8000a82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a86:	fb0e f005 	mul.w	r0, lr, r5
 8000a8a:	4290      	cmp	r0, r2
 8000a8c:	d908      	bls.n	8000aa0 <__udivmoddi4+0x124>
 8000a8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a96:	d202      	bcs.n	8000a9e <__udivmoddi4+0x122>
 8000a98:	4290      	cmp	r0, r2
 8000a9a:	f200 80cb 	bhi.w	8000c34 <__udivmoddi4+0x2b8>
 8000a9e:	4645      	mov	r5, r8
 8000aa0:	1a12      	subs	r2, r2, r0
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000aa8:	fb07 2210 	mls	r2, r7, r0, r2
 8000aac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ab0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ab4:	45a6      	cmp	lr, r4
 8000ab6:	d908      	bls.n	8000aca <__udivmoddi4+0x14e>
 8000ab8:	eb1c 0404 	adds.w	r4, ip, r4
 8000abc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ac0:	d202      	bcs.n	8000ac8 <__udivmoddi4+0x14c>
 8000ac2:	45a6      	cmp	lr, r4
 8000ac4:	f200 80bb 	bhi.w	8000c3e <__udivmoddi4+0x2c2>
 8000ac8:	4610      	mov	r0, r2
 8000aca:	eba4 040e 	sub.w	r4, r4, lr
 8000ace:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ad2:	e79f      	b.n	8000a14 <__udivmoddi4+0x98>
 8000ad4:	f1c1 0720 	rsb	r7, r1, #32
 8000ad8:	408b      	lsls	r3, r1
 8000ada:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ade:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ae2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ae6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aea:	40fd      	lsrs	r5, r7
 8000aec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000af0:	4323      	orrs	r3, r4
 8000af2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000af6:	fa1f fe8c 	uxth.w	lr, ip
 8000afa:	fb09 5518 	mls	r5, r9, r8, r5
 8000afe:	0c1c      	lsrs	r4, r3, #16
 8000b00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b04:	fb08 f50e 	mul.w	r5, r8, lr
 8000b08:	42a5      	cmp	r5, r4
 8000b0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b12:	d90b      	bls.n	8000b2c <__udivmoddi4+0x1b0>
 8000b14:	eb1c 0404 	adds.w	r4, ip, r4
 8000b18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b1c:	f080 8088 	bcs.w	8000c30 <__udivmoddi4+0x2b4>
 8000b20:	42a5      	cmp	r5, r4
 8000b22:	f240 8085 	bls.w	8000c30 <__udivmoddi4+0x2b4>
 8000b26:	f1a8 0802 	sub.w	r8, r8, #2
 8000b2a:	4464      	add	r4, ip
 8000b2c:	1b64      	subs	r4, r4, r5
 8000b2e:	b29d      	uxth	r5, r3
 8000b30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b34:	fb09 4413 	mls	r4, r9, r3, r4
 8000b38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b40:	45a6      	cmp	lr, r4
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x1da>
 8000b44:	eb1c 0404 	adds.w	r4, ip, r4
 8000b48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b4c:	d26c      	bcs.n	8000c28 <__udivmoddi4+0x2ac>
 8000b4e:	45a6      	cmp	lr, r4
 8000b50:	d96a      	bls.n	8000c28 <__udivmoddi4+0x2ac>
 8000b52:	3b02      	subs	r3, #2
 8000b54:	4464      	add	r4, ip
 8000b56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b5e:	eba4 040e 	sub.w	r4, r4, lr
 8000b62:	42ac      	cmp	r4, r5
 8000b64:	46c8      	mov	r8, r9
 8000b66:	46ae      	mov	lr, r5
 8000b68:	d356      	bcc.n	8000c18 <__udivmoddi4+0x29c>
 8000b6a:	d053      	beq.n	8000c14 <__udivmoddi4+0x298>
 8000b6c:	b156      	cbz	r6, 8000b84 <__udivmoddi4+0x208>
 8000b6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b72:	eb64 040e 	sbc.w	r4, r4, lr
 8000b76:	fa04 f707 	lsl.w	r7, r4, r7
 8000b7a:	40ca      	lsrs	r2, r1
 8000b7c:	40cc      	lsrs	r4, r1
 8000b7e:	4317      	orrs	r7, r2
 8000b80:	e9c6 7400 	strd	r7, r4, [r6]
 8000b84:	4618      	mov	r0, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8c:	f1c3 0120 	rsb	r1, r3, #32
 8000b90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b94:	fa20 f201 	lsr.w	r2, r0, r1
 8000b98:	fa25 f101 	lsr.w	r1, r5, r1
 8000b9c:	409d      	lsls	r5, r3
 8000b9e:	432a      	orrs	r2, r5
 8000ba0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba4:	fa1f fe8c 	uxth.w	lr, ip
 8000ba8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bac:	fb07 1510 	mls	r5, r7, r0, r1
 8000bb0:	0c11      	lsrs	r1, r2, #16
 8000bb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000bb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000bba:	428d      	cmp	r5, r1
 8000bbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x258>
 8000bc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bca:	d22f      	bcs.n	8000c2c <__udivmoddi4+0x2b0>
 8000bcc:	428d      	cmp	r5, r1
 8000bce:	d92d      	bls.n	8000c2c <__udivmoddi4+0x2b0>
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	4461      	add	r1, ip
 8000bd4:	1b49      	subs	r1, r1, r5
 8000bd6:	b292      	uxth	r2, r2
 8000bd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bdc:	fb07 1115 	mls	r1, r7, r5, r1
 8000be0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000be4:	fb05 f10e 	mul.w	r1, r5, lr
 8000be8:	4291      	cmp	r1, r2
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x282>
 8000bec:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bf4:	d216      	bcs.n	8000c24 <__udivmoddi4+0x2a8>
 8000bf6:	4291      	cmp	r1, r2
 8000bf8:	d914      	bls.n	8000c24 <__udivmoddi4+0x2a8>
 8000bfa:	3d02      	subs	r5, #2
 8000bfc:	4462      	add	r2, ip
 8000bfe:	1a52      	subs	r2, r2, r1
 8000c00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c04:	e738      	b.n	8000a78 <__udivmoddi4+0xfc>
 8000c06:	4631      	mov	r1, r6
 8000c08:	4630      	mov	r0, r6
 8000c0a:	e708      	b.n	8000a1e <__udivmoddi4+0xa2>
 8000c0c:	4639      	mov	r1, r7
 8000c0e:	e6e6      	b.n	80009de <__udivmoddi4+0x62>
 8000c10:	4610      	mov	r0, r2
 8000c12:	e6fb      	b.n	8000a0c <__udivmoddi4+0x90>
 8000c14:	4548      	cmp	r0, r9
 8000c16:	d2a9      	bcs.n	8000b6c <__udivmoddi4+0x1f0>
 8000c18:	ebb9 0802 	subs.w	r8, r9, r2
 8000c1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c20:	3b01      	subs	r3, #1
 8000c22:	e7a3      	b.n	8000b6c <__udivmoddi4+0x1f0>
 8000c24:	4645      	mov	r5, r8
 8000c26:	e7ea      	b.n	8000bfe <__udivmoddi4+0x282>
 8000c28:	462b      	mov	r3, r5
 8000c2a:	e794      	b.n	8000b56 <__udivmoddi4+0x1da>
 8000c2c:	4640      	mov	r0, r8
 8000c2e:	e7d1      	b.n	8000bd4 <__udivmoddi4+0x258>
 8000c30:	46d0      	mov	r8, sl
 8000c32:	e77b      	b.n	8000b2c <__udivmoddi4+0x1b0>
 8000c34:	3d02      	subs	r5, #2
 8000c36:	4462      	add	r2, ip
 8000c38:	e732      	b.n	8000aa0 <__udivmoddi4+0x124>
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e70a      	b.n	8000a54 <__udivmoddi4+0xd8>
 8000c3e:	4464      	add	r4, ip
 8000c40:	3802      	subs	r0, #2
 8000c42:	e742      	b.n	8000aca <__udivmoddi4+0x14e>

08000c44 <__aeabi_idiv0>:
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	461a      	mov	r2, r3
 8000c54:	460b      	mov	r3, r1
 8000c56:	817b      	strh	r3, [r7, #10]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	75fb      	strb	r3, [r7, #23]
 8000c60:	e038      	b.n	8000cd4 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000c62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d10f      	bne.n	8000c8a <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 8000c6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	897b      	ldrh	r3, [r7, #10]
 8000c76:	4619      	mov	r1, r3
 8000c78:	68f8      	ldr	r0, [r7, #12]
 8000c7a:	f003 ff3f 	bl	8004afc <HAL_GPIO_WritePin>
			val >>= 1;
 8000c7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c82:	085b      	lsrs	r3, r3, #1
 8000c84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000c88:	e00f      	b.n	8000caa <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 8000c8a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	09db      	lsrs	r3, r3, #7
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	897b      	ldrh	r3, [r7, #10]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f003 ff2e 	bl	8004afc <HAL_GPIO_WritePin>
			val <<= 1;
 8000ca0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 8000caa:	893b      	ldrh	r3, [r7, #8]
 8000cac:	2200      	movs	r2, #0
 8000cae:	4619      	mov	r1, r3
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f003 ff23 	bl	8004afc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 8000cb6:	893b      	ldrh	r3, [r7, #8]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4619      	mov	r1, r3
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f003 ff1d 	bl	8004afc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 8000cc2:	893b      	ldrh	r3, [r7, #8]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f003 ff17 	bl	8004afc <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 8000cce:	7dfb      	ldrb	r3, [r7, #23]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	75fb      	strb	r3, [r7, #23]
 8000cd4:	7dfb      	ldrb	r3, [r7, #23]
 8000cd6:	2b07      	cmp	r3, #7
 8000cd8:	d9c3      	bls.n	8000c62 <shiftOut+0x1a>
	}
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <MultiFunctionShield_Display>:
	SEGMENT_VALUE[0] = 0x0e;    // Letter F
	}


void MultiFunctionShield_Display (int16_t value)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	80fb      	strh	r3, [r7, #6]
  if ((value > 9999) || (value < -999))   // out of range
 8000cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	dc04      	bgt.n	8000d04 <MultiFunctionShield_Display+0x20>
 8000cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cfe:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000d02:	dc0c      	bgt.n	8000d1e <MultiFunctionShield_Display+0x3a>
  {
    SEGMENT_VALUE[0] = SEGMENT_MINUS;
 8000d04:	22bf      	movs	r2, #191	; 0xbf
 8000d06:	4b7f      	ldr	r3, [pc, #508]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000d08:	701a      	strb	r2, [r3, #0]
    SEGMENT_VALUE[1] = SEGMENT_MINUS;
 8000d0a:	22bf      	movs	r2, #191	; 0xbf
 8000d0c:	4b7d      	ldr	r3, [pc, #500]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000d0e:	705a      	strb	r2, [r3, #1]
    SEGMENT_VALUE[2] = SEGMENT_MINUS;
 8000d10:	22bf      	movs	r2, #191	; 0xbf
 8000d12:	4b7c      	ldr	r3, [pc, #496]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000d14:	709a      	strb	r2, [r3, #2]
    SEGMENT_VALUE[3] = SEGMENT_MINUS;
 8000d16:	22bf      	movs	r2, #191	; 0xbf
 8000d18:	4b7a      	ldr	r3, [pc, #488]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000d1a:	70da      	strb	r2, [r3, #3]
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;

      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
    }
  }
}
 8000d1c:	e0ec      	b.n	8000ef8 <MultiFunctionShield_Display+0x214>
    if (value > 0)   // positive values
 8000d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	dd72      	ble.n	8000e0c <MultiFunctionShield_Display+0x128>
      if (value > 999)
 8000d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d2e:	db0f      	blt.n	8000d50 <MultiFunctionShield_Display+0x6c>
        SEGMENT_VALUE[0] = SEGMENT_MAP [(uint8_t) (value / 1000)];
 8000d30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d34:	4a74      	ldr	r2, [pc, #464]	; (8000f08 <MultiFunctionShield_Display+0x224>)
 8000d36:	fb82 1203 	smull	r1, r2, r2, r3
 8000d3a:	1192      	asrs	r2, r2, #6
 8000d3c:	17db      	asrs	r3, r3, #31
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b71      	ldr	r3, [pc, #452]	; (8000f0c <MultiFunctionShield_Display+0x228>)
 8000d48:	5c9a      	ldrb	r2, [r3, r2]
 8000d4a:	4b6e      	ldr	r3, [pc, #440]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000d4c:	701a      	strb	r2, [r3, #0]
 8000d4e:	e002      	b.n	8000d56 <MultiFunctionShield_Display+0x72>
        SEGMENT_VALUE[0] = BLANK_OR_ZERO_FILL;
 8000d50:	22ff      	movs	r2, #255	; 0xff
 8000d52:	4b6c      	ldr	r3, [pc, #432]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000d54:	701a      	strb	r2, [r3, #0]
      if (value > 99)
 8000d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d5a:	2b63      	cmp	r3, #99	; 0x63
 8000d5c:	dd1b      	ble.n	8000d96 <MultiFunctionShield_Display+0xb2>
        SEGMENT_VALUE[1] = SEGMENT_MAP [(uint8_t) ((value / 100) % 10)];
 8000d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d62:	4a6b      	ldr	r2, [pc, #428]	; (8000f10 <MultiFunctionShield_Display+0x22c>)
 8000d64:	fb82 1203 	smull	r1, r2, r2, r3
 8000d68:	1152      	asrs	r2, r2, #5
 8000d6a:	17db      	asrs	r3, r3, #31
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	b21a      	sxth	r2, r3
 8000d70:	4b68      	ldr	r3, [pc, #416]	; (8000f14 <MultiFunctionShield_Display+0x230>)
 8000d72:	fb83 1302 	smull	r1, r3, r3, r2
 8000d76:	1099      	asrs	r1, r3, #2
 8000d78:	17d3      	asrs	r3, r2, #31
 8000d7a:	1ac9      	subs	r1, r1, r3
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	440b      	add	r3, r1
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b5f      	ldr	r3, [pc, #380]	; (8000f0c <MultiFunctionShield_Display+0x228>)
 8000d8e:	5c9a      	ldrb	r2, [r3, r2]
 8000d90:	4b5c      	ldr	r3, [pc, #368]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000d92:	705a      	strb	r2, [r3, #1]
 8000d94:	e002      	b.n	8000d9c <MultiFunctionShield_Display+0xb8>
        SEGMENT_VALUE[1] = BLANK_OR_ZERO_FILL;
 8000d96:	22ff      	movs	r2, #255	; 0xff
 8000d98:	4b5a      	ldr	r3, [pc, #360]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000d9a:	705a      	strb	r2, [r3, #1]
      if (value > 9)
 8000d9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da0:	2b09      	cmp	r3, #9
 8000da2:	dd1b      	ble.n	8000ddc <MultiFunctionShield_Display+0xf8>
        SEGMENT_VALUE[2] = SEGMENT_MAP [(uint8_t) ((value / 10) % 10)];
 8000da4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da8:	4a5a      	ldr	r2, [pc, #360]	; (8000f14 <MultiFunctionShield_Display+0x230>)
 8000daa:	fb82 1203 	smull	r1, r2, r2, r3
 8000dae:	1092      	asrs	r2, r2, #2
 8000db0:	17db      	asrs	r3, r3, #31
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	b21a      	sxth	r2, r3
 8000db6:	4b57      	ldr	r3, [pc, #348]	; (8000f14 <MultiFunctionShield_Display+0x230>)
 8000db8:	fb83 1302 	smull	r1, r3, r3, r2
 8000dbc:	1099      	asrs	r1, r3, #2
 8000dbe:	17d3      	asrs	r3, r2, #31
 8000dc0:	1ac9      	subs	r1, r1, r3
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	b21b      	sxth	r3, r3
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b4e      	ldr	r3, [pc, #312]	; (8000f0c <MultiFunctionShield_Display+0x228>)
 8000dd4:	5c9a      	ldrb	r2, [r3, r2]
 8000dd6:	4b4b      	ldr	r3, [pc, #300]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000dd8:	709a      	strb	r2, [r3, #2]
 8000dda:	e002      	b.n	8000de2 <MultiFunctionShield_Display+0xfe>
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;
 8000ddc:	22ff      	movs	r2, #255	; 0xff
 8000dde:	4b49      	ldr	r3, [pc, #292]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000de0:	709a      	strb	r2, [r3, #2]
      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
 8000de2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000de6:	4b4b      	ldr	r3, [pc, #300]	; (8000f14 <MultiFunctionShield_Display+0x230>)
 8000de8:	fb83 1302 	smull	r1, r3, r3, r2
 8000dec:	1099      	asrs	r1, r3, #2
 8000dee:	17d3      	asrs	r3, r2, #31
 8000df0:	1ac9      	subs	r1, r1, r3
 8000df2:	460b      	mov	r3, r1
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	440b      	add	r3, r1
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b42      	ldr	r3, [pc, #264]	; (8000f0c <MultiFunctionShield_Display+0x228>)
 8000e04:	5c9a      	ldrb	r2, [r3, r2]
 8000e06:	4b3f      	ldr	r3, [pc, #252]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000e08:	70da      	strb	r2, [r3, #3]
}
 8000e0a:	e075      	b.n	8000ef8 <MultiFunctionShield_Display+0x214>
    else if (value == 0)   // positive values
 8000e0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10c      	bne.n	8000e2e <MultiFunctionShield_Display+0x14a>
		SEGMENT_VALUE[0] = SEGMENT_MAP[0];
 8000e14:	22c0      	movs	r2, #192	; 0xc0
 8000e16:	4b3b      	ldr	r3, [pc, #236]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000e18:	701a      	strb	r2, [r3, #0]
		SEGMENT_VALUE[1] = SEGMENT_MAP[0];
 8000e1a:	22c0      	movs	r2, #192	; 0xc0
 8000e1c:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000e1e:	705a      	strb	r2, [r3, #1]
		SEGMENT_VALUE[2] = SEGMENT_MAP[0];
 8000e20:	22c0      	movs	r2, #192	; 0xc0
 8000e22:	4b38      	ldr	r3, [pc, #224]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000e24:	709a      	strb	r2, [r3, #2]
		SEGMENT_VALUE[3] = SEGMENT_MAP[0];
 8000e26:	22c0      	movs	r2, #192	; 0xc0
 8000e28:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000e2a:	70da      	strb	r2, [r3, #3]
}
 8000e2c:	e064      	b.n	8000ef8 <MultiFunctionShield_Display+0x214>
    else if (value < 0)      // negative values: "-" left
 8000e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	da60      	bge.n	8000ef8 <MultiFunctionShield_Display+0x214>
      value *= -1;
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	425b      	negs	r3, r3
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	80fb      	strh	r3, [r7, #6]
      SEGMENT_VALUE[0] = SEGMENT_MINUS;
 8000e3e:	22bf      	movs	r2, #191	; 0xbf
 8000e40:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000e42:	701a      	strb	r2, [r3, #0]
      if (value > 99)
 8000e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e48:	2b63      	cmp	r3, #99	; 0x63
 8000e4a:	dd1b      	ble.n	8000e84 <MultiFunctionShield_Display+0x1a0>
        SEGMENT_VALUE[1] = SEGMENT_MAP [(uint8_t) ((value / 100) % 10)];
 8000e4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e50:	4a2f      	ldr	r2, [pc, #188]	; (8000f10 <MultiFunctionShield_Display+0x22c>)
 8000e52:	fb82 1203 	smull	r1, r2, r2, r3
 8000e56:	1152      	asrs	r2, r2, #5
 8000e58:	17db      	asrs	r3, r3, #31
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	b21a      	sxth	r2, r3
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <MultiFunctionShield_Display+0x230>)
 8000e60:	fb83 1302 	smull	r1, r3, r3, r2
 8000e64:	1099      	asrs	r1, r3, #2
 8000e66:	17d3      	asrs	r3, r2, #31
 8000e68:	1ac9      	subs	r1, r1, r3
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	440b      	add	r3, r1
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <MultiFunctionShield_Display+0x228>)
 8000e7c:	5c9a      	ldrb	r2, [r3, r2]
 8000e7e:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000e80:	705a      	strb	r2, [r3, #1]
 8000e82:	e002      	b.n	8000e8a <MultiFunctionShield_Display+0x1a6>
        SEGMENT_VALUE[1] = BLANK_OR_ZERO_FILL;
 8000e84:	22ff      	movs	r2, #255	; 0xff
 8000e86:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000e88:	705a      	strb	r2, [r3, #1]
      if (value > 9)
 8000e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e8e:	2b09      	cmp	r3, #9
 8000e90:	dd1b      	ble.n	8000eca <MultiFunctionShield_Display+0x1e6>
        SEGMENT_VALUE[2] = SEGMENT_MAP [(uint8_t) ((value / 10) % 10)];
 8000e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e96:	4a1f      	ldr	r2, [pc, #124]	; (8000f14 <MultiFunctionShield_Display+0x230>)
 8000e98:	fb82 1203 	smull	r1, r2, r2, r3
 8000e9c:	1092      	asrs	r2, r2, #2
 8000e9e:	17db      	asrs	r3, r3, #31
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	b21a      	sxth	r2, r3
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <MultiFunctionShield_Display+0x230>)
 8000ea6:	fb83 1302 	smull	r1, r3, r3, r2
 8000eaa:	1099      	asrs	r1, r3, #2
 8000eac:	17d3      	asrs	r3, r2, #31
 8000eae:	1ac9      	subs	r1, r1, r3
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MultiFunctionShield_Display+0x228>)
 8000ec2:	5c9a      	ldrb	r2, [r3, r2]
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000ec6:	709a      	strb	r2, [r3, #2]
 8000ec8:	e002      	b.n	8000ed0 <MultiFunctionShield_Display+0x1ec>
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;
 8000eca:	22ff      	movs	r2, #255	; 0xff
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000ece:	709a      	strb	r2, [r3, #2]
      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
 8000ed0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MultiFunctionShield_Display+0x230>)
 8000ed6:	fb83 1302 	smull	r1, r3, r3, r2
 8000eda:	1099      	asrs	r1, r3, #2
 8000edc:	17d3      	asrs	r3, r2, #31
 8000ede:	1ac9      	subs	r1, r1, r3
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MultiFunctionShield_Display+0x228>)
 8000ef2:	5c9a      	ldrb	r2, [r3, r2]
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <MultiFunctionShield_Display+0x220>)
 8000ef6:	70da      	strb	r2, [r3, #3]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	20000090 	.word	0x20000090
 8000f08:	10624dd3 	.word	0x10624dd3
 8000f0c:	08008ce0 	.word	0x08008ce0
 8000f10:	51eb851f 	.word	0x51eb851f
 8000f14:	66666667 	.word	0x66666667

08000f18 <Clear_LEDs>:
		SEGMENT_VALUE[1] = SEGMENT_MAP [1];
		}
	}

void Clear_LEDs(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	  // Clear the LED lights


// LAB-04 needs D1 and D3 for SPI
#ifndef          LAB_04
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2180      	movs	r1, #128	; 0x80
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f003 fdea 	bl	8004afc <HAL_GPIO_WritePin>
#endif

  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2140      	movs	r1, #64	; 0x40
 8000f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f30:	f003 fde4 	bl	8004afc <HAL_GPIO_WritePin>

#ifndef          LAB_06
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	2140      	movs	r1, #64	; 0x40
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <Clear_LEDs+0x38>)
 8000f3a:	f003 fddf 	bl	8004afc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2120      	movs	r1, #32
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f003 fdd9 	bl	8004afc <HAL_GPIO_WritePin>
#endif
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	48000400 	.word	0x48000400

08000f54 <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 8000f58:	22ff      	movs	r2, #255	; 0xff
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MultiFunctionShield_Clear+0x28>)
 8000f5c:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 8000f5e:	22ff      	movs	r2, #255	; 0xff
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MultiFunctionShield_Clear+0x28>)
 8000f62:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 8000f64:	22ff      	movs	r2, #255	; 0xff
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <MultiFunctionShield_Clear+0x28>)
 8000f68:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 8000f6a:	22ff      	movs	r2, #255	; 0xff
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <MultiFunctionShield_Clear+0x28>)
 8000f6e:	70da      	strb	r2, [r3, #3]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000090 	.word	0x20000090

08000f80 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	4816      	ldr	r0, [pc, #88]	; (8000fe8 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000f90:	f003 fdb4 	bl	8004afc <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000f94:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 8000f96:	4a15      	ldr	r2, [pc, #84]	; (8000fec <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 8000f98:	5cd3      	ldrb	r3, [r2, r3]
 8000f9a:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000faa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb2:	f7ff fe49 	bl	8000c48 <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 8000fba:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd2:	f7ff fe39 	bl	8000c48 <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2120      	movs	r1, #32
 8000fda:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000fdc:	f003 fd8e 	bl	8004afc <HAL_GPIO_WritePin>
	}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	48000400 	.word	0x48000400
 8000fec:	20000090 	.word	0x20000090
 8000ff0:	08008cec 	.word	0x08008cec

08000ff4 <MultiFunctionShield__ISRFunc>:
	}



void MultiFunctionShield__ISRFunc(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MultiFunctionShield__ISRFunc+0x60>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	3301      	adds	r3, #1
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MultiFunctionShield__ISRFunc+0x60>)
 8001004:	4611      	mov	r1, r2
 8001006:	7019      	strb	r1, [r3, #0]
 8001008:	4613      	mov	r3, r2
 800100a:	3b01      	subs	r3, #1
 800100c:	2b03      	cmp	r3, #3
 800100e:	d81e      	bhi.n	800104e <MultiFunctionShield__ISRFunc+0x5a>
 8001010:	a201      	add	r2, pc, #4	; (adr r2, 8001018 <MultiFunctionShield__ISRFunc+0x24>)
 8001012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001016:	bf00      	nop
 8001018:	08001029 	.word	0x08001029
 800101c:	08001031 	.word	0x08001031
 8001020:	08001039 	.word	0x08001039
 8001024:	08001041 	.word	0x08001041
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff ffa9 	bl	8000f80 <MultiFunctionShield_WriteNumberToSegment>
 800102e:	e00e      	b.n	800104e <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff ffa5 	bl	8000f80 <MultiFunctionShield_WriteNumberToSegment>
 8001036:	e00a      	b.n	800104e <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 8001038:	2002      	movs	r0, #2
 800103a:	f7ff ffa1 	bl	8000f80 <MultiFunctionShield_WriteNumberToSegment>
 800103e:	e006      	b.n	800104e <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8001040:	2003      	movs	r0, #3
 8001042:	f7ff ff9d 	bl	8000f80 <MultiFunctionShield_WriteNumberToSegment>
 8001046:	4b03      	ldr	r3, [pc, #12]	; (8001054 <MultiFunctionShield__ISRFunc+0x60>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	bf00      	nop
  }
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000008c 	.word	0x2000008c

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105c:	f001 f94a 	bl	80022f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001060:	f000 f864 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001064:	f000 faa8 	bl	80015b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001068:	f000 fa74 	bl	8001554 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800106c:	f000 fa42 	bl	80014f4 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8001070:	f000 f914 	bl	800129c <MX_DAC1_Init>
  MX_TIM2_Init();
 8001074:	f000 f944 	bl	8001300 <MX_TIM2_Init>
  MX_TIM17_Init();
 8001078:	f000 fa16 	bl	80014a8 <MX_TIM17_Init>
  MX_ADC3_Init();
 800107c:	f000 f8a8 	bl	80011d0 <MX_ADC3_Init>
  MX_TIM3_Init();
 8001080:	f000 f98c 	bl	800139c <MX_TIM3_Init>
  MX_TIM7_Init();
 8001084:	f000 f9d8 	bl	8001438 <MX_TIM7_Init>
  // SysTick->LOAD = 79000 - 1;
  // SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
  // HAL_ResumeTick();


  HAL_TIM_Base_Start_IT(&htim2);
 8001088:	481c      	ldr	r0, [pc, #112]	; (80010fc <main+0xa4>)
 800108a:	f005 f9a1 	bl	80063d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); //Timer3 is the ADC Sample trigger
 800108e:	481c      	ldr	r0, [pc, #112]	; (8001100 <main+0xa8>)
 8001090:	f005 f99e 	bl	80063d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim7); //Timer7 is used to time the period
 8001094:	481b      	ldr	r0, [pc, #108]	; (8001104 <main+0xac>)
 8001096:	f005 f90b 	bl	80062b0 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,1);

  printf("\033\143"); printf("Welcome to ECEN-361 SineWave Generator\n\r");
 800109a:	481b      	ldr	r0, [pc, #108]	; (8001108 <main+0xb0>)
 800109c:	f006 fd98 	bl	8007bd0 <iprintf>
 80010a0:	481a      	ldr	r0, [pc, #104]	; (800110c <main+0xb4>)
 80010a2:	f006 fd95 	bl	8007bd0 <iprintf>

  // Start timer
  MultiFunctionShield_Clear();								// Clear the 7-seg display
 80010a6:	f7ff ff55 	bl	8000f54 <MultiFunctionShield_Clear>
  HAL_TIM_Base_Start_IT(&htim17);							// LED SevenSeg cycle thru them
 80010aa:	4819      	ldr	r0, [pc, #100]	; (8001110 <main+0xb8>)
 80010ac:	f005 f990 	bl	80063d0 <HAL_TIM_Base_Start_IT>
  Clear_LEDs();
 80010b0:	f7ff ff32 	bl	8000f18 <Clear_LEDs>
  MultiFunctionShield_Display(points_to_use_in_a_cycle);
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <main+0xbc>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fe12 	bl	8000ce4 <MultiFunctionShield_Display>

  /* Setup the DMA */

  if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)	{while(1);}
 80010c0:	4815      	ldr	r0, [pc, #84]	; (8001118 <main+0xc0>)
 80010c2:	f003 f93b 	bl	800433c <HAL_DMA_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d000      	beq.n	80010ce <main+0x76>
 80010cc:	e7fe      	b.n	80010cc <main+0x74>
  if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)		{while(1);}
 80010ce:	4813      	ldr	r0, [pc, #76]	; (800111c <main+0xc4>)
 80010d0:	f003 f934 	bl	800433c <HAL_DMA_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d000      	beq.n	80010dc <main+0x84>
 80010da:	e7fe      	b.n	80010da <main+0x82>
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)		{while(1);}
 80010dc:	4810      	ldr	r0, [pc, #64]	; (8001120 <main+0xc8>)
 80010de:	f003 f92d 	bl	800433c <HAL_DMA_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <main+0x92>
 80010e8:	e7fe      	b.n	80010e8 <main+0x90>


  Start_the_DAC_DMA();
 80010ea:	f000 fb57 	bl	800179c <Start_the_DAC_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*) adc_buffer, ADC_BUFFER_LENGTH);
 80010ee:	2208      	movs	r2, #8
 80010f0:	490c      	ldr	r1, [pc, #48]	; (8001124 <main+0xcc>)
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <main+0xd0>)
 80010f4:	f001 fca8 	bl	8002a48 <HAL_ADC_Start_DMA>
	   //            HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_10_pts, 10,DAC_ALIGN_12B_R);

   // HAL_DMA_Start_IT(&hdma_dac_ch1, (uint32_t) &sineLookupTable_100_pts, (uint32_t) &hdac1, sizeof(sineLookupTable_100_pts));
   //HAL_DMA_PollForTransfer(&hdma_memtomem_dma1_channel1, );

  while (1)
 80010f8:	e7fe      	b.n	80010f8 <main+0xa0>
 80010fa:	bf00      	nop
 80010fc:	200001ac 	.word	0x200001ac
 8001100:	200001f8 	.word	0x200001f8
 8001104:	20000244 	.word	0x20000244
 8001108:	08008cac 	.word	0x08008cac
 800110c:	08008cb0 	.word	0x08008cb0
 8001110:	20000290 	.word	0x20000290
 8001114:	20000004 	.word	0x20000004
 8001118:	20000164 	.word	0x20000164
 800111c:	20000108 	.word	0x20000108
 8001120:	20000364 	.word	0x20000364
 8001124:	200003ac 	.word	0x200003ac
 8001128:	200000a4 	.word	0x200000a4

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b096      	sub	sp, #88	; 0x58
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	2244      	movs	r2, #68	; 0x44
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f006 fdd1 	bl	8007ce2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800114e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001152:	f003 fd11 	bl	8004b78 <HAL_PWREx_ControlVoltageScaling>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800115c:	f000 fca8 	bl	8001ab0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001160:	2302      	movs	r3, #2
 8001162:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001168:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116a:	2310      	movs	r3, #16
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116e:	2302      	movs	r3, #2
 8001170:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001172:	2302      	movs	r3, #2
 8001174:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001176:	2301      	movs	r3, #1
 8001178:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800117a:	230a      	movs	r3, #10
 800117c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800117e:	2307      	movs	r3, #7
 8001180:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001182:	2302      	movs	r3, #2
 8001184:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001186:	2302      	movs	r3, #2
 8001188:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4618      	mov	r0, r3
 8001190:	f003 fd48 	bl	8004c24 <HAL_RCC_OscConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800119a:	f000 fc89 	bl	8001ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119e:	230f      	movs	r3, #15
 80011a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a2:	2303      	movs	r3, #3
 80011a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	2104      	movs	r1, #4
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 f910 	bl	80053dc <HAL_RCC_ClockConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011c2:	f000 fc75 	bl	8001ab0 <Error_Handler>
  }
}
 80011c6:	bf00      	nop
 80011c8:	3758      	adds	r7, #88	; 0x58
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011d6:	463b      	mov	r3, r7
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
 80011e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80011e6:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <MX_ADC3_Init+0xc0>)
 80011e8:	4a2a      	ldr	r2, [pc, #168]	; (8001294 <MX_ADC3_Init+0xc4>)
 80011ea:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <MX_ADC3_Init+0xc0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011f2:	4b27      	ldr	r3, [pc, #156]	; (8001290 <MX_ADC3_Init+0xc0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <MX_ADC3_Init+0xc0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011fe:	4b24      	ldr	r3, [pc, #144]	; (8001290 <MX_ADC3_Init+0xc0>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001204:	4b22      	ldr	r3, [pc, #136]	; (8001290 <MX_ADC3_Init+0xc0>)
 8001206:	2204      	movs	r2, #4
 8001208:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800120a:	4b21      	ldr	r3, [pc, #132]	; (8001290 <MX_ADC3_Init+0xc0>)
 800120c:	2200      	movs	r2, #0
 800120e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001210:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <MX_ADC3_Init+0xc0>)
 8001212:	2201      	movs	r2, #1
 8001214:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001216:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <MX_ADC3_Init+0xc0>)
 8001218:	2201      	movs	r2, #1
 800121a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800121c:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <MX_ADC3_Init+0xc0>)
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_ADC3_Init+0xc0>)
 8001226:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <MX_ADC3_Init+0xc0>)
 800122e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <MX_ADC3_Init+0xc0>)
 8001236:	2201      	movs	r2, #1
 8001238:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_ADC3_Init+0xc0>)
 800123e:	2200      	movs	r2, #0
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <MX_ADC3_Init+0xc0>)
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800124a:	4811      	ldr	r0, [pc, #68]	; (8001290 <MX_ADC3_Init+0xc0>)
 800124c:	f001 faac 	bl	80027a8 <HAL_ADC_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8001256:	f000 fc2b 	bl	8001ab0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_ADC3_Init+0xc8>)
 800125c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800125e:	2306      	movs	r3, #6
 8001260:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001266:	237f      	movs	r3, #127	; 0x7f
 8001268:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800126a:	2304      	movs	r3, #4
 800126c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001272:	463b      	mov	r3, r7
 8001274:	4619      	mov	r1, r3
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <MX_ADC3_Init+0xc0>)
 8001278:	f001 feda 	bl	8003030 <HAL_ADC_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8001282:	f000 fc15 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200000a4 	.word	0x200000a4
 8001294:	50040200 	.word	0x50040200
 8001298:	10c00010 	.word	0x10c00010

0800129c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	2224      	movs	r2, #36	; 0x24
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f006 fd1a 	bl	8007ce2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <MX_DAC1_Init+0x5c>)
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <MX_DAC1_Init+0x60>)
 80012b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012b4:	4810      	ldr	r0, [pc, #64]	; (80012f8 <MX_DAC1_Init+0x5c>)
 80012b6:	f002 fcdb 	bl	8003c70 <HAL_DAC_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012c0:	f000 fbf6 	bl	8001ab0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80012c8:	2324      	movs	r3, #36	; 0x24
 80012ca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2200      	movs	r2, #0
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <MX_DAC1_Init+0x5c>)
 80012e0:	f002 fe71 	bl	8003fc6 <HAL_DAC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80012ea:	f000 fbe1 	bl	8001ab0 <Error_Handler>
  /* USER CODE BEGIN DAC1_Init 2 */
  // sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;

  /* USER CODE END DAC1_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3728      	adds	r7, #40	; 0x28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000150 	.word	0x20000150
 80012fc:	40007400 	.word	0x40007400

08001300 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800131e:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <MX_TIM2_Init+0x98>)
 8001320:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001324:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <MX_TIM2_Init+0x98>)
 8001328:	224f      	movs	r2, #79	; 0x4f
 800132a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MX_TIM2_Init+0x98>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <MX_TIM2_Init+0x98>)
 8001334:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001338:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_TIM2_Init+0x98>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <MX_TIM2_Init+0x98>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001346:	4814      	ldr	r0, [pc, #80]	; (8001398 <MX_TIM2_Init+0x98>)
 8001348:	f004 ff5a 	bl	8006200 <HAL_TIM_Base_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001352:	f000 fbad 	bl	8001ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	4619      	mov	r1, r3
 8001362:	480d      	ldr	r0, [pc, #52]	; (8001398 <MX_TIM2_Init+0x98>)
 8001364:	f005 f9a6 	bl	80066b4 <HAL_TIM_ConfigClockSource>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800136e:	f000 fb9f 	bl	8001ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001372:	2320      	movs	r3, #32
 8001374:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	4619      	mov	r1, r3
 800137e:	4806      	ldr	r0, [pc, #24]	; (8001398 <MX_TIM2_Init+0x98>)
 8001380:	f005 fbbe 	bl	8006b00 <HAL_TIMEx_MasterConfigSynchronization>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800138a:	f000 fb91 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	3720      	adds	r7, #32
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200001ac 	.word	0x200001ac

0800139c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a2:	f107 0310 	add.w	r3, r7, #16
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <MX_TIM3_Init+0x94>)
 80013bc:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <MX_TIM3_Init+0x98>)
 80013be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <MX_TIM3_Init+0x94>)
 80013c2:	224f      	movs	r2, #79	; 0x4f
 80013c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <MX_TIM3_Init+0x94>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 80013cc:	4b18      	ldr	r3, [pc, #96]	; (8001430 <MX_TIM3_Init+0x94>)
 80013ce:	220a      	movs	r2, #10
 80013d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <MX_TIM3_Init+0x94>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <MX_TIM3_Init+0x94>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013de:	4814      	ldr	r0, [pc, #80]	; (8001430 <MX_TIM3_Init+0x94>)
 80013e0:	f004 ff0e 	bl	8006200 <HAL_TIM_Base_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80013ea:	f000 fb61 	bl	8001ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	4619      	mov	r1, r3
 80013fa:	480d      	ldr	r0, [pc, #52]	; (8001430 <MX_TIM3_Init+0x94>)
 80013fc:	f005 f95a 	bl	80066b4 <HAL_TIM_ConfigClockSource>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001406:	f000 fb53 	bl	8001ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800140a:	2320      	movs	r3, #32
 800140c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	4619      	mov	r1, r3
 8001416:	4806      	ldr	r0, [pc, #24]	; (8001430 <MX_TIM3_Init+0x94>)
 8001418:	f005 fb72 	bl	8006b00 <HAL_TIMEx_MasterConfigSynchronization>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001422:	f000 fb45 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	3720      	adds	r7, #32
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200001f8 	.word	0x200001f8
 8001434:	40000400 	.word	0x40000400

08001438 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <MX_TIM7_Init+0x68>)
 800144a:	4a16      	ldr	r2, [pc, #88]	; (80014a4 <MX_TIM7_Init+0x6c>)
 800144c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 40000-1;
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_TIM7_Init+0x68>)
 8001450:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001454:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <MX_TIM7_Init+0x68>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000;
 800145c:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <MX_TIM7_Init+0x68>)
 800145e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001462:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_TIM7_Init+0x68>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800146a:	480d      	ldr	r0, [pc, #52]	; (80014a0 <MX_TIM7_Init+0x68>)
 800146c:	f004 fec8 	bl	8006200 <HAL_TIM_Base_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001476:	f000 fb1b 	bl	8001ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4619      	mov	r1, r3
 8001486:	4806      	ldr	r0, [pc, #24]	; (80014a0 <MX_TIM7_Init+0x68>)
 8001488:	f005 fb3a 	bl	8006b00 <HAL_TIMEx_MasterConfigSynchronization>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001492:	f000 fb0d 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000244 	.word	0x20000244
 80014a4:	40001400 	.word	0x40001400

080014a8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_TIM17_Init+0x44>)
 80014ae:	4a10      	ldr	r2, [pc, #64]	; (80014f0 <MX_TIM17_Init+0x48>)
 80014b0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_TIM17_Init+0x44>)
 80014b4:	f240 321f 	movw	r2, #799	; 0x31f
 80014b8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_TIM17_Init+0x44>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <MX_TIM17_Init+0x44>)
 80014c2:	2264      	movs	r2, #100	; 0x64
 80014c4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_TIM17_Init+0x44>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <MX_TIM17_Init+0x44>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_TIM17_Init+0x44>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80014d8:	4804      	ldr	r0, [pc, #16]	; (80014ec <MX_TIM17_Init+0x44>)
 80014da:	f004 fe91 	bl	8006200 <HAL_TIM_Base_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80014e4:	f000 fae4 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000290 	.word	0x20000290
 80014f0:	40014800 	.word	0x40014800

080014f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <MX_USART2_UART_Init+0x58>)
 80014fa:	4a15      	ldr	r2, [pc, #84]	; (8001550 <MX_USART2_UART_Init+0x5c>)
 80014fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <MX_USART2_UART_Init+0x58>)
 8001500:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001504:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_USART2_UART_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_USART2_UART_Init+0x58>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_USART2_UART_Init+0x58>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_USART2_UART_Init+0x58>)
 800151a:	220c      	movs	r2, #12
 800151c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MX_USART2_UART_Init+0x58>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_USART2_UART_Init+0x58>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <MX_USART2_UART_Init+0x58>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_USART2_UART_Init+0x58>)
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_USART2_UART_Init+0x58>)
 8001538:	f005 fb88 	bl	8006c4c <HAL_UART_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001542:	f000 fab5 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200002dc 	.word	0x200002dc
 8001550:	40004400 	.word	0x40004400

08001554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <MX_DMA_Init+0x60>)
 800155c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155e:	4a15      	ldr	r2, [pc, #84]	; (80015b4 <MX_DMA_Init+0x60>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6493      	str	r3, [r2, #72]	; 0x48
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_DMA_Init+0x60>)
 8001568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <MX_DMA_Init+0x60>)
 8001574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001576:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <MX_DMA_Init+0x60>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6493      	str	r3, [r2, #72]	; 0x48
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <MX_DMA_Init+0x60>)
 8001580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2105      	movs	r1, #5
 800158e:	200d      	movs	r0, #13
 8001590:	f002 fb44 	bl	8003c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001594:	200d      	movs	r0, #13
 8001596:	f002 fb5d 	bl	8003c54 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	203c      	movs	r0, #60	; 0x3c
 80015a0:	f002 fb3c 	bl	8003c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80015a4:	203c      	movs	r0, #60	; 0x3c
 80015a6:	f002 fb55 	bl	8003c54 <HAL_NVIC_EnableIRQ>

}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000

080015b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
 80015cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	4b62      	ldr	r3, [pc, #392]	; (8001758 <MX_GPIO_Init+0x1a0>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	4a61      	ldr	r2, [pc, #388]	; (8001758 <MX_GPIO_Init+0x1a0>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015da:	4b5f      	ldr	r3, [pc, #380]	; (8001758 <MX_GPIO_Init+0x1a0>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e6:	4b5c      	ldr	r3, [pc, #368]	; (8001758 <MX_GPIO_Init+0x1a0>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	4a5b      	ldr	r2, [pc, #364]	; (8001758 <MX_GPIO_Init+0x1a0>)
 80015ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f2:	4b59      	ldr	r3, [pc, #356]	; (8001758 <MX_GPIO_Init+0x1a0>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	4b56      	ldr	r3, [pc, #344]	; (8001758 <MX_GPIO_Init+0x1a0>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	4a55      	ldr	r2, [pc, #340]	; (8001758 <MX_GPIO_Init+0x1a0>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160a:	4b53      	ldr	r3, [pc, #332]	; (8001758 <MX_GPIO_Init+0x1a0>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	4b50      	ldr	r3, [pc, #320]	; (8001758 <MX_GPIO_Init+0x1a0>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	4a4f      	ldr	r2, [pc, #316]	; (8001758 <MX_GPIO_Init+0x1a0>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001622:	4b4d      	ldr	r3, [pc, #308]	; (8001758 <MX_GPIO_Init+0x1a0>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8001634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001638:	f003 fa60 	bl	8004afc <HAL_GPIO_WritePin>
                          |SevenSeg_DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Period_Start_GPIO_Port, Period_Start_Pin, GPIO_PIN_RESET);
 800163c:	2200      	movs	r2, #0
 800163e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001642:	4846      	ldr	r0, [pc, #280]	; (800175c <MX_GPIO_Init+0x1a4>)
 8001644:	f003 fa5a 	bl	8004afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SevenSeg_LATCH_Pin|LED_D4_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	2160      	movs	r1, #96	; 0x60
 800164c:	4844      	ldr	r0, [pc, #272]	; (8001760 <MX_GPIO_Init+0x1a8>)
 800164e:	f003 fa55 	bl	8004afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001658:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800165c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	483c      	ldr	r0, [pc, #240]	; (800175c <MX_GPIO_Init+0x1a4>)
 800166a:	f003 f89d 	bl	80047a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_1_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin;
 800166e:	2302      	movs	r3, #2
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001672:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_1_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001686:	f003 f88f 	bl	80047a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin LED_D2_Pin LED_D3_Pin SevenSeg_CLK_Pin
                           SevenSeg_DATA_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 800168a:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800168e:	617b      	str	r3, [r7, #20]
                          |SevenSeg_DATA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	2301      	movs	r3, #1
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a6:	f003 f87f 	bl	80047a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 80016aa:	2301      	movs	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	4828      	ldr	r0, [pc, #160]	; (8001760 <MX_GPIO_Init+0x1a8>)
 80016c0:	f003 f872 	bl	80047a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80016d6:	2303      	movs	r3, #3
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	481e      	ldr	r0, [pc, #120]	; (800175c <MX_GPIO_Init+0x1a4>)
 80016e2:	f003 f861 	bl	80047a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Period_Start_Pin */
  GPIO_InitStruct.Pin = Period_Start_Pin;
 80016e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Period_Start_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	4817      	ldr	r0, [pc, #92]	; (800175c <MX_GPIO_Init+0x1a4>)
 8001700:	f003 f852 	bl	80047a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_LATCH_Pin LED_D4_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin|LED_D4_Pin;
 8001704:	2360      	movs	r3, #96	; 0x60
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	4811      	ldr	r0, [pc, #68]	; (8001760 <MX_GPIO_Init+0x1a8>)
 800171c:	f003 f844 	bl	80047a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	2006      	movs	r0, #6
 8001726:	f002 fa79 	bl	8003c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800172a:	2006      	movs	r0, #6
 800172c:	f002 fa92 	bl	8003c54 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	2100      	movs	r1, #0
 8001734:	2007      	movs	r0, #7
 8001736:	f002 fa71 	bl	8003c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800173a:	2007      	movs	r0, #7
 800173c:	f002 fa8a 	bl	8003c54 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	2028      	movs	r0, #40	; 0x28
 8001746:	f002 fa69 	bl	8003c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800174a:	2028      	movs	r0, #40	; 0x28
 800174c:	f002 fa82 	bl	8003c54 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	; 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40021000 	.word	0x40021000
 800175c:	48000800 	.word	0x48000800
 8001760:	48000400 	.word	0x48000400

08001764 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800176c:	1d39      	adds	r1, r7, #4
 800176e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001772:	2201      	movs	r2, #1
 8001774:	4803      	ldr	r0, [pc, #12]	; (8001784 <__io_putchar+0x20>)
 8001776:	f005 fab7 	bl	8006ce8 <HAL_UART_Transmit>

  return ch;
 800177a:	687b      	ldr	r3, [r7, #4]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200002dc 	.word	0x200002dc

08001788 <HAL_DAC_ConvCpltCallbackCh1>:



void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	/* Fill this in when I know what to do if I get here */
// printf("              FINISHED DAC OUT\n\n");
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <Start_the_DAC_DMA>:
		}
	}


void Start_the_DAC_DMA(void)
	{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af02      	add	r7, sp, #8
	 //First stop it, just to be clean (if running)
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80017a2:	2100      	movs	r1, #0
 80017a4:	4817      	ldr	r0, [pc, #92]	; (8001804 <Start_the_DAC_DMA+0x68>)
 80017a6:	f002 fb51 	bl	8003e4c <HAL_DAC_Stop_DMA>
	// Just use the global

	switch(points_to_use_in_a_cycle)
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <Start_the_DAC_DMA+0x6c>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017b2:	d019      	beq.n	80017e8 <Start_the_DAC_DMA+0x4c>
 80017b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017b8:	dc20      	bgt.n	80017fc <Start_the_DAC_DMA+0x60>
 80017ba:	2b0a      	cmp	r3, #10
 80017bc:	d002      	beq.n	80017c4 <Start_the_DAC_DMA+0x28>
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d009      	beq.n	80017d6 <Start_the_DAC_DMA+0x3a>
			break;
		case thousand:
		   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_1000_pts, 1000,DAC_ALIGN_12B_R);
			break;
		}
	}
 80017c2:	e01b      	b.n	80017fc <Start_the_DAC_DMA+0x60>
		   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_10_pts, 10,DAC_ALIGN_12B_R);
 80017c4:	2300      	movs	r3, #0
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	230a      	movs	r3, #10
 80017ca:	4a10      	ldr	r2, [pc, #64]	; (800180c <Start_the_DAC_DMA+0x70>)
 80017cc:	2100      	movs	r1, #0
 80017ce:	480d      	ldr	r0, [pc, #52]	; (8001804 <Start_the_DAC_DMA+0x68>)
 80017d0:	f002 fa70 	bl	8003cb4 <HAL_DAC_Start_DMA>
			break;
 80017d4:	e012      	b.n	80017fc <Start_the_DAC_DMA+0x60>
		   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_100_pts, 100,DAC_ALIGN_12B_R);
 80017d6:	2300      	movs	r3, #0
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2364      	movs	r3, #100	; 0x64
 80017dc:	4a0c      	ldr	r2, [pc, #48]	; (8001810 <Start_the_DAC_DMA+0x74>)
 80017de:	2100      	movs	r1, #0
 80017e0:	4808      	ldr	r0, [pc, #32]	; (8001804 <Start_the_DAC_DMA+0x68>)
 80017e2:	f002 fa67 	bl	8003cb4 <HAL_DAC_Start_DMA>
			break;
 80017e6:	e009      	b.n	80017fc <Start_the_DAC_DMA+0x60>
		   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_1000_pts, 1000,DAC_ALIGN_12B_R);
 80017e8:	2300      	movs	r3, #0
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f0:	4a08      	ldr	r2, [pc, #32]	; (8001814 <Start_the_DAC_DMA+0x78>)
 80017f2:	2100      	movs	r1, #0
 80017f4:	4803      	ldr	r0, [pc, #12]	; (8001804 <Start_the_DAC_DMA+0x68>)
 80017f6:	f002 fa5d 	bl	8003cb4 <HAL_DAC_Start_DMA>
			break;
 80017fa:	bf00      	nop
	}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000150 	.word	0x20000150
 8001808:	20000004 	.word	0x20000004
 800180c:	08008cf0 	.word	0x08008cf0
 8001810:	08008d04 	.word	0x08008d04
 8001814:	08008dcc 	.word	0x08008dcc

08001818 <change_points_per_cycle>:




void change_points_per_cycle()
	{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	 *  2.) Change the DMA Call to point to the address of that set
	 *      and the new number of points
	 *
	 *  3.) Re-display the new set on the 7-Seg.  It'll show '10', or '100', or '1000'
	 */
	switch(points_to_use_in_a_cycle)
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <change_points_per_cycle+0x4c>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001824:	d010      	beq.n	8001848 <change_points_per_cycle+0x30>
 8001826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800182a:	dc11      	bgt.n	8001850 <change_points_per_cycle+0x38>
 800182c:	2b0a      	cmp	r3, #10
 800182e:	d002      	beq.n	8001836 <change_points_per_cycle+0x1e>
 8001830:	2b64      	cmp	r3, #100	; 0x64
 8001832:	d004      	beq.n	800183e <change_points_per_cycle+0x26>
 8001834:	e00c      	b.n	8001850 <change_points_per_cycle+0x38>
		{
		case ten:
			points_to_use_in_a_cycle = hundred;
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <change_points_per_cycle+0x4c>)
 8001838:	2264      	movs	r2, #100	; 0x64
 800183a:	801a      	strh	r2, [r3, #0]
			break;
 800183c:	e008      	b.n	8001850 <change_points_per_cycle+0x38>
		case hundred:
			points_to_use_in_a_cycle = thousand;
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <change_points_per_cycle+0x4c>)
 8001840:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001844:	801a      	strh	r2, [r3, #0]
			break;
 8001846:	e003      	b.n	8001850 <change_points_per_cycle+0x38>
		case thousand:
			points_to_use_in_a_cycle = ten;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <change_points_per_cycle+0x4c>)
 800184a:	220a      	movs	r2, #10
 800184c:	801a      	strh	r2, [r3, #0]
			break;
 800184e:	bf00      	nop
		}
		Start_the_DAC_DMA();
 8001850:	f7ff ffa4 	bl	800179c <Start_the_DAC_DMA>
		MultiFunctionShield_Display(points_to_use_in_a_cycle);
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <change_points_per_cycle+0x4c>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	b21b      	sxth	r3, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fa42 	bl	8000ce4 <MultiFunctionShield_Display>
	}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000004 	.word	0x20000004

08001868 <HAL_GPIO_EXTI_Callback>:
// Callback: timer has rolled over



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	80fb      	strh	r3, [r7, #6]
	// When the DAC is being used, Button_2 is unavailable.
	// The other two generate GPIO interrupts
	// Don't spend much time in the ISR because there are other interrupts happening
	switch(GPIO_Pin)
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d004      	beq.n	8001882 <HAL_GPIO_EXTI_Callback+0x1a>
 8001878:	2b02      	cmp	r3, #2
 800187a:	d109      	bne.n	8001890 <HAL_GPIO_EXTI_Callback+0x28>
	{
	case Button_1_Pin:
		change_points_per_cycle();
 800187c:	f7ff ffcc 	bl	8001818 <change_points_per_cycle>
		break;
 8001880:	e008      	b.n	8001894 <HAL_GPIO_EXTI_Callback+0x2c>
	case Button_3_Pin:
		// Button_3 changes the Frequency of the DAC, going thru different
		// speeds
	  MultiFunctionShield_Display(the_period);
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_GPIO_EXTI_Callback+0x34>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	b21b      	sxth	r3, r3
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fa2b 	bl	8000ce4 <MultiFunctionShield_Display>
		break;
 800188e:	e001      	b.n	8001894 <HAL_GPIO_EXTI_Callback+0x2c>
	default:
      __NOP();
 8001890:	bf00      	nop
	}
}
 8001892:	bf00      	nop
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200000a0 	.word	0x200000a0

080018a0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc3) {
 80018a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
   // Read the buffer and update the max
	// Get rid of this zero detect??  Just use time between dac starts



   for (int i=0; i<ADC_BUFFER_LENGTH;i++)
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	e017      	b.n	80018e0 <HAL_ADC_ConvCpltCallback+0x40>
	   { adc_highest_seen = (adc_highest_seen < adc_buffer[i])?adc_buffer[i]:adc_highest_seen;
 80018b0:	4a65      	ldr	r2, [pc, #404]	; (8001a48 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b64      	ldr	r3, [pc, #400]	; (8001a4c <HAL_ADC_ConvCpltCallback+0x1ac>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4293      	cmp	r3, r2
 80018c0:	bfb8      	it	lt
 80018c2:	4613      	movlt	r3, r2
 80018c4:	4a61      	ldr	r2, [pc, #388]	; (8001a4c <HAL_ADC_ConvCpltCallback+0x1ac>)
 80018c6:	6013      	str	r3, [r2, #0]
		snprintf((char *) adc_results_strings_buffer,100,"%d\n",adc_buffer[i]);
 80018c8:	4a5f      	ldr	r2, [pc, #380]	; (8001a48 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018d0:	4a5f      	ldr	r2, [pc, #380]	; (8001a50 <HAL_ADC_ConvCpltCallback+0x1b0>)
 80018d2:	2164      	movs	r1, #100	; 0x64
 80018d4:	485f      	ldr	r0, [pc, #380]	; (8001a54 <HAL_ADC_ConvCpltCallback+0x1b4>)
 80018d6:	f006 f98d 	bl	8007bf4 <sniprintf>
   for (int i=0; i<ADC_BUFFER_LENGTH;i++)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	3301      	adds	r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b07      	cmp	r3, #7
 80018e4:	dde4      	ble.n	80018b0 <HAL_ADC_ConvCpltCallback+0x10>
		// printf("%d\r\n\r",adc_buffer[i]);

	   }

   HAL_UART_Transmit_DMA((DMA_HandleTypeDef *) &hdma_usart2_tx,adc_results_strings_buffer,ADC_BUFFER_LENGTH);
 80018e6:	2208      	movs	r2, #8
 80018e8:	495a      	ldr	r1, [pc, #360]	; (8001a54 <HAL_ADC_ConvCpltCallback+0x1b4>)
 80018ea:	485b      	ldr	r0, [pc, #364]	; (8001a58 <HAL_ADC_ConvCpltCallback+0x1b8>)
 80018ec:	f005 fa86 	bl	8006dfc <HAL_UART_Transmit_DMA>
   /* Kick_off a timer to measure the elapsed time on the edge rising past 90%
    * Look in the buffer and see if [0] is less than 90% and the top element is greater than the 90%
    */
   hit_low = (((adc_buffer[0] < (0.1 * adc_highest_seen)) |  hit_low));
 80018f0:	4b55      	ldr	r3, [pc, #340]	; (8001a48 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe ff37 	bl	8000768 <__aeabi_i2d>
 80018fa:	4604      	mov	r4, r0
 80018fc:	460d      	mov	r5, r1
 80018fe:	4b53      	ldr	r3, [pc, #332]	; (8001a4c <HAL_ADC_ConvCpltCallback+0x1ac>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe ff30 	bl	8000768 <__aeabi_i2d>
 8001908:	a34b      	add	r3, pc, #300	; (adr r3, 8001a38 <HAL_ADC_ConvCpltCallback+0x198>)
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	f7fe fcaf 	bl	8000270 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	2101      	movs	r1, #1
 8001918:	460e      	mov	r6, r1
 800191a:	4620      	mov	r0, r4
 800191c:	4629      	mov	r1, r5
 800191e:	f7fe ffed 	bl	80008fc <__aeabi_dcmplt>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_ADC_ConvCpltCallback+0x8c>
 8001928:	2300      	movs	r3, #0
 800192a:	461e      	mov	r6, r3
 800192c:	b2f3      	uxtb	r3, r6
 800192e:	461a      	mov	r2, r3
 8001930:	4b4a      	ldr	r3, [pc, #296]	; (8001a5c <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4313      	orrs	r3, r2
 8001936:	4a49      	ldr	r2, [pc, #292]	; (8001a5c <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001938:	6013      	str	r3, [r2, #0]
   if (hit_low & ((adc_buffer[0] < (0.9 * adc_highest_seen)) & (adc_buffer[ADC_BUFFER_LENGTH -1]>=(.9 * adc_highest_seen))))
 800193a:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <HAL_ADC_ConvCpltCallback+0x1a8>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe ff12 	bl	8000768 <__aeabi_i2d>
 8001944:	4604      	mov	r4, r0
 8001946:	460d      	mov	r5, r1
 8001948:	4b40      	ldr	r3, [pc, #256]	; (8001a4c <HAL_ADC_ConvCpltCallback+0x1ac>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe ff0b 	bl	8000768 <__aeabi_i2d>
 8001952:	a33b      	add	r3, pc, #236	; (adr r3, 8001a40 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7fe fc8a 	bl	8000270 <__aeabi_dmul>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	2101      	movs	r1, #1
 8001962:	460e      	mov	r6, r1
 8001964:	4620      	mov	r0, r4
 8001966:	4629      	mov	r1, r5
 8001968:	f7fe ffc8 	bl	80008fc <__aeabi_dcmplt>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_ADC_ConvCpltCallback+0xd6>
 8001972:	2300      	movs	r3, #0
 8001974:	461e      	mov	r6, r3
 8001976:	b2f6      	uxtb	r6, r6
 8001978:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <HAL_ADC_ConvCpltCallback+0x1a8>)
 800197a:	89db      	ldrh	r3, [r3, #14]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fef3 	bl	8000768 <__aeabi_i2d>
 8001982:	4604      	mov	r4, r0
 8001984:	460d      	mov	r5, r1
 8001986:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <HAL_ADC_ConvCpltCallback+0x1ac>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe feec 	bl	8000768 <__aeabi_i2d>
 8001990:	a32b      	add	r3, pc, #172	; (adr r3, 8001a40 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	f7fe fc6b 	bl	8000270 <__aeabi_dmul>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	2101      	movs	r1, #1
 80019a0:	4688      	mov	r8, r1
 80019a2:	4620      	mov	r0, r4
 80019a4:	4629      	mov	r1, r5
 80019a6:	f7fe ffbd 	bl	8000924 <__aeabi_dcmpge>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_ADC_ConvCpltCallback+0x114>
 80019b0:	2300      	movs	r3, #0
 80019b2:	4698      	mov	r8, r3
 80019b4:	fa5f f388 	uxtb.w	r3, r8
 80019b8:	4033      	ands	r3, r6
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_ADC_ConvCpltCallback+0x1bc>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d02f      	beq.n	8001a28 <HAL_ADC_ConvCpltCallback+0x188>
		{
	    HAL_TIM_Base_Stop(&htim7); //Timer7 is used to time the period
 80019c8:	4825      	ldr	r0, [pc, #148]	; (8001a60 <HAL_ADC_ConvCpltCallback+0x1c0>)
 80019ca:	f004 fcd9 	bl	8006380 <HAL_TIM_Base_Stop>
		this_tick = TIM7->CNT;
 80019ce:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_ADC_ConvCpltCallback+0x1c4>)
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80019d6:	601a      	str	r2, [r3, #0]
		the_period = this_tick - last_tick;
 80019d8:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <HAL_ADC_ConvCpltCallback+0x1cc>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	4a23      	ldr	r2, [pc, #140]	; (8001a70 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80019e4:	6013      	str	r3, [r2, #0]
		MX_TIM7_Init();
 80019e6:	f7ff fd27 	bl	8001438 <MX_TIM7_Init>
		__HAL_TIM_SET_COUNTER(&htim7, 0);
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <HAL_ADC_ConvCpltCallback+0x1c0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2200      	movs	r2, #0
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24
		// just toggle a pin to use the LA to see how long in real measured time
		HAL_GPIO_WritePin(Period_Start_GPIO_Port, Period_Start_Pin, GPIO_PIN_SET);
 80019f2:	2201      	movs	r2, #1
 80019f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019f8:	481e      	ldr	r0, [pc, #120]	; (8001a74 <HAL_ADC_ConvCpltCallback+0x1d4>)
 80019fa:	f003 f87f 	bl	8004afc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Period_Start_GPIO_Port, Period_Start_Pin, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a04:	481b      	ldr	r0, [pc, #108]	; (8001a74 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8001a06:	f003 f879 	bl	8004afc <HAL_GPIO_WritePin>
	    last_tick=this_tick - uwTick;
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <HAL_ADC_ConvCpltCallback+0x1cc>)
 8001a1a:	601a      	str	r2, [r3, #0]
		hit_low = false;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
	    HAL_TIM_Base_Start(&htim7); //Timer7 is used to time the period
 8001a22:	480f      	ldr	r0, [pc, #60]	; (8001a60 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8001a24:	f004 fc44 	bl	80062b0 <HAL_TIM_Base_Start>
		}


}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a32:	bf00      	nop
 8001a34:	f3af 8000 	nop.w
 8001a38:	9999999a 	.word	0x9999999a
 8001a3c:	3fb99999 	.word	0x3fb99999
 8001a40:	cccccccd 	.word	0xcccccccd
 8001a44:	3feccccc 	.word	0x3feccccc
 8001a48:	200003ac 	.word	0x200003ac
 8001a4c:	20000094 	.word	0x20000094
 8001a50:	08008cdc 	.word	0x08008cdc
 8001a54:	200003bc 	.word	0x200003bc
 8001a58:	20000364 	.word	0x20000364
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	20000244 	.word	0x20000244
 8001a64:	40001400 	.word	0x40001400
 8001a68:	2000009c 	.word	0x2000009c
 8001a6c:	20000098 	.word	0x20000098
 8001a70:	200000a0 	.word	0x200000a0
 8001a74:	48000800 	.word	0x48000800
 8001a78:	20000414 	.word	0x20000414

08001a7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	 if (htim == &htim17 ) { MultiFunctionShield__ISRFunc(); }
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d101      	bne.n	8001a90 <HAL_TIM_PeriodElapsedCallback+0x14>
 8001a8c:	f7ff fab2 	bl	8000ff4 <MultiFunctionShield__ISRFunc>
		  	// int u = 1;
			// if (sindex >=SINE_WAVE_SAMPLES ) {sindex=0;}
			}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a05      	ldr	r2, [pc, #20]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d101      	bne.n	8001a9e <HAL_TIM_PeriodElapsedCallback+0x22>
    HAL_IncTick();
 8001a9a:	f000 fc4b 	bl	8002334 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000290 	.word	0x20000290
 8001aac:	40001000 	.word	0x40001000

08001ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab4:	b672      	cpsid	i
}
 8001ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <Error_Handler+0x8>
	...

08001abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <HAL_MspInit+0x44>)
 8001ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac6:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <HAL_MspInit+0x44>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6613      	str	r3, [r2, #96]	; 0x60
 8001ace:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <HAL_MspInit+0x44>)
 8001ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_MspInit+0x44>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <HAL_MspInit+0x44>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_MspInit+0x44>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000

08001b04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b0ac      	sub	sp, #176	; 0xb0
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2288      	movs	r2, #136	; 0x88
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f006 f8dc 	bl	8007ce2 <memset>
  if(hadc->Instance==ADC3)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a41      	ldr	r2, [pc, #260]	; (8001c34 <HAL_ADC_MspInit+0x130>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d17a      	bne.n	8001c2a <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b38:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001b42:	2302      	movs	r3, #2
 8001b44:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b46:	2301      	movs	r3, #1
 8001b48:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b4e:	2307      	movs	r3, #7
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b52:	2302      	movs	r3, #2
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b56:	2302      	movs	r3, #2
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 fe8f 	bl	8005888 <HAL_RCCEx_PeriphCLKConfig>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001b70:	f7ff ff9e 	bl	8001ab0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b74:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <HAL_ADC_MspInit+0x134>)
 8001b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b78:	4a2f      	ldr	r2, [pc, #188]	; (8001c38 <HAL_ADC_MspInit+0x134>)
 8001b7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b80:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <HAL_ADC_MspInit+0x134>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <HAL_ADC_MspInit+0x134>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b90:	4a29      	ldr	r2, [pc, #164]	; (8001c38 <HAL_ADC_MspInit+0x134>)
 8001b92:	f043 0304 	orr.w	r3, r3, #4
 8001b96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <HAL_ADC_MspInit+0x134>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC3     ------> ADC3_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001baa:	230b      	movs	r3, #11
 8001bac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bba:	4619      	mov	r1, r3
 8001bbc:	481f      	ldr	r0, [pc, #124]	; (8001c3c <HAL_ADC_MspInit+0x138>)
 8001bbe:	f002 fdf3 	bl	80047a8 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Channel5;
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <HAL_ADC_MspInit+0x13c>)
 8001bc4:	4a1f      	ldr	r2, [pc, #124]	; (8001c44 <HAL_ADC_MspInit+0x140>)
 8001bc6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_0;
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_ADC_MspInit+0x13c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <HAL_ADC_MspInit+0x13c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_ADC_MspInit+0x13c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001bda:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_ADC_MspInit+0x13c>)
 8001bdc:	2280      	movs	r2, #128	; 0x80
 8001bde:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <HAL_ADC_MspInit+0x13c>)
 8001be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001be8:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_ADC_MspInit+0x13c>)
 8001bea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bee:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <HAL_ADC_MspInit+0x13c>)
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_ADC_MspInit+0x13c>)
 8001bf8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001bfc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001bfe:	4810      	ldr	r0, [pc, #64]	; (8001c40 <HAL_ADC_MspInit+0x13c>)
 8001c00:	f002 fb9c 	bl	800433c <HAL_DMA_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8001c0a:	f7ff ff51 	bl	8001ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a0b      	ldr	r2, [pc, #44]	; (8001c40 <HAL_ADC_MspInit+0x13c>)
 8001c12:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c14:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <HAL_ADC_MspInit+0x13c>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	202f      	movs	r0, #47	; 0x2f
 8001c20:	f001 fffc 	bl	8003c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001c24:	202f      	movs	r0, #47	; 0x2f
 8001c26:	f002 f815 	bl	8003c54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c2a:	bf00      	nop
 8001c2c:	37b0      	adds	r7, #176	; 0xb0
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	50040200 	.word	0x50040200
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	48000800 	.word	0x48000800
 8001c40:	20000108 	.word	0x20000108
 8001c44:	40020458 	.word	0x40020458

08001c48 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a2f      	ldr	r2, [pc, #188]	; (8001d24 <HAL_DAC_MspInit+0xdc>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d158      	bne.n	8001d1c <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001c6a:	4b2f      	ldr	r3, [pc, #188]	; (8001d28 <HAL_DAC_MspInit+0xe0>)
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6e:	4a2e      	ldr	r2, [pc, #184]	; (8001d28 <HAL_DAC_MspInit+0xe0>)
 8001c70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c74:	6593      	str	r3, [r2, #88]	; 0x58
 8001c76:	4b2c      	ldr	r3, [pc, #176]	; (8001d28 <HAL_DAC_MspInit+0xe0>)
 8001c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	4b29      	ldr	r3, [pc, #164]	; (8001d28 <HAL_DAC_MspInit+0xe0>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	4a28      	ldr	r2, [pc, #160]	; (8001d28 <HAL_DAC_MspInit+0xe0>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8e:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <HAL_DAC_MspInit+0xe0>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c9a:	2310      	movs	r3, #16
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4619      	mov	r1, r3
 8001cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb0:	f002 fd7a 	bl	80047a8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <HAL_DAC_MspInit+0xe4>)
 8001cb6:	4a1e      	ldr	r2, [pc, #120]	; (8001d30 <HAL_DAC_MspInit+0xe8>)
 8001cb8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <HAL_DAC_MspInit+0xe4>)
 8001cbc:	2206      	movs	r2, #6
 8001cbe:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_DAC_MspInit+0xe4>)
 8001cc2:	2210      	movs	r2, #16
 8001cc4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_DAC_MspInit+0xe4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <HAL_DAC_MspInit+0xe4>)
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <HAL_DAC_MspInit+0xe4>)
 8001cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd8:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cda:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <HAL_DAC_MspInit+0xe4>)
 8001cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ce0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_DAC_MspInit+0xe4>)
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ce8:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <HAL_DAC_MspInit+0xe4>)
 8001cea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001cf0:	480e      	ldr	r0, [pc, #56]	; (8001d2c <HAL_DAC_MspInit+0xe4>)
 8001cf2:	f002 fb23 	bl	800433c <HAL_DMA_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001cfc:	f7ff fed8 	bl	8001ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <HAL_DAC_MspInit+0xe4>)
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <HAL_DAC_MspInit+0xe4>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	210f      	movs	r1, #15
 8001d10:	2036      	movs	r0, #54	; 0x36
 8001d12:	f001 ff83 	bl	8003c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d16:	2036      	movs	r0, #54	; 0x36
 8001d18:	f001 ff9c 	bl	8003c54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001d1c:	bf00      	nop
 8001d1e:	3728      	adds	r7, #40	; 0x28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40007400 	.word	0x40007400
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	20000164 	.word	0x20000164
 8001d30:	40020030 	.word	0x40020030

08001d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d44:	d114      	bne.n	8001d70 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d46:	4b2f      	ldr	r3, [pc, #188]	; (8001e04 <HAL_TIM_Base_MspInit+0xd0>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	4a2e      	ldr	r2, [pc, #184]	; (8001e04 <HAL_TIM_Base_MspInit+0xd0>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6593      	str	r3, [r2, #88]	; 0x58
 8001d52:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <HAL_TIM_Base_MspInit+0xd0>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	201c      	movs	r0, #28
 8001d64:	f001 ff5a 	bl	8003c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d68:	201c      	movs	r0, #28
 8001d6a:	f001 ff73 	bl	8003c54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001d6e:	e044      	b.n	8001dfa <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a24      	ldr	r2, [pc, #144]	; (8001e08 <HAL_TIM_Base_MspInit+0xd4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d114      	bne.n	8001da4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d7a:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <HAL_TIM_Base_MspInit+0xd0>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <HAL_TIM_Base_MspInit+0xd0>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	6593      	str	r3, [r2, #88]	; 0x58
 8001d86:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <HAL_TIM_Base_MspInit+0xd0>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2100      	movs	r1, #0
 8001d96:	201d      	movs	r0, #29
 8001d98:	f001 ff40 	bl	8003c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d9c:	201d      	movs	r0, #29
 8001d9e:	f001 ff59 	bl	8003c54 <HAL_NVIC_EnableIRQ>
}
 8001da2:	e02a      	b.n	8001dfa <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM7)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a18      	ldr	r2, [pc, #96]	; (8001e0c <HAL_TIM_Base_MspInit+0xd8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d10c      	bne.n	8001dc8 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_TIM_Base_MspInit+0xd0>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	4a14      	ldr	r2, [pc, #80]	; (8001e04 <HAL_TIM_Base_MspInit+0xd0>)
 8001db4:	f043 0320 	orr.w	r3, r3, #32
 8001db8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_TIM_Base_MspInit+0xd0>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	f003 0320 	and.w	r3, r3, #32
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
}
 8001dc6:	e018      	b.n	8001dfa <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM17)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a10      	ldr	r2, [pc, #64]	; (8001e10 <HAL_TIM_Base_MspInit+0xdc>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d113      	bne.n	8001dfa <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <HAL_TIM_Base_MspInit+0xd0>)
 8001dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd6:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <HAL_TIM_Base_MspInit+0xd0>)
 8001dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ddc:	6613      	str	r3, [r2, #96]	; 0x60
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_TIM_Base_MspInit+0xd0>)
 8001de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	201a      	movs	r0, #26
 8001df0:	f001 ff14 	bl	8003c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001df4:	201a      	movs	r0, #26
 8001df6:	f001 ff2d 	bl	8003c54 <HAL_NVIC_EnableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40000400 	.word	0x40000400
 8001e0c:	40001400 	.word	0x40001400
 8001e10:	40014800 	.word	0x40014800

08001e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b0ac      	sub	sp, #176	; 0xb0
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2288      	movs	r2, #136	; 0x88
 8001e32:	2100      	movs	r1, #0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f005 ff54 	bl	8007ce2 <memset>
  if(huart->Instance==USART2)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a36      	ldr	r2, [pc, #216]	; (8001f18 <HAL_UART_MspInit+0x104>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d164      	bne.n	8001f0e <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e44:	2302      	movs	r3, #2
 8001e46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 fd19 	bl	8005888 <HAL_RCCEx_PeriphCLKConfig>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e5c:	f7ff fe28 	bl	8001ab0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e60:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <HAL_UART_MspInit+0x108>)
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	4a2d      	ldr	r2, [pc, #180]	; (8001f1c <HAL_UART_MspInit+0x108>)
 8001e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e6c:	4b2b      	ldr	r3, [pc, #172]	; (8001f1c <HAL_UART_MspInit+0x108>)
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e78:	4b28      	ldr	r3, [pc, #160]	; (8001f1c <HAL_UART_MspInit+0x108>)
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7c:	4a27      	ldr	r2, [pc, #156]	; (8001f1c <HAL_UART_MspInit+0x108>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e84:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <HAL_UART_MspInit+0x108>)
 8001e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e90:	230c      	movs	r3, #12
 8001e92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ea8:	2307      	movs	r3, #7
 8001eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb8:	f002 fc76 	bl	80047a8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001ebc:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_UART_MspInit+0x10c>)
 8001ebe:	4a19      	ldr	r2, [pc, #100]	; (8001f24 <HAL_UART_MspInit+0x110>)
 8001ec0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001ec2:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <HAL_UART_MspInit+0x10c>)
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ec8:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <HAL_UART_MspInit+0x10c>)
 8001eca:	2210      	movs	r2, #16
 8001ecc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <HAL_UART_MspInit+0x10c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed4:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_UART_MspInit+0x10c>)
 8001ed6:	2280      	movs	r2, #128	; 0x80
 8001ed8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <HAL_UART_MspInit+0x10c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_UART_MspInit+0x10c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <HAL_UART_MspInit+0x10c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <HAL_UART_MspInit+0x10c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ef2:	480b      	ldr	r0, [pc, #44]	; (8001f20 <HAL_UART_MspInit+0x10c>)
 8001ef4:	f002 fa22 	bl	800433c <HAL_DMA_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8001efe:	f7ff fdd7 	bl	8001ab0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a06      	ldr	r2, [pc, #24]	; (8001f20 <HAL_UART_MspInit+0x10c>)
 8001f06:	671a      	str	r2, [r3, #112]	; 0x70
 8001f08:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <HAL_UART_MspInit+0x10c>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f0e:	bf00      	nop
 8001f10:	37b0      	adds	r7, #176	; 0xb0
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40004400 	.word	0x40004400
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	20000364 	.word	0x20000364
 8001f24:	40020080 	.word	0x40020080

08001f28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08e      	sub	sp, #56	; 0x38
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f36:	4b34      	ldr	r3, [pc, #208]	; (8002008 <HAL_InitTick+0xe0>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	4a33      	ldr	r2, [pc, #204]	; (8002008 <HAL_InitTick+0xe0>)
 8001f3c:	f043 0310 	orr.w	r3, r3, #16
 8001f40:	6593      	str	r3, [r2, #88]	; 0x58
 8001f42:	4b31      	ldr	r3, [pc, #196]	; (8002008 <HAL_InitTick+0xe0>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f4e:	f107 0210 	add.w	r2, r7, #16
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f003 fc03 	bl	8005764 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d103      	bne.n	8001f70 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f68:	f003 fbd0 	bl	800570c <HAL_RCC_GetPCLK1Freq>
 8001f6c:	6378      	str	r0, [r7, #52]	; 0x34
 8001f6e:	e004      	b.n	8001f7a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f70:	f003 fbcc 	bl	800570c <HAL_RCC_GetPCLK1Freq>
 8001f74:	4603      	mov	r3, r0
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7c:	4a23      	ldr	r2, [pc, #140]	; (800200c <HAL_InitTick+0xe4>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0c9b      	lsrs	r3, r3, #18
 8001f84:	3b01      	subs	r3, #1
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f88:	4b21      	ldr	r3, [pc, #132]	; (8002010 <HAL_InitTick+0xe8>)
 8001f8a:	4a22      	ldr	r2, [pc, #136]	; (8002014 <HAL_InitTick+0xec>)
 8001f8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <HAL_InitTick+0xe8>)
 8001f90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f94:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f96:	4a1e      	ldr	r2, [pc, #120]	; (8002010 <HAL_InitTick+0xe8>)
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f9c:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <HAL_InitTick+0xe8>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_InitTick+0xe8>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa8:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_InitTick+0xe8>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001fae:	4818      	ldr	r0, [pc, #96]	; (8002010 <HAL_InitTick+0xe8>)
 8001fb0:	f004 f926 	bl	8006200 <HAL_TIM_Base_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001fba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d11b      	bne.n	8001ffa <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001fc2:	4813      	ldr	r0, [pc, #76]	; (8002010 <HAL_InitTick+0xe8>)
 8001fc4:	f004 fa04 	bl	80063d0 <HAL_TIM_Base_Start_IT>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001fce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d111      	bne.n	8001ffa <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fd6:	2036      	movs	r0, #54	; 0x36
 8001fd8:	f001 fe3c 	bl	8003c54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b0f      	cmp	r3, #15
 8001fe0:	d808      	bhi.n	8001ff4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	2036      	movs	r0, #54	; 0x36
 8001fe8:	f001 fe18 	bl	8003c1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fec:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <HAL_InitTick+0xf0>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e002      	b.n	8001ffa <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ffa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3738      	adds	r7, #56	; 0x38
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	431bde83 	.word	0x431bde83
 8002010:	200003c4 	.word	0x200003c4
 8002014:	40001000 	.word	0x40001000
 8002018:	2000000c 	.word	0x2000000c

0800201c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <NMI_Handler+0x4>

08002022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002026:	e7fe      	b.n	8002026 <HardFault_Handler+0x4>

08002028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800202c:	e7fe      	b.n	800202c <MemManage_Handler+0x4>

0800202e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002032:	e7fe      	b.n	8002032 <BusFault_Handler+0x4>

08002034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002038:	e7fe      	b.n	8002038 <UsageFault_Handler+0x4>

0800203a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 8002076:	2001      	movs	r0, #1
 8002078:	f002 fd58 	bl	8004b2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}

08002080 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 8002084:	2002      	movs	r0, #2
 8002086:	f002 fd51 	bl	8004b2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <DMA1_Channel3_IRQHandler+0x10>)
 8002096:	f002 faa7 	bl	80045e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000164 	.word	0x20000164

080020a4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80020aa:	f004 fa01 	bl	80064b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000290 	.word	0x20000290

080020b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <TIM2_IRQHandler+0x10>)
 80020be:	f004 f9f7 	bl	80064b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200001ac 	.word	0x200001ac

080020cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <TIM3_IRQHandler+0x10>)
 80020d2:	f004 f9ed 	bl	80064b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200001f8 	.word	0x200001f8

080020e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80020e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020e8:	f002 fd20 	bl	8004b2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <ADC3_IRQHandler+0x10>)
 80020f6:	f000 fd63 	bl	8002bc0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200000a4 	.word	0x200000a4

08002104 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002108:	4803      	ldr	r0, [pc, #12]	; (8002118 <TIM6_DAC_IRQHandler+0x14>)
 800210a:	f004 f9d1 	bl	80064b0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800210e:	4803      	ldr	r0, [pc, #12]	; (800211c <TIM6_DAC_IRQHandler+0x18>)
 8002110:	f001 fee1 	bl	8003ed6 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	200003c4 	.word	0x200003c4
 800211c:	20000150 	.word	0x20000150

08002120 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <DMA2_Channel5_IRQHandler+0x10>)
 8002126:	f002 fa5f 	bl	80045e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000108 	.word	0x20000108

08002134 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	e00a      	b.n	800215c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002146:	f3af 8000 	nop.w
 800214a:	4601      	mov	r1, r0
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	60ba      	str	r2, [r7, #8]
 8002152:	b2ca      	uxtb	r2, r1
 8002154:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3301      	adds	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	429a      	cmp	r2, r3
 8002162:	dbf0      	blt.n	8002146 <_read+0x12>
  }

  return len;
 8002164:	687b      	ldr	r3, [r7, #4]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	e009      	b.n	8002194 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	60ba      	str	r2, [r7, #8]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff faeb 	bl	8001764 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3301      	adds	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	dbf1      	blt.n	8002180 <_write+0x12>
  }
  return len;
 800219c:	687b      	ldr	r3, [r7, #4]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_close>:

int _close(int file)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ce:	605a      	str	r2, [r3, #4]
  return 0;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <_isatty>:

int _isatty(int file)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021e6:	2301      	movs	r3, #1
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002218:	4a14      	ldr	r2, [pc, #80]	; (800226c <_sbrk+0x5c>)
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <_sbrk+0x60>)
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002224:	4b13      	ldr	r3, [pc, #76]	; (8002274 <_sbrk+0x64>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d102      	bne.n	8002232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <_sbrk+0x64>)
 800222e:	4a12      	ldr	r2, [pc, #72]	; (8002278 <_sbrk+0x68>)
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <_sbrk+0x64>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	429a      	cmp	r2, r3
 800223e:	d207      	bcs.n	8002250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002240:	f005 fd9e 	bl	8007d80 <__errno>
 8002244:	4603      	mov	r3, r0
 8002246:	220c      	movs	r2, #12
 8002248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800224a:	f04f 33ff 	mov.w	r3, #4294967295
 800224e:	e009      	b.n	8002264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <_sbrk+0x64>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002256:	4b07      	ldr	r3, [pc, #28]	; (8002274 <_sbrk+0x64>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <_sbrk+0x64>)
 8002260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002262:	68fb      	ldr	r3, [r7, #12]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20018000 	.word	0x20018000
 8002270:	00000400 	.word	0x00000400
 8002274:	20000410 	.word	0x20000410
 8002278:	20000568 	.word	0x20000568

0800227c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <SystemInit+0x20>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	4a05      	ldr	r2, [pc, #20]	; (800229c <SystemInit+0x20>)
 8002288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800228c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022a4:	f7ff ffea 	bl	800227c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022a8:	480c      	ldr	r0, [pc, #48]	; (80022dc <LoopForever+0x6>)
  ldr r1, =_edata
 80022aa:	490d      	ldr	r1, [pc, #52]	; (80022e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022ac:	4a0d      	ldr	r2, [pc, #52]	; (80022e4 <LoopForever+0xe>)
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b0:	e002      	b.n	80022b8 <LoopCopyDataInit>

080022b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b6:	3304      	adds	r3, #4

080022b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022bc:	d3f9      	bcc.n	80022b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022c0:	4c0a      	ldr	r4, [pc, #40]	; (80022ec <LoopForever+0x16>)
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c4:	e001      	b.n	80022ca <LoopFillZerobss>

080022c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c8:	3204      	adds	r2, #4

080022ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022cc:	d3fb      	bcc.n	80022c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ce:	f005 fd5d 	bl	8007d8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022d2:	f7fe fec1 	bl	8001058 <main>

080022d6 <LoopForever>:

LoopForever:
    b LoopForever
 80022d6:	e7fe      	b.n	80022d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80022e4:	08009628 	.word	0x08009628
  ldr r2, =_sbss
 80022e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80022ec:	20000564 	.word	0x20000564

080022f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022f0:	e7fe      	b.n	80022f0 <ADC1_2_IRQHandler>
	...

080022f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_Init+0x3c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <HAL_Init+0x3c>)
 8002304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002308:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800230a:	2003      	movs	r0, #3
 800230c:	f001 fc7b 	bl	8003c06 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002310:	200f      	movs	r0, #15
 8002312:	f7ff fe09 	bl	8001f28 <HAL_InitTick>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	71fb      	strb	r3, [r7, #7]
 8002320:	e001      	b.n	8002326 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002322:	f7ff fbcb 	bl	8001abc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002326:	79fb      	ldrb	r3, [r7, #7]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40022000 	.word	0x40022000

08002334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_IncTick+0x20>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_IncTick+0x24>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4413      	add	r3, r2
 8002344:	4a04      	ldr	r2, [pc, #16]	; (8002358 <HAL_IncTick+0x24>)
 8002346:	6013      	str	r3, [r2, #0]
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000010 	.word	0x20000010
 8002358:	20000414 	.word	0x20000414

0800235c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return uwTick;
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <HAL_GetTick+0x14>)
 8002362:	681b      	ldr	r3, [r3, #0]
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000414 	.word	0x20000414

08002374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800237c:	f7ff ffee 	bl	800235c <HAL_GetTick>
 8002380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d005      	beq.n	800239a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800238e:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_Delay+0x44>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4413      	add	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800239a:	bf00      	nop
 800239c:	f7ff ffde 	bl	800235c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d8f7      	bhi.n	800239c <HAL_Delay+0x28>
  {
  }
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000010 	.word	0x20000010

080023bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	609a      	str	r2, [r3, #8]
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	609a      	str	r2, [r3, #8]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	3360      	adds	r3, #96	; 0x60
 8002436:	461a      	mov	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <LL_ADC_SetOffset+0x44>)
 8002446:	4013      	ands	r3, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	4313      	orrs	r3, r2
 8002454:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800245c:	bf00      	nop
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	03fff000 	.word	0x03fff000

0800246c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3360      	adds	r3, #96	; 0x60
 800247a:	461a      	mov	r2, r3
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3360      	adds	r3, #96	; 0x60
 80024a8:	461a      	mov	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	431a      	orrs	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3330      	adds	r3, #48	; 0x30
 8002504:	461a      	mov	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	0a1b      	lsrs	r3, r3, #8
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	4413      	add	r3, r2
 8002512:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	211f      	movs	r1, #31
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	401a      	ands	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	0e9b      	lsrs	r3, r3, #26
 800252c:	f003 011f 	and.w	r1, r3, #31
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	431a      	orrs	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002540:	bf00      	nop
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002558:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002572:	b480      	push	{r7}
 8002574:	b087      	sub	sp, #28
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	3314      	adds	r3, #20
 8002582:	461a      	mov	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	0e5b      	lsrs	r3, r3, #25
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	4413      	add	r3, r2
 8002590:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	0d1b      	lsrs	r3, r3, #20
 800259a:	f003 031f 	and.w	r3, r3, #31
 800259e:	2107      	movs	r1, #7
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	401a      	ands	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	0d1b      	lsrs	r3, r3, #20
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	431a      	orrs	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025bc:	bf00      	nop
 80025be:	371c      	adds	r7, #28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e0:	43db      	mvns	r3, r3
 80025e2:	401a      	ands	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0318 	and.w	r3, r3, #24
 80025ea:	4908      	ldr	r1, [pc, #32]	; (800260c <LL_ADC_SetChannelSingleDiff+0x44>)
 80025ec:	40d9      	lsrs	r1, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	400b      	ands	r3, r1
 80025f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f6:	431a      	orrs	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	0007ffff 	.word	0x0007ffff

08002610 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 031f 	and.w	r3, r3, #31
}
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002658:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6093      	str	r3, [r2, #8]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800267c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002680:	d101      	bne.n	8002686 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026d0:	d101      	bne.n	80026d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026f8:	f043 0201 	orr.w	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <LL_ADC_IsEnabled+0x18>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <LL_ADC_IsEnabled+0x1a>
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002742:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002746:	f043 0204 	orr.w	r2, r3, #4
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b04      	cmp	r3, #4
 800276c:	d101      	bne.n	8002772 <LL_ADC_REG_IsConversionOngoing+0x18>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b08      	cmp	r3, #8
 8002792:	d101      	bne.n	8002798 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b089      	sub	sp, #36	; 0x24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e130      	b.n	8002a24 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d109      	bne.n	80027e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff f997 	bl	8001b04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff3f 	bl	800266c <LL_ADC_IsDeepPowerDownEnabled>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d004      	beq.n	80027fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff25 	bl	8002648 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ff5a 	bl	80026bc <LL_ADC_IsInternalRegulatorEnabled>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d115      	bne.n	800283a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff3e 	bl	8002694 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002818:	4b84      	ldr	r3, [pc, #528]	; (8002a2c <HAL_ADC_Init+0x284>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	099b      	lsrs	r3, r3, #6
 800281e:	4a84      	ldr	r2, [pc, #528]	; (8002a30 <HAL_ADC_Init+0x288>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	099b      	lsrs	r3, r3, #6
 8002826:	3301      	adds	r3, #1
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800282c:	e002      	b.n	8002834 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	3b01      	subs	r3, #1
 8002832:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f9      	bne.n	800282e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff ff3c 	bl	80026bc <LL_ADC_IsInternalRegulatorEnabled>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10d      	bne.n	8002866 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284e:	f043 0210 	orr.w	r2, r3, #16
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285a:	f043 0201 	orr.w	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff75 	bl	800275a <LL_ADC_REG_IsConversionOngoing>
 8002870:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	2b00      	cmp	r3, #0
 800287c:	f040 80c9 	bne.w	8002a12 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2b00      	cmp	r3, #0
 8002884:	f040 80c5 	bne.w	8002a12 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002890:	f043 0202 	orr.w	r2, r3, #2
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff35 	bl	800270c <LL_ADC_IsEnabled>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d115      	bne.n	80028d4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028a8:	4862      	ldr	r0, [pc, #392]	; (8002a34 <HAL_ADC_Init+0x28c>)
 80028aa:	f7ff ff2f 	bl	800270c <LL_ADC_IsEnabled>
 80028ae:	4604      	mov	r4, r0
 80028b0:	4861      	ldr	r0, [pc, #388]	; (8002a38 <HAL_ADC_Init+0x290>)
 80028b2:	f7ff ff2b 	bl	800270c <LL_ADC_IsEnabled>
 80028b6:	4603      	mov	r3, r0
 80028b8:	431c      	orrs	r4, r3
 80028ba:	4860      	ldr	r0, [pc, #384]	; (8002a3c <HAL_ADC_Init+0x294>)
 80028bc:	f7ff ff26 	bl	800270c <LL_ADC_IsEnabled>
 80028c0:	4603      	mov	r3, r0
 80028c2:	4323      	orrs	r3, r4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d105      	bne.n	80028d4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4619      	mov	r1, r3
 80028ce:	485c      	ldr	r0, [pc, #368]	; (8002a40 <HAL_ADC_Init+0x298>)
 80028d0:	f7ff fd74 	bl	80023bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	7e5b      	ldrb	r3, [r3, #25]
 80028d8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028de:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80028e4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80028ea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d106      	bne.n	8002910 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	3b01      	subs	r3, #1
 8002908:	045b      	lsls	r3, r3, #17
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	2b00      	cmp	r3, #0
 8002916:	d009      	beq.n	800292c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	4b44      	ldr	r3, [pc, #272]	; (8002a44 <HAL_ADC_Init+0x29c>)
 8002934:	4013      	ands	r3, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	69b9      	ldr	r1, [r7, #24]
 800293c:	430b      	orrs	r3, r1
 800293e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff1b 	bl	8002780 <LL_ADC_INJ_IsConversionOngoing>
 800294a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d13d      	bne.n	80029ce <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d13a      	bne.n	80029ce <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800295c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002964:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002974:	f023 0302 	bic.w	r3, r3, #2
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6812      	ldr	r2, [r2, #0]
 800297c:	69b9      	ldr	r1, [r7, #24]
 800297e:	430b      	orrs	r3, r1
 8002980:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002988:	2b01      	cmp	r3, #1
 800298a:	d118      	bne.n	80029be <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002996:	f023 0304 	bic.w	r3, r3, #4
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029a2:	4311      	orrs	r1, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029a8:	4311      	orrs	r1, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029ae:	430a      	orrs	r2, r1
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	611a      	str	r2, [r3, #16]
 80029bc:	e007      	b.n	80029ce <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0201 	bic.w	r2, r2, #1
 80029cc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d10c      	bne.n	80029f0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	f023 010f 	bic.w	r1, r3, #15
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	1e5a      	subs	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
 80029ee:	e007      	b.n	8002a00 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 020f 	bic.w	r2, r2, #15
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	f023 0303 	bic.w	r3, r3, #3
 8002a08:	f043 0201 	orr.w	r2, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	655a      	str	r2, [r3, #84]	; 0x54
 8002a10:	e007      	b.n	8002a22 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	f043 0210 	orr.w	r2, r3, #16
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a22:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3724      	adds	r7, #36	; 0x24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd90      	pop	{r4, r7, pc}
 8002a2c:	20000008 	.word	0x20000008
 8002a30:	053e2d63 	.word	0x053e2d63
 8002a34:	50040000 	.word	0x50040000
 8002a38:	50040100 	.word	0x50040100
 8002a3c:	50040200 	.word	0x50040200
 8002a40:	50040300 	.word	0x50040300
 8002a44:	fff0c007 	.word	0xfff0c007

08002a48 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a54:	4853      	ldr	r0, [pc, #332]	; (8002ba4 <HAL_ADC_Start_DMA+0x15c>)
 8002a56:	f7ff fddb 	bl	8002610 <LL_ADC_GetMultimode>
 8002a5a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fe7a 	bl	800275a <LL_ADC_REG_IsConversionOngoing>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f040 8093 	bne.w	8002b94 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_ADC_Start_DMA+0x34>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e08e      	b.n	8002b9a <HAL_ADC_Start_DMA+0x152>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a47      	ldr	r2, [pc, #284]	; (8002ba8 <HAL_ADC_Start_DMA+0x160>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d008      	beq.n	8002aa0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	2b05      	cmp	r3, #5
 8002a98:	d002      	beq.n	8002aa0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b09      	cmp	r3, #9
 8002a9e:	d172      	bne.n	8002b86 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 feb7 	bl	8003814 <ADC_Enable>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d165      	bne.n	8002b7c <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a38      	ldr	r2, [pc, #224]	; (8002bac <HAL_ADC_Start_DMA+0x164>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d002      	beq.n	8002ad4 <HAL_ADC_Start_DMA+0x8c>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	e000      	b.n	8002ad6 <HAL_ADC_Start_DMA+0x8e>
 8002ad4:	4b36      	ldr	r3, [pc, #216]	; (8002bb0 <HAL_ADC_Start_DMA+0x168>)
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d002      	beq.n	8002ae4 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d105      	bne.n	8002af0 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d006      	beq.n	8002b0a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b00:	f023 0206 	bic.w	r2, r3, #6
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	659a      	str	r2, [r3, #88]	; 0x58
 8002b08:	e002      	b.n	8002b10 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b14:	4a27      	ldr	r2, [pc, #156]	; (8002bb4 <HAL_ADC_Start_DMA+0x16c>)
 8002b16:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1c:	4a26      	ldr	r2, [pc, #152]	; (8002bb8 <HAL_ADC_Start_DMA+0x170>)
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b24:	4a25      	ldr	r2, [pc, #148]	; (8002bbc <HAL_ADC_Start_DMA+0x174>)
 8002b26:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	221c      	movs	r2, #28
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0210 	orr.w	r2, r2, #16
 8002b46:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3340      	adds	r3, #64	; 0x40
 8002b62:	4619      	mov	r1, r3
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f001 fca0 	bl	80044ac <HAL_DMA_Start_IT>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fddc 	bl	8002732 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002b7a:	e00d      	b.n	8002b98 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002b84:	e008      	b.n	8002b98 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002b92:	e001      	b.n	8002b98 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b94:	2302      	movs	r3, #2
 8002b96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	50040300 	.word	0x50040300
 8002ba8:	50040200 	.word	0x50040200
 8002bac:	50040100 	.word	0x50040100
 8002bb0:	50040000 	.word	0x50040000
 8002bb4:	08003921 	.word	0x08003921
 8002bb8:	080039f9 	.word	0x080039f9
 8002bbc:	08003a15 	.word	0x08003a15

08002bc0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	; 0x28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002bc8:	2300      	movs	r3, #0
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bdc:	4882      	ldr	r0, [pc, #520]	; (8002de8 <HAL_ADC_IRQHandler+0x228>)
 8002bde:	f7ff fd17 	bl	8002610 <LL_ADC_GetMultimode>
 8002be2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d017      	beq.n	8002c1e <HAL_ADC_IRQHandler+0x5e>
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d012      	beq.n	8002c1e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d105      	bne.n	8002c10 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c08:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 ff41 	bl	8003a98 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d004      	beq.n	8002c32 <HAL_ADC_IRQHandler+0x72>
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10a      	bne.n	8002c48 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8083 	beq.w	8002d44 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d07d      	beq.n	8002d44 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d105      	bne.n	8002c60 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff fc32 	bl	80024ce <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d062      	beq.n	8002d36 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a5d      	ldr	r2, [pc, #372]	; (8002dec <HAL_ADC_IRQHandler+0x22c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d002      	beq.n	8002c80 <HAL_ADC_IRQHandler+0xc0>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	e000      	b.n	8002c82 <HAL_ADC_IRQHandler+0xc2>
 8002c80:	4b5b      	ldr	r3, [pc, #364]	; (8002df0 <HAL_ADC_IRQHandler+0x230>)
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d008      	beq.n	8002c9c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2b05      	cmp	r3, #5
 8002c94:	d002      	beq.n	8002c9c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b09      	cmp	r3, #9
 8002c9a:	d104      	bne.n	8002ca6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	623b      	str	r3, [r7, #32]
 8002ca4:	e00c      	b.n	8002cc0 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a50      	ldr	r2, [pc, #320]	; (8002dec <HAL_ADC_IRQHandler+0x22c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d002      	beq.n	8002cb6 <HAL_ADC_IRQHandler+0xf6>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	e000      	b.n	8002cb8 <HAL_ADC_IRQHandler+0xf8>
 8002cb6:	4b4e      	ldr	r3, [pc, #312]	; (8002df0 <HAL_ADC_IRQHandler+0x230>)
 8002cb8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d135      	bne.n	8002d36 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d12e      	bne.n	8002d36 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fd3c 	bl	800275a <LL_ADC_REG_IsConversionOngoing>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d11a      	bne.n	8002d1e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 020c 	bic.w	r2, r2, #12
 8002cf6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d112      	bne.n	8002d36 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d14:	f043 0201 	orr.w	r2, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54
 8002d1c:	e00b      	b.n	8002d36 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d22:	f043 0210 	orr.w	r2, r3, #16
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe fdb2 	bl	80018a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	220c      	movs	r2, #12
 8002d42:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 0320 	and.w	r3, r3, #32
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d004      	beq.n	8002d58 <HAL_ADC_IRQHandler+0x198>
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10b      	bne.n	8002d70 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 809f 	beq.w	8002ea2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 8099 	beq.w	8002ea2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d105      	bne.n	8002d88 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fbdd 	bl	800254c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002d92:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fb98 	bl	80024ce <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d9e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a11      	ldr	r2, [pc, #68]	; (8002dec <HAL_ADC_IRQHandler+0x22c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d002      	beq.n	8002db0 <HAL_ADC_IRQHandler+0x1f0>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	e000      	b.n	8002db2 <HAL_ADC_IRQHandler+0x1f2>
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <HAL_ADC_IRQHandler+0x230>)
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d008      	beq.n	8002dcc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d002      	beq.n	8002dcc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b07      	cmp	r3, #7
 8002dca:	d104      	bne.n	8002dd6 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	623b      	str	r3, [r7, #32]
 8002dd4:	e013      	b.n	8002dfe <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a04      	ldr	r2, [pc, #16]	; (8002dec <HAL_ADC_IRQHandler+0x22c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d009      	beq.n	8002df4 <HAL_ADC_IRQHandler+0x234>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	e007      	b.n	8002df6 <HAL_ADC_IRQHandler+0x236>
 8002de6:	bf00      	nop
 8002de8:	50040300 	.word	0x50040300
 8002dec:	50040100 	.word	0x50040100
 8002df0:	50040000 	.word	0x50040000
 8002df4:	4b7d      	ldr	r3, [pc, #500]	; (8002fec <HAL_ADC_IRQHandler+0x42c>)
 8002df6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d047      	beq.n	8002e94 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d007      	beq.n	8002e1e <HAL_ADC_IRQHandler+0x25e>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d03f      	beq.n	8002e94 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d13a      	bne.n	8002e94 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d133      	bne.n	8002e94 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d12e      	bne.n	8002e94 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff fca0 	bl	8002780 <LL_ADC_INJ_IsConversionOngoing>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d11a      	bne.n	8002e7c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e54:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d112      	bne.n	8002e94 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	f043 0201 	orr.w	r2, r3, #1
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
 8002e7a:	e00b      	b.n	8002e94 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e80:	f043 0210 	orr.w	r2, r3, #16
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8c:	f043 0201 	orr.w	r2, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fdd7 	bl	8003a48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2260      	movs	r2, #96	; 0x60
 8002ea0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d011      	beq.n	8002ed0 <HAL_ADC_IRQHandler+0x310>
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00c      	beq.n	8002ed0 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f8a0 	bl	8003008 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2280      	movs	r2, #128	; 0x80
 8002ece:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d012      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x340>
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00d      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 fdbd 	bl	8003a70 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002efe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d012      	beq.n	8002f30 <HAL_ADC_IRQHandler+0x370>
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00d      	beq.n	8002f30 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 fdaf 	bl	8003a84 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f2e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d036      	beq.n	8002fa8 <HAL_ADC_IRQHandler+0x3e8>
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d031      	beq.n	8002fa8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d102      	bne.n	8002f52 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f50:	e014      	b.n	8002f7c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002f58:	4825      	ldr	r0, [pc, #148]	; (8002ff0 <HAL_ADC_IRQHandler+0x430>)
 8002f5a:	f7ff fb67 	bl	800262c <LL_ADC_GetMultiDMATransfer>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00b      	beq.n	8002f7c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002f64:	2301      	movs	r3, #1
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
 8002f68:	e008      	b.n	8002f7c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d10e      	bne.n	8002fa0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f86:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f92:	f043 0202 	orr.w	r2, r3, #2
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f83e 	bl	800301c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2210      	movs	r2, #16
 8002fa6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d018      	beq.n	8002fe4 <HAL_ADC_IRQHandler+0x424>
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d013      	beq.n	8002fe4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fcc:	f043 0208 	orr.w	r2, r3, #8
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fdc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fd3c 	bl	8003a5c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002fe4:	bf00      	nop
 8002fe6:	3728      	adds	r7, #40	; 0x28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	50040000 	.word	0x50040000
 8002ff0:	50040300 	.word	0x50040300

08002ff4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b0b6      	sub	sp, #216	; 0xd8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003040:	2300      	movs	r3, #0
 8003042:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x22>
 800304e:	2302      	movs	r3, #2
 8003050:	e3c9      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x7b6>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fb7b 	bl	800275a <LL_ADC_REG_IsConversionOngoing>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	f040 83aa 	bne.w	80037c0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b05      	cmp	r3, #5
 800307a:	d824      	bhi.n	80030c6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	3b02      	subs	r3, #2
 8003082:	2b03      	cmp	r3, #3
 8003084:	d81b      	bhi.n	80030be <HAL_ADC_ConfigChannel+0x8e>
 8003086:	a201      	add	r2, pc, #4	; (adr r2, 800308c <HAL_ADC_ConfigChannel+0x5c>)
 8003088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308c:	0800309d 	.word	0x0800309d
 8003090:	080030a5 	.word	0x080030a5
 8003094:	080030ad 	.word	0x080030ad
 8003098:	080030b5 	.word	0x080030b5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800309c:	230c      	movs	r3, #12
 800309e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80030a2:	e010      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80030a4:	2312      	movs	r3, #18
 80030a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80030aa:	e00c      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80030ac:	2318      	movs	r3, #24
 80030ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80030b2:	e008      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80030b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80030bc:	e003      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80030be:	2306      	movs	r3, #6
 80030c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80030c4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80030d4:	f7ff fa0e 	bl	80024f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fb3c 	bl	800275a <LL_ADC_REG_IsConversionOngoing>
 80030e2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fb48 	bl	8002780 <LL_ADC_INJ_IsConversionOngoing>
 80030f0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f040 81a4 	bne.w	8003446 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003102:	2b00      	cmp	r3, #0
 8003104:	f040 819f 	bne.w	8003446 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6819      	ldr	r1, [r3, #0]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	461a      	mov	r2, r3
 8003116:	f7ff fa2c 	bl	8002572 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	08db      	lsrs	r3, r3, #3
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	2b04      	cmp	r3, #4
 800313a:	d00a      	beq.n	8003152 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	6919      	ldr	r1, [r3, #16]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800314c:	f7ff f96a 	bl	8002424 <LL_ADC_SetOffset>
 8003150:	e179      	b.n	8003446 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff f987 	bl	800246c <LL_ADC_GetOffsetChannel>
 800315e:	4603      	mov	r3, r0
 8003160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10a      	bne.n	800317e <HAL_ADC_ConfigChannel+0x14e>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2100      	movs	r1, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff f97c 	bl	800246c <LL_ADC_GetOffsetChannel>
 8003174:	4603      	mov	r3, r0
 8003176:	0e9b      	lsrs	r3, r3, #26
 8003178:	f003 021f 	and.w	r2, r3, #31
 800317c:	e01e      	b.n	80031bc <HAL_ADC_ConfigChannel+0x18c>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2100      	movs	r1, #0
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff f971 	bl	800246c <LL_ADC_GetOffsetChannel>
 800318a:	4603      	mov	r3, r0
 800318c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800319c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80031ac:	2320      	movs	r3, #32
 80031ae:	e004      	b.n	80031ba <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80031b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031b4:	fab3 f383 	clz	r3, r3
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d105      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x1a4>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	0e9b      	lsrs	r3, r3, #26
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	e018      	b.n	8003206 <HAL_ADC_ConfigChannel+0x1d6>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031e0:	fa93 f3a3 	rbit	r3, r3
 80031e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80031e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80031f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80031f8:	2320      	movs	r3, #32
 80031fa:	e004      	b.n	8003206 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80031fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003206:	429a      	cmp	r2, r3
 8003208:	d106      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2200      	movs	r2, #0
 8003210:	2100      	movs	r1, #0
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff f940 	bl	8002498 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2101      	movs	r1, #1
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff f924 	bl	800246c <LL_ADC_GetOffsetChannel>
 8003224:	4603      	mov	r3, r0
 8003226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10a      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x214>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2101      	movs	r1, #1
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff f919 	bl	800246c <LL_ADC_GetOffsetChannel>
 800323a:	4603      	mov	r3, r0
 800323c:	0e9b      	lsrs	r3, r3, #26
 800323e:	f003 021f 	and.w	r2, r3, #31
 8003242:	e01e      	b.n	8003282 <HAL_ADC_ConfigChannel+0x252>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2101      	movs	r1, #1
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff f90e 	bl	800246c <LL_ADC_GetOffsetChannel>
 8003250:	4603      	mov	r3, r0
 8003252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003262:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800326a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003272:	2320      	movs	r3, #32
 8003274:	e004      	b.n	8003280 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003276:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800327a:	fab3 f383 	clz	r3, r3
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328a:	2b00      	cmp	r3, #0
 800328c:	d105      	bne.n	800329a <HAL_ADC_ConfigChannel+0x26a>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	0e9b      	lsrs	r3, r3, #26
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	e018      	b.n	80032cc <HAL_ADC_ConfigChannel+0x29c>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80032ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80032b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80032be:	2320      	movs	r3, #32
 80032c0:	e004      	b.n	80032cc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80032c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d106      	bne.n	80032de <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2200      	movs	r2, #0
 80032d6:	2101      	movs	r1, #1
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff f8dd 	bl	8002498 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2102      	movs	r1, #2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff f8c1 	bl	800246c <LL_ADC_GetOffsetChannel>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <HAL_ADC_ConfigChannel+0x2da>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2102      	movs	r1, #2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff f8b6 	bl	800246c <LL_ADC_GetOffsetChannel>
 8003300:	4603      	mov	r3, r0
 8003302:	0e9b      	lsrs	r3, r3, #26
 8003304:	f003 021f 	and.w	r2, r3, #31
 8003308:	e01e      	b.n	8003348 <HAL_ADC_ConfigChannel+0x318>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2102      	movs	r1, #2
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff f8ab 	bl	800246c <LL_ADC_GetOffsetChannel>
 8003316:	4603      	mov	r3, r0
 8003318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003328:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800332c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003330:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003338:	2320      	movs	r3, #32
 800333a:	e004      	b.n	8003346 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800333c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003350:	2b00      	cmp	r3, #0
 8003352:	d105      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x330>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	0e9b      	lsrs	r3, r3, #26
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	e014      	b.n	800338a <HAL_ADC_ConfigChannel+0x35a>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800336e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003370:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003374:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800337c:	2320      	movs	r3, #32
 800337e:	e004      	b.n	800338a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003380:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800338a:	429a      	cmp	r2, r3
 800338c:	d106      	bne.n	800339c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2200      	movs	r2, #0
 8003394:	2102      	movs	r1, #2
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff f87e 	bl	8002498 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2103      	movs	r1, #3
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff f862 	bl	800246c <LL_ADC_GetOffsetChannel>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10a      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x398>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2103      	movs	r1, #3
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff f857 	bl	800246c <LL_ADC_GetOffsetChannel>
 80033be:	4603      	mov	r3, r0
 80033c0:	0e9b      	lsrs	r3, r3, #26
 80033c2:	f003 021f 	and.w	r2, r3, #31
 80033c6:	e017      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x3c8>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2103      	movs	r1, #3
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff f84c 	bl	800246c <LL_ADC_GetOffsetChannel>
 80033d4:	4603      	mov	r3, r0
 80033d6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80033e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80033e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80033ea:	2320      	movs	r3, #32
 80033ec:	e003      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80033ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003400:	2b00      	cmp	r3, #0
 8003402:	d105      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x3e0>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	0e9b      	lsrs	r3, r3, #26
 800340a:	f003 031f 	and.w	r3, r3, #31
 800340e:	e011      	b.n	8003434 <HAL_ADC_ConfigChannel+0x404>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003418:	fa93 f3a3 	rbit	r3, r3
 800341c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800341e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003420:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003422:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003428:	2320      	movs	r3, #32
 800342a:	e003      	b.n	8003434 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800342c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800342e:	fab3 f383 	clz	r3, r3
 8003432:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003434:	429a      	cmp	r2, r3
 8003436:	d106      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2200      	movs	r2, #0
 800343e:	2103      	movs	r1, #3
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff f829 	bl	8002498 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff f95e 	bl	800270c <LL_ADC_IsEnabled>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	f040 8140 	bne.w	80036d8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	6819      	ldr	r1, [r3, #0]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	461a      	mov	r2, r3
 8003466:	f7ff f8af 	bl	80025c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	4a8f      	ldr	r2, [pc, #572]	; (80036ac <HAL_ADC_ConfigChannel+0x67c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	f040 8131 	bne.w	80036d8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10b      	bne.n	800349e <HAL_ADC_ConfigChannel+0x46e>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	0e9b      	lsrs	r3, r3, #26
 800348c:	3301      	adds	r3, #1
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	2b09      	cmp	r3, #9
 8003494:	bf94      	ite	ls
 8003496:	2301      	movls	r3, #1
 8003498:	2300      	movhi	r3, #0
 800349a:	b2db      	uxtb	r3, r3
 800349c:	e019      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x4a2>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80034ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80034b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80034b6:	2320      	movs	r3, #32
 80034b8:	e003      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80034ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034bc:	fab3 f383 	clz	r3, r3
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	3301      	adds	r3, #1
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	2b09      	cmp	r3, #9
 80034ca:	bf94      	ite	ls
 80034cc:	2301      	movls	r3, #1
 80034ce:	2300      	movhi	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d079      	beq.n	80035ca <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d107      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x4c2>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	0e9b      	lsrs	r3, r3, #26
 80034e8:	3301      	adds	r3, #1
 80034ea:	069b      	lsls	r3, r3, #26
 80034ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034f0:	e015      	b.n	800351e <HAL_ADC_ConfigChannel+0x4ee>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003502:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800350a:	2320      	movs	r3, #32
 800350c:	e003      	b.n	8003516 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800350e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	3301      	adds	r3, #1
 8003518:	069b      	lsls	r3, r3, #26
 800351a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <HAL_ADC_ConfigChannel+0x50e>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	0e9b      	lsrs	r3, r3, #26
 8003530:	3301      	adds	r3, #1
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	2101      	movs	r1, #1
 8003538:	fa01 f303 	lsl.w	r3, r1, r3
 800353c:	e017      	b.n	800356e <HAL_ADC_ConfigChannel+0x53e>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003546:	fa93 f3a3 	rbit	r3, r3
 800354a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800354c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003556:	2320      	movs	r3, #32
 8003558:	e003      	b.n	8003562 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800355a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800355c:	fab3 f383 	clz	r3, r3
 8003560:	b2db      	uxtb	r3, r3
 8003562:	3301      	adds	r3, #1
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	2101      	movs	r1, #1
 800356a:	fa01 f303 	lsl.w	r3, r1, r3
 800356e:	ea42 0103 	orr.w	r1, r2, r3
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x564>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	0e9b      	lsrs	r3, r3, #26
 8003584:	3301      	adds	r3, #1
 8003586:	f003 021f 	and.w	r2, r3, #31
 800358a:	4613      	mov	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	4413      	add	r3, r2
 8003590:	051b      	lsls	r3, r3, #20
 8003592:	e018      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x596>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	fa93 f3a3 	rbit	r3, r3
 80035a0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80035a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80035ac:	2320      	movs	r3, #32
 80035ae:	e003      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80035b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b2:	fab3 f383 	clz	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	3301      	adds	r3, #1
 80035ba:	f003 021f 	and.w	r2, r3, #31
 80035be:	4613      	mov	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035c6:	430b      	orrs	r3, r1
 80035c8:	e081      	b.n	80036ce <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d107      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x5b6>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	0e9b      	lsrs	r3, r3, #26
 80035dc:	3301      	adds	r3, #1
 80035de:	069b      	lsls	r3, r3, #26
 80035e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035e4:	e015      	b.n	8003612 <HAL_ADC_ConfigChannel+0x5e2>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80035fe:	2320      	movs	r3, #32
 8003600:	e003      	b.n	800360a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003604:	fab3 f383 	clz	r3, r3
 8003608:	b2db      	uxtb	r3, r3
 800360a:	3301      	adds	r3, #1
 800360c:	069b      	lsls	r3, r3, #26
 800360e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361a:	2b00      	cmp	r3, #0
 800361c:	d109      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x602>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	0e9b      	lsrs	r3, r3, #26
 8003624:	3301      	adds	r3, #1
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	2101      	movs	r1, #1
 800362c:	fa01 f303 	lsl.w	r3, r1, r3
 8003630:	e017      	b.n	8003662 <HAL_ADC_ConfigChannel+0x632>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	fa93 f3a3 	rbit	r3, r3
 800363e:	61bb      	str	r3, [r7, #24]
  return result;
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800364a:	2320      	movs	r3, #32
 800364c:	e003      	b.n	8003656 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	fab3 f383 	clz	r3, r3
 8003654:	b2db      	uxtb	r3, r3
 8003656:	3301      	adds	r3, #1
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	2101      	movs	r1, #1
 800365e:	fa01 f303 	lsl.w	r3, r1, r3
 8003662:	ea42 0103 	orr.w	r1, r2, r3
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10d      	bne.n	800368e <HAL_ADC_ConfigChannel+0x65e>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	0e9b      	lsrs	r3, r3, #26
 8003678:	3301      	adds	r3, #1
 800367a:	f003 021f 	and.w	r2, r3, #31
 800367e:	4613      	mov	r3, r2
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	4413      	add	r3, r2
 8003684:	3b1e      	subs	r3, #30
 8003686:	051b      	lsls	r3, r3, #20
 8003688:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800368c:	e01e      	b.n	80036cc <HAL_ADC_ConfigChannel+0x69c>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	fa93 f3a3 	rbit	r3, r3
 800369a:	60fb      	str	r3, [r7, #12]
  return result;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d104      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80036a6:	2320      	movs	r3, #32
 80036a8:	e006      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x688>
 80036aa:	bf00      	nop
 80036ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	3301      	adds	r3, #1
 80036ba:	f003 021f 	and.w	r2, r3, #31
 80036be:	4613      	mov	r3, r2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	4413      	add	r3, r2
 80036c4:	3b1e      	subs	r3, #30
 80036c6:	051b      	lsls	r3, r3, #20
 80036c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036d2:	4619      	mov	r1, r3
 80036d4:	f7fe ff4d 	bl	8002572 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4b44      	ldr	r3, [pc, #272]	; (80037f0 <HAL_ADC_ConfigChannel+0x7c0>)
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d07a      	beq.n	80037da <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036e4:	4843      	ldr	r0, [pc, #268]	; (80037f4 <HAL_ADC_ConfigChannel+0x7c4>)
 80036e6:	f7fe fe8f 	bl	8002408 <LL_ADC_GetCommonPathInternalCh>
 80036ea:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a41      	ldr	r2, [pc, #260]	; (80037f8 <HAL_ADC_ConfigChannel+0x7c8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d12c      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d126      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a3c      	ldr	r2, [pc, #240]	; (80037fc <HAL_ADC_ConfigChannel+0x7cc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d004      	beq.n	8003718 <HAL_ADC_ConfigChannel+0x6e8>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a3b      	ldr	r2, [pc, #236]	; (8003800 <HAL_ADC_ConfigChannel+0x7d0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d15d      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003718:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800371c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003720:	4619      	mov	r1, r3
 8003722:	4834      	ldr	r0, [pc, #208]	; (80037f4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003724:	f7fe fe5d 	bl	80023e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003728:	4b36      	ldr	r3, [pc, #216]	; (8003804 <HAL_ADC_ConfigChannel+0x7d4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	099b      	lsrs	r3, r3, #6
 800372e:	4a36      	ldr	r2, [pc, #216]	; (8003808 <HAL_ADC_ConfigChannel+0x7d8>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	099b      	lsrs	r3, r3, #6
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	4613      	mov	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003742:	e002      	b.n	800374a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	3b01      	subs	r3, #1
 8003748:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f9      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003750:	e040      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a2d      	ldr	r2, [pc, #180]	; (800380c <HAL_ADC_ConfigChannel+0x7dc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d118      	bne.n	800378e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800375c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d112      	bne.n	800378e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a23      	ldr	r2, [pc, #140]	; (80037fc <HAL_ADC_ConfigChannel+0x7cc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <HAL_ADC_ConfigChannel+0x74c>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a22      	ldr	r2, [pc, #136]	; (8003800 <HAL_ADC_ConfigChannel+0x7d0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d12d      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800377c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003780:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003784:	4619      	mov	r1, r3
 8003786:	481b      	ldr	r0, [pc, #108]	; (80037f4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003788:	f7fe fe2b 	bl	80023e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800378c:	e024      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1f      	ldr	r2, [pc, #124]	; (8003810 <HAL_ADC_ConfigChannel+0x7e0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d120      	bne.n	80037da <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003798:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800379c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d11a      	bne.n	80037da <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a14      	ldr	r2, [pc, #80]	; (80037fc <HAL_ADC_ConfigChannel+0x7cc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d115      	bne.n	80037da <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037b6:	4619      	mov	r1, r3
 80037b8:	480e      	ldr	r0, [pc, #56]	; (80037f4 <HAL_ADC_ConfigChannel+0x7c4>)
 80037ba:	f7fe fe12 	bl	80023e2 <LL_ADC_SetCommonPathInternalCh>
 80037be:	e00c      	b.n	80037da <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c4:	f043 0220 	orr.w	r2, r3, #32
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80037d2:	e002      	b.n	80037da <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037d4:	bf00      	nop
 80037d6:	e000      	b.n	80037da <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80037e2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	37d8      	adds	r7, #216	; 0xd8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	80080000 	.word	0x80080000
 80037f4:	50040300 	.word	0x50040300
 80037f8:	c7520000 	.word	0xc7520000
 80037fc:	50040000 	.word	0x50040000
 8003800:	50040200 	.word	0x50040200
 8003804:	20000008 	.word	0x20000008
 8003808:	053e2d63 	.word	0x053e2d63
 800380c:	cb840000 	.word	0xcb840000
 8003810:	80000001 	.word	0x80000001

08003814 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800381c:	2300      	movs	r3, #0
 800381e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe ff71 	bl	800270c <LL_ADC_IsEnabled>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d169      	bne.n	8003904 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	4b36      	ldr	r3, [pc, #216]	; (8003910 <ADC_Enable+0xfc>)
 8003838:	4013      	ands	r3, r2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00d      	beq.n	800385a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	f043 0210 	orr.w	r2, r3, #16
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384e:	f043 0201 	orr.w	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e055      	b.n	8003906 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe ff40 	bl	80026e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003864:	482b      	ldr	r0, [pc, #172]	; (8003914 <ADC_Enable+0x100>)
 8003866:	f7fe fdcf 	bl	8002408 <LL_ADC_GetCommonPathInternalCh>
 800386a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800386c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003870:	2b00      	cmp	r3, #0
 8003872:	d013      	beq.n	800389c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003874:	4b28      	ldr	r3, [pc, #160]	; (8003918 <ADC_Enable+0x104>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	099b      	lsrs	r3, r3, #6
 800387a:	4a28      	ldr	r2, [pc, #160]	; (800391c <ADC_Enable+0x108>)
 800387c:	fba2 2303 	umull	r2, r3, r2, r3
 8003880:	099b      	lsrs	r3, r3, #6
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	4613      	mov	r3, r2
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800388e:	e002      	b.n	8003896 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	3b01      	subs	r3, #1
 8003894:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f9      	bne.n	8003890 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800389c:	f7fe fd5e 	bl	800235c <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038a2:	e028      	b.n	80038f6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fe ff2f 	bl	800270c <LL_ADC_IsEnabled>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d104      	bne.n	80038be <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fe ff13 	bl	80026e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038be:	f7fe fd4d 	bl	800235c <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d914      	bls.n	80038f6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d00d      	beq.n	80038f6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	f043 0210 	orr.w	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ea:	f043 0201 	orr.w	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e007      	b.n	8003906 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b01      	cmp	r3, #1
 8003902:	d1cf      	bne.n	80038a4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	8000003f 	.word	0x8000003f
 8003914:	50040300 	.word	0x50040300
 8003918:	20000008 	.word	0x20000008
 800391c:	053e2d63 	.word	0x053e2d63

08003920 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003932:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003936:	2b00      	cmp	r3, #0
 8003938:	d14b      	bne.n	80039d2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d021      	beq.n	8003998 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f7fe fdb8 	bl	80024ce <LL_ADC_REG_IsTriggerSourceSWStart>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d032      	beq.n	80039ca <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d12b      	bne.n	80039ca <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003976:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d11f      	bne.n	80039ca <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398e:	f043 0201 	orr.w	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	655a      	str	r2, [r3, #84]	; 0x54
 8003996:	e018      	b.n	80039ca <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d111      	bne.n	80039ca <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d105      	bne.n	80039ca <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c2:	f043 0201 	orr.w	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f7fd ff68 	bl	80018a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039d0:	e00e      	b.n	80039f0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f7ff fb1c 	bl	800301c <HAL_ADC_ErrorCallback>
}
 80039e4:	e004      	b.n	80039f0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
}
 80039f0:	bf00      	nop
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f7ff faf4 	bl	8002ff4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a0c:	bf00      	nop
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a32:	f043 0204 	orr.w	r2, r3, #4
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f7ff faee 	bl	800301c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003abc:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <__NVIC_SetPriorityGrouping+0x44>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ac8:	4013      	ands	r3, r2
 8003aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ade:	4a04      	ldr	r2, [pc, #16]	; (8003af0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	60d3      	str	r3, [r2, #12]
}
 8003ae4:	bf00      	nop
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	e000ed00 	.word	0xe000ed00

08003af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003af8:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <__NVIC_GetPriorityGrouping+0x18>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	0a1b      	lsrs	r3, r3, #8
 8003afe:	f003 0307 	and.w	r3, r3, #7
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	db0b      	blt.n	8003b3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	f003 021f 	and.w	r2, r3, #31
 8003b28:	4907      	ldr	r1, [pc, #28]	; (8003b48 <__NVIC_EnableIRQ+0x38>)
 8003b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	2001      	movs	r0, #1
 8003b32:	fa00 f202 	lsl.w	r2, r0, r2
 8003b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	e000e100 	.word	0xe000e100

08003b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	6039      	str	r1, [r7, #0]
 8003b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	db0a      	blt.n	8003b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	490c      	ldr	r1, [pc, #48]	; (8003b98 <__NVIC_SetPriority+0x4c>)
 8003b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6a:	0112      	lsls	r2, r2, #4
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	440b      	add	r3, r1
 8003b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b74:	e00a      	b.n	8003b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	4908      	ldr	r1, [pc, #32]	; (8003b9c <__NVIC_SetPriority+0x50>)
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	3b04      	subs	r3, #4
 8003b84:	0112      	lsls	r2, r2, #4
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	440b      	add	r3, r1
 8003b8a:	761a      	strb	r2, [r3, #24]
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	e000e100 	.word	0xe000e100
 8003b9c:	e000ed00 	.word	0xe000ed00

08003ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b089      	sub	sp, #36	; 0x24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f1c3 0307 	rsb	r3, r3, #7
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	bf28      	it	cs
 8003bbe:	2304      	movcs	r3, #4
 8003bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	2b06      	cmp	r3, #6
 8003bc8:	d902      	bls.n	8003bd0 <NVIC_EncodePriority+0x30>
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	3b03      	subs	r3, #3
 8003bce:	e000      	b.n	8003bd2 <NVIC_EncodePriority+0x32>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43da      	mvns	r2, r3
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	401a      	ands	r2, r3
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003be8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf2:	43d9      	mvns	r1, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf8:	4313      	orrs	r3, r2
         );
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3724      	adds	r7, #36	; 0x24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff ff4c 	bl	8003aac <__NVIC_SetPriorityGrouping>
}
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c2e:	f7ff ff61 	bl	8003af4 <__NVIC_GetPriorityGrouping>
 8003c32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	6978      	ldr	r0, [r7, #20]
 8003c3a:	f7ff ffb1 	bl	8003ba0 <NVIC_EncodePriority>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c44:	4611      	mov	r1, r2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff ff80 	bl	8003b4c <__NVIC_SetPriority>
}
 8003c4c:	bf00      	nop
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff ff54 	bl	8003b10 <__NVIC_EnableIRQ>
}
 8003c68:	bf00      	nop
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e014      	b.n	8003cac <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	791b      	ldrb	r3, [r3, #4]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d105      	bne.n	8003c98 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fd ffd8 	bl	8001c48 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	795b      	ldrb	r3, [r3, #5]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_DAC_Start_DMA+0x1e>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e0ab      	b.n	8003e2a <HAL_DAC_Start_DMA+0x176>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d12f      	bne.n	8003d44 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4a52      	ldr	r2, [pc, #328]	; (8003e34 <HAL_DAC_Start_DMA+0x180>)
 8003cea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4a51      	ldr	r2, [pc, #324]	; (8003e38 <HAL_DAC_Start_DMA+0x184>)
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4a50      	ldr	r2, [pc, #320]	; (8003e3c <HAL_DAC_Start_DMA+0x188>)
 8003cfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d0a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d013      	beq.n	8003d3a <HAL_DAC_Start_DMA+0x86>
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d845      	bhi.n	8003da4 <HAL_DAC_Start_DMA+0xf0>
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_DAC_Start_DMA+0x72>
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d005      	beq.n	8003d30 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003d24:	e03e      	b.n	8003da4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	613b      	str	r3, [r7, #16]
        break;
 8003d2e:	e03c      	b.n	8003daa <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	330c      	adds	r3, #12
 8003d36:	613b      	str	r3, [r7, #16]
        break;
 8003d38:	e037      	b.n	8003daa <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3310      	adds	r3, #16
 8003d40:	613b      	str	r3, [r7, #16]
        break;
 8003d42:	e032      	b.n	8003daa <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	4a3d      	ldr	r2, [pc, #244]	; (8003e40 <HAL_DAC_Start_DMA+0x18c>)
 8003d4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	4a3c      	ldr	r2, [pc, #240]	; (8003e44 <HAL_DAC_Start_DMA+0x190>)
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	4a3b      	ldr	r2, [pc, #236]	; (8003e48 <HAL_DAC_Start_DMA+0x194>)
 8003d5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d6a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d013      	beq.n	8003d9a <HAL_DAC_Start_DMA+0xe6>
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d817      	bhi.n	8003da8 <HAL_DAC_Start_DMA+0xf4>
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_DAC_Start_DMA+0xd2>
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d005      	beq.n	8003d90 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003d84:	e010      	b.n	8003da8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3314      	adds	r3, #20
 8003d8c:	613b      	str	r3, [r7, #16]
        break;
 8003d8e:	e00c      	b.n	8003daa <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3318      	adds	r3, #24
 8003d96:	613b      	str	r3, [r7, #16]
        break;
 8003d98:	e007      	b.n	8003daa <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	331c      	adds	r3, #28
 8003da0:	613b      	str	r3, [r7, #16]
        break;
 8003da2:	e002      	b.n	8003daa <HAL_DAC_Start_DMA+0xf6>
        break;
 8003da4:	bf00      	nop
 8003da6:	e000      	b.n	8003daa <HAL_DAC_Start_DMA+0xf6>
        break;
 8003da8:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d111      	bne.n	8003dd4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dbe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6898      	ldr	r0, [r3, #8]
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	f000 fb6f 	bl	80044ac <HAL_DMA_Start_IT>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	75fb      	strb	r3, [r7, #23]
 8003dd2:	e010      	b.n	8003df6 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003de2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68d8      	ldr	r0, [r3, #12]
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	f000 fb5d 	bl	80044ac <HAL_DMA_Start_IT>
 8003df2:	4603      	mov	r3, r0
 8003df4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10c      	bne.n	8003e1c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6819      	ldr	r1, [r3, #0]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2201      	movs	r2, #1
 8003e10:	409a      	lsls	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e005      	b.n	8003e28 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f043 0204 	orr.w	r2, r3, #4
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	08004215 	.word	0x08004215
 8003e38:	08004237 	.word	0x08004237
 8003e3c:	08004253 	.word	0x08004253
 8003e40:	080042d1 	.word	0x080042d1
 8003e44:	080042f3 	.word	0x080042f3
 8003e48:	0800430f 	.word	0x0800430f

08003e4c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6819      	ldr	r1, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43da      	mvns	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	400a      	ands	r2, r1
 8003e72:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6819      	ldr	r1, [r3, #0]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2201      	movs	r2, #1
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43da      	mvns	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	400a      	ands	r2, r1
 8003e8e:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10d      	bne.n	8003eb2 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fb66 	bl	800456c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	e00c      	b.n	8003ecc <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fb58 	bl	800456c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003eca:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eec:	d120      	bne.n	8003f30 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efc:	d118      	bne.n	8003f30 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2204      	movs	r2, #4
 8003f02:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f043 0201 	orr.w	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f28:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f841 	bl	8003fb2 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f3e:	d120      	bne.n	8003f82 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f4e:	d118      	bne.n	8003f82 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2204      	movs	r2, #4
 8003f54:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f043 0202 	orr.w	r2, r3, #2
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003f6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003f7a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f99d 	bl	80042bc <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b088      	sub	sp, #32
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	795b      	ldrb	r3, [r3, #5]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_DAC_ConfigChannel+0x1c>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e114      	b.n	800420c <HAL_DAC_ConfigChannel+0x246>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2202      	movs	r2, #2
 8003fec:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	f040 8081 	bne.w	80040fa <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003ff8:	f7fe f9b0 	bl	800235c <HAL_GetTick>
 8003ffc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d140      	bne.n	8004086 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004004:	e018      	b.n	8004038 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004006:	f7fe f9a9 	bl	800235c <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b01      	cmp	r3, #1
 8004012:	d911      	bls.n	8004038 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f043 0208 	orr.w	r2, r3, #8
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2203      	movs	r2, #3
 8004032:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e0e9      	b.n	800420c <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1df      	bne.n	8004006 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8004046:	2001      	movs	r0, #1
 8004048:	f7fe f994 	bl	8002374 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	6992      	ldr	r2, [r2, #24]
 8004054:	641a      	str	r2, [r3, #64]	; 0x40
 8004056:	e023      	b.n	80040a0 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004058:	f7fe f980 	bl	800235c <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b01      	cmp	r3, #1
 8004064:	d90f      	bls.n	8004086 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406c:	2b00      	cmp	r3, #0
 800406e:	da0a      	bge.n	8004086 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f043 0208 	orr.w	r2, r3, #8
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2203      	movs	r2, #3
 8004080:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e0c2      	b.n	800420c <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408c:	2b00      	cmp	r3, #0
 800408e:	dbe3      	blt.n	8004058 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8004090:	2001      	movs	r0, #1
 8004092:	f7fe f96f 	bl	8002374 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	6992      	ldr	r2, [r2, #24]
 800409e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80040b0:	fa01 f303 	lsl.w	r3, r1, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	ea02 0103 	and.w	r1, r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	69da      	ldr	r2, [r3, #28]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	409a      	lsls	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	21ff      	movs	r1, #255	; 0xff
 80040dc:	fa01 f303 	lsl.w	r3, r1, r3
 80040e0:	43db      	mvns	r3, r3
 80040e2:	ea02 0103 	and.w	r1, r2, r3
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	6a1a      	ldr	r2, [r3, #32]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	409a      	lsls	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d11d      	bne.n	800413e <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f003 0310 	and.w	r3, r3, #16
 8004110:	221f      	movs	r2, #31
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	43db      	mvns	r3, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4013      	ands	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f003 0310 	and.w	r3, r3, #16
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004144:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2207      	movs	r2, #7
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43db      	mvns	r3, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4013      	ands	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	431a      	orrs	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	4313      	orrs	r3, r2
 800417c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6819      	ldr	r1, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f003 0310 	and.w	r3, r3, #16
 8004192:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004196:	fa02 f303 	lsl.w	r3, r2, r3
 800419a:	43da      	mvns	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	400a      	ands	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	f640 72fc 	movw	r2, #4092	; 0xffc
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43db      	mvns	r3, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6819      	ldr	r1, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f003 0310 	and.w	r3, r3, #16
 80041ee:	22c0      	movs	r2, #192	; 0xc0
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	43da      	mvns	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	400a      	ands	r2, r1
 80041fc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3720      	adds	r7, #32
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f7fd fab0 	bl	8001788 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2201      	movs	r2, #1
 800422c:	711a      	strb	r2, [r3, #4]
}
 800422e:	bf00      	nop
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004242:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f7ff fea0 	bl	8003f8a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f043 0204 	orr.w	r2, r3, #4
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f7ff fe96 	bl	8003f9e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	711a      	strb	r2, [r3, #4]
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f7ff ffce 	bl	8004280 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	711a      	strb	r2, [r3, #4]
}
 80042ea:	bf00      	nop
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f7ff ffc7 	bl	8004294 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004306:	bf00      	nop
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f043 0204 	orr.w	r2, r3, #4
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f7ff ffbd 	bl	80042a8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	711a      	strb	r2, [r3, #4]
}
 8004334:	bf00      	nop
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e098      	b.n	8004480 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	4b4d      	ldr	r3, [pc, #308]	; (800448c <HAL_DMA_Init+0x150>)
 8004356:	429a      	cmp	r2, r3
 8004358:	d80f      	bhi.n	800437a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	4b4b      	ldr	r3, [pc, #300]	; (8004490 <HAL_DMA_Init+0x154>)
 8004362:	4413      	add	r3, r2
 8004364:	4a4b      	ldr	r2, [pc, #300]	; (8004494 <HAL_DMA_Init+0x158>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	091b      	lsrs	r3, r3, #4
 800436c:	009a      	lsls	r2, r3, #2
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a48      	ldr	r2, [pc, #288]	; (8004498 <HAL_DMA_Init+0x15c>)
 8004376:	641a      	str	r2, [r3, #64]	; 0x40
 8004378:	e00e      	b.n	8004398 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	4b46      	ldr	r3, [pc, #280]	; (800449c <HAL_DMA_Init+0x160>)
 8004382:	4413      	add	r3, r2
 8004384:	4a43      	ldr	r2, [pc, #268]	; (8004494 <HAL_DMA_Init+0x158>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	009a      	lsls	r2, r3, #2
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a42      	ldr	r2, [pc, #264]	; (80044a0 <HAL_DMA_Init+0x164>)
 8004396:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80043ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80043bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043f2:	d039      	beq.n	8004468 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	4a27      	ldr	r2, [pc, #156]	; (8004498 <HAL_DMA_Init+0x15c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d11a      	bne.n	8004434 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80043fe:	4b29      	ldr	r3, [pc, #164]	; (80044a4 <HAL_DMA_Init+0x168>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	f003 031c 	and.w	r3, r3, #28
 800440a:	210f      	movs	r1, #15
 800440c:	fa01 f303 	lsl.w	r3, r1, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	4924      	ldr	r1, [pc, #144]	; (80044a4 <HAL_DMA_Init+0x168>)
 8004414:	4013      	ands	r3, r2
 8004416:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004418:	4b22      	ldr	r3, [pc, #136]	; (80044a4 <HAL_DMA_Init+0x168>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6859      	ldr	r1, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004424:	f003 031c 	and.w	r3, r3, #28
 8004428:	fa01 f303 	lsl.w	r3, r1, r3
 800442c:	491d      	ldr	r1, [pc, #116]	; (80044a4 <HAL_DMA_Init+0x168>)
 800442e:	4313      	orrs	r3, r2
 8004430:	600b      	str	r3, [r1, #0]
 8004432:	e019      	b.n	8004468 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004434:	4b1c      	ldr	r3, [pc, #112]	; (80044a8 <HAL_DMA_Init+0x16c>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	f003 031c 	and.w	r3, r3, #28
 8004440:	210f      	movs	r1, #15
 8004442:	fa01 f303 	lsl.w	r3, r1, r3
 8004446:	43db      	mvns	r3, r3
 8004448:	4917      	ldr	r1, [pc, #92]	; (80044a8 <HAL_DMA_Init+0x16c>)
 800444a:	4013      	ands	r3, r2
 800444c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800444e:	4b16      	ldr	r3, [pc, #88]	; (80044a8 <HAL_DMA_Init+0x16c>)
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6859      	ldr	r1, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	f003 031c 	and.w	r3, r3, #28
 800445e:	fa01 f303 	lsl.w	r3, r1, r3
 8004462:	4911      	ldr	r1, [pc, #68]	; (80044a8 <HAL_DMA_Init+0x16c>)
 8004464:	4313      	orrs	r3, r2
 8004466:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	40020407 	.word	0x40020407
 8004490:	bffdfff8 	.word	0xbffdfff8
 8004494:	cccccccd 	.word	0xcccccccd
 8004498:	40020000 	.word	0x40020000
 800449c:	bffdfbf8 	.word	0xbffdfbf8
 80044a0:	40020400 	.word	0x40020400
 80044a4:	400200a8 	.word	0x400200a8
 80044a8:	400204a8 	.word	0x400204a8

080044ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_DMA_Start_IT+0x20>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e04b      	b.n	8004564 <HAL_DMA_Start_IT+0xb8>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d13a      	bne.n	8004556 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 f91e 	bl	8004746 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 020e 	orr.w	r2, r2, #14
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	e00f      	b.n	8004544 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0204 	bic.w	r2, r2, #4
 8004532:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 020a 	orr.w	r2, r2, #10
 8004542:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	e005      	b.n	8004562 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800455e:	2302      	movs	r3, #2
 8004560:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004562:	7dfb      	ldrb	r3, [r7, #23]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d008      	beq.n	8004596 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2204      	movs	r2, #4
 8004588:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e022      	b.n	80045dc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 020e 	bic.w	r2, r2, #14
 80045a4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0201 	bic.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ba:	f003 021c 	and.w	r2, r3, #28
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	2101      	movs	r1, #1
 80045c4:	fa01 f202 	lsl.w	r2, r1, r2
 80045c8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80045da:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004604:	f003 031c 	and.w	r3, r3, #28
 8004608:	2204      	movs	r2, #4
 800460a:	409a      	lsls	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4013      	ands	r3, r2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d026      	beq.n	8004662 <HAL_DMA_IRQHandler+0x7a>
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	2b00      	cmp	r3, #0
 800461c:	d021      	beq.n	8004662 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0320 	and.w	r3, r3, #32
 8004628:	2b00      	cmp	r3, #0
 800462a:	d107      	bne.n	800463c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0204 	bic.w	r2, r2, #4
 800463a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004640:	f003 021c 	and.w	r2, r3, #28
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	2104      	movs	r1, #4
 800464a:	fa01 f202 	lsl.w	r2, r1, r2
 800464e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	2b00      	cmp	r3, #0
 8004656:	d071      	beq.n	800473c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004660:	e06c      	b.n	800473c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004666:	f003 031c 	and.w	r3, r3, #28
 800466a:	2202      	movs	r2, #2
 800466c:	409a      	lsls	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d02e      	beq.n	80046d4 <HAL_DMA_IRQHandler+0xec>
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d029      	beq.n	80046d4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10b      	bne.n	80046a6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 020a 	bic.w	r2, r2, #10
 800469c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046aa:	f003 021c 	and.w	r2, r3, #28
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	2102      	movs	r1, #2
 80046b4:	fa01 f202 	lsl.w	r2, r1, r2
 80046b8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d038      	beq.n	800473c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80046d2:	e033      	b.n	800473c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d8:	f003 031c 	and.w	r3, r3, #28
 80046dc:	2208      	movs	r2, #8
 80046de:	409a      	lsls	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d02a      	beq.n	800473e <HAL_DMA_IRQHandler+0x156>
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d025      	beq.n	800473e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 020e 	bic.w	r2, r2, #14
 8004700:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	f003 021c 	and.w	r2, r3, #28
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	2101      	movs	r1, #1
 8004710:	fa01 f202 	lsl.w	r2, r1, r2
 8004714:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004730:	2b00      	cmp	r3, #0
 8004732:	d004      	beq.n	800473e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800473c:	bf00      	nop
 800473e:	bf00      	nop
}
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004746:	b480      	push	{r7}
 8004748:	b085      	sub	sp, #20
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
 8004752:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	f003 021c 	and.w	r2, r3, #28
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	2101      	movs	r1, #1
 8004762:	fa01 f202 	lsl.w	r2, r1, r2
 8004766:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	2b10      	cmp	r3, #16
 8004776:	d108      	bne.n	800478a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004788:	e007      	b.n	800479a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	60da      	str	r2, [r3, #12]
}
 800479a:	bf00      	nop
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047b6:	e17f      	b.n	8004ab8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	2101      	movs	r1, #1
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	fa01 f303 	lsl.w	r3, r1, r3
 80047c4:	4013      	ands	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8171 	beq.w	8004ab2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d005      	beq.n	80047e8 <HAL_GPIO_Init+0x40>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d130      	bne.n	800484a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	2203      	movs	r2, #3
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	43db      	mvns	r3, r3
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4013      	ands	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800481e:	2201      	movs	r2, #1
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	43db      	mvns	r3, r3
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4013      	ands	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	091b      	lsrs	r3, r3, #4
 8004834:	f003 0201 	and.w	r2, r3, #1
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b03      	cmp	r3, #3
 8004854:	d118      	bne.n	8004888 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800485c:	2201      	movs	r2, #1
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	43db      	mvns	r3, r3
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4013      	ands	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	08db      	lsrs	r3, r3, #3
 8004872:	f003 0201 	and.w	r2, r3, #1
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	2b03      	cmp	r3, #3
 8004892:	d017      	beq.n	80048c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	2203      	movs	r2, #3
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	43db      	mvns	r3, r3
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4013      	ands	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 0303 	and.w	r3, r3, #3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d123      	bne.n	8004918 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	08da      	lsrs	r2, r3, #3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3208      	adds	r2, #8
 80048d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	220f      	movs	r2, #15
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	43db      	mvns	r3, r3
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4013      	ands	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	08da      	lsrs	r2, r3, #3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	3208      	adds	r2, #8
 8004912:	6939      	ldr	r1, [r7, #16]
 8004914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	2203      	movs	r2, #3
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	43db      	mvns	r3, r3
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4013      	ands	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f003 0203 	and.w	r2, r3, #3
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 80ac 	beq.w	8004ab2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800495a:	4b5f      	ldr	r3, [pc, #380]	; (8004ad8 <HAL_GPIO_Init+0x330>)
 800495c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495e:	4a5e      	ldr	r2, [pc, #376]	; (8004ad8 <HAL_GPIO_Init+0x330>)
 8004960:	f043 0301 	orr.w	r3, r3, #1
 8004964:	6613      	str	r3, [r2, #96]	; 0x60
 8004966:	4b5c      	ldr	r3, [pc, #368]	; (8004ad8 <HAL_GPIO_Init+0x330>)
 8004968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	60bb      	str	r3, [r7, #8]
 8004970:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004972:	4a5a      	ldr	r2, [pc, #360]	; (8004adc <HAL_GPIO_Init+0x334>)
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	089b      	lsrs	r3, r3, #2
 8004978:	3302      	adds	r3, #2
 800497a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800497e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	220f      	movs	r2, #15
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	43db      	mvns	r3, r3
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4013      	ands	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800499c:	d025      	beq.n	80049ea <HAL_GPIO_Init+0x242>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a4f      	ldr	r2, [pc, #316]	; (8004ae0 <HAL_GPIO_Init+0x338>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d01f      	beq.n	80049e6 <HAL_GPIO_Init+0x23e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a4e      	ldr	r2, [pc, #312]	; (8004ae4 <HAL_GPIO_Init+0x33c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d019      	beq.n	80049e2 <HAL_GPIO_Init+0x23a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a4d      	ldr	r2, [pc, #308]	; (8004ae8 <HAL_GPIO_Init+0x340>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <HAL_GPIO_Init+0x236>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a4c      	ldr	r2, [pc, #304]	; (8004aec <HAL_GPIO_Init+0x344>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00d      	beq.n	80049da <HAL_GPIO_Init+0x232>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a4b      	ldr	r2, [pc, #300]	; (8004af0 <HAL_GPIO_Init+0x348>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d007      	beq.n	80049d6 <HAL_GPIO_Init+0x22e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a4a      	ldr	r2, [pc, #296]	; (8004af4 <HAL_GPIO_Init+0x34c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d101      	bne.n	80049d2 <HAL_GPIO_Init+0x22a>
 80049ce:	2306      	movs	r3, #6
 80049d0:	e00c      	b.n	80049ec <HAL_GPIO_Init+0x244>
 80049d2:	2307      	movs	r3, #7
 80049d4:	e00a      	b.n	80049ec <HAL_GPIO_Init+0x244>
 80049d6:	2305      	movs	r3, #5
 80049d8:	e008      	b.n	80049ec <HAL_GPIO_Init+0x244>
 80049da:	2304      	movs	r3, #4
 80049dc:	e006      	b.n	80049ec <HAL_GPIO_Init+0x244>
 80049de:	2303      	movs	r3, #3
 80049e0:	e004      	b.n	80049ec <HAL_GPIO_Init+0x244>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e002      	b.n	80049ec <HAL_GPIO_Init+0x244>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <HAL_GPIO_Init+0x244>
 80049ea:	2300      	movs	r3, #0
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	f002 0203 	and.w	r2, r2, #3
 80049f2:	0092      	lsls	r2, r2, #2
 80049f4:	4093      	lsls	r3, r2
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049fc:	4937      	ldr	r1, [pc, #220]	; (8004adc <HAL_GPIO_Init+0x334>)
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	3302      	adds	r3, #2
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a0a:	4b3b      	ldr	r3, [pc, #236]	; (8004af8 <HAL_GPIO_Init+0x350>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	43db      	mvns	r3, r3
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4013      	ands	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a2e:	4a32      	ldr	r2, [pc, #200]	; (8004af8 <HAL_GPIO_Init+0x350>)
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a34:	4b30      	ldr	r3, [pc, #192]	; (8004af8 <HAL_GPIO_Init+0x350>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4013      	ands	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a58:	4a27      	ldr	r2, [pc, #156]	; (8004af8 <HAL_GPIO_Init+0x350>)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004a5e:	4b26      	ldr	r3, [pc, #152]	; (8004af8 <HAL_GPIO_Init+0x350>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	43db      	mvns	r3, r3
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a82:	4a1d      	ldr	r2, [pc, #116]	; (8004af8 <HAL_GPIO_Init+0x350>)
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004a88:	4b1b      	ldr	r3, [pc, #108]	; (8004af8 <HAL_GPIO_Init+0x350>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	43db      	mvns	r3, r3
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4013      	ands	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004aac:	4a12      	ldr	r2, [pc, #72]	; (8004af8 <HAL_GPIO_Init+0x350>)
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f47f ae78 	bne.w	80047b8 <HAL_GPIO_Init+0x10>
  }
}
 8004ac8:	bf00      	nop
 8004aca:	bf00      	nop
 8004acc:	371c      	adds	r7, #28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	40010000 	.word	0x40010000
 8004ae0:	48000400 	.word	0x48000400
 8004ae4:	48000800 	.word	0x48000800
 8004ae8:	48000c00 	.word	0x48000c00
 8004aec:	48001000 	.word	0x48001000
 8004af0:	48001400 	.word	0x48001400
 8004af4:	48001800 	.word	0x48001800
 8004af8:	40010400 	.word	0x40010400

08004afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	807b      	strh	r3, [r7, #2]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b0c:	787b      	ldrb	r3, [r7, #1]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b12:	887a      	ldrh	r2, [r7, #2]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b18:	e002      	b.n	8004b20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b1a:	887a      	ldrh	r2, [r7, #2]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	4603      	mov	r3, r0
 8004b34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b36:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b38:	695a      	ldr	r2, [r3, #20]
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d006      	beq.n	8004b50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b42:	4a05      	ldr	r2, [pc, #20]	; (8004b58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b44:	88fb      	ldrh	r3, [r7, #6]
 8004b46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b48:	88fb      	ldrh	r3, [r7, #6]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fc fe8c 	bl	8001868 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b50:	bf00      	nop
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40010400 	.word	0x40010400

08004b5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004b60:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <HAL_PWREx_GetVoltageRange+0x18>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40007000 	.word	0x40007000

08004b78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b86:	d130      	bne.n	8004bea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b88:	4b23      	ldr	r3, [pc, #140]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b94:	d038      	beq.n	8004c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b96:	4b20      	ldr	r3, [pc, #128]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b9e:	4a1e      	ldr	r2, [pc, #120]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ba0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ba4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ba6:	4b1d      	ldr	r3, [pc, #116]	; (8004c1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2232      	movs	r2, #50	; 0x32
 8004bac:	fb02 f303 	mul.w	r3, r2, r3
 8004bb0:	4a1b      	ldr	r2, [pc, #108]	; (8004c20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	0c9b      	lsrs	r3, r3, #18
 8004bb8:	3301      	adds	r3, #1
 8004bba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bbc:	e002      	b.n	8004bc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bc4:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd0:	d102      	bne.n	8004bd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f2      	bne.n	8004bbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bd8:	4b0f      	ldr	r3, [pc, #60]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be4:	d110      	bne.n	8004c08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e00f      	b.n	8004c0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bea:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf6:	d007      	beq.n	8004c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004bf8:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c00:	4a05      	ldr	r2, [pc, #20]	; (8004c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40007000 	.word	0x40007000
 8004c1c:	20000008 	.word	0x20000008
 8004c20:	431bde83 	.word	0x431bde83

08004c24 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e3ca      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c36:	4b97      	ldr	r3, [pc, #604]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 030c 	and.w	r3, r3, #12
 8004c3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c40:	4b94      	ldr	r3, [pc, #592]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f003 0303 	and.w	r3, r3, #3
 8004c48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0310 	and.w	r3, r3, #16
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 80e4 	beq.w	8004e20 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <HAL_RCC_OscConfig+0x4a>
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	2b0c      	cmp	r3, #12
 8004c62:	f040 808b 	bne.w	8004d7c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	f040 8087 	bne.w	8004d7c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c6e:	4b89      	ldr	r3, [pc, #548]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <HAL_RCC_OscConfig+0x62>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e3a2      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1a      	ldr	r2, [r3, #32]
 8004c8a:	4b82      	ldr	r3, [pc, #520]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d004      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x7c>
 8004c96:	4b7f      	ldr	r3, [pc, #508]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c9e:	e005      	b.n	8004cac <HAL_RCC_OscConfig+0x88>
 8004ca0:	4b7c      	ldr	r3, [pc, #496]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ca6:	091b      	lsrs	r3, r3, #4
 8004ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d223      	bcs.n	8004cf8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fd87 	bl	80057c8 <RCC_SetFlashLatencyFromMSIRange>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e383      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cc4:	4b73      	ldr	r3, [pc, #460]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a72      	ldr	r2, [pc, #456]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004cca:	f043 0308 	orr.w	r3, r3, #8
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	4b70      	ldr	r3, [pc, #448]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	496d      	ldr	r1, [pc, #436]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ce2:	4b6c      	ldr	r3, [pc, #432]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	4968      	ldr	r1, [pc, #416]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	604b      	str	r3, [r1, #4]
 8004cf6:	e025      	b.n	8004d44 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cf8:	4b66      	ldr	r3, [pc, #408]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a65      	ldr	r2, [pc, #404]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004cfe:	f043 0308 	orr.w	r3, r3, #8
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	4b63      	ldr	r3, [pc, #396]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	4960      	ldr	r1, [pc, #384]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d16:	4b5f      	ldr	r3, [pc, #380]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	021b      	lsls	r3, r3, #8
 8004d24:	495b      	ldr	r1, [pc, #364]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d109      	bne.n	8004d44 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 fd47 	bl	80057c8 <RCC_SetFlashLatencyFromMSIRange>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e343      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d44:	f000 fc4a 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	4b52      	ldr	r3, [pc, #328]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	091b      	lsrs	r3, r3, #4
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	4950      	ldr	r1, [pc, #320]	; (8004e98 <HAL_RCC_OscConfig+0x274>)
 8004d56:	5ccb      	ldrb	r3, [r1, r3]
 8004d58:	f003 031f 	and.w	r3, r3, #31
 8004d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d60:	4a4e      	ldr	r2, [pc, #312]	; (8004e9c <HAL_RCC_OscConfig+0x278>)
 8004d62:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004d64:	4b4e      	ldr	r3, [pc, #312]	; (8004ea0 <HAL_RCC_OscConfig+0x27c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fd f8dd 	bl	8001f28 <HAL_InitTick>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d052      	beq.n	8004e1e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	e327      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d032      	beq.n	8004dea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d84:	4b43      	ldr	r3, [pc, #268]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a42      	ldr	r2, [pc, #264]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004d8a:	f043 0301 	orr.w	r3, r3, #1
 8004d8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d90:	f7fd fae4 	bl	800235c <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d98:	f7fd fae0 	bl	800235c <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e310      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004daa:	4b3a      	ldr	r3, [pc, #232]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0f0      	beq.n	8004d98 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004db6:	4b37      	ldr	r3, [pc, #220]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a36      	ldr	r2, [pc, #216]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dbc:	f043 0308 	orr.w	r3, r3, #8
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	4b34      	ldr	r3, [pc, #208]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	4931      	ldr	r1, [pc, #196]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dd4:	4b2f      	ldr	r3, [pc, #188]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	021b      	lsls	r3, r3, #8
 8004de2:	492c      	ldr	r1, [pc, #176]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	604b      	str	r3, [r1, #4]
 8004de8:	e01a      	b.n	8004e20 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004dea:	4b2a      	ldr	r3, [pc, #168]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a29      	ldr	r2, [pc, #164]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004df0:	f023 0301 	bic.w	r3, r3, #1
 8004df4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004df6:	f7fd fab1 	bl	800235c <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004dfc:	e008      	b.n	8004e10 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004dfe:	f7fd faad 	bl	800235c <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e2dd      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e10:	4b20      	ldr	r3, [pc, #128]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1f0      	bne.n	8004dfe <HAL_RCC_OscConfig+0x1da>
 8004e1c:	e000      	b.n	8004e20 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e1e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d074      	beq.n	8004f16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d005      	beq.n	8004e3e <HAL_RCC_OscConfig+0x21a>
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	2b0c      	cmp	r3, #12
 8004e36:	d10e      	bne.n	8004e56 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	d10b      	bne.n	8004e56 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e3e:	4b15      	ldr	r3, [pc, #84]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d064      	beq.n	8004f14 <HAL_RCC_OscConfig+0x2f0>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d160      	bne.n	8004f14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e2ba      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5e:	d106      	bne.n	8004e6e <HAL_RCC_OscConfig+0x24a>
 8004e60:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a0b      	ldr	r2, [pc, #44]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	e026      	b.n	8004ebc <HAL_RCC_OscConfig+0x298>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e76:	d115      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x280>
 8004e78:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a05      	ldr	r2, [pc, #20]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	4b03      	ldr	r3, [pc, #12]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a02      	ldr	r2, [pc, #8]	; (8004e94 <HAL_RCC_OscConfig+0x270>)
 8004e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	e014      	b.n	8004ebc <HAL_RCC_OscConfig+0x298>
 8004e92:	bf00      	nop
 8004e94:	40021000 	.word	0x40021000
 8004e98:	0800959c 	.word	0x0800959c
 8004e9c:	20000008 	.word	0x20000008
 8004ea0:	2000000c 	.word	0x2000000c
 8004ea4:	4ba0      	ldr	r3, [pc, #640]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a9f      	ldr	r2, [pc, #636]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	4b9d      	ldr	r3, [pc, #628]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a9c      	ldr	r2, [pc, #624]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d013      	beq.n	8004eec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec4:	f7fd fa4a 	bl	800235c <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ecc:	f7fd fa46 	bl	800235c <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b64      	cmp	r3, #100	; 0x64
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e276      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ede:	4b92      	ldr	r3, [pc, #584]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0f0      	beq.n	8004ecc <HAL_RCC_OscConfig+0x2a8>
 8004eea:	e014      	b.n	8004f16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eec:	f7fd fa36 	bl	800235c <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ef4:	f7fd fa32 	bl	800235c <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b64      	cmp	r3, #100	; 0x64
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e262      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f06:	4b88      	ldr	r3, [pc, #544]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x2d0>
 8004f12:	e000      	b.n	8004f16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d060      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d005      	beq.n	8004f34 <HAL_RCC_OscConfig+0x310>
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b0c      	cmp	r3, #12
 8004f2c:	d119      	bne.n	8004f62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d116      	bne.n	8004f62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f34:	4b7c      	ldr	r3, [pc, #496]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <HAL_RCC_OscConfig+0x328>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e23f      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f4c:	4b76      	ldr	r3, [pc, #472]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	061b      	lsls	r3, r3, #24
 8004f5a:	4973      	ldr	r1, [pc, #460]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f60:	e040      	b.n	8004fe4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d023      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f6a:	4b6f      	ldr	r3, [pc, #444]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a6e      	ldr	r2, [pc, #440]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f76:	f7fd f9f1 	bl	800235c <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f7e:	f7fd f9ed 	bl	800235c <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e21d      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f90:	4b65      	ldr	r3, [pc, #404]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0f0      	beq.n	8004f7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9c:	4b62      	ldr	r3, [pc, #392]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	061b      	lsls	r3, r3, #24
 8004faa:	495f      	ldr	r1, [pc, #380]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	604b      	str	r3, [r1, #4]
 8004fb0:	e018      	b.n	8004fe4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fb2:	4b5d      	ldr	r3, [pc, #372]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a5c      	ldr	r2, [pc, #368]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbe:	f7fd f9cd 	bl	800235c <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fc6:	f7fd f9c9 	bl	800235c <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e1f9      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fd8:	4b53      	ldr	r3, [pc, #332]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1f0      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d03c      	beq.n	800506a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01c      	beq.n	8005032 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ff8:	4b4b      	ldr	r3, [pc, #300]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8004ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ffe:	4a4a      	ldr	r2, [pc, #296]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005008:	f7fd f9a8 	bl	800235c <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005010:	f7fd f9a4 	bl	800235c <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e1d4      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005022:	4b41      	ldr	r3, [pc, #260]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8005024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0ef      	beq.n	8005010 <HAL_RCC_OscConfig+0x3ec>
 8005030:	e01b      	b.n	800506a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005032:	4b3d      	ldr	r3, [pc, #244]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8005034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005038:	4a3b      	ldr	r2, [pc, #236]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 800503a:	f023 0301 	bic.w	r3, r3, #1
 800503e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005042:	f7fd f98b 	bl	800235c <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800504a:	f7fd f987 	bl	800235c <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e1b7      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800505c:	4b32      	ldr	r3, [pc, #200]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 800505e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1ef      	bne.n	800504a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 80a6 	beq.w	80051c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005078:	2300      	movs	r3, #0
 800507a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800507c:	4b2a      	ldr	r3, [pc, #168]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 800507e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10d      	bne.n	80050a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005088:	4b27      	ldr	r3, [pc, #156]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 800508a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508c:	4a26      	ldr	r2, [pc, #152]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 800508e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005092:	6593      	str	r3, [r2, #88]	; 0x58
 8005094:	4b24      	ldr	r3, [pc, #144]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8005096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509c:	60bb      	str	r3, [r7, #8]
 800509e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a0:	2301      	movs	r3, #1
 80050a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050a4:	4b21      	ldr	r3, [pc, #132]	; (800512c <HAL_RCC_OscConfig+0x508>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d118      	bne.n	80050e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050b0:	4b1e      	ldr	r3, [pc, #120]	; (800512c <HAL_RCC_OscConfig+0x508>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1d      	ldr	r2, [pc, #116]	; (800512c <HAL_RCC_OscConfig+0x508>)
 80050b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050bc:	f7fd f94e 	bl	800235c <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c4:	f7fd f94a 	bl	800235c <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e17a      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050d6:	4b15      	ldr	r3, [pc, #84]	; (800512c <HAL_RCC_OscConfig+0x508>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0f0      	beq.n	80050c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d108      	bne.n	80050fc <HAL_RCC_OscConfig+0x4d8>
 80050ea:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 80050ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f0:	4a0d      	ldr	r2, [pc, #52]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050fa:	e029      	b.n	8005150 <HAL_RCC_OscConfig+0x52c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b05      	cmp	r3, #5
 8005102:	d115      	bne.n	8005130 <HAL_RCC_OscConfig+0x50c>
 8005104:	4b08      	ldr	r3, [pc, #32]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8005106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510a:	4a07      	ldr	r2, [pc, #28]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 800510c:	f043 0304 	orr.w	r3, r3, #4
 8005110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005114:	4b04      	ldr	r3, [pc, #16]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 8005116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511a:	4a03      	ldr	r2, [pc, #12]	; (8005128 <HAL_RCC_OscConfig+0x504>)
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005124:	e014      	b.n	8005150 <HAL_RCC_OscConfig+0x52c>
 8005126:	bf00      	nop
 8005128:	40021000 	.word	0x40021000
 800512c:	40007000 	.word	0x40007000
 8005130:	4b9c      	ldr	r3, [pc, #624]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 8005132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005136:	4a9b      	ldr	r2, [pc, #620]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 8005138:	f023 0301 	bic.w	r3, r3, #1
 800513c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005140:	4b98      	ldr	r3, [pc, #608]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005146:	4a97      	ldr	r2, [pc, #604]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 8005148:	f023 0304 	bic.w	r3, r3, #4
 800514c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d016      	beq.n	8005186 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005158:	f7fd f900 	bl	800235c <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800515e:	e00a      	b.n	8005176 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005160:	f7fd f8fc 	bl	800235c <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	f241 3288 	movw	r2, #5000	; 0x1388
 800516e:	4293      	cmp	r3, r2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e12a      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005176:	4b8b      	ldr	r3, [pc, #556]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 8005178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0ed      	beq.n	8005160 <HAL_RCC_OscConfig+0x53c>
 8005184:	e015      	b.n	80051b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005186:	f7fd f8e9 	bl	800235c <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800518c:	e00a      	b.n	80051a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800518e:	f7fd f8e5 	bl	800235c <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	f241 3288 	movw	r2, #5000	; 0x1388
 800519c:	4293      	cmp	r3, r2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e113      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051a4:	4b7f      	ldr	r3, [pc, #508]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1ed      	bne.n	800518e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051b2:	7ffb      	ldrb	r3, [r7, #31]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d105      	bne.n	80051c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b8:	4b7a      	ldr	r3, [pc, #488]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 80051ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051bc:	4a79      	ldr	r2, [pc, #484]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 80051be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 80fe 	beq.w	80053ca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	f040 80d0 	bne.w	8005378 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80051d8:	4b72      	ldr	r3, [pc, #456]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f003 0203 	and.w	r2, r3, #3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d130      	bne.n	800524e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	3b01      	subs	r3, #1
 80051f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d127      	bne.n	800524e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005208:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800520a:	429a      	cmp	r2, r3
 800520c:	d11f      	bne.n	800524e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005218:	2a07      	cmp	r2, #7
 800521a:	bf14      	ite	ne
 800521c:	2201      	movne	r2, #1
 800521e:	2200      	moveq	r2, #0
 8005220:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005222:	4293      	cmp	r3, r2
 8005224:	d113      	bne.n	800524e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005230:	085b      	lsrs	r3, r3, #1
 8005232:	3b01      	subs	r3, #1
 8005234:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005236:	429a      	cmp	r2, r3
 8005238:	d109      	bne.n	800524e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	085b      	lsrs	r3, r3, #1
 8005246:	3b01      	subs	r3, #1
 8005248:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800524a:	429a      	cmp	r2, r3
 800524c:	d06e      	beq.n	800532c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	2b0c      	cmp	r3, #12
 8005252:	d069      	beq.n	8005328 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005254:	4b53      	ldr	r3, [pc, #332]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d105      	bne.n	800526c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005260:	4b50      	ldr	r3, [pc, #320]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e0ad      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005270:	4b4c      	ldr	r3, [pc, #304]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a4b      	ldr	r2, [pc, #300]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 8005276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800527a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800527c:	f7fd f86e 	bl	800235c <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005284:	f7fd f86a 	bl	800235c <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e09a      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005296:	4b43      	ldr	r3, [pc, #268]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f0      	bne.n	8005284 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052a2:	4b40      	ldr	r3, [pc, #256]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	4b40      	ldr	r3, [pc, #256]	; (80053a8 <HAL_RCC_OscConfig+0x784>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80052b2:	3a01      	subs	r2, #1
 80052b4:	0112      	lsls	r2, r2, #4
 80052b6:	4311      	orrs	r1, r2
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052bc:	0212      	lsls	r2, r2, #8
 80052be:	4311      	orrs	r1, r2
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80052c4:	0852      	lsrs	r2, r2, #1
 80052c6:	3a01      	subs	r2, #1
 80052c8:	0552      	lsls	r2, r2, #21
 80052ca:	4311      	orrs	r1, r2
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80052d0:	0852      	lsrs	r2, r2, #1
 80052d2:	3a01      	subs	r2, #1
 80052d4:	0652      	lsls	r2, r2, #25
 80052d6:	4311      	orrs	r1, r2
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052dc:	0912      	lsrs	r2, r2, #4
 80052de:	0452      	lsls	r2, r2, #17
 80052e0:	430a      	orrs	r2, r1
 80052e2:	4930      	ldr	r1, [pc, #192]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80052e8:	4b2e      	ldr	r3, [pc, #184]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a2d      	ldr	r2, [pc, #180]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 80052ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052f4:	4b2b      	ldr	r3, [pc, #172]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4a2a      	ldr	r2, [pc, #168]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 80052fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005300:	f7fd f82c 	bl	800235c <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005308:	f7fd f828 	bl	800235c <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e058      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800531a:	4b22      	ldr	r3, [pc, #136]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0f0      	beq.n	8005308 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005326:	e050      	b.n	80053ca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e04f      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800532c:	4b1d      	ldr	r3, [pc, #116]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d148      	bne.n	80053ca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005338:	4b1a      	ldr	r3, [pc, #104]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a19      	ldr	r2, [pc, #100]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 800533e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005342:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005344:	4b17      	ldr	r3, [pc, #92]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	4a16      	ldr	r2, [pc, #88]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 800534a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800534e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005350:	f7fd f804 	bl	800235c <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005358:	f7fd f800 	bl	800235c <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e030      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800536a:	4b0e      	ldr	r3, [pc, #56]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0f0      	beq.n	8005358 <HAL_RCC_OscConfig+0x734>
 8005376:	e028      	b.n	80053ca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	2b0c      	cmp	r3, #12
 800537c:	d023      	beq.n	80053c6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800537e:	4b09      	ldr	r3, [pc, #36]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a08      	ldr	r2, [pc, #32]	; (80053a4 <HAL_RCC_OscConfig+0x780>)
 8005384:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538a:	f7fc ffe7 	bl	800235c <HAL_GetTick>
 800538e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005390:	e00c      	b.n	80053ac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005392:	f7fc ffe3 	bl	800235c <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d905      	bls.n	80053ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e013      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
 80053a4:	40021000 	.word	0x40021000
 80053a8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053ac:	4b09      	ldr	r3, [pc, #36]	; (80053d4 <HAL_RCC_OscConfig+0x7b0>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1ec      	bne.n	8005392 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80053b8:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <HAL_RCC_OscConfig+0x7b0>)
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	4905      	ldr	r1, [pc, #20]	; (80053d4 <HAL_RCC_OscConfig+0x7b0>)
 80053be:	4b06      	ldr	r3, [pc, #24]	; (80053d8 <HAL_RCC_OscConfig+0x7b4>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	60cb      	str	r3, [r1, #12]
 80053c4:	e001      	b.n	80053ca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3720      	adds	r7, #32
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40021000 	.word	0x40021000
 80053d8:	feeefffc 	.word	0xfeeefffc

080053dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e0e7      	b.n	80055c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053f0:	4b75      	ldr	r3, [pc, #468]	; (80055c8 <HAL_RCC_ClockConfig+0x1ec>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d910      	bls.n	8005420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053fe:	4b72      	ldr	r3, [pc, #456]	; (80055c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f023 0207 	bic.w	r2, r3, #7
 8005406:	4970      	ldr	r1, [pc, #448]	; (80055c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	4313      	orrs	r3, r2
 800540c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800540e:	4b6e      	ldr	r3, [pc, #440]	; (80055c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d001      	beq.n	8005420 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e0cf      	b.n	80055c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d010      	beq.n	800544e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	4b66      	ldr	r3, [pc, #408]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005438:	429a      	cmp	r2, r3
 800543a:	d908      	bls.n	800544e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800543c:	4b63      	ldr	r3, [pc, #396]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	4960      	ldr	r1, [pc, #384]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 800544a:	4313      	orrs	r3, r2
 800544c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d04c      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2b03      	cmp	r3, #3
 8005460:	d107      	bne.n	8005472 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005462:	4b5a      	ldr	r3, [pc, #360]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d121      	bne.n	80054b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e0a6      	b.n	80055c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d107      	bne.n	800548a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800547a:	4b54      	ldr	r3, [pc, #336]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d115      	bne.n	80054b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e09a      	b.n	80055c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d107      	bne.n	80054a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005492:	4b4e      	ldr	r3, [pc, #312]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d109      	bne.n	80054b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e08e      	b.n	80055c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054a2:	4b4a      	ldr	r3, [pc, #296]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e086      	b.n	80055c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054b2:	4b46      	ldr	r3, [pc, #280]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f023 0203 	bic.w	r2, r3, #3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	4943      	ldr	r1, [pc, #268]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c4:	f7fc ff4a 	bl	800235c <HAL_GetTick>
 80054c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ca:	e00a      	b.n	80054e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054cc:	f7fc ff46 	bl	800235c <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054da:	4293      	cmp	r3, r2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e06e      	b.n	80055c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e2:	4b3a      	ldr	r3, [pc, #232]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 020c 	and.w	r2, r3, #12
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d1eb      	bne.n	80054cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d010      	beq.n	8005522 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	4b31      	ldr	r3, [pc, #196]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800550c:	429a      	cmp	r2, r3
 800550e:	d208      	bcs.n	8005522 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005510:	4b2e      	ldr	r3, [pc, #184]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	492b      	ldr	r1, [pc, #172]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 800551e:	4313      	orrs	r3, r2
 8005520:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005522:	4b29      	ldr	r3, [pc, #164]	; (80055c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d210      	bcs.n	8005552 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005530:	4b25      	ldr	r3, [pc, #148]	; (80055c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f023 0207 	bic.w	r2, r3, #7
 8005538:	4923      	ldr	r1, [pc, #140]	; (80055c8 <HAL_RCC_ClockConfig+0x1ec>)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	4313      	orrs	r3, r2
 800553e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005540:	4b21      	ldr	r3, [pc, #132]	; (80055c8 <HAL_RCC_ClockConfig+0x1ec>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	429a      	cmp	r2, r3
 800554c:	d001      	beq.n	8005552 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e036      	b.n	80055c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b00      	cmp	r3, #0
 800555c:	d008      	beq.n	8005570 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800555e:	4b1b      	ldr	r3, [pc, #108]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	4918      	ldr	r1, [pc, #96]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 800556c:	4313      	orrs	r3, r2
 800556e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	2b00      	cmp	r3, #0
 800557a:	d009      	beq.n	8005590 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800557c:	4b13      	ldr	r3, [pc, #76]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	4910      	ldr	r1, [pc, #64]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 800558c:	4313      	orrs	r3, r2
 800558e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005590:	f000 f824 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 8005594:	4602      	mov	r2, r0
 8005596:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <HAL_RCC_ClockConfig+0x1f0>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	091b      	lsrs	r3, r3, #4
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	490b      	ldr	r1, [pc, #44]	; (80055d0 <HAL_RCC_ClockConfig+0x1f4>)
 80055a2:	5ccb      	ldrb	r3, [r1, r3]
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	fa22 f303 	lsr.w	r3, r2, r3
 80055ac:	4a09      	ldr	r2, [pc, #36]	; (80055d4 <HAL_RCC_ClockConfig+0x1f8>)
 80055ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80055b0:	4b09      	ldr	r3, [pc, #36]	; (80055d8 <HAL_RCC_ClockConfig+0x1fc>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fc fcb7 	bl	8001f28 <HAL_InitTick>
 80055ba:	4603      	mov	r3, r0
 80055bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80055be:	7afb      	ldrb	r3, [r7, #11]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40022000 	.word	0x40022000
 80055cc:	40021000 	.word	0x40021000
 80055d0:	0800959c 	.word	0x0800959c
 80055d4:	20000008 	.word	0x20000008
 80055d8:	2000000c 	.word	0x2000000c

080055dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	b089      	sub	sp, #36	; 0x24
 80055e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	61fb      	str	r3, [r7, #28]
 80055e6:	2300      	movs	r3, #0
 80055e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ea:	4b3e      	ldr	r3, [pc, #248]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 030c 	and.w	r3, r3, #12
 80055f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055f4:	4b3b      	ldr	r3, [pc, #236]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0303 	and.w	r3, r3, #3
 80055fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d005      	beq.n	8005610 <HAL_RCC_GetSysClockFreq+0x34>
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	2b0c      	cmp	r3, #12
 8005608:	d121      	bne.n	800564e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d11e      	bne.n	800564e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005610:	4b34      	ldr	r3, [pc, #208]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0308 	and.w	r3, r3, #8
 8005618:	2b00      	cmp	r3, #0
 800561a:	d107      	bne.n	800562c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800561c:	4b31      	ldr	r3, [pc, #196]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800561e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005622:	0a1b      	lsrs	r3, r3, #8
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	61fb      	str	r3, [r7, #28]
 800562a:	e005      	b.n	8005638 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800562c:	4b2d      	ldr	r3, [pc, #180]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	091b      	lsrs	r3, r3, #4
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005638:	4a2b      	ldr	r2, [pc, #172]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005640:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10d      	bne.n	8005664 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800564c:	e00a      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	2b04      	cmp	r3, #4
 8005652:	d102      	bne.n	800565a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005654:	4b25      	ldr	r3, [pc, #148]	; (80056ec <HAL_RCC_GetSysClockFreq+0x110>)
 8005656:	61bb      	str	r3, [r7, #24]
 8005658:	e004      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b08      	cmp	r3, #8
 800565e:	d101      	bne.n	8005664 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005660:	4b23      	ldr	r3, [pc, #140]	; (80056f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005662:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b0c      	cmp	r3, #12
 8005668:	d134      	bne.n	80056d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800566a:	4b1e      	ldr	r3, [pc, #120]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d003      	beq.n	8005682 <HAL_RCC_GetSysClockFreq+0xa6>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b03      	cmp	r3, #3
 800567e:	d003      	beq.n	8005688 <HAL_RCC_GetSysClockFreq+0xac>
 8005680:	e005      	b.n	800568e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005682:	4b1a      	ldr	r3, [pc, #104]	; (80056ec <HAL_RCC_GetSysClockFreq+0x110>)
 8005684:	617b      	str	r3, [r7, #20]
      break;
 8005686:	e005      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005688:	4b19      	ldr	r3, [pc, #100]	; (80056f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800568a:	617b      	str	r3, [r7, #20]
      break;
 800568c:	e002      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	617b      	str	r3, [r7, #20]
      break;
 8005692:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005694:	4b13      	ldr	r3, [pc, #76]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	091b      	lsrs	r3, r3, #4
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	3301      	adds	r3, #1
 80056a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80056a2:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	0a1b      	lsrs	r3, r3, #8
 80056a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	fb03 f202 	mul.w	r2, r3, r2
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056ba:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	0e5b      	lsrs	r3, r3, #25
 80056c0:	f003 0303 	and.w	r3, r3, #3
 80056c4:	3301      	adds	r3, #1
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80056d4:	69bb      	ldr	r3, [r7, #24]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3724      	adds	r7, #36	; 0x24
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40021000 	.word	0x40021000
 80056e8:	080095b4 	.word	0x080095b4
 80056ec:	00f42400 	.word	0x00f42400
 80056f0:	007a1200 	.word	0x007a1200

080056f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f8:	4b03      	ldr	r3, [pc, #12]	; (8005708 <HAL_RCC_GetHCLKFreq+0x14>)
 80056fa:	681b      	ldr	r3, [r3, #0]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	20000008 	.word	0x20000008

0800570c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005710:	f7ff fff0 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 8005714:	4602      	mov	r2, r0
 8005716:	4b06      	ldr	r3, [pc, #24]	; (8005730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	0a1b      	lsrs	r3, r3, #8
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	4904      	ldr	r1, [pc, #16]	; (8005734 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005722:	5ccb      	ldrb	r3, [r1, r3]
 8005724:	f003 031f 	and.w	r3, r3, #31
 8005728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800572c:	4618      	mov	r0, r3
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40021000 	.word	0x40021000
 8005734:	080095ac 	.word	0x080095ac

08005738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800573c:	f7ff ffda 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 8005740:	4602      	mov	r2, r0
 8005742:	4b06      	ldr	r3, [pc, #24]	; (800575c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	0adb      	lsrs	r3, r3, #11
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	4904      	ldr	r1, [pc, #16]	; (8005760 <HAL_RCC_GetPCLK2Freq+0x28>)
 800574e:	5ccb      	ldrb	r3, [r1, r3]
 8005750:	f003 031f 	and.w	r3, r3, #31
 8005754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005758:	4618      	mov	r0, r3
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40021000 	.word	0x40021000
 8005760:	080095ac 	.word	0x080095ac

08005764 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	220f      	movs	r2, #15
 8005772:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005774:	4b12      	ldr	r3, [pc, #72]	; (80057c0 <HAL_RCC_GetClockConfig+0x5c>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f003 0203 	and.w	r2, r3, #3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005780:	4b0f      	ldr	r3, [pc, #60]	; (80057c0 <HAL_RCC_GetClockConfig+0x5c>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800578c:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <HAL_RCC_GetClockConfig+0x5c>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005798:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <HAL_RCC_GetClockConfig+0x5c>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	08db      	lsrs	r3, r3, #3
 800579e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80057a6:	4b07      	ldr	r3, [pc, #28]	; (80057c4 <HAL_RCC_GetClockConfig+0x60>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0207 	and.w	r2, r3, #7
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	601a      	str	r2, [r3, #0]
}
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40021000 	.word	0x40021000
 80057c4:	40022000 	.word	0x40022000

080057c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80057d0:	2300      	movs	r3, #0
 80057d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80057d4:	4b2a      	ldr	r3, [pc, #168]	; (8005880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80057e0:	f7ff f9bc 	bl	8004b5c <HAL_PWREx_GetVoltageRange>
 80057e4:	6178      	str	r0, [r7, #20]
 80057e6:	e014      	b.n	8005812 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80057e8:	4b25      	ldr	r3, [pc, #148]	; (8005880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ec:	4a24      	ldr	r2, [pc, #144]	; (8005880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f2:	6593      	str	r3, [r2, #88]	; 0x58
 80057f4:	4b22      	ldr	r3, [pc, #136]	; (8005880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005800:	f7ff f9ac 	bl	8004b5c <HAL_PWREx_GetVoltageRange>
 8005804:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005806:	4b1e      	ldr	r3, [pc, #120]	; (8005880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580a:	4a1d      	ldr	r2, [pc, #116]	; (8005880 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800580c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005810:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005818:	d10b      	bne.n	8005832 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b80      	cmp	r3, #128	; 0x80
 800581e:	d919      	bls.n	8005854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2ba0      	cmp	r3, #160	; 0xa0
 8005824:	d902      	bls.n	800582c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005826:	2302      	movs	r3, #2
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	e013      	b.n	8005854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800582c:	2301      	movs	r3, #1
 800582e:	613b      	str	r3, [r7, #16]
 8005830:	e010      	b.n	8005854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b80      	cmp	r3, #128	; 0x80
 8005836:	d902      	bls.n	800583e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005838:	2303      	movs	r3, #3
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	e00a      	b.n	8005854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b80      	cmp	r3, #128	; 0x80
 8005842:	d102      	bne.n	800584a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005844:	2302      	movs	r3, #2
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	e004      	b.n	8005854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b70      	cmp	r3, #112	; 0x70
 800584e:	d101      	bne.n	8005854 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005850:	2301      	movs	r3, #1
 8005852:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005854:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f023 0207 	bic.w	r2, r3, #7
 800585c:	4909      	ldr	r1, [pc, #36]	; (8005884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005864:	4b07      	ldr	r3, [pc, #28]	; (8005884 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	429a      	cmp	r2, r3
 8005870:	d001      	beq.n	8005876 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40021000 	.word	0x40021000
 8005884:	40022000 	.word	0x40022000

08005888 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005890:	2300      	movs	r3, #0
 8005892:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005894:	2300      	movs	r3, #0
 8005896:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d041      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80058ac:	d02a      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80058ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80058b2:	d824      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058b8:	d008      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80058ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058be:	d81e      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80058c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058c8:	d010      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058ca:	e018      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058cc:	4b86      	ldr	r3, [pc, #536]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	4a85      	ldr	r2, [pc, #532]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058d8:	e015      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3304      	adds	r3, #4
 80058de:	2100      	movs	r1, #0
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fabb 	bl	8005e5c <RCCEx_PLLSAI1_Config>
 80058e6:	4603      	mov	r3, r0
 80058e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058ea:	e00c      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3320      	adds	r3, #32
 80058f0:	2100      	movs	r1, #0
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fba6 	bl	8006044 <RCCEx_PLLSAI2_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058fc:	e003      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	74fb      	strb	r3, [r7, #19]
      break;
 8005902:	e000      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005906:	7cfb      	ldrb	r3, [r7, #19]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10b      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800590c:	4b76      	ldr	r3, [pc, #472]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800590e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005912:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800591a:	4973      	ldr	r1, [pc, #460]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800591c:	4313      	orrs	r3, r2
 800591e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005922:	e001      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005924:	7cfb      	ldrb	r3, [r7, #19]
 8005926:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d041      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005938:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800593c:	d02a      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800593e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005942:	d824      	bhi.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005944:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005948:	d008      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800594a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800594e:	d81e      	bhi.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005958:	d010      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800595a:	e018      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800595c:	4b62      	ldr	r3, [pc, #392]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	4a61      	ldr	r2, [pc, #388]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005966:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005968:	e015      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3304      	adds	r3, #4
 800596e:	2100      	movs	r1, #0
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fa73 	bl	8005e5c <RCCEx_PLLSAI1_Config>
 8005976:	4603      	mov	r3, r0
 8005978:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800597a:	e00c      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3320      	adds	r3, #32
 8005980:	2100      	movs	r1, #0
 8005982:	4618      	mov	r0, r3
 8005984:	f000 fb5e 	bl	8006044 <RCCEx_PLLSAI2_Config>
 8005988:	4603      	mov	r3, r0
 800598a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800598c:	e003      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	74fb      	strb	r3, [r7, #19]
      break;
 8005992:	e000      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005996:	7cfb      	ldrb	r3, [r7, #19]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10b      	bne.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800599c:	4b52      	ldr	r3, [pc, #328]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059aa:	494f      	ldr	r1, [pc, #316]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80059b2:	e001      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b4:	7cfb      	ldrb	r3, [r7, #19]
 80059b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 80a0 	beq.w	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059c6:	2300      	movs	r3, #0
 80059c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059ca:	4b47      	ldr	r3, [pc, #284]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80059d6:	2301      	movs	r3, #1
 80059d8:	e000      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80059da:	2300      	movs	r3, #0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00d      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059e0:	4b41      	ldr	r3, [pc, #260]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e4:	4a40      	ldr	r2, [pc, #256]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ea:	6593      	str	r3, [r2, #88]	; 0x58
 80059ec:	4b3e      	ldr	r3, [pc, #248]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f4:	60bb      	str	r3, [r7, #8]
 80059f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059f8:	2301      	movs	r3, #1
 80059fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059fc:	4b3b      	ldr	r3, [pc, #236]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a3a      	ldr	r2, [pc, #232]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a08:	f7fc fca8 	bl	800235c <HAL_GetTick>
 8005a0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a0e:	e009      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a10:	f7fc fca4 	bl	800235c <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d902      	bls.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	74fb      	strb	r3, [r7, #19]
        break;
 8005a22:	e005      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a24:	4b31      	ldr	r3, [pc, #196]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0ef      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005a30:	7cfb      	ldrb	r3, [r7, #19]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d15c      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a36:	4b2c      	ldr	r3, [pc, #176]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d01f      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d019      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a54:	4b24      	ldr	r3, [pc, #144]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a60:	4b21      	ldr	r3, [pc, #132]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a66:	4a20      	ldr	r2, [pc, #128]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a70:	4b1d      	ldr	r3, [pc, #116]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a76:	4a1c      	ldr	r2, [pc, #112]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a80:	4a19      	ldr	r2, [pc, #100]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d016      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a92:	f7fc fc63 	bl	800235c <HAL_GetTick>
 8005a96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a98:	e00b      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a9a:	f7fc fc5f 	bl	800235c <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d902      	bls.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	74fb      	strb	r3, [r7, #19]
            break;
 8005ab0:	e006      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0ec      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005ac0:	7cfb      	ldrb	r3, [r7, #19]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10c      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ac6:	4b08      	ldr	r3, [pc, #32]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005acc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ad6:	4904      	ldr	r1, [pc, #16]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ade:	e009      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ae0:	7cfb      	ldrb	r3, [r7, #19]
 8005ae2:	74bb      	strb	r3, [r7, #18]
 8005ae4:	e006      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005ae6:	bf00      	nop
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af0:	7cfb      	ldrb	r3, [r7, #19]
 8005af2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005af4:	7c7b      	ldrb	r3, [r7, #17]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d105      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005afa:	4b9e      	ldr	r3, [pc, #632]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afe:	4a9d      	ldr	r2, [pc, #628]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b12:	4b98      	ldr	r3, [pc, #608]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b18:	f023 0203 	bic.w	r2, r3, #3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	4994      	ldr	r1, [pc, #592]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00a      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b34:	4b8f      	ldr	r3, [pc, #572]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3a:	f023 020c 	bic.w	r2, r3, #12
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b42:	498c      	ldr	r1, [pc, #560]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0304 	and.w	r3, r3, #4
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b56:	4b87      	ldr	r3, [pc, #540]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	4983      	ldr	r1, [pc, #524]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b78:	4b7e      	ldr	r3, [pc, #504]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b86:	497b      	ldr	r1, [pc, #492]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0310 	and.w	r3, r3, #16
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b9a:	4b76      	ldr	r3, [pc, #472]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ba8:	4972      	ldr	r1, [pc, #456]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bbc:	4b6d      	ldr	r3, [pc, #436]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bca:	496a      	ldr	r1, [pc, #424]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bde:	4b65      	ldr	r3, [pc, #404]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bec:	4961      	ldr	r1, [pc, #388]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c00:	4b5c      	ldr	r3, [pc, #368]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0e:	4959      	ldr	r1, [pc, #356]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c22:	4b54      	ldr	r3, [pc, #336]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c30:	4950      	ldr	r1, [pc, #320]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00a      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c44:	4b4b      	ldr	r3, [pc, #300]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c52:	4948      	ldr	r1, [pc, #288]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c66:	4b43      	ldr	r3, [pc, #268]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c74:	493f      	ldr	r1, [pc, #252]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d028      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c88:	4b3a      	ldr	r3, [pc, #232]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c96:	4937      	ldr	r1, [pc, #220]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ca2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ca6:	d106      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ca8:	4b32      	ldr	r3, [pc, #200]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	4a31      	ldr	r2, [pc, #196]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cb2:	60d3      	str	r3, [r2, #12]
 8005cb4:	e011      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cbe:	d10c      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 f8c8 	bl	8005e5c <RCCEx_PLLSAI1_Config>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005cd0:	7cfb      	ldrb	r3, [r7, #19]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005cd6:	7cfb      	ldrb	r3, [r7, #19]
 8005cd8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d028      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ce6:	4b23      	ldr	r3, [pc, #140]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf4:	491f      	ldr	r1, [pc, #124]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d04:	d106      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d06:	4b1b      	ldr	r3, [pc, #108]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	4a1a      	ldr	r2, [pc, #104]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d10:	60d3      	str	r3, [r2, #12]
 8005d12:	e011      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d1c:	d10c      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3304      	adds	r3, #4
 8005d22:	2101      	movs	r1, #1
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 f899 	bl	8005e5c <RCCEx_PLLSAI1_Config>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d2e:	7cfb      	ldrb	r3, [r7, #19]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005d34:	7cfb      	ldrb	r3, [r7, #19]
 8005d36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d02b      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d44:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d52:	4908      	ldr	r1, [pc, #32]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d62:	d109      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d64:	4b03      	ldr	r3, [pc, #12]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	4a02      	ldr	r2, [pc, #8]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d6e:	60d3      	str	r3, [r2, #12]
 8005d70:	e014      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005d72:	bf00      	nop
 8005d74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d80:	d10c      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	3304      	adds	r3, #4
 8005d86:	2101      	movs	r1, #1
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 f867 	bl	8005e5c <RCCEx_PLLSAI1_Config>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d92:	7cfb      	ldrb	r3, [r7, #19]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005d98:	7cfb      	ldrb	r3, [r7, #19]
 8005d9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d02f      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005da8:	4b2b      	ldr	r3, [pc, #172]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005db6:	4928      	ldr	r1, [pc, #160]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dc6:	d10d      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	2102      	movs	r1, #2
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 f844 	bl	8005e5c <RCCEx_PLLSAI1_Config>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dd8:	7cfb      	ldrb	r3, [r7, #19]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d014      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005dde:	7cfb      	ldrb	r3, [r7, #19]
 8005de0:	74bb      	strb	r3, [r7, #18]
 8005de2:	e011      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dec:	d10c      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3320      	adds	r3, #32
 8005df2:	2102      	movs	r1, #2
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 f925 	bl	8006044 <RCCEx_PLLSAI2_Config>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dfe:	7cfb      	ldrb	r3, [r7, #19]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005e04:	7cfb      	ldrb	r3, [r7, #19]
 8005e06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e14:	4b10      	ldr	r3, [pc, #64]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e22:	490d      	ldr	r1, [pc, #52]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00b      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e36:	4b08      	ldr	r3, [pc, #32]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e46:	4904      	ldr	r1, [pc, #16]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005e4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	40021000 	.word	0x40021000

08005e5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e6a:	4b75      	ldr	r3, [pc, #468]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f003 0303 	and.w	r3, r3, #3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d018      	beq.n	8005ea8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e76:	4b72      	ldr	r3, [pc, #456]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f003 0203 	and.w	r2, r3, #3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d10d      	bne.n	8005ea2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
       ||
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d009      	beq.n	8005ea2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005e8e:	4b6c      	ldr	r3, [pc, #432]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	091b      	lsrs	r3, r3, #4
 8005e94:	f003 0307 	and.w	r3, r3, #7
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
       ||
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d047      	beq.n	8005f32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	73fb      	strb	r3, [r7, #15]
 8005ea6:	e044      	b.n	8005f32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d018      	beq.n	8005ee2 <RCCEx_PLLSAI1_Config+0x86>
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d825      	bhi.n	8005f00 <RCCEx_PLLSAI1_Config+0xa4>
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d002      	beq.n	8005ebe <RCCEx_PLLSAI1_Config+0x62>
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d009      	beq.n	8005ed0 <RCCEx_PLLSAI1_Config+0x74>
 8005ebc:	e020      	b.n	8005f00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ebe:	4b60      	ldr	r3, [pc, #384]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d11d      	bne.n	8005f06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ece:	e01a      	b.n	8005f06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ed0:	4b5b      	ldr	r3, [pc, #364]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d116      	bne.n	8005f0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ee0:	e013      	b.n	8005f0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ee2:	4b57      	ldr	r3, [pc, #348]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10f      	bne.n	8005f0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005eee:	4b54      	ldr	r3, [pc, #336]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d109      	bne.n	8005f0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005efe:	e006      	b.n	8005f0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	73fb      	strb	r3, [r7, #15]
      break;
 8005f04:	e004      	b.n	8005f10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f06:	bf00      	nop
 8005f08:	e002      	b.n	8005f10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f0a:	bf00      	nop
 8005f0c:	e000      	b.n	8005f10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10d      	bne.n	8005f32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f16:	4b4a      	ldr	r3, [pc, #296]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6819      	ldr	r1, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	430b      	orrs	r3, r1
 8005f2c:	4944      	ldr	r1, [pc, #272]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d17d      	bne.n	8006034 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f38:	4b41      	ldr	r3, [pc, #260]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a40      	ldr	r2, [pc, #256]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f44:	f7fc fa0a 	bl	800235c <HAL_GetTick>
 8005f48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f4a:	e009      	b.n	8005f60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f4c:	f7fc fa06 	bl	800235c <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d902      	bls.n	8005f60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	73fb      	strb	r3, [r7, #15]
        break;
 8005f5e:	e005      	b.n	8005f6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f60:	4b37      	ldr	r3, [pc, #220]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1ef      	bne.n	8005f4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d160      	bne.n	8006034 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d111      	bne.n	8005f9c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f78:	4b31      	ldr	r3, [pc, #196]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	6892      	ldr	r2, [r2, #8]
 8005f88:	0211      	lsls	r1, r2, #8
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	68d2      	ldr	r2, [r2, #12]
 8005f8e:	0912      	lsrs	r2, r2, #4
 8005f90:	0452      	lsls	r2, r2, #17
 8005f92:	430a      	orrs	r2, r1
 8005f94:	492a      	ldr	r1, [pc, #168]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	610b      	str	r3, [r1, #16]
 8005f9a:	e027      	b.n	8005fec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d112      	bne.n	8005fc8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fa2:	4b27      	ldr	r3, [pc, #156]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005faa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	6892      	ldr	r2, [r2, #8]
 8005fb2:	0211      	lsls	r1, r2, #8
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6912      	ldr	r2, [r2, #16]
 8005fb8:	0852      	lsrs	r2, r2, #1
 8005fba:	3a01      	subs	r2, #1
 8005fbc:	0552      	lsls	r2, r2, #21
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	491f      	ldr	r1, [pc, #124]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	610b      	str	r3, [r1, #16]
 8005fc6:	e011      	b.n	8005fec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fc8:	4b1d      	ldr	r3, [pc, #116]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005fd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6892      	ldr	r2, [r2, #8]
 8005fd8:	0211      	lsls	r1, r2, #8
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	6952      	ldr	r2, [r2, #20]
 8005fde:	0852      	lsrs	r2, r2, #1
 8005fe0:	3a01      	subs	r2, #1
 8005fe2:	0652      	lsls	r2, r2, #25
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	4916      	ldr	r1, [pc, #88]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005fec:	4b14      	ldr	r3, [pc, #80]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a13      	ldr	r2, [pc, #76]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ff2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ff6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff8:	f7fc f9b0 	bl	800235c <HAL_GetTick>
 8005ffc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ffe:	e009      	b.n	8006014 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006000:	f7fc f9ac 	bl	800235c <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d902      	bls.n	8006014 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	73fb      	strb	r3, [r7, #15]
          break;
 8006012:	e005      	b.n	8006020 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006014:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0ef      	beq.n	8006000 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006020:	7bfb      	ldrb	r3, [r7, #15]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006026:	4b06      	ldr	r3, [pc, #24]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	4904      	ldr	r1, [pc, #16]	; (8006040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006030:	4313      	orrs	r3, r2
 8006032:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006034:	7bfb      	ldrb	r3, [r7, #15]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	40021000 	.word	0x40021000

08006044 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006052:	4b6a      	ldr	r3, [pc, #424]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d018      	beq.n	8006090 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800605e:	4b67      	ldr	r3, [pc, #412]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f003 0203 	and.w	r2, r3, #3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	429a      	cmp	r2, r3
 800606c:	d10d      	bne.n	800608a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
       ||
 8006072:	2b00      	cmp	r3, #0
 8006074:	d009      	beq.n	800608a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006076:	4b61      	ldr	r3, [pc, #388]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	091b      	lsrs	r3, r3, #4
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
       ||
 8006086:	429a      	cmp	r2, r3
 8006088:	d047      	beq.n	800611a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	73fb      	strb	r3, [r7, #15]
 800608e:	e044      	b.n	800611a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b03      	cmp	r3, #3
 8006096:	d018      	beq.n	80060ca <RCCEx_PLLSAI2_Config+0x86>
 8006098:	2b03      	cmp	r3, #3
 800609a:	d825      	bhi.n	80060e8 <RCCEx_PLLSAI2_Config+0xa4>
 800609c:	2b01      	cmp	r3, #1
 800609e:	d002      	beq.n	80060a6 <RCCEx_PLLSAI2_Config+0x62>
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d009      	beq.n	80060b8 <RCCEx_PLLSAI2_Config+0x74>
 80060a4:	e020      	b.n	80060e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060a6:	4b55      	ldr	r3, [pc, #340]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d11d      	bne.n	80060ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060b6:	e01a      	b.n	80060ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060b8:	4b50      	ldr	r3, [pc, #320]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d116      	bne.n	80060f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060c8:	e013      	b.n	80060f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060ca:	4b4c      	ldr	r3, [pc, #304]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10f      	bne.n	80060f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060d6:	4b49      	ldr	r3, [pc, #292]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d109      	bne.n	80060f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060e6:	e006      	b.n	80060f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	73fb      	strb	r3, [r7, #15]
      break;
 80060ec:	e004      	b.n	80060f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060ee:	bf00      	nop
 80060f0:	e002      	b.n	80060f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060f2:	bf00      	nop
 80060f4:	e000      	b.n	80060f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10d      	bne.n	800611a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80060fe:	4b3f      	ldr	r3, [pc, #252]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6819      	ldr	r1, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	3b01      	subs	r3, #1
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	430b      	orrs	r3, r1
 8006114:	4939      	ldr	r1, [pc, #228]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006116:	4313      	orrs	r3, r2
 8006118:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800611a:	7bfb      	ldrb	r3, [r7, #15]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d167      	bne.n	80061f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006120:	4b36      	ldr	r3, [pc, #216]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a35      	ldr	r2, [pc, #212]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800612a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800612c:	f7fc f916 	bl	800235c <HAL_GetTick>
 8006130:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006132:	e009      	b.n	8006148 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006134:	f7fc f912 	bl	800235c <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d902      	bls.n	8006148 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	73fb      	strb	r3, [r7, #15]
        break;
 8006146:	e005      	b.n	8006154 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006148:	4b2c      	ldr	r3, [pc, #176]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1ef      	bne.n	8006134 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d14a      	bne.n	80061f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d111      	bne.n	8006184 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006160:	4b26      	ldr	r3, [pc, #152]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	6892      	ldr	r2, [r2, #8]
 8006170:	0211      	lsls	r1, r2, #8
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	68d2      	ldr	r2, [r2, #12]
 8006176:	0912      	lsrs	r2, r2, #4
 8006178:	0452      	lsls	r2, r2, #17
 800617a:	430a      	orrs	r2, r1
 800617c:	491f      	ldr	r1, [pc, #124]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800617e:	4313      	orrs	r3, r2
 8006180:	614b      	str	r3, [r1, #20]
 8006182:	e011      	b.n	80061a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006184:	4b1d      	ldr	r3, [pc, #116]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800618c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	6892      	ldr	r2, [r2, #8]
 8006194:	0211      	lsls	r1, r2, #8
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6912      	ldr	r2, [r2, #16]
 800619a:	0852      	lsrs	r2, r2, #1
 800619c:	3a01      	subs	r2, #1
 800619e:	0652      	lsls	r2, r2, #25
 80061a0:	430a      	orrs	r2, r1
 80061a2:	4916      	ldr	r1, [pc, #88]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80061a8:	4b14      	ldr	r3, [pc, #80]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a13      	ldr	r2, [pc, #76]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80061ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b4:	f7fc f8d2 	bl	800235c <HAL_GetTick>
 80061b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061ba:	e009      	b.n	80061d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061bc:	f7fc f8ce 	bl	800235c <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d902      	bls.n	80061d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	73fb      	strb	r3, [r7, #15]
          break;
 80061ce:	e005      	b.n	80061dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061d0:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0ef      	beq.n	80061bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80061e2:	4b06      	ldr	r3, [pc, #24]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80061e4:	695a      	ldr	r2, [r3, #20]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	4904      	ldr	r1, [pc, #16]	; (80061fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	40021000 	.word	0x40021000

08006200 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e049      	b.n	80062a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d106      	bne.n	800622c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7fb fd84 	bl	8001d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2202      	movs	r2, #2
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3304      	adds	r3, #4
 800623c:	4619      	mov	r1, r3
 800623e:	4610      	mov	r0, r2
 8006240:	f000 fb2a 	bl	8006898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d001      	beq.n	80062c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e047      	b.n	8006358 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a23      	ldr	r2, [pc, #140]	; (8006364 <HAL_TIM_Base_Start+0xb4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d01d      	beq.n	8006316 <HAL_TIM_Base_Start+0x66>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e2:	d018      	beq.n	8006316 <HAL_TIM_Base_Start+0x66>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a1f      	ldr	r2, [pc, #124]	; (8006368 <HAL_TIM_Base_Start+0xb8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d013      	beq.n	8006316 <HAL_TIM_Base_Start+0x66>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a1e      	ldr	r2, [pc, #120]	; (800636c <HAL_TIM_Base_Start+0xbc>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00e      	beq.n	8006316 <HAL_TIM_Base_Start+0x66>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a1c      	ldr	r2, [pc, #112]	; (8006370 <HAL_TIM_Base_Start+0xc0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d009      	beq.n	8006316 <HAL_TIM_Base_Start+0x66>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a1b      	ldr	r2, [pc, #108]	; (8006374 <HAL_TIM_Base_Start+0xc4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d004      	beq.n	8006316 <HAL_TIM_Base_Start+0x66>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a19      	ldr	r2, [pc, #100]	; (8006378 <HAL_TIM_Base_Start+0xc8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d115      	bne.n	8006342 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	4b17      	ldr	r3, [pc, #92]	; (800637c <HAL_TIM_Base_Start+0xcc>)
 800631e:	4013      	ands	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b06      	cmp	r3, #6
 8006326:	d015      	beq.n	8006354 <HAL_TIM_Base_Start+0xa4>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800632e:	d011      	beq.n	8006354 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f042 0201 	orr.w	r2, r2, #1
 800633e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006340:	e008      	b.n	8006354 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f042 0201 	orr.w	r2, r2, #1
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	e000      	b.n	8006356 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006354:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	40012c00 	.word	0x40012c00
 8006368:	40000400 	.word	0x40000400
 800636c:	40000800 	.word	0x40000800
 8006370:	40000c00 	.word	0x40000c00
 8006374:	40013400 	.word	0x40013400
 8006378:	40014000 	.word	0x40014000
 800637c:	00010007 	.word	0x00010007

08006380 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6a1a      	ldr	r2, [r3, #32]
 800638e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006392:	4013      	ands	r3, r2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10f      	bne.n	80063b8 <HAL_TIM_Base_Stop+0x38>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6a1a      	ldr	r2, [r3, #32]
 800639e:	f240 4344 	movw	r3, #1092	; 0x444
 80063a2:	4013      	ands	r3, r2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d107      	bne.n	80063b8 <HAL_TIM_Base_Stop+0x38>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0201 	bic.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
	...

080063d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d001      	beq.n	80063e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e04f      	b.n	8006488 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0201 	orr.w	r2, r2, #1
 80063fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a23      	ldr	r2, [pc, #140]	; (8006494 <HAL_TIM_Base_Start_IT+0xc4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d01d      	beq.n	8006446 <HAL_TIM_Base_Start_IT+0x76>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006412:	d018      	beq.n	8006446 <HAL_TIM_Base_Start_IT+0x76>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a1f      	ldr	r2, [pc, #124]	; (8006498 <HAL_TIM_Base_Start_IT+0xc8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d013      	beq.n	8006446 <HAL_TIM_Base_Start_IT+0x76>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1e      	ldr	r2, [pc, #120]	; (800649c <HAL_TIM_Base_Start_IT+0xcc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00e      	beq.n	8006446 <HAL_TIM_Base_Start_IT+0x76>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1c      	ldr	r2, [pc, #112]	; (80064a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d009      	beq.n	8006446 <HAL_TIM_Base_Start_IT+0x76>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a1b      	ldr	r2, [pc, #108]	; (80064a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d004      	beq.n	8006446 <HAL_TIM_Base_Start_IT+0x76>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a19      	ldr	r2, [pc, #100]	; (80064a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d115      	bne.n	8006472 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	4b17      	ldr	r3, [pc, #92]	; (80064ac <HAL_TIM_Base_Start_IT+0xdc>)
 800644e:	4013      	ands	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2b06      	cmp	r3, #6
 8006456:	d015      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0xb4>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800645e:	d011      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0201 	orr.w	r2, r2, #1
 800646e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006470:	e008      	b.n	8006484 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f042 0201 	orr.w	r2, r2, #1
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	e000      	b.n	8006486 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006484:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	40012c00 	.word	0x40012c00
 8006498:	40000400 	.word	0x40000400
 800649c:	40000800 	.word	0x40000800
 80064a0:	40000c00 	.word	0x40000c00
 80064a4:	40013400 	.word	0x40013400
 80064a8:	40014000 	.word	0x40014000
 80064ac:	00010007 	.word	0x00010007

080064b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d020      	beq.n	8006514 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d01b      	beq.n	8006514 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f06f 0202 	mvn.w	r2, #2
 80064e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f9ad 	bl	800685a <HAL_TIM_IC_CaptureCallback>
 8006500:	e005      	b.n	800650e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f99f 	bl	8006846 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f9b0 	bl	800686e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	2b00      	cmp	r3, #0
 800651c:	d020      	beq.n	8006560 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	d01b      	beq.n	8006560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f06f 0204 	mvn.w	r2, #4
 8006530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2202      	movs	r2, #2
 8006536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f987 	bl	800685a <HAL_TIM_IC_CaptureCallback>
 800654c:	e005      	b.n	800655a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f979 	bl	8006846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f98a 	bl	800686e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d020      	beq.n	80065ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f003 0308 	and.w	r3, r3, #8
 8006570:	2b00      	cmp	r3, #0
 8006572:	d01b      	beq.n	80065ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f06f 0208 	mvn.w	r2, #8
 800657c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2204      	movs	r2, #4
 8006582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f961 	bl	800685a <HAL_TIM_IC_CaptureCallback>
 8006598:	e005      	b.n	80065a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f953 	bl	8006846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f964 	bl	800686e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f003 0310 	and.w	r3, r3, #16
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d020      	beq.n	80065f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f003 0310 	and.w	r3, r3, #16
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d01b      	beq.n	80065f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f06f 0210 	mvn.w	r2, #16
 80065c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2208      	movs	r2, #8
 80065ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f93b 	bl	800685a <HAL_TIM_IC_CaptureCallback>
 80065e4:	e005      	b.n	80065f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f92d 	bl	8006846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f93e 	bl	800686e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00c      	beq.n	800661c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d007      	beq.n	800661c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f06f 0201 	mvn.w	r2, #1
 8006614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fb fa30 	bl	8001a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00c      	beq.n	8006640 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662c:	2b00      	cmp	r3, #0
 800662e:	d007      	beq.n	8006640 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 faf2 	bl	8006c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00c      	beq.n	8006664 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006650:	2b00      	cmp	r3, #0
 8006652:	d007      	beq.n	8006664 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800665c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 faea 	bl	8006c38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00c      	beq.n	8006688 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	d007      	beq.n	8006688 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f8fd 	bl	8006882 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00c      	beq.n	80066ac <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f003 0320 	and.w	r3, r3, #32
 8006698:	2b00      	cmp	r3, #0
 800669a:	d007      	beq.n	80066ac <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f06f 0220 	mvn.w	r2, #32
 80066a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fab2 	bl	8006c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066ac:	bf00      	nop
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d101      	bne.n	80066d0 <HAL_TIM_ConfigClockSource+0x1c>
 80066cc:	2302      	movs	r3, #2
 80066ce:	e0b6      	b.n	800683e <HAL_TIM_ConfigClockSource+0x18a>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800670c:	d03e      	beq.n	800678c <HAL_TIM_ConfigClockSource+0xd8>
 800670e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006712:	f200 8087 	bhi.w	8006824 <HAL_TIM_ConfigClockSource+0x170>
 8006716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671a:	f000 8086 	beq.w	800682a <HAL_TIM_ConfigClockSource+0x176>
 800671e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006722:	d87f      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x170>
 8006724:	2b70      	cmp	r3, #112	; 0x70
 8006726:	d01a      	beq.n	800675e <HAL_TIM_ConfigClockSource+0xaa>
 8006728:	2b70      	cmp	r3, #112	; 0x70
 800672a:	d87b      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x170>
 800672c:	2b60      	cmp	r3, #96	; 0x60
 800672e:	d050      	beq.n	80067d2 <HAL_TIM_ConfigClockSource+0x11e>
 8006730:	2b60      	cmp	r3, #96	; 0x60
 8006732:	d877      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x170>
 8006734:	2b50      	cmp	r3, #80	; 0x50
 8006736:	d03c      	beq.n	80067b2 <HAL_TIM_ConfigClockSource+0xfe>
 8006738:	2b50      	cmp	r3, #80	; 0x50
 800673a:	d873      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x170>
 800673c:	2b40      	cmp	r3, #64	; 0x40
 800673e:	d058      	beq.n	80067f2 <HAL_TIM_ConfigClockSource+0x13e>
 8006740:	2b40      	cmp	r3, #64	; 0x40
 8006742:	d86f      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x170>
 8006744:	2b30      	cmp	r3, #48	; 0x30
 8006746:	d064      	beq.n	8006812 <HAL_TIM_ConfigClockSource+0x15e>
 8006748:	2b30      	cmp	r3, #48	; 0x30
 800674a:	d86b      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x170>
 800674c:	2b20      	cmp	r3, #32
 800674e:	d060      	beq.n	8006812 <HAL_TIM_ConfigClockSource+0x15e>
 8006750:	2b20      	cmp	r3, #32
 8006752:	d867      	bhi.n	8006824 <HAL_TIM_ConfigClockSource+0x170>
 8006754:	2b00      	cmp	r3, #0
 8006756:	d05c      	beq.n	8006812 <HAL_TIM_ConfigClockSource+0x15e>
 8006758:	2b10      	cmp	r3, #16
 800675a:	d05a      	beq.n	8006812 <HAL_TIM_ConfigClockSource+0x15e>
 800675c:	e062      	b.n	8006824 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800676e:	f000 f9a7 	bl	8006ac0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006780:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	609a      	str	r2, [r3, #8]
      break;
 800678a:	e04f      	b.n	800682c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800679c:	f000 f990 	bl	8006ac0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689a      	ldr	r2, [r3, #8]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067ae:	609a      	str	r2, [r3, #8]
      break;
 80067b0:	e03c      	b.n	800682c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067be:	461a      	mov	r2, r3
 80067c0:	f000 f904 	bl	80069cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2150      	movs	r1, #80	; 0x50
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 f95d 	bl	8006a8a <TIM_ITRx_SetConfig>
      break;
 80067d0:	e02c      	b.n	800682c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067de:	461a      	mov	r2, r3
 80067e0:	f000 f923 	bl	8006a2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2160      	movs	r1, #96	; 0x60
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 f94d 	bl	8006a8a <TIM_ITRx_SetConfig>
      break;
 80067f0:	e01c      	b.n	800682c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067fe:	461a      	mov	r2, r3
 8006800:	f000 f8e4 	bl	80069cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2140      	movs	r1, #64	; 0x40
 800680a:	4618      	mov	r0, r3
 800680c:	f000 f93d 	bl	8006a8a <TIM_ITRx_SetConfig>
      break;
 8006810:	e00c      	b.n	800682c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4619      	mov	r1, r3
 800681c:	4610      	mov	r0, r2
 800681e:	f000 f934 	bl	8006a8a <TIM_ITRx_SetConfig>
      break;
 8006822:	e003      	b.n	800682c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	73fb      	strb	r3, [r7, #15]
      break;
 8006828:	e000      	b.n	800682c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800682a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800683c:	7bfb      	ldrb	r3, [r7, #15]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006862:	bf00      	nop
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800688a:	bf00      	nop
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
	...

08006898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a40      	ldr	r2, [pc, #256]	; (80069ac <TIM_Base_SetConfig+0x114>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d013      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b6:	d00f      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a3d      	ldr	r2, [pc, #244]	; (80069b0 <TIM_Base_SetConfig+0x118>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00b      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a3c      	ldr	r2, [pc, #240]	; (80069b4 <TIM_Base_SetConfig+0x11c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d007      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a3b      	ldr	r2, [pc, #236]	; (80069b8 <TIM_Base_SetConfig+0x120>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a3a      	ldr	r2, [pc, #232]	; (80069bc <TIM_Base_SetConfig+0x124>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d108      	bne.n	80068ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a2f      	ldr	r2, [pc, #188]	; (80069ac <TIM_Base_SetConfig+0x114>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d01f      	beq.n	8006932 <TIM_Base_SetConfig+0x9a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f8:	d01b      	beq.n	8006932 <TIM_Base_SetConfig+0x9a>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a2c      	ldr	r2, [pc, #176]	; (80069b0 <TIM_Base_SetConfig+0x118>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d017      	beq.n	8006932 <TIM_Base_SetConfig+0x9a>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a2b      	ldr	r2, [pc, #172]	; (80069b4 <TIM_Base_SetConfig+0x11c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d013      	beq.n	8006932 <TIM_Base_SetConfig+0x9a>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a2a      	ldr	r2, [pc, #168]	; (80069b8 <TIM_Base_SetConfig+0x120>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00f      	beq.n	8006932 <TIM_Base_SetConfig+0x9a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a29      	ldr	r2, [pc, #164]	; (80069bc <TIM_Base_SetConfig+0x124>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d00b      	beq.n	8006932 <TIM_Base_SetConfig+0x9a>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a28      	ldr	r2, [pc, #160]	; (80069c0 <TIM_Base_SetConfig+0x128>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d007      	beq.n	8006932 <TIM_Base_SetConfig+0x9a>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a27      	ldr	r2, [pc, #156]	; (80069c4 <TIM_Base_SetConfig+0x12c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d003      	beq.n	8006932 <TIM_Base_SetConfig+0x9a>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a26      	ldr	r2, [pc, #152]	; (80069c8 <TIM_Base_SetConfig+0x130>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d108      	bne.n	8006944 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4313      	orrs	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a10      	ldr	r2, [pc, #64]	; (80069ac <TIM_Base_SetConfig+0x114>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d00f      	beq.n	8006990 <TIM_Base_SetConfig+0xf8>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a12      	ldr	r2, [pc, #72]	; (80069bc <TIM_Base_SetConfig+0x124>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00b      	beq.n	8006990 <TIM_Base_SetConfig+0xf8>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a11      	ldr	r2, [pc, #68]	; (80069c0 <TIM_Base_SetConfig+0x128>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d007      	beq.n	8006990 <TIM_Base_SetConfig+0xf8>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a10      	ldr	r2, [pc, #64]	; (80069c4 <TIM_Base_SetConfig+0x12c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d003      	beq.n	8006990 <TIM_Base_SetConfig+0xf8>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a0f      	ldr	r2, [pc, #60]	; (80069c8 <TIM_Base_SetConfig+0x130>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d103      	bne.n	8006998 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	615a      	str	r2, [r3, #20]
}
 800699e:	bf00      	nop
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	40012c00 	.word	0x40012c00
 80069b0:	40000400 	.word	0x40000400
 80069b4:	40000800 	.word	0x40000800
 80069b8:	40000c00 	.word	0x40000c00
 80069bc:	40013400 	.word	0x40013400
 80069c0:	40014000 	.word	0x40014000
 80069c4:	40014400 	.word	0x40014400
 80069c8:	40014800 	.word	0x40014800

080069cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f023 0201 	bic.w	r2, r3, #1
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	011b      	lsls	r3, r3, #4
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f023 030a 	bic.w	r3, r3, #10
 8006a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	621a      	str	r2, [r3, #32]
}
 8006a1e:	bf00      	nop
 8006a20:	371c      	adds	r7, #28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b087      	sub	sp, #28
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	f023 0210 	bic.w	r2, r3, #16
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	031b      	lsls	r3, r3, #12
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	011b      	lsls	r3, r3, #4
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	621a      	str	r2, [r3, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b085      	sub	sp, #20
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	f043 0307 	orr.w	r3, r3, #7
 8006aac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	609a      	str	r2, [r3, #8]
}
 8006ab4:	bf00      	nop
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ada:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	021a      	lsls	r2, r3, #8
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	609a      	str	r2, [r3, #8]
}
 8006af4:	bf00      	nop
 8006af6:	371c      	adds	r7, #28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d101      	bne.n	8006b18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b14:	2302      	movs	r3, #2
 8006b16:	e068      	b.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a2e      	ldr	r2, [pc, #184]	; (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d004      	beq.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a2d      	ldr	r2, [pc, #180]	; (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d108      	bne.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a1e      	ldr	r2, [pc, #120]	; (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d01d      	beq.n	8006bbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b8a:	d018      	beq.n	8006bbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a1b      	ldr	r2, [pc, #108]	; (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d013      	beq.n	8006bbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a1a      	ldr	r2, [pc, #104]	; (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00e      	beq.n	8006bbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a18      	ldr	r2, [pc, #96]	; (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d009      	beq.n	8006bbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a13      	ldr	r2, [pc, #76]	; (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d004      	beq.n	8006bbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a14      	ldr	r2, [pc, #80]	; (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d10c      	bne.n	8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	40012c00 	.word	0x40012c00
 8006bfc:	40013400 	.word	0x40013400
 8006c00:	40000400 	.word	0x40000400
 8006c04:	40000800 	.word	0x40000800
 8006c08:	40000c00 	.word	0x40000c00
 8006c0c:	40014000 	.word	0x40014000

08006c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e040      	b.n	8006ce0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7fb f8d0 	bl	8001e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2224      	movs	r2, #36	; 0x24
 8006c78:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 0201 	bic.w	r2, r2, #1
 8006c88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fc04 	bl	80074a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f949 	bl	8006f30 <UART_SetConfig>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d101      	bne.n	8006ca8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e01b      	b.n	8006ce0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689a      	ldr	r2, [r3, #8]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0201 	orr.w	r2, r2, #1
 8006cd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fc83 	bl	80075e4 <UART_CheckIdleState>
 8006cde:	4603      	mov	r3, r0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08a      	sub	sp, #40	; 0x28
 8006cec:	af02      	add	r7, sp, #8
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	603b      	str	r3, [r7, #0]
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	d178      	bne.n	8006df2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <HAL_UART_Transmit+0x24>
 8006d06:	88fb      	ldrh	r3, [r7, #6]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e071      	b.n	8006df4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2221      	movs	r2, #33	; 0x21
 8006d1c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d1e:	f7fb fb1d 	bl	800235c <HAL_GetTick>
 8006d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	88fa      	ldrh	r2, [r7, #6]
 8006d28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	88fa      	ldrh	r2, [r7, #6]
 8006d30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d3c:	d108      	bne.n	8006d50 <HAL_UART_Transmit+0x68>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d104      	bne.n	8006d50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	61bb      	str	r3, [r7, #24]
 8006d4e:	e003      	b.n	8006d58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d58:	e030      	b.n	8006dbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2200      	movs	r2, #0
 8006d62:	2180      	movs	r1, #128	; 0x80
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 fce5 	bl	8007734 <UART_WaitOnFlagUntilTimeout>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d004      	beq.n	8006d7a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2220      	movs	r2, #32
 8006d74:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e03c      	b.n	8006df4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10b      	bne.n	8006d98 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	881a      	ldrh	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d8c:	b292      	uxth	r2, r2
 8006d8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	3302      	adds	r3, #2
 8006d94:	61bb      	str	r3, [r7, #24]
 8006d96:	e008      	b.n	8006daa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	781a      	ldrb	r2, [r3, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	b292      	uxth	r2, r2
 8006da2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	3301      	adds	r3, #1
 8006da8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1c8      	bne.n	8006d5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2140      	movs	r1, #64	; 0x40
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 fcae 	bl	8007734 <UART_WaitOnFlagUntilTimeout>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d004      	beq.n	8006de8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2220      	movs	r2, #32
 8006de2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e005      	b.n	8006df4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2220      	movs	r2, #32
 8006dec:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	e000      	b.n	8006df4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006df2:	2302      	movs	r3, #2
  }
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3720      	adds	r7, #32
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b08a      	sub	sp, #40	; 0x28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	4613      	mov	r3, r2
 8006e08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e0e:	2b20      	cmp	r3, #32
 8006e10:	d165      	bne.n	8006ede <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <HAL_UART_Transmit_DMA+0x22>
 8006e18:	88fb      	ldrh	r3, [r7, #6]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e05e      	b.n	8006ee0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	88fa      	ldrh	r2, [r7, #6]
 8006e2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	88fa      	ldrh	r2, [r7, #6]
 8006e34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2221      	movs	r2, #33	; 0x21
 8006e44:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d027      	beq.n	8006e9e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e52:	4a25      	ldr	r2, [pc, #148]	; (8006ee8 <HAL_UART_Transmit_DMA+0xec>)
 8006e54:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5a:	4a24      	ldr	r2, [pc, #144]	; (8006eec <HAL_UART_Transmit_DMA+0xf0>)
 8006e5c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e62:	4a23      	ldr	r2, [pc, #140]	; (8006ef0 <HAL_UART_Transmit_DMA+0xf4>)
 8006e64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e76:	4619      	mov	r1, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3328      	adds	r3, #40	; 0x28
 8006e7e:	461a      	mov	r2, r3
 8006e80:	88fb      	ldrh	r3, [r7, #6]
 8006e82:	f7fd fb13 	bl	80044ac <HAL_DMA_Start_IT>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d008      	beq.n	8006e9e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2210      	movs	r2, #16
 8006e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2220      	movs	r2, #32
 8006e98:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e020      	b.n	8006ee0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2240      	movs	r2, #64	; 0x40
 8006ea4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3308      	adds	r3, #8
 8006eac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	e853 3f00 	ldrex	r3, [r3]
 8006eb4:	613b      	str	r3, [r7, #16]
   return(result);
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3308      	adds	r3, #8
 8006ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec6:	623a      	str	r2, [r7, #32]
 8006ec8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eca:	69f9      	ldr	r1, [r7, #28]
 8006ecc:	6a3a      	ldr	r2, [r7, #32]
 8006ece:	e841 2300 	strex	r3, r2, [r1]
 8006ed2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1e5      	bne.n	8006ea6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	e000      	b.n	8006ee0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8006ede:	2302      	movs	r3, #2
  }
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3728      	adds	r7, #40	; 0x28
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	08007917 	.word	0x08007917
 8006eec:	080079b1 	.word	0x080079b1
 8006ef0:	080079cd 	.word	0x080079cd

08006ef4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f34:	b08a      	sub	sp, #40	; 0x28
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	689a      	ldr	r2, [r3, #8]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	69db      	ldr	r3, [r3, #28]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	4ba4      	ldr	r3, [pc, #656]	; (80071f0 <UART_SetConfig+0x2c0>)
 8006f60:	4013      	ands	r3, r2
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	6812      	ldr	r2, [r2, #0]
 8006f66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f68:	430b      	orrs	r3, r1
 8006f6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a99      	ldr	r2, [pc, #612]	; (80071f4 <UART_SetConfig+0x2c4>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d004      	beq.n	8006f9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fac:	430a      	orrs	r2, r1
 8006fae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a90      	ldr	r2, [pc, #576]	; (80071f8 <UART_SetConfig+0x2c8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d126      	bne.n	8007008 <UART_SetConfig+0xd8>
 8006fba:	4b90      	ldr	r3, [pc, #576]	; (80071fc <UART_SetConfig+0x2cc>)
 8006fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc0:	f003 0303 	and.w	r3, r3, #3
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d81b      	bhi.n	8007000 <UART_SetConfig+0xd0>
 8006fc8:	a201      	add	r2, pc, #4	; (adr r2, 8006fd0 <UART_SetConfig+0xa0>)
 8006fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fce:	bf00      	nop
 8006fd0:	08006fe1 	.word	0x08006fe1
 8006fd4:	08006ff1 	.word	0x08006ff1
 8006fd8:	08006fe9 	.word	0x08006fe9
 8006fdc:	08006ff9 	.word	0x08006ff9
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fe6:	e116      	b.n	8007216 <UART_SetConfig+0x2e6>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fee:	e112      	b.n	8007216 <UART_SetConfig+0x2e6>
 8006ff0:	2304      	movs	r3, #4
 8006ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ff6:	e10e      	b.n	8007216 <UART_SetConfig+0x2e6>
 8006ff8:	2308      	movs	r3, #8
 8006ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ffe:	e10a      	b.n	8007216 <UART_SetConfig+0x2e6>
 8007000:	2310      	movs	r3, #16
 8007002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007006:	e106      	b.n	8007216 <UART_SetConfig+0x2e6>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a7c      	ldr	r2, [pc, #496]	; (8007200 <UART_SetConfig+0x2d0>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d138      	bne.n	8007084 <UART_SetConfig+0x154>
 8007012:	4b7a      	ldr	r3, [pc, #488]	; (80071fc <UART_SetConfig+0x2cc>)
 8007014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007018:	f003 030c 	and.w	r3, r3, #12
 800701c:	2b0c      	cmp	r3, #12
 800701e:	d82d      	bhi.n	800707c <UART_SetConfig+0x14c>
 8007020:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <UART_SetConfig+0xf8>)
 8007022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007026:	bf00      	nop
 8007028:	0800705d 	.word	0x0800705d
 800702c:	0800707d 	.word	0x0800707d
 8007030:	0800707d 	.word	0x0800707d
 8007034:	0800707d 	.word	0x0800707d
 8007038:	0800706d 	.word	0x0800706d
 800703c:	0800707d 	.word	0x0800707d
 8007040:	0800707d 	.word	0x0800707d
 8007044:	0800707d 	.word	0x0800707d
 8007048:	08007065 	.word	0x08007065
 800704c:	0800707d 	.word	0x0800707d
 8007050:	0800707d 	.word	0x0800707d
 8007054:	0800707d 	.word	0x0800707d
 8007058:	08007075 	.word	0x08007075
 800705c:	2300      	movs	r3, #0
 800705e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007062:	e0d8      	b.n	8007216 <UART_SetConfig+0x2e6>
 8007064:	2302      	movs	r3, #2
 8007066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800706a:	e0d4      	b.n	8007216 <UART_SetConfig+0x2e6>
 800706c:	2304      	movs	r3, #4
 800706e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007072:	e0d0      	b.n	8007216 <UART_SetConfig+0x2e6>
 8007074:	2308      	movs	r3, #8
 8007076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800707a:	e0cc      	b.n	8007216 <UART_SetConfig+0x2e6>
 800707c:	2310      	movs	r3, #16
 800707e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007082:	e0c8      	b.n	8007216 <UART_SetConfig+0x2e6>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a5e      	ldr	r2, [pc, #376]	; (8007204 <UART_SetConfig+0x2d4>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d125      	bne.n	80070da <UART_SetConfig+0x1aa>
 800708e:	4b5b      	ldr	r3, [pc, #364]	; (80071fc <UART_SetConfig+0x2cc>)
 8007090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007094:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007098:	2b30      	cmp	r3, #48	; 0x30
 800709a:	d016      	beq.n	80070ca <UART_SetConfig+0x19a>
 800709c:	2b30      	cmp	r3, #48	; 0x30
 800709e:	d818      	bhi.n	80070d2 <UART_SetConfig+0x1a2>
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	d00a      	beq.n	80070ba <UART_SetConfig+0x18a>
 80070a4:	2b20      	cmp	r3, #32
 80070a6:	d814      	bhi.n	80070d2 <UART_SetConfig+0x1a2>
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d002      	beq.n	80070b2 <UART_SetConfig+0x182>
 80070ac:	2b10      	cmp	r3, #16
 80070ae:	d008      	beq.n	80070c2 <UART_SetConfig+0x192>
 80070b0:	e00f      	b.n	80070d2 <UART_SetConfig+0x1a2>
 80070b2:	2300      	movs	r3, #0
 80070b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070b8:	e0ad      	b.n	8007216 <UART_SetConfig+0x2e6>
 80070ba:	2302      	movs	r3, #2
 80070bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070c0:	e0a9      	b.n	8007216 <UART_SetConfig+0x2e6>
 80070c2:	2304      	movs	r3, #4
 80070c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070c8:	e0a5      	b.n	8007216 <UART_SetConfig+0x2e6>
 80070ca:	2308      	movs	r3, #8
 80070cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070d0:	e0a1      	b.n	8007216 <UART_SetConfig+0x2e6>
 80070d2:	2310      	movs	r3, #16
 80070d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070d8:	e09d      	b.n	8007216 <UART_SetConfig+0x2e6>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a4a      	ldr	r2, [pc, #296]	; (8007208 <UART_SetConfig+0x2d8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d125      	bne.n	8007130 <UART_SetConfig+0x200>
 80070e4:	4b45      	ldr	r3, [pc, #276]	; (80071fc <UART_SetConfig+0x2cc>)
 80070e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80070ee:	2bc0      	cmp	r3, #192	; 0xc0
 80070f0:	d016      	beq.n	8007120 <UART_SetConfig+0x1f0>
 80070f2:	2bc0      	cmp	r3, #192	; 0xc0
 80070f4:	d818      	bhi.n	8007128 <UART_SetConfig+0x1f8>
 80070f6:	2b80      	cmp	r3, #128	; 0x80
 80070f8:	d00a      	beq.n	8007110 <UART_SetConfig+0x1e0>
 80070fa:	2b80      	cmp	r3, #128	; 0x80
 80070fc:	d814      	bhi.n	8007128 <UART_SetConfig+0x1f8>
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <UART_SetConfig+0x1d8>
 8007102:	2b40      	cmp	r3, #64	; 0x40
 8007104:	d008      	beq.n	8007118 <UART_SetConfig+0x1e8>
 8007106:	e00f      	b.n	8007128 <UART_SetConfig+0x1f8>
 8007108:	2300      	movs	r3, #0
 800710a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800710e:	e082      	b.n	8007216 <UART_SetConfig+0x2e6>
 8007110:	2302      	movs	r3, #2
 8007112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007116:	e07e      	b.n	8007216 <UART_SetConfig+0x2e6>
 8007118:	2304      	movs	r3, #4
 800711a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800711e:	e07a      	b.n	8007216 <UART_SetConfig+0x2e6>
 8007120:	2308      	movs	r3, #8
 8007122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007126:	e076      	b.n	8007216 <UART_SetConfig+0x2e6>
 8007128:	2310      	movs	r3, #16
 800712a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800712e:	e072      	b.n	8007216 <UART_SetConfig+0x2e6>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a35      	ldr	r2, [pc, #212]	; (800720c <UART_SetConfig+0x2dc>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d12a      	bne.n	8007190 <UART_SetConfig+0x260>
 800713a:	4b30      	ldr	r3, [pc, #192]	; (80071fc <UART_SetConfig+0x2cc>)
 800713c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007144:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007148:	d01a      	beq.n	8007180 <UART_SetConfig+0x250>
 800714a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800714e:	d81b      	bhi.n	8007188 <UART_SetConfig+0x258>
 8007150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007154:	d00c      	beq.n	8007170 <UART_SetConfig+0x240>
 8007156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800715a:	d815      	bhi.n	8007188 <UART_SetConfig+0x258>
 800715c:	2b00      	cmp	r3, #0
 800715e:	d003      	beq.n	8007168 <UART_SetConfig+0x238>
 8007160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007164:	d008      	beq.n	8007178 <UART_SetConfig+0x248>
 8007166:	e00f      	b.n	8007188 <UART_SetConfig+0x258>
 8007168:	2300      	movs	r3, #0
 800716a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800716e:	e052      	b.n	8007216 <UART_SetConfig+0x2e6>
 8007170:	2302      	movs	r3, #2
 8007172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007176:	e04e      	b.n	8007216 <UART_SetConfig+0x2e6>
 8007178:	2304      	movs	r3, #4
 800717a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800717e:	e04a      	b.n	8007216 <UART_SetConfig+0x2e6>
 8007180:	2308      	movs	r3, #8
 8007182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007186:	e046      	b.n	8007216 <UART_SetConfig+0x2e6>
 8007188:	2310      	movs	r3, #16
 800718a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800718e:	e042      	b.n	8007216 <UART_SetConfig+0x2e6>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a17      	ldr	r2, [pc, #92]	; (80071f4 <UART_SetConfig+0x2c4>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d13a      	bne.n	8007210 <UART_SetConfig+0x2e0>
 800719a:	4b18      	ldr	r3, [pc, #96]	; (80071fc <UART_SetConfig+0x2cc>)
 800719c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071a8:	d01a      	beq.n	80071e0 <UART_SetConfig+0x2b0>
 80071aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071ae:	d81b      	bhi.n	80071e8 <UART_SetConfig+0x2b8>
 80071b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071b4:	d00c      	beq.n	80071d0 <UART_SetConfig+0x2a0>
 80071b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ba:	d815      	bhi.n	80071e8 <UART_SetConfig+0x2b8>
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <UART_SetConfig+0x298>
 80071c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071c4:	d008      	beq.n	80071d8 <UART_SetConfig+0x2a8>
 80071c6:	e00f      	b.n	80071e8 <UART_SetConfig+0x2b8>
 80071c8:	2300      	movs	r3, #0
 80071ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ce:	e022      	b.n	8007216 <UART_SetConfig+0x2e6>
 80071d0:	2302      	movs	r3, #2
 80071d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071d6:	e01e      	b.n	8007216 <UART_SetConfig+0x2e6>
 80071d8:	2304      	movs	r3, #4
 80071da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071de:	e01a      	b.n	8007216 <UART_SetConfig+0x2e6>
 80071e0:	2308      	movs	r3, #8
 80071e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071e6:	e016      	b.n	8007216 <UART_SetConfig+0x2e6>
 80071e8:	2310      	movs	r3, #16
 80071ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ee:	e012      	b.n	8007216 <UART_SetConfig+0x2e6>
 80071f0:	efff69f3 	.word	0xefff69f3
 80071f4:	40008000 	.word	0x40008000
 80071f8:	40013800 	.word	0x40013800
 80071fc:	40021000 	.word	0x40021000
 8007200:	40004400 	.word	0x40004400
 8007204:	40004800 	.word	0x40004800
 8007208:	40004c00 	.word	0x40004c00
 800720c:	40005000 	.word	0x40005000
 8007210:	2310      	movs	r3, #16
 8007212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a9f      	ldr	r2, [pc, #636]	; (8007498 <UART_SetConfig+0x568>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d17a      	bne.n	8007316 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007220:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007224:	2b08      	cmp	r3, #8
 8007226:	d824      	bhi.n	8007272 <UART_SetConfig+0x342>
 8007228:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <UART_SetConfig+0x300>)
 800722a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722e:	bf00      	nop
 8007230:	08007255 	.word	0x08007255
 8007234:	08007273 	.word	0x08007273
 8007238:	0800725d 	.word	0x0800725d
 800723c:	08007273 	.word	0x08007273
 8007240:	08007263 	.word	0x08007263
 8007244:	08007273 	.word	0x08007273
 8007248:	08007273 	.word	0x08007273
 800724c:	08007273 	.word	0x08007273
 8007250:	0800726b 	.word	0x0800726b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007254:	f7fe fa5a 	bl	800570c <HAL_RCC_GetPCLK1Freq>
 8007258:	61f8      	str	r0, [r7, #28]
        break;
 800725a:	e010      	b.n	800727e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800725c:	4b8f      	ldr	r3, [pc, #572]	; (800749c <UART_SetConfig+0x56c>)
 800725e:	61fb      	str	r3, [r7, #28]
        break;
 8007260:	e00d      	b.n	800727e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007262:	f7fe f9bb 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 8007266:	61f8      	str	r0, [r7, #28]
        break;
 8007268:	e009      	b.n	800727e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800726a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800726e:	61fb      	str	r3, [r7, #28]
        break;
 8007270:	e005      	b.n	800727e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800727c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 80fb 	beq.w	800747c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	4613      	mov	r3, r2
 800728c:	005b      	lsls	r3, r3, #1
 800728e:	4413      	add	r3, r2
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	429a      	cmp	r2, r3
 8007294:	d305      	bcc.n	80072a2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800729c:	69fa      	ldr	r2, [r7, #28]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d903      	bls.n	80072aa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80072a8:	e0e8      	b.n	800747c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	2200      	movs	r2, #0
 80072ae:	461c      	mov	r4, r3
 80072b0:	4615      	mov	r5, r2
 80072b2:	f04f 0200 	mov.w	r2, #0
 80072b6:	f04f 0300 	mov.w	r3, #0
 80072ba:	022b      	lsls	r3, r5, #8
 80072bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80072c0:	0222      	lsls	r2, r4, #8
 80072c2:	68f9      	ldr	r1, [r7, #12]
 80072c4:	6849      	ldr	r1, [r1, #4]
 80072c6:	0849      	lsrs	r1, r1, #1
 80072c8:	2000      	movs	r0, #0
 80072ca:	4688      	mov	r8, r1
 80072cc:	4681      	mov	r9, r0
 80072ce:	eb12 0a08 	adds.w	sl, r2, r8
 80072d2:	eb43 0b09 	adc.w	fp, r3, r9
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	603b      	str	r3, [r7, #0]
 80072de:	607a      	str	r2, [r7, #4]
 80072e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072e4:	4650      	mov	r0, sl
 80072e6:	4659      	mov	r1, fp
 80072e8:	f7f9 fb30 	bl	800094c <__aeabi_uldivmod>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4613      	mov	r3, r2
 80072f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072fa:	d308      	bcc.n	800730e <UART_SetConfig+0x3de>
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007302:	d204      	bcs.n	800730e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	60da      	str	r2, [r3, #12]
 800730c:	e0b6      	b.n	800747c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007314:	e0b2      	b.n	800747c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800731e:	d15e      	bne.n	80073de <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007320:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007324:	2b08      	cmp	r3, #8
 8007326:	d828      	bhi.n	800737a <UART_SetConfig+0x44a>
 8007328:	a201      	add	r2, pc, #4	; (adr r2, 8007330 <UART_SetConfig+0x400>)
 800732a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732e:	bf00      	nop
 8007330:	08007355 	.word	0x08007355
 8007334:	0800735d 	.word	0x0800735d
 8007338:	08007365 	.word	0x08007365
 800733c:	0800737b 	.word	0x0800737b
 8007340:	0800736b 	.word	0x0800736b
 8007344:	0800737b 	.word	0x0800737b
 8007348:	0800737b 	.word	0x0800737b
 800734c:	0800737b 	.word	0x0800737b
 8007350:	08007373 	.word	0x08007373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007354:	f7fe f9da 	bl	800570c <HAL_RCC_GetPCLK1Freq>
 8007358:	61f8      	str	r0, [r7, #28]
        break;
 800735a:	e014      	b.n	8007386 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800735c:	f7fe f9ec 	bl	8005738 <HAL_RCC_GetPCLK2Freq>
 8007360:	61f8      	str	r0, [r7, #28]
        break;
 8007362:	e010      	b.n	8007386 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007364:	4b4d      	ldr	r3, [pc, #308]	; (800749c <UART_SetConfig+0x56c>)
 8007366:	61fb      	str	r3, [r7, #28]
        break;
 8007368:	e00d      	b.n	8007386 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800736a:	f7fe f937 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 800736e:	61f8      	str	r0, [r7, #28]
        break;
 8007370:	e009      	b.n	8007386 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007376:	61fb      	str	r3, [r7, #28]
        break;
 8007378:	e005      	b.n	8007386 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007384:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d077      	beq.n	800747c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	005a      	lsls	r2, r3, #1
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	085b      	lsrs	r3, r3, #1
 8007396:	441a      	add	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	2b0f      	cmp	r3, #15
 80073a6:	d916      	bls.n	80073d6 <UART_SetConfig+0x4a6>
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ae:	d212      	bcs.n	80073d6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	f023 030f 	bic.w	r3, r3, #15
 80073b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	085b      	lsrs	r3, r3, #1
 80073be:	b29b      	uxth	r3, r3
 80073c0:	f003 0307 	and.w	r3, r3, #7
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	8afb      	ldrh	r3, [r7, #22]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	8afa      	ldrh	r2, [r7, #22]
 80073d2:	60da      	str	r2, [r3, #12]
 80073d4:	e052      	b.n	800747c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80073dc:	e04e      	b.n	800747c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80073e2:	2b08      	cmp	r3, #8
 80073e4:	d827      	bhi.n	8007436 <UART_SetConfig+0x506>
 80073e6:	a201      	add	r2, pc, #4	; (adr r2, 80073ec <UART_SetConfig+0x4bc>)
 80073e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ec:	08007411 	.word	0x08007411
 80073f0:	08007419 	.word	0x08007419
 80073f4:	08007421 	.word	0x08007421
 80073f8:	08007437 	.word	0x08007437
 80073fc:	08007427 	.word	0x08007427
 8007400:	08007437 	.word	0x08007437
 8007404:	08007437 	.word	0x08007437
 8007408:	08007437 	.word	0x08007437
 800740c:	0800742f 	.word	0x0800742f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007410:	f7fe f97c 	bl	800570c <HAL_RCC_GetPCLK1Freq>
 8007414:	61f8      	str	r0, [r7, #28]
        break;
 8007416:	e014      	b.n	8007442 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007418:	f7fe f98e 	bl	8005738 <HAL_RCC_GetPCLK2Freq>
 800741c:	61f8      	str	r0, [r7, #28]
        break;
 800741e:	e010      	b.n	8007442 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007420:	4b1e      	ldr	r3, [pc, #120]	; (800749c <UART_SetConfig+0x56c>)
 8007422:	61fb      	str	r3, [r7, #28]
        break;
 8007424:	e00d      	b.n	8007442 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007426:	f7fe f8d9 	bl	80055dc <HAL_RCC_GetSysClockFreq>
 800742a:	61f8      	str	r0, [r7, #28]
        break;
 800742c:	e009      	b.n	8007442 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800742e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007432:	61fb      	str	r3, [r7, #28]
        break;
 8007434:	e005      	b.n	8007442 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007436:	2300      	movs	r3, #0
 8007438:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007440:	bf00      	nop
    }

    if (pclk != 0U)
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d019      	beq.n	800747c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	085a      	lsrs	r2, r3, #1
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	441a      	add	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	fbb2 f3f3 	udiv	r3, r2, r3
 800745a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	2b0f      	cmp	r3, #15
 8007460:	d909      	bls.n	8007476 <UART_SetConfig+0x546>
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007468:	d205      	bcs.n	8007476 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	b29a      	uxth	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	60da      	str	r2, [r3, #12]
 8007474:	e002      	b.n	800747c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007488:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800748c:	4618      	mov	r0, r3
 800748e:	3728      	adds	r7, #40	; 0x28
 8007490:	46bd      	mov	sp, r7
 8007492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007496:	bf00      	nop
 8007498:	40008000 	.word	0x40008000
 800749c:	00f42400 	.word	0x00f42400

080074a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	f003 0308 	and.w	r3, r3, #8
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00a      	beq.n	80074ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00a      	beq.n	80074ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00a      	beq.n	800750e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	f003 0304 	and.w	r3, r3, #4
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00a      	beq.n	8007530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	430a      	orrs	r2, r1
 800752e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	f003 0310 	and.w	r3, r3, #16
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00a      	beq.n	8007552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757c:	2b00      	cmp	r3, #0
 800757e:	d01a      	beq.n	80075b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800759e:	d10a      	bne.n	80075b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	605a      	str	r2, [r3, #4]
  }
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b098      	sub	sp, #96	; 0x60
 80075e8:	af02      	add	r7, sp, #8
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075f4:	f7fa feb2 	bl	800235c <HAL_GetTick>
 80075f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0308 	and.w	r3, r3, #8
 8007604:	2b08      	cmp	r3, #8
 8007606:	d12e      	bne.n	8007666 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007610:	2200      	movs	r2, #0
 8007612:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f88c 	bl	8007734 <UART_WaitOnFlagUntilTimeout>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d021      	beq.n	8007666 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	e853 3f00 	ldrex	r3, [r3]
 800762e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007636:	653b      	str	r3, [r7, #80]	; 0x50
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	461a      	mov	r2, r3
 800763e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007640:	647b      	str	r3, [r7, #68]	; 0x44
 8007642:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007644:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007648:	e841 2300 	strex	r3, r2, [r1]
 800764c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800764e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1e6      	bne.n	8007622 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2220      	movs	r2, #32
 8007658:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e062      	b.n	800772c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0304 	and.w	r3, r3, #4
 8007670:	2b04      	cmp	r3, #4
 8007672:	d149      	bne.n	8007708 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007674:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800767c:	2200      	movs	r2, #0
 800767e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f856 	bl	8007734 <UART_WaitOnFlagUntilTimeout>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d03c      	beq.n	8007708 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	e853 3f00 	ldrex	r3, [r3]
 800769a:	623b      	str	r3, [r7, #32]
   return(result);
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	461a      	mov	r2, r3
 80076aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ac:	633b      	str	r3, [r7, #48]	; 0x30
 80076ae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b4:	e841 2300 	strex	r3, r2, [r1]
 80076b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1e6      	bne.n	800768e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3308      	adds	r3, #8
 80076c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	e853 3f00 	ldrex	r3, [r3]
 80076ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f023 0301 	bic.w	r3, r3, #1
 80076d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3308      	adds	r3, #8
 80076de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076e0:	61fa      	str	r2, [r7, #28]
 80076e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	69b9      	ldr	r1, [r7, #24]
 80076e6:	69fa      	ldr	r2, [r7, #28]
 80076e8:	e841 2300 	strex	r3, r2, [r1]
 80076ec:	617b      	str	r3, [r7, #20]
   return(result);
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e5      	bne.n	80076c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2220      	movs	r2, #32
 80076f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e011      	b.n	800772c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2220      	movs	r2, #32
 800770c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2220      	movs	r2, #32
 8007712:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3758      	adds	r7, #88	; 0x58
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	603b      	str	r3, [r7, #0]
 8007740:	4613      	mov	r3, r2
 8007742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007744:	e049      	b.n	80077da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774c:	d045      	beq.n	80077da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800774e:	f7fa fe05 	bl	800235c <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	69ba      	ldr	r2, [r7, #24]
 800775a:	429a      	cmp	r2, r3
 800775c:	d302      	bcc.n	8007764 <UART_WaitOnFlagUntilTimeout+0x30>
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e048      	b.n	80077fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0304 	and.w	r3, r3, #4
 8007772:	2b00      	cmp	r3, #0
 8007774:	d031      	beq.n	80077da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	69db      	ldr	r3, [r3, #28]
 800777c:	f003 0308 	and.w	r3, r3, #8
 8007780:	2b08      	cmp	r3, #8
 8007782:	d110      	bne.n	80077a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2208      	movs	r2, #8
 800778a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f000 f85e 	bl	800784e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2208      	movs	r2, #8
 8007796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e029      	b.n	80077fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077b4:	d111      	bne.n	80077da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 f844 	bl	800784e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2220      	movs	r2, #32
 80077ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e00f      	b.n	80077fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69da      	ldr	r2, [r3, #28]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	4013      	ands	r3, r2
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	bf0c      	ite	eq
 80077ea:	2301      	moveq	r3, #1
 80077ec:	2300      	movne	r3, #0
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	461a      	mov	r2, r3
 80077f2:	79fb      	ldrb	r3, [r7, #7]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d0a6      	beq.n	8007746 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007802:	b480      	push	{r7}
 8007804:	b089      	sub	sp, #36	; 0x24
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	e853 3f00 	ldrex	r3, [r3]
 8007816:	60bb      	str	r3, [r7, #8]
   return(result);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800781e:	61fb      	str	r3, [r7, #28]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	461a      	mov	r2, r3
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	61bb      	str	r3, [r7, #24]
 800782a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	6979      	ldr	r1, [r7, #20]
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	e841 2300 	strex	r3, r2, [r1]
 8007834:	613b      	str	r3, [r7, #16]
   return(result);
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e6      	bne.n	800780a <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2220      	movs	r2, #32
 8007840:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8007842:	bf00      	nop
 8007844:	3724      	adds	r7, #36	; 0x24
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800784e:	b480      	push	{r7}
 8007850:	b095      	sub	sp, #84	; 0x54
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785e:	e853 3f00 	ldrex	r3, [r3]
 8007862:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007866:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800786a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	461a      	mov	r2, r3
 8007872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007874:	643b      	str	r3, [r7, #64]	; 0x40
 8007876:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007878:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800787a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e6      	bne.n	8007856 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3308      	adds	r3, #8
 800788e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	61fb      	str	r3, [r7, #28]
   return(result);
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	f023 0301 	bic.w	r3, r3, #1
 800789e:	64bb      	str	r3, [r7, #72]	; 0x48
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3308      	adds	r3, #8
 80078a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e5      	bne.n	8007888 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d118      	bne.n	80078f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	f023 0310 	bic.w	r3, r3, #16
 80078d8:	647b      	str	r3, [r7, #68]	; 0x44
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078e2:	61bb      	str	r3, [r7, #24]
 80078e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	6979      	ldr	r1, [r7, #20]
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	613b      	str	r3, [r7, #16]
   return(result);
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e6      	bne.n	80078c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2220      	movs	r2, #32
 80078fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	669a      	str	r2, [r3, #104]	; 0x68
}
 800790a:	bf00      	nop
 800790c:	3754      	adds	r7, #84	; 0x54
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b090      	sub	sp, #64	; 0x40
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007922:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0320 	and.w	r3, r3, #32
 800792e:	2b00      	cmp	r3, #0
 8007930:	d137      	bne.n	80079a2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007934:	2200      	movs	r2, #0
 8007936:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800793a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3308      	adds	r3, #8
 8007940:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	e853 3f00 	ldrex	r3, [r3]
 8007948:	623b      	str	r3, [r7, #32]
   return(result);
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007950:	63bb      	str	r3, [r7, #56]	; 0x38
 8007952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3308      	adds	r3, #8
 8007958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800795a:	633a      	str	r2, [r7, #48]	; 0x30
 800795c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007962:	e841 2300 	strex	r3, r2, [r1]
 8007966:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1e5      	bne.n	800793a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800796e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	e853 3f00 	ldrex	r3, [r3]
 800797a:	60fb      	str	r3, [r7, #12]
   return(result);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007982:	637b      	str	r3, [r7, #52]	; 0x34
 8007984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	461a      	mov	r2, r3
 800798a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798c:	61fb      	str	r3, [r7, #28]
 800798e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007990:	69b9      	ldr	r1, [r7, #24]
 8007992:	69fa      	ldr	r2, [r7, #28]
 8007994:	e841 2300 	strex	r3, r2, [r1]
 8007998:	617b      	str	r3, [r7, #20]
   return(result);
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1e6      	bne.n	800796e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80079a0:	e002      	b.n	80079a8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80079a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80079a4:	f7ff faa6 	bl	8006ef4 <HAL_UART_TxCpltCallback>
}
 80079a8:	bf00      	nop
 80079aa:	3740      	adds	r7, #64	; 0x40
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079bc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f7ff faa2 	bl	8006f08 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079c4:	bf00      	nop
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079e6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f2:	2b80      	cmp	r3, #128	; 0x80
 80079f4:	d109      	bne.n	8007a0a <UART_DMAError+0x3e>
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	2b21      	cmp	r3, #33	; 0x21
 80079fa:	d106      	bne.n	8007a0a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007a04:	6978      	ldr	r0, [r7, #20]
 8007a06:	f7ff fefc 	bl	8007802 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a14:	2b40      	cmp	r3, #64	; 0x40
 8007a16:	d109      	bne.n	8007a2c <UART_DMAError+0x60>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2b22      	cmp	r3, #34	; 0x22
 8007a1c:	d106      	bne.n	8007a2c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007a26:	6978      	ldr	r0, [r7, #20]
 8007a28:	f7ff ff11 	bl	800784e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a32:	f043 0210 	orr.w	r2, r3, #16
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a3c:	6978      	ldr	r0, [r7, #20]
 8007a3e:	f7ff fa6d 	bl	8006f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a42:	bf00      	nop
 8007a44:	3718      	adds	r7, #24
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <std>:
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	b510      	push	{r4, lr}
 8007a50:	4604      	mov	r4, r0
 8007a52:	e9c0 3300 	strd	r3, r3, [r0]
 8007a56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a5a:	6083      	str	r3, [r0, #8]
 8007a5c:	8181      	strh	r1, [r0, #12]
 8007a5e:	6643      	str	r3, [r0, #100]	; 0x64
 8007a60:	81c2      	strh	r2, [r0, #14]
 8007a62:	6183      	str	r3, [r0, #24]
 8007a64:	4619      	mov	r1, r3
 8007a66:	2208      	movs	r2, #8
 8007a68:	305c      	adds	r0, #92	; 0x5c
 8007a6a:	f000 f93a 	bl	8007ce2 <memset>
 8007a6e:	4b0d      	ldr	r3, [pc, #52]	; (8007aa4 <std+0x58>)
 8007a70:	6263      	str	r3, [r4, #36]	; 0x24
 8007a72:	4b0d      	ldr	r3, [pc, #52]	; (8007aa8 <std+0x5c>)
 8007a74:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a76:	4b0d      	ldr	r3, [pc, #52]	; (8007aac <std+0x60>)
 8007a78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a7a:	4b0d      	ldr	r3, [pc, #52]	; (8007ab0 <std+0x64>)
 8007a7c:	6323      	str	r3, [r4, #48]	; 0x30
 8007a7e:	4b0d      	ldr	r3, [pc, #52]	; (8007ab4 <std+0x68>)
 8007a80:	6224      	str	r4, [r4, #32]
 8007a82:	429c      	cmp	r4, r3
 8007a84:	d006      	beq.n	8007a94 <std+0x48>
 8007a86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007a8a:	4294      	cmp	r4, r2
 8007a8c:	d002      	beq.n	8007a94 <std+0x48>
 8007a8e:	33d0      	adds	r3, #208	; 0xd0
 8007a90:	429c      	cmp	r4, r3
 8007a92:	d105      	bne.n	8007aa0 <std+0x54>
 8007a94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a9c:	f000 b99a 	b.w	8007dd4 <__retarget_lock_init_recursive>
 8007aa0:	bd10      	pop	{r4, pc}
 8007aa2:	bf00      	nop
 8007aa4:	08007c5d 	.word	0x08007c5d
 8007aa8:	08007c7f 	.word	0x08007c7f
 8007aac:	08007cb7 	.word	0x08007cb7
 8007ab0:	08007cdb 	.word	0x08007cdb
 8007ab4:	20000418 	.word	0x20000418

08007ab8 <stdio_exit_handler>:
 8007ab8:	4a02      	ldr	r2, [pc, #8]	; (8007ac4 <stdio_exit_handler+0xc>)
 8007aba:	4903      	ldr	r1, [pc, #12]	; (8007ac8 <stdio_exit_handler+0x10>)
 8007abc:	4803      	ldr	r0, [pc, #12]	; (8007acc <stdio_exit_handler+0x14>)
 8007abe:	f000 b869 	b.w	8007b94 <_fwalk_sglue>
 8007ac2:	bf00      	nop
 8007ac4:	20000014 	.word	0x20000014
 8007ac8:	08008931 	.word	0x08008931
 8007acc:	20000020 	.word	0x20000020

08007ad0 <cleanup_stdio>:
 8007ad0:	6841      	ldr	r1, [r0, #4]
 8007ad2:	4b0c      	ldr	r3, [pc, #48]	; (8007b04 <cleanup_stdio+0x34>)
 8007ad4:	4299      	cmp	r1, r3
 8007ad6:	b510      	push	{r4, lr}
 8007ad8:	4604      	mov	r4, r0
 8007ada:	d001      	beq.n	8007ae0 <cleanup_stdio+0x10>
 8007adc:	f000 ff28 	bl	8008930 <_fflush_r>
 8007ae0:	68a1      	ldr	r1, [r4, #8]
 8007ae2:	4b09      	ldr	r3, [pc, #36]	; (8007b08 <cleanup_stdio+0x38>)
 8007ae4:	4299      	cmp	r1, r3
 8007ae6:	d002      	beq.n	8007aee <cleanup_stdio+0x1e>
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f000 ff21 	bl	8008930 <_fflush_r>
 8007aee:	68e1      	ldr	r1, [r4, #12]
 8007af0:	4b06      	ldr	r3, [pc, #24]	; (8007b0c <cleanup_stdio+0x3c>)
 8007af2:	4299      	cmp	r1, r3
 8007af4:	d004      	beq.n	8007b00 <cleanup_stdio+0x30>
 8007af6:	4620      	mov	r0, r4
 8007af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007afc:	f000 bf18 	b.w	8008930 <_fflush_r>
 8007b00:	bd10      	pop	{r4, pc}
 8007b02:	bf00      	nop
 8007b04:	20000418 	.word	0x20000418
 8007b08:	20000480 	.word	0x20000480
 8007b0c:	200004e8 	.word	0x200004e8

08007b10 <global_stdio_init.part.0>:
 8007b10:	b510      	push	{r4, lr}
 8007b12:	4b0b      	ldr	r3, [pc, #44]	; (8007b40 <global_stdio_init.part.0+0x30>)
 8007b14:	4c0b      	ldr	r4, [pc, #44]	; (8007b44 <global_stdio_init.part.0+0x34>)
 8007b16:	4a0c      	ldr	r2, [pc, #48]	; (8007b48 <global_stdio_init.part.0+0x38>)
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	2104      	movs	r1, #4
 8007b20:	f7ff ff94 	bl	8007a4c <std>
 8007b24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007b28:	2201      	movs	r2, #1
 8007b2a:	2109      	movs	r1, #9
 8007b2c:	f7ff ff8e 	bl	8007a4c <std>
 8007b30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007b34:	2202      	movs	r2, #2
 8007b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b3a:	2112      	movs	r1, #18
 8007b3c:	f7ff bf86 	b.w	8007a4c <std>
 8007b40:	20000550 	.word	0x20000550
 8007b44:	20000418 	.word	0x20000418
 8007b48:	08007ab9 	.word	0x08007ab9

08007b4c <__sfp_lock_acquire>:
 8007b4c:	4801      	ldr	r0, [pc, #4]	; (8007b54 <__sfp_lock_acquire+0x8>)
 8007b4e:	f000 b942 	b.w	8007dd6 <__retarget_lock_acquire_recursive>
 8007b52:	bf00      	nop
 8007b54:	20000559 	.word	0x20000559

08007b58 <__sfp_lock_release>:
 8007b58:	4801      	ldr	r0, [pc, #4]	; (8007b60 <__sfp_lock_release+0x8>)
 8007b5a:	f000 b93d 	b.w	8007dd8 <__retarget_lock_release_recursive>
 8007b5e:	bf00      	nop
 8007b60:	20000559 	.word	0x20000559

08007b64 <__sinit>:
 8007b64:	b510      	push	{r4, lr}
 8007b66:	4604      	mov	r4, r0
 8007b68:	f7ff fff0 	bl	8007b4c <__sfp_lock_acquire>
 8007b6c:	6a23      	ldr	r3, [r4, #32]
 8007b6e:	b11b      	cbz	r3, 8007b78 <__sinit+0x14>
 8007b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b74:	f7ff bff0 	b.w	8007b58 <__sfp_lock_release>
 8007b78:	4b04      	ldr	r3, [pc, #16]	; (8007b8c <__sinit+0x28>)
 8007b7a:	6223      	str	r3, [r4, #32]
 8007b7c:	4b04      	ldr	r3, [pc, #16]	; (8007b90 <__sinit+0x2c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1f5      	bne.n	8007b70 <__sinit+0xc>
 8007b84:	f7ff ffc4 	bl	8007b10 <global_stdio_init.part.0>
 8007b88:	e7f2      	b.n	8007b70 <__sinit+0xc>
 8007b8a:	bf00      	nop
 8007b8c:	08007ad1 	.word	0x08007ad1
 8007b90:	20000550 	.word	0x20000550

08007b94 <_fwalk_sglue>:
 8007b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b98:	4607      	mov	r7, r0
 8007b9a:	4688      	mov	r8, r1
 8007b9c:	4614      	mov	r4, r2
 8007b9e:	2600      	movs	r6, #0
 8007ba0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ba4:	f1b9 0901 	subs.w	r9, r9, #1
 8007ba8:	d505      	bpl.n	8007bb6 <_fwalk_sglue+0x22>
 8007baa:	6824      	ldr	r4, [r4, #0]
 8007bac:	2c00      	cmp	r4, #0
 8007bae:	d1f7      	bne.n	8007ba0 <_fwalk_sglue+0xc>
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bb6:	89ab      	ldrh	r3, [r5, #12]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d907      	bls.n	8007bcc <_fwalk_sglue+0x38>
 8007bbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	d003      	beq.n	8007bcc <_fwalk_sglue+0x38>
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	47c0      	blx	r8
 8007bca:	4306      	orrs	r6, r0
 8007bcc:	3568      	adds	r5, #104	; 0x68
 8007bce:	e7e9      	b.n	8007ba4 <_fwalk_sglue+0x10>

08007bd0 <iprintf>:
 8007bd0:	b40f      	push	{r0, r1, r2, r3}
 8007bd2:	b507      	push	{r0, r1, r2, lr}
 8007bd4:	4906      	ldr	r1, [pc, #24]	; (8007bf0 <iprintf+0x20>)
 8007bd6:	ab04      	add	r3, sp, #16
 8007bd8:	6808      	ldr	r0, [r1, #0]
 8007bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bde:	6881      	ldr	r1, [r0, #8]
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	f000 fb75 	bl	80082d0 <_vfiprintf_r>
 8007be6:	b003      	add	sp, #12
 8007be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bec:	b004      	add	sp, #16
 8007bee:	4770      	bx	lr
 8007bf0:	2000006c 	.word	0x2000006c

08007bf4 <sniprintf>:
 8007bf4:	b40c      	push	{r2, r3}
 8007bf6:	b530      	push	{r4, r5, lr}
 8007bf8:	4b17      	ldr	r3, [pc, #92]	; (8007c58 <sniprintf+0x64>)
 8007bfa:	1e0c      	subs	r4, r1, #0
 8007bfc:	681d      	ldr	r5, [r3, #0]
 8007bfe:	b09d      	sub	sp, #116	; 0x74
 8007c00:	da08      	bge.n	8007c14 <sniprintf+0x20>
 8007c02:	238b      	movs	r3, #139	; 0x8b
 8007c04:	602b      	str	r3, [r5, #0]
 8007c06:	f04f 30ff 	mov.w	r0, #4294967295
 8007c0a:	b01d      	add	sp, #116	; 0x74
 8007c0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c10:	b002      	add	sp, #8
 8007c12:	4770      	bx	lr
 8007c14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007c18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007c1c:	bf14      	ite	ne
 8007c1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007c22:	4623      	moveq	r3, r4
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	9307      	str	r3, [sp, #28]
 8007c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c2c:	9002      	str	r0, [sp, #8]
 8007c2e:	9006      	str	r0, [sp, #24]
 8007c30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007c34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007c36:	ab21      	add	r3, sp, #132	; 0x84
 8007c38:	a902      	add	r1, sp, #8
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	9301      	str	r3, [sp, #4]
 8007c3e:	f000 fa1f 	bl	8008080 <_svfiprintf_r>
 8007c42:	1c43      	adds	r3, r0, #1
 8007c44:	bfbc      	itt	lt
 8007c46:	238b      	movlt	r3, #139	; 0x8b
 8007c48:	602b      	strlt	r3, [r5, #0]
 8007c4a:	2c00      	cmp	r4, #0
 8007c4c:	d0dd      	beq.n	8007c0a <sniprintf+0x16>
 8007c4e:	9b02      	ldr	r3, [sp, #8]
 8007c50:	2200      	movs	r2, #0
 8007c52:	701a      	strb	r2, [r3, #0]
 8007c54:	e7d9      	b.n	8007c0a <sniprintf+0x16>
 8007c56:	bf00      	nop
 8007c58:	2000006c 	.word	0x2000006c

08007c5c <__sread>:
 8007c5c:	b510      	push	{r4, lr}
 8007c5e:	460c      	mov	r4, r1
 8007c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c64:	f000 f868 	bl	8007d38 <_read_r>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	bfab      	itete	ge
 8007c6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8007c70:	181b      	addge	r3, r3, r0
 8007c72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c76:	bfac      	ite	ge
 8007c78:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c7a:	81a3      	strhlt	r3, [r4, #12]
 8007c7c:	bd10      	pop	{r4, pc}

08007c7e <__swrite>:
 8007c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c82:	461f      	mov	r7, r3
 8007c84:	898b      	ldrh	r3, [r1, #12]
 8007c86:	05db      	lsls	r3, r3, #23
 8007c88:	4605      	mov	r5, r0
 8007c8a:	460c      	mov	r4, r1
 8007c8c:	4616      	mov	r6, r2
 8007c8e:	d505      	bpl.n	8007c9c <__swrite+0x1e>
 8007c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c94:	2302      	movs	r3, #2
 8007c96:	2200      	movs	r2, #0
 8007c98:	f000 f83c 	bl	8007d14 <_lseek_r>
 8007c9c:	89a3      	ldrh	r3, [r4, #12]
 8007c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ca6:	81a3      	strh	r3, [r4, #12]
 8007ca8:	4632      	mov	r2, r6
 8007caa:	463b      	mov	r3, r7
 8007cac:	4628      	mov	r0, r5
 8007cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb2:	f000 b853 	b.w	8007d5c <_write_r>

08007cb6 <__sseek>:
 8007cb6:	b510      	push	{r4, lr}
 8007cb8:	460c      	mov	r4, r1
 8007cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cbe:	f000 f829 	bl	8007d14 <_lseek_r>
 8007cc2:	1c43      	adds	r3, r0, #1
 8007cc4:	89a3      	ldrh	r3, [r4, #12]
 8007cc6:	bf15      	itete	ne
 8007cc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cd2:	81a3      	strheq	r3, [r4, #12]
 8007cd4:	bf18      	it	ne
 8007cd6:	81a3      	strhne	r3, [r4, #12]
 8007cd8:	bd10      	pop	{r4, pc}

08007cda <__sclose>:
 8007cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cde:	f000 b809 	b.w	8007cf4 <_close_r>

08007ce2 <memset>:
 8007ce2:	4402      	add	r2, r0
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d100      	bne.n	8007cec <memset+0xa>
 8007cea:	4770      	bx	lr
 8007cec:	f803 1b01 	strb.w	r1, [r3], #1
 8007cf0:	e7f9      	b.n	8007ce6 <memset+0x4>
	...

08007cf4 <_close_r>:
 8007cf4:	b538      	push	{r3, r4, r5, lr}
 8007cf6:	4d06      	ldr	r5, [pc, #24]	; (8007d10 <_close_r+0x1c>)
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	4608      	mov	r0, r1
 8007cfe:	602b      	str	r3, [r5, #0]
 8007d00:	f7fa fa51 	bl	80021a6 <_close>
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	d102      	bne.n	8007d0e <_close_r+0x1a>
 8007d08:	682b      	ldr	r3, [r5, #0]
 8007d0a:	b103      	cbz	r3, 8007d0e <_close_r+0x1a>
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	bd38      	pop	{r3, r4, r5, pc}
 8007d10:	20000554 	.word	0x20000554

08007d14 <_lseek_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	4d07      	ldr	r5, [pc, #28]	; (8007d34 <_lseek_r+0x20>)
 8007d18:	4604      	mov	r4, r0
 8007d1a:	4608      	mov	r0, r1
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	2200      	movs	r2, #0
 8007d20:	602a      	str	r2, [r5, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	f7fa fa66 	bl	80021f4 <_lseek>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d102      	bne.n	8007d32 <_lseek_r+0x1e>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	b103      	cbz	r3, 8007d32 <_lseek_r+0x1e>
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	20000554 	.word	0x20000554

08007d38 <_read_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4d07      	ldr	r5, [pc, #28]	; (8007d58 <_read_r+0x20>)
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	4608      	mov	r0, r1
 8007d40:	4611      	mov	r1, r2
 8007d42:	2200      	movs	r2, #0
 8007d44:	602a      	str	r2, [r5, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	f7fa f9f4 	bl	8002134 <_read>
 8007d4c:	1c43      	adds	r3, r0, #1
 8007d4e:	d102      	bne.n	8007d56 <_read_r+0x1e>
 8007d50:	682b      	ldr	r3, [r5, #0]
 8007d52:	b103      	cbz	r3, 8007d56 <_read_r+0x1e>
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	bd38      	pop	{r3, r4, r5, pc}
 8007d58:	20000554 	.word	0x20000554

08007d5c <_write_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d07      	ldr	r5, [pc, #28]	; (8007d7c <_write_r+0x20>)
 8007d60:	4604      	mov	r4, r0
 8007d62:	4608      	mov	r0, r1
 8007d64:	4611      	mov	r1, r2
 8007d66:	2200      	movs	r2, #0
 8007d68:	602a      	str	r2, [r5, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f7fa f9ff 	bl	800216e <_write>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d102      	bne.n	8007d7a <_write_r+0x1e>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b103      	cbz	r3, 8007d7a <_write_r+0x1e>
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	20000554 	.word	0x20000554

08007d80 <__errno>:
 8007d80:	4b01      	ldr	r3, [pc, #4]	; (8007d88 <__errno+0x8>)
 8007d82:	6818      	ldr	r0, [r3, #0]
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	2000006c 	.word	0x2000006c

08007d8c <__libc_init_array>:
 8007d8c:	b570      	push	{r4, r5, r6, lr}
 8007d8e:	4d0d      	ldr	r5, [pc, #52]	; (8007dc4 <__libc_init_array+0x38>)
 8007d90:	4c0d      	ldr	r4, [pc, #52]	; (8007dc8 <__libc_init_array+0x3c>)
 8007d92:	1b64      	subs	r4, r4, r5
 8007d94:	10a4      	asrs	r4, r4, #2
 8007d96:	2600      	movs	r6, #0
 8007d98:	42a6      	cmp	r6, r4
 8007d9a:	d109      	bne.n	8007db0 <__libc_init_array+0x24>
 8007d9c:	4d0b      	ldr	r5, [pc, #44]	; (8007dcc <__libc_init_array+0x40>)
 8007d9e:	4c0c      	ldr	r4, [pc, #48]	; (8007dd0 <__libc_init_array+0x44>)
 8007da0:	f000 ff78 	bl	8008c94 <_init>
 8007da4:	1b64      	subs	r4, r4, r5
 8007da6:	10a4      	asrs	r4, r4, #2
 8007da8:	2600      	movs	r6, #0
 8007daa:	42a6      	cmp	r6, r4
 8007dac:	d105      	bne.n	8007dba <__libc_init_array+0x2e>
 8007dae:	bd70      	pop	{r4, r5, r6, pc}
 8007db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007db4:	4798      	blx	r3
 8007db6:	3601      	adds	r6, #1
 8007db8:	e7ee      	b.n	8007d98 <__libc_init_array+0xc>
 8007dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dbe:	4798      	blx	r3
 8007dc0:	3601      	adds	r6, #1
 8007dc2:	e7f2      	b.n	8007daa <__libc_init_array+0x1e>
 8007dc4:	08009620 	.word	0x08009620
 8007dc8:	08009620 	.word	0x08009620
 8007dcc:	08009620 	.word	0x08009620
 8007dd0:	08009624 	.word	0x08009624

08007dd4 <__retarget_lock_init_recursive>:
 8007dd4:	4770      	bx	lr

08007dd6 <__retarget_lock_acquire_recursive>:
 8007dd6:	4770      	bx	lr

08007dd8 <__retarget_lock_release_recursive>:
 8007dd8:	4770      	bx	lr
	...

08007ddc <_free_r>:
 8007ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dde:	2900      	cmp	r1, #0
 8007de0:	d044      	beq.n	8007e6c <_free_r+0x90>
 8007de2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007de6:	9001      	str	r0, [sp, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f1a1 0404 	sub.w	r4, r1, #4
 8007dee:	bfb8      	it	lt
 8007df0:	18e4      	addlt	r4, r4, r3
 8007df2:	f000 f8df 	bl	8007fb4 <__malloc_lock>
 8007df6:	4a1e      	ldr	r2, [pc, #120]	; (8007e70 <_free_r+0x94>)
 8007df8:	9801      	ldr	r0, [sp, #4]
 8007dfa:	6813      	ldr	r3, [r2, #0]
 8007dfc:	b933      	cbnz	r3, 8007e0c <_free_r+0x30>
 8007dfe:	6063      	str	r3, [r4, #4]
 8007e00:	6014      	str	r4, [r2, #0]
 8007e02:	b003      	add	sp, #12
 8007e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e08:	f000 b8da 	b.w	8007fc0 <__malloc_unlock>
 8007e0c:	42a3      	cmp	r3, r4
 8007e0e:	d908      	bls.n	8007e22 <_free_r+0x46>
 8007e10:	6825      	ldr	r5, [r4, #0]
 8007e12:	1961      	adds	r1, r4, r5
 8007e14:	428b      	cmp	r3, r1
 8007e16:	bf01      	itttt	eq
 8007e18:	6819      	ldreq	r1, [r3, #0]
 8007e1a:	685b      	ldreq	r3, [r3, #4]
 8007e1c:	1949      	addeq	r1, r1, r5
 8007e1e:	6021      	streq	r1, [r4, #0]
 8007e20:	e7ed      	b.n	8007dfe <_free_r+0x22>
 8007e22:	461a      	mov	r2, r3
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	b10b      	cbz	r3, 8007e2c <_free_r+0x50>
 8007e28:	42a3      	cmp	r3, r4
 8007e2a:	d9fa      	bls.n	8007e22 <_free_r+0x46>
 8007e2c:	6811      	ldr	r1, [r2, #0]
 8007e2e:	1855      	adds	r5, r2, r1
 8007e30:	42a5      	cmp	r5, r4
 8007e32:	d10b      	bne.n	8007e4c <_free_r+0x70>
 8007e34:	6824      	ldr	r4, [r4, #0]
 8007e36:	4421      	add	r1, r4
 8007e38:	1854      	adds	r4, r2, r1
 8007e3a:	42a3      	cmp	r3, r4
 8007e3c:	6011      	str	r1, [r2, #0]
 8007e3e:	d1e0      	bne.n	8007e02 <_free_r+0x26>
 8007e40:	681c      	ldr	r4, [r3, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	6053      	str	r3, [r2, #4]
 8007e46:	440c      	add	r4, r1
 8007e48:	6014      	str	r4, [r2, #0]
 8007e4a:	e7da      	b.n	8007e02 <_free_r+0x26>
 8007e4c:	d902      	bls.n	8007e54 <_free_r+0x78>
 8007e4e:	230c      	movs	r3, #12
 8007e50:	6003      	str	r3, [r0, #0]
 8007e52:	e7d6      	b.n	8007e02 <_free_r+0x26>
 8007e54:	6825      	ldr	r5, [r4, #0]
 8007e56:	1961      	adds	r1, r4, r5
 8007e58:	428b      	cmp	r3, r1
 8007e5a:	bf04      	itt	eq
 8007e5c:	6819      	ldreq	r1, [r3, #0]
 8007e5e:	685b      	ldreq	r3, [r3, #4]
 8007e60:	6063      	str	r3, [r4, #4]
 8007e62:	bf04      	itt	eq
 8007e64:	1949      	addeq	r1, r1, r5
 8007e66:	6021      	streq	r1, [r4, #0]
 8007e68:	6054      	str	r4, [r2, #4]
 8007e6a:	e7ca      	b.n	8007e02 <_free_r+0x26>
 8007e6c:	b003      	add	sp, #12
 8007e6e:	bd30      	pop	{r4, r5, pc}
 8007e70:	2000055c 	.word	0x2000055c

08007e74 <sbrk_aligned>:
 8007e74:	b570      	push	{r4, r5, r6, lr}
 8007e76:	4e0e      	ldr	r6, [pc, #56]	; (8007eb0 <sbrk_aligned+0x3c>)
 8007e78:	460c      	mov	r4, r1
 8007e7a:	6831      	ldr	r1, [r6, #0]
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	b911      	cbnz	r1, 8007e86 <sbrk_aligned+0x12>
 8007e80:	f000 fe2e 	bl	8008ae0 <_sbrk_r>
 8007e84:	6030      	str	r0, [r6, #0]
 8007e86:	4621      	mov	r1, r4
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f000 fe29 	bl	8008ae0 <_sbrk_r>
 8007e8e:	1c43      	adds	r3, r0, #1
 8007e90:	d00a      	beq.n	8007ea8 <sbrk_aligned+0x34>
 8007e92:	1cc4      	adds	r4, r0, #3
 8007e94:	f024 0403 	bic.w	r4, r4, #3
 8007e98:	42a0      	cmp	r0, r4
 8007e9a:	d007      	beq.n	8007eac <sbrk_aligned+0x38>
 8007e9c:	1a21      	subs	r1, r4, r0
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f000 fe1e 	bl	8008ae0 <_sbrk_r>
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d101      	bne.n	8007eac <sbrk_aligned+0x38>
 8007ea8:	f04f 34ff 	mov.w	r4, #4294967295
 8007eac:	4620      	mov	r0, r4
 8007eae:	bd70      	pop	{r4, r5, r6, pc}
 8007eb0:	20000560 	.word	0x20000560

08007eb4 <_malloc_r>:
 8007eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eb8:	1ccd      	adds	r5, r1, #3
 8007eba:	f025 0503 	bic.w	r5, r5, #3
 8007ebe:	3508      	adds	r5, #8
 8007ec0:	2d0c      	cmp	r5, #12
 8007ec2:	bf38      	it	cc
 8007ec4:	250c      	movcc	r5, #12
 8007ec6:	2d00      	cmp	r5, #0
 8007ec8:	4607      	mov	r7, r0
 8007eca:	db01      	blt.n	8007ed0 <_malloc_r+0x1c>
 8007ecc:	42a9      	cmp	r1, r5
 8007ece:	d905      	bls.n	8007edc <_malloc_r+0x28>
 8007ed0:	230c      	movs	r3, #12
 8007ed2:	603b      	str	r3, [r7, #0]
 8007ed4:	2600      	movs	r6, #0
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007edc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007fb0 <_malloc_r+0xfc>
 8007ee0:	f000 f868 	bl	8007fb4 <__malloc_lock>
 8007ee4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ee8:	461c      	mov	r4, r3
 8007eea:	bb5c      	cbnz	r4, 8007f44 <_malloc_r+0x90>
 8007eec:	4629      	mov	r1, r5
 8007eee:	4638      	mov	r0, r7
 8007ef0:	f7ff ffc0 	bl	8007e74 <sbrk_aligned>
 8007ef4:	1c43      	adds	r3, r0, #1
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	d155      	bne.n	8007fa6 <_malloc_r+0xf2>
 8007efa:	f8d8 4000 	ldr.w	r4, [r8]
 8007efe:	4626      	mov	r6, r4
 8007f00:	2e00      	cmp	r6, #0
 8007f02:	d145      	bne.n	8007f90 <_malloc_r+0xdc>
 8007f04:	2c00      	cmp	r4, #0
 8007f06:	d048      	beq.n	8007f9a <_malloc_r+0xe6>
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	4631      	mov	r1, r6
 8007f0c:	4638      	mov	r0, r7
 8007f0e:	eb04 0903 	add.w	r9, r4, r3
 8007f12:	f000 fde5 	bl	8008ae0 <_sbrk_r>
 8007f16:	4581      	cmp	r9, r0
 8007f18:	d13f      	bne.n	8007f9a <_malloc_r+0xe6>
 8007f1a:	6821      	ldr	r1, [r4, #0]
 8007f1c:	1a6d      	subs	r5, r5, r1
 8007f1e:	4629      	mov	r1, r5
 8007f20:	4638      	mov	r0, r7
 8007f22:	f7ff ffa7 	bl	8007e74 <sbrk_aligned>
 8007f26:	3001      	adds	r0, #1
 8007f28:	d037      	beq.n	8007f9a <_malloc_r+0xe6>
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	442b      	add	r3, r5
 8007f2e:	6023      	str	r3, [r4, #0]
 8007f30:	f8d8 3000 	ldr.w	r3, [r8]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d038      	beq.n	8007faa <_malloc_r+0xf6>
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	42a2      	cmp	r2, r4
 8007f3c:	d12b      	bne.n	8007f96 <_malloc_r+0xe2>
 8007f3e:	2200      	movs	r2, #0
 8007f40:	605a      	str	r2, [r3, #4]
 8007f42:	e00f      	b.n	8007f64 <_malloc_r+0xb0>
 8007f44:	6822      	ldr	r2, [r4, #0]
 8007f46:	1b52      	subs	r2, r2, r5
 8007f48:	d41f      	bmi.n	8007f8a <_malloc_r+0xd6>
 8007f4a:	2a0b      	cmp	r2, #11
 8007f4c:	d917      	bls.n	8007f7e <_malloc_r+0xca>
 8007f4e:	1961      	adds	r1, r4, r5
 8007f50:	42a3      	cmp	r3, r4
 8007f52:	6025      	str	r5, [r4, #0]
 8007f54:	bf18      	it	ne
 8007f56:	6059      	strne	r1, [r3, #4]
 8007f58:	6863      	ldr	r3, [r4, #4]
 8007f5a:	bf08      	it	eq
 8007f5c:	f8c8 1000 	streq.w	r1, [r8]
 8007f60:	5162      	str	r2, [r4, r5]
 8007f62:	604b      	str	r3, [r1, #4]
 8007f64:	4638      	mov	r0, r7
 8007f66:	f104 060b 	add.w	r6, r4, #11
 8007f6a:	f000 f829 	bl	8007fc0 <__malloc_unlock>
 8007f6e:	f026 0607 	bic.w	r6, r6, #7
 8007f72:	1d23      	adds	r3, r4, #4
 8007f74:	1af2      	subs	r2, r6, r3
 8007f76:	d0ae      	beq.n	8007ed6 <_malloc_r+0x22>
 8007f78:	1b9b      	subs	r3, r3, r6
 8007f7a:	50a3      	str	r3, [r4, r2]
 8007f7c:	e7ab      	b.n	8007ed6 <_malloc_r+0x22>
 8007f7e:	42a3      	cmp	r3, r4
 8007f80:	6862      	ldr	r2, [r4, #4]
 8007f82:	d1dd      	bne.n	8007f40 <_malloc_r+0x8c>
 8007f84:	f8c8 2000 	str.w	r2, [r8]
 8007f88:	e7ec      	b.n	8007f64 <_malloc_r+0xb0>
 8007f8a:	4623      	mov	r3, r4
 8007f8c:	6864      	ldr	r4, [r4, #4]
 8007f8e:	e7ac      	b.n	8007eea <_malloc_r+0x36>
 8007f90:	4634      	mov	r4, r6
 8007f92:	6876      	ldr	r6, [r6, #4]
 8007f94:	e7b4      	b.n	8007f00 <_malloc_r+0x4c>
 8007f96:	4613      	mov	r3, r2
 8007f98:	e7cc      	b.n	8007f34 <_malloc_r+0x80>
 8007f9a:	230c      	movs	r3, #12
 8007f9c:	603b      	str	r3, [r7, #0]
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	f000 f80e 	bl	8007fc0 <__malloc_unlock>
 8007fa4:	e797      	b.n	8007ed6 <_malloc_r+0x22>
 8007fa6:	6025      	str	r5, [r4, #0]
 8007fa8:	e7dc      	b.n	8007f64 <_malloc_r+0xb0>
 8007faa:	605b      	str	r3, [r3, #4]
 8007fac:	deff      	udf	#255	; 0xff
 8007fae:	bf00      	nop
 8007fb0:	2000055c 	.word	0x2000055c

08007fb4 <__malloc_lock>:
 8007fb4:	4801      	ldr	r0, [pc, #4]	; (8007fbc <__malloc_lock+0x8>)
 8007fb6:	f7ff bf0e 	b.w	8007dd6 <__retarget_lock_acquire_recursive>
 8007fba:	bf00      	nop
 8007fbc:	20000558 	.word	0x20000558

08007fc0 <__malloc_unlock>:
 8007fc0:	4801      	ldr	r0, [pc, #4]	; (8007fc8 <__malloc_unlock+0x8>)
 8007fc2:	f7ff bf09 	b.w	8007dd8 <__retarget_lock_release_recursive>
 8007fc6:	bf00      	nop
 8007fc8:	20000558 	.word	0x20000558

08007fcc <__ssputs_r>:
 8007fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd0:	688e      	ldr	r6, [r1, #8]
 8007fd2:	461f      	mov	r7, r3
 8007fd4:	42be      	cmp	r6, r7
 8007fd6:	680b      	ldr	r3, [r1, #0]
 8007fd8:	4682      	mov	sl, r0
 8007fda:	460c      	mov	r4, r1
 8007fdc:	4690      	mov	r8, r2
 8007fde:	d82c      	bhi.n	800803a <__ssputs_r+0x6e>
 8007fe0:	898a      	ldrh	r2, [r1, #12]
 8007fe2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fe6:	d026      	beq.n	8008036 <__ssputs_r+0x6a>
 8007fe8:	6965      	ldr	r5, [r4, #20]
 8007fea:	6909      	ldr	r1, [r1, #16]
 8007fec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ff0:	eba3 0901 	sub.w	r9, r3, r1
 8007ff4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ff8:	1c7b      	adds	r3, r7, #1
 8007ffa:	444b      	add	r3, r9
 8007ffc:	106d      	asrs	r5, r5, #1
 8007ffe:	429d      	cmp	r5, r3
 8008000:	bf38      	it	cc
 8008002:	461d      	movcc	r5, r3
 8008004:	0553      	lsls	r3, r2, #21
 8008006:	d527      	bpl.n	8008058 <__ssputs_r+0x8c>
 8008008:	4629      	mov	r1, r5
 800800a:	f7ff ff53 	bl	8007eb4 <_malloc_r>
 800800e:	4606      	mov	r6, r0
 8008010:	b360      	cbz	r0, 800806c <__ssputs_r+0xa0>
 8008012:	6921      	ldr	r1, [r4, #16]
 8008014:	464a      	mov	r2, r9
 8008016:	f000 fd73 	bl	8008b00 <memcpy>
 800801a:	89a3      	ldrh	r3, [r4, #12]
 800801c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008024:	81a3      	strh	r3, [r4, #12]
 8008026:	6126      	str	r6, [r4, #16]
 8008028:	6165      	str	r5, [r4, #20]
 800802a:	444e      	add	r6, r9
 800802c:	eba5 0509 	sub.w	r5, r5, r9
 8008030:	6026      	str	r6, [r4, #0]
 8008032:	60a5      	str	r5, [r4, #8]
 8008034:	463e      	mov	r6, r7
 8008036:	42be      	cmp	r6, r7
 8008038:	d900      	bls.n	800803c <__ssputs_r+0x70>
 800803a:	463e      	mov	r6, r7
 800803c:	6820      	ldr	r0, [r4, #0]
 800803e:	4632      	mov	r2, r6
 8008040:	4641      	mov	r1, r8
 8008042:	f000 fd33 	bl	8008aac <memmove>
 8008046:	68a3      	ldr	r3, [r4, #8]
 8008048:	1b9b      	subs	r3, r3, r6
 800804a:	60a3      	str	r3, [r4, #8]
 800804c:	6823      	ldr	r3, [r4, #0]
 800804e:	4433      	add	r3, r6
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	2000      	movs	r0, #0
 8008054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008058:	462a      	mov	r2, r5
 800805a:	f000 fd5f 	bl	8008b1c <_realloc_r>
 800805e:	4606      	mov	r6, r0
 8008060:	2800      	cmp	r0, #0
 8008062:	d1e0      	bne.n	8008026 <__ssputs_r+0x5a>
 8008064:	6921      	ldr	r1, [r4, #16]
 8008066:	4650      	mov	r0, sl
 8008068:	f7ff feb8 	bl	8007ddc <_free_r>
 800806c:	230c      	movs	r3, #12
 800806e:	f8ca 3000 	str.w	r3, [sl]
 8008072:	89a3      	ldrh	r3, [r4, #12]
 8008074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008078:	81a3      	strh	r3, [r4, #12]
 800807a:	f04f 30ff 	mov.w	r0, #4294967295
 800807e:	e7e9      	b.n	8008054 <__ssputs_r+0x88>

08008080 <_svfiprintf_r>:
 8008080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008084:	4698      	mov	r8, r3
 8008086:	898b      	ldrh	r3, [r1, #12]
 8008088:	061b      	lsls	r3, r3, #24
 800808a:	b09d      	sub	sp, #116	; 0x74
 800808c:	4607      	mov	r7, r0
 800808e:	460d      	mov	r5, r1
 8008090:	4614      	mov	r4, r2
 8008092:	d50e      	bpl.n	80080b2 <_svfiprintf_r+0x32>
 8008094:	690b      	ldr	r3, [r1, #16]
 8008096:	b963      	cbnz	r3, 80080b2 <_svfiprintf_r+0x32>
 8008098:	2140      	movs	r1, #64	; 0x40
 800809a:	f7ff ff0b 	bl	8007eb4 <_malloc_r>
 800809e:	6028      	str	r0, [r5, #0]
 80080a0:	6128      	str	r0, [r5, #16]
 80080a2:	b920      	cbnz	r0, 80080ae <_svfiprintf_r+0x2e>
 80080a4:	230c      	movs	r3, #12
 80080a6:	603b      	str	r3, [r7, #0]
 80080a8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ac:	e0d0      	b.n	8008250 <_svfiprintf_r+0x1d0>
 80080ae:	2340      	movs	r3, #64	; 0x40
 80080b0:	616b      	str	r3, [r5, #20]
 80080b2:	2300      	movs	r3, #0
 80080b4:	9309      	str	r3, [sp, #36]	; 0x24
 80080b6:	2320      	movs	r3, #32
 80080b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80080c0:	2330      	movs	r3, #48	; 0x30
 80080c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008268 <_svfiprintf_r+0x1e8>
 80080c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080ca:	f04f 0901 	mov.w	r9, #1
 80080ce:	4623      	mov	r3, r4
 80080d0:	469a      	mov	sl, r3
 80080d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080d6:	b10a      	cbz	r2, 80080dc <_svfiprintf_r+0x5c>
 80080d8:	2a25      	cmp	r2, #37	; 0x25
 80080da:	d1f9      	bne.n	80080d0 <_svfiprintf_r+0x50>
 80080dc:	ebba 0b04 	subs.w	fp, sl, r4
 80080e0:	d00b      	beq.n	80080fa <_svfiprintf_r+0x7a>
 80080e2:	465b      	mov	r3, fp
 80080e4:	4622      	mov	r2, r4
 80080e6:	4629      	mov	r1, r5
 80080e8:	4638      	mov	r0, r7
 80080ea:	f7ff ff6f 	bl	8007fcc <__ssputs_r>
 80080ee:	3001      	adds	r0, #1
 80080f0:	f000 80a9 	beq.w	8008246 <_svfiprintf_r+0x1c6>
 80080f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080f6:	445a      	add	r2, fp
 80080f8:	9209      	str	r2, [sp, #36]	; 0x24
 80080fa:	f89a 3000 	ldrb.w	r3, [sl]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f000 80a1 	beq.w	8008246 <_svfiprintf_r+0x1c6>
 8008104:	2300      	movs	r3, #0
 8008106:	f04f 32ff 	mov.w	r2, #4294967295
 800810a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800810e:	f10a 0a01 	add.w	sl, sl, #1
 8008112:	9304      	str	r3, [sp, #16]
 8008114:	9307      	str	r3, [sp, #28]
 8008116:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800811a:	931a      	str	r3, [sp, #104]	; 0x68
 800811c:	4654      	mov	r4, sl
 800811e:	2205      	movs	r2, #5
 8008120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008124:	4850      	ldr	r0, [pc, #320]	; (8008268 <_svfiprintf_r+0x1e8>)
 8008126:	f7f8 f853 	bl	80001d0 <memchr>
 800812a:	9a04      	ldr	r2, [sp, #16]
 800812c:	b9d8      	cbnz	r0, 8008166 <_svfiprintf_r+0xe6>
 800812e:	06d0      	lsls	r0, r2, #27
 8008130:	bf44      	itt	mi
 8008132:	2320      	movmi	r3, #32
 8008134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008138:	0711      	lsls	r1, r2, #28
 800813a:	bf44      	itt	mi
 800813c:	232b      	movmi	r3, #43	; 0x2b
 800813e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008142:	f89a 3000 	ldrb.w	r3, [sl]
 8008146:	2b2a      	cmp	r3, #42	; 0x2a
 8008148:	d015      	beq.n	8008176 <_svfiprintf_r+0xf6>
 800814a:	9a07      	ldr	r2, [sp, #28]
 800814c:	4654      	mov	r4, sl
 800814e:	2000      	movs	r0, #0
 8008150:	f04f 0c0a 	mov.w	ip, #10
 8008154:	4621      	mov	r1, r4
 8008156:	f811 3b01 	ldrb.w	r3, [r1], #1
 800815a:	3b30      	subs	r3, #48	; 0x30
 800815c:	2b09      	cmp	r3, #9
 800815e:	d94d      	bls.n	80081fc <_svfiprintf_r+0x17c>
 8008160:	b1b0      	cbz	r0, 8008190 <_svfiprintf_r+0x110>
 8008162:	9207      	str	r2, [sp, #28]
 8008164:	e014      	b.n	8008190 <_svfiprintf_r+0x110>
 8008166:	eba0 0308 	sub.w	r3, r0, r8
 800816a:	fa09 f303 	lsl.w	r3, r9, r3
 800816e:	4313      	orrs	r3, r2
 8008170:	9304      	str	r3, [sp, #16]
 8008172:	46a2      	mov	sl, r4
 8008174:	e7d2      	b.n	800811c <_svfiprintf_r+0x9c>
 8008176:	9b03      	ldr	r3, [sp, #12]
 8008178:	1d19      	adds	r1, r3, #4
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	9103      	str	r1, [sp, #12]
 800817e:	2b00      	cmp	r3, #0
 8008180:	bfbb      	ittet	lt
 8008182:	425b      	neglt	r3, r3
 8008184:	f042 0202 	orrlt.w	r2, r2, #2
 8008188:	9307      	strge	r3, [sp, #28]
 800818a:	9307      	strlt	r3, [sp, #28]
 800818c:	bfb8      	it	lt
 800818e:	9204      	strlt	r2, [sp, #16]
 8008190:	7823      	ldrb	r3, [r4, #0]
 8008192:	2b2e      	cmp	r3, #46	; 0x2e
 8008194:	d10c      	bne.n	80081b0 <_svfiprintf_r+0x130>
 8008196:	7863      	ldrb	r3, [r4, #1]
 8008198:	2b2a      	cmp	r3, #42	; 0x2a
 800819a:	d134      	bne.n	8008206 <_svfiprintf_r+0x186>
 800819c:	9b03      	ldr	r3, [sp, #12]
 800819e:	1d1a      	adds	r2, r3, #4
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	9203      	str	r2, [sp, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	bfb8      	it	lt
 80081a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80081ac:	3402      	adds	r4, #2
 80081ae:	9305      	str	r3, [sp, #20]
 80081b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008278 <_svfiprintf_r+0x1f8>
 80081b4:	7821      	ldrb	r1, [r4, #0]
 80081b6:	2203      	movs	r2, #3
 80081b8:	4650      	mov	r0, sl
 80081ba:	f7f8 f809 	bl	80001d0 <memchr>
 80081be:	b138      	cbz	r0, 80081d0 <_svfiprintf_r+0x150>
 80081c0:	9b04      	ldr	r3, [sp, #16]
 80081c2:	eba0 000a 	sub.w	r0, r0, sl
 80081c6:	2240      	movs	r2, #64	; 0x40
 80081c8:	4082      	lsls	r2, r0
 80081ca:	4313      	orrs	r3, r2
 80081cc:	3401      	adds	r4, #1
 80081ce:	9304      	str	r3, [sp, #16]
 80081d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081d4:	4825      	ldr	r0, [pc, #148]	; (800826c <_svfiprintf_r+0x1ec>)
 80081d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081da:	2206      	movs	r2, #6
 80081dc:	f7f7 fff8 	bl	80001d0 <memchr>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d038      	beq.n	8008256 <_svfiprintf_r+0x1d6>
 80081e4:	4b22      	ldr	r3, [pc, #136]	; (8008270 <_svfiprintf_r+0x1f0>)
 80081e6:	bb1b      	cbnz	r3, 8008230 <_svfiprintf_r+0x1b0>
 80081e8:	9b03      	ldr	r3, [sp, #12]
 80081ea:	3307      	adds	r3, #7
 80081ec:	f023 0307 	bic.w	r3, r3, #7
 80081f0:	3308      	adds	r3, #8
 80081f2:	9303      	str	r3, [sp, #12]
 80081f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f6:	4433      	add	r3, r6
 80081f8:	9309      	str	r3, [sp, #36]	; 0x24
 80081fa:	e768      	b.n	80080ce <_svfiprintf_r+0x4e>
 80081fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008200:	460c      	mov	r4, r1
 8008202:	2001      	movs	r0, #1
 8008204:	e7a6      	b.n	8008154 <_svfiprintf_r+0xd4>
 8008206:	2300      	movs	r3, #0
 8008208:	3401      	adds	r4, #1
 800820a:	9305      	str	r3, [sp, #20]
 800820c:	4619      	mov	r1, r3
 800820e:	f04f 0c0a 	mov.w	ip, #10
 8008212:	4620      	mov	r0, r4
 8008214:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008218:	3a30      	subs	r2, #48	; 0x30
 800821a:	2a09      	cmp	r2, #9
 800821c:	d903      	bls.n	8008226 <_svfiprintf_r+0x1a6>
 800821e:	2b00      	cmp	r3, #0
 8008220:	d0c6      	beq.n	80081b0 <_svfiprintf_r+0x130>
 8008222:	9105      	str	r1, [sp, #20]
 8008224:	e7c4      	b.n	80081b0 <_svfiprintf_r+0x130>
 8008226:	fb0c 2101 	mla	r1, ip, r1, r2
 800822a:	4604      	mov	r4, r0
 800822c:	2301      	movs	r3, #1
 800822e:	e7f0      	b.n	8008212 <_svfiprintf_r+0x192>
 8008230:	ab03      	add	r3, sp, #12
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	462a      	mov	r2, r5
 8008236:	4b0f      	ldr	r3, [pc, #60]	; (8008274 <_svfiprintf_r+0x1f4>)
 8008238:	a904      	add	r1, sp, #16
 800823a:	4638      	mov	r0, r7
 800823c:	f3af 8000 	nop.w
 8008240:	1c42      	adds	r2, r0, #1
 8008242:	4606      	mov	r6, r0
 8008244:	d1d6      	bne.n	80081f4 <_svfiprintf_r+0x174>
 8008246:	89ab      	ldrh	r3, [r5, #12]
 8008248:	065b      	lsls	r3, r3, #25
 800824a:	f53f af2d 	bmi.w	80080a8 <_svfiprintf_r+0x28>
 800824e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008250:	b01d      	add	sp, #116	; 0x74
 8008252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008256:	ab03      	add	r3, sp, #12
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	462a      	mov	r2, r5
 800825c:	4b05      	ldr	r3, [pc, #20]	; (8008274 <_svfiprintf_r+0x1f4>)
 800825e:	a904      	add	r1, sp, #16
 8008260:	4638      	mov	r0, r7
 8008262:	f000 f9bd 	bl	80085e0 <_printf_i>
 8008266:	e7eb      	b.n	8008240 <_svfiprintf_r+0x1c0>
 8008268:	080095e4 	.word	0x080095e4
 800826c:	080095ee 	.word	0x080095ee
 8008270:	00000000 	.word	0x00000000
 8008274:	08007fcd 	.word	0x08007fcd
 8008278:	080095ea 	.word	0x080095ea

0800827c <__sfputc_r>:
 800827c:	6893      	ldr	r3, [r2, #8]
 800827e:	3b01      	subs	r3, #1
 8008280:	2b00      	cmp	r3, #0
 8008282:	b410      	push	{r4}
 8008284:	6093      	str	r3, [r2, #8]
 8008286:	da08      	bge.n	800829a <__sfputc_r+0x1e>
 8008288:	6994      	ldr	r4, [r2, #24]
 800828a:	42a3      	cmp	r3, r4
 800828c:	db01      	blt.n	8008292 <__sfputc_r+0x16>
 800828e:	290a      	cmp	r1, #10
 8008290:	d103      	bne.n	800829a <__sfputc_r+0x1e>
 8008292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008296:	f000 bb73 	b.w	8008980 <__swbuf_r>
 800829a:	6813      	ldr	r3, [r2, #0]
 800829c:	1c58      	adds	r0, r3, #1
 800829e:	6010      	str	r0, [r2, #0]
 80082a0:	7019      	strb	r1, [r3, #0]
 80082a2:	4608      	mov	r0, r1
 80082a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <__sfputs_r>:
 80082aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ac:	4606      	mov	r6, r0
 80082ae:	460f      	mov	r7, r1
 80082b0:	4614      	mov	r4, r2
 80082b2:	18d5      	adds	r5, r2, r3
 80082b4:	42ac      	cmp	r4, r5
 80082b6:	d101      	bne.n	80082bc <__sfputs_r+0x12>
 80082b8:	2000      	movs	r0, #0
 80082ba:	e007      	b.n	80082cc <__sfputs_r+0x22>
 80082bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082c0:	463a      	mov	r2, r7
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7ff ffda 	bl	800827c <__sfputc_r>
 80082c8:	1c43      	adds	r3, r0, #1
 80082ca:	d1f3      	bne.n	80082b4 <__sfputs_r+0xa>
 80082cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082d0 <_vfiprintf_r>:
 80082d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	460d      	mov	r5, r1
 80082d6:	b09d      	sub	sp, #116	; 0x74
 80082d8:	4614      	mov	r4, r2
 80082da:	4698      	mov	r8, r3
 80082dc:	4606      	mov	r6, r0
 80082de:	b118      	cbz	r0, 80082e8 <_vfiprintf_r+0x18>
 80082e0:	6a03      	ldr	r3, [r0, #32]
 80082e2:	b90b      	cbnz	r3, 80082e8 <_vfiprintf_r+0x18>
 80082e4:	f7ff fc3e 	bl	8007b64 <__sinit>
 80082e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082ea:	07d9      	lsls	r1, r3, #31
 80082ec:	d405      	bmi.n	80082fa <_vfiprintf_r+0x2a>
 80082ee:	89ab      	ldrh	r3, [r5, #12]
 80082f0:	059a      	lsls	r2, r3, #22
 80082f2:	d402      	bmi.n	80082fa <_vfiprintf_r+0x2a>
 80082f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082f6:	f7ff fd6e 	bl	8007dd6 <__retarget_lock_acquire_recursive>
 80082fa:	89ab      	ldrh	r3, [r5, #12]
 80082fc:	071b      	lsls	r3, r3, #28
 80082fe:	d501      	bpl.n	8008304 <_vfiprintf_r+0x34>
 8008300:	692b      	ldr	r3, [r5, #16]
 8008302:	b99b      	cbnz	r3, 800832c <_vfiprintf_r+0x5c>
 8008304:	4629      	mov	r1, r5
 8008306:	4630      	mov	r0, r6
 8008308:	f000 fb78 	bl	80089fc <__swsetup_r>
 800830c:	b170      	cbz	r0, 800832c <_vfiprintf_r+0x5c>
 800830e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008310:	07dc      	lsls	r4, r3, #31
 8008312:	d504      	bpl.n	800831e <_vfiprintf_r+0x4e>
 8008314:	f04f 30ff 	mov.w	r0, #4294967295
 8008318:	b01d      	add	sp, #116	; 0x74
 800831a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831e:	89ab      	ldrh	r3, [r5, #12]
 8008320:	0598      	lsls	r0, r3, #22
 8008322:	d4f7      	bmi.n	8008314 <_vfiprintf_r+0x44>
 8008324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008326:	f7ff fd57 	bl	8007dd8 <__retarget_lock_release_recursive>
 800832a:	e7f3      	b.n	8008314 <_vfiprintf_r+0x44>
 800832c:	2300      	movs	r3, #0
 800832e:	9309      	str	r3, [sp, #36]	; 0x24
 8008330:	2320      	movs	r3, #32
 8008332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008336:	f8cd 800c 	str.w	r8, [sp, #12]
 800833a:	2330      	movs	r3, #48	; 0x30
 800833c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80084f0 <_vfiprintf_r+0x220>
 8008340:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008344:	f04f 0901 	mov.w	r9, #1
 8008348:	4623      	mov	r3, r4
 800834a:	469a      	mov	sl, r3
 800834c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008350:	b10a      	cbz	r2, 8008356 <_vfiprintf_r+0x86>
 8008352:	2a25      	cmp	r2, #37	; 0x25
 8008354:	d1f9      	bne.n	800834a <_vfiprintf_r+0x7a>
 8008356:	ebba 0b04 	subs.w	fp, sl, r4
 800835a:	d00b      	beq.n	8008374 <_vfiprintf_r+0xa4>
 800835c:	465b      	mov	r3, fp
 800835e:	4622      	mov	r2, r4
 8008360:	4629      	mov	r1, r5
 8008362:	4630      	mov	r0, r6
 8008364:	f7ff ffa1 	bl	80082aa <__sfputs_r>
 8008368:	3001      	adds	r0, #1
 800836a:	f000 80a9 	beq.w	80084c0 <_vfiprintf_r+0x1f0>
 800836e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008370:	445a      	add	r2, fp
 8008372:	9209      	str	r2, [sp, #36]	; 0x24
 8008374:	f89a 3000 	ldrb.w	r3, [sl]
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 80a1 	beq.w	80084c0 <_vfiprintf_r+0x1f0>
 800837e:	2300      	movs	r3, #0
 8008380:	f04f 32ff 	mov.w	r2, #4294967295
 8008384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008388:	f10a 0a01 	add.w	sl, sl, #1
 800838c:	9304      	str	r3, [sp, #16]
 800838e:	9307      	str	r3, [sp, #28]
 8008390:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008394:	931a      	str	r3, [sp, #104]	; 0x68
 8008396:	4654      	mov	r4, sl
 8008398:	2205      	movs	r2, #5
 800839a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800839e:	4854      	ldr	r0, [pc, #336]	; (80084f0 <_vfiprintf_r+0x220>)
 80083a0:	f7f7 ff16 	bl	80001d0 <memchr>
 80083a4:	9a04      	ldr	r2, [sp, #16]
 80083a6:	b9d8      	cbnz	r0, 80083e0 <_vfiprintf_r+0x110>
 80083a8:	06d1      	lsls	r1, r2, #27
 80083aa:	bf44      	itt	mi
 80083ac:	2320      	movmi	r3, #32
 80083ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083b2:	0713      	lsls	r3, r2, #28
 80083b4:	bf44      	itt	mi
 80083b6:	232b      	movmi	r3, #43	; 0x2b
 80083b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083bc:	f89a 3000 	ldrb.w	r3, [sl]
 80083c0:	2b2a      	cmp	r3, #42	; 0x2a
 80083c2:	d015      	beq.n	80083f0 <_vfiprintf_r+0x120>
 80083c4:	9a07      	ldr	r2, [sp, #28]
 80083c6:	4654      	mov	r4, sl
 80083c8:	2000      	movs	r0, #0
 80083ca:	f04f 0c0a 	mov.w	ip, #10
 80083ce:	4621      	mov	r1, r4
 80083d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083d4:	3b30      	subs	r3, #48	; 0x30
 80083d6:	2b09      	cmp	r3, #9
 80083d8:	d94d      	bls.n	8008476 <_vfiprintf_r+0x1a6>
 80083da:	b1b0      	cbz	r0, 800840a <_vfiprintf_r+0x13a>
 80083dc:	9207      	str	r2, [sp, #28]
 80083de:	e014      	b.n	800840a <_vfiprintf_r+0x13a>
 80083e0:	eba0 0308 	sub.w	r3, r0, r8
 80083e4:	fa09 f303 	lsl.w	r3, r9, r3
 80083e8:	4313      	orrs	r3, r2
 80083ea:	9304      	str	r3, [sp, #16]
 80083ec:	46a2      	mov	sl, r4
 80083ee:	e7d2      	b.n	8008396 <_vfiprintf_r+0xc6>
 80083f0:	9b03      	ldr	r3, [sp, #12]
 80083f2:	1d19      	adds	r1, r3, #4
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	9103      	str	r1, [sp, #12]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	bfbb      	ittet	lt
 80083fc:	425b      	neglt	r3, r3
 80083fe:	f042 0202 	orrlt.w	r2, r2, #2
 8008402:	9307      	strge	r3, [sp, #28]
 8008404:	9307      	strlt	r3, [sp, #28]
 8008406:	bfb8      	it	lt
 8008408:	9204      	strlt	r2, [sp, #16]
 800840a:	7823      	ldrb	r3, [r4, #0]
 800840c:	2b2e      	cmp	r3, #46	; 0x2e
 800840e:	d10c      	bne.n	800842a <_vfiprintf_r+0x15a>
 8008410:	7863      	ldrb	r3, [r4, #1]
 8008412:	2b2a      	cmp	r3, #42	; 0x2a
 8008414:	d134      	bne.n	8008480 <_vfiprintf_r+0x1b0>
 8008416:	9b03      	ldr	r3, [sp, #12]
 8008418:	1d1a      	adds	r2, r3, #4
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	9203      	str	r2, [sp, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	bfb8      	it	lt
 8008422:	f04f 33ff 	movlt.w	r3, #4294967295
 8008426:	3402      	adds	r4, #2
 8008428:	9305      	str	r3, [sp, #20]
 800842a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008500 <_vfiprintf_r+0x230>
 800842e:	7821      	ldrb	r1, [r4, #0]
 8008430:	2203      	movs	r2, #3
 8008432:	4650      	mov	r0, sl
 8008434:	f7f7 fecc 	bl	80001d0 <memchr>
 8008438:	b138      	cbz	r0, 800844a <_vfiprintf_r+0x17a>
 800843a:	9b04      	ldr	r3, [sp, #16]
 800843c:	eba0 000a 	sub.w	r0, r0, sl
 8008440:	2240      	movs	r2, #64	; 0x40
 8008442:	4082      	lsls	r2, r0
 8008444:	4313      	orrs	r3, r2
 8008446:	3401      	adds	r4, #1
 8008448:	9304      	str	r3, [sp, #16]
 800844a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800844e:	4829      	ldr	r0, [pc, #164]	; (80084f4 <_vfiprintf_r+0x224>)
 8008450:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008454:	2206      	movs	r2, #6
 8008456:	f7f7 febb 	bl	80001d0 <memchr>
 800845a:	2800      	cmp	r0, #0
 800845c:	d03f      	beq.n	80084de <_vfiprintf_r+0x20e>
 800845e:	4b26      	ldr	r3, [pc, #152]	; (80084f8 <_vfiprintf_r+0x228>)
 8008460:	bb1b      	cbnz	r3, 80084aa <_vfiprintf_r+0x1da>
 8008462:	9b03      	ldr	r3, [sp, #12]
 8008464:	3307      	adds	r3, #7
 8008466:	f023 0307 	bic.w	r3, r3, #7
 800846a:	3308      	adds	r3, #8
 800846c:	9303      	str	r3, [sp, #12]
 800846e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008470:	443b      	add	r3, r7
 8008472:	9309      	str	r3, [sp, #36]	; 0x24
 8008474:	e768      	b.n	8008348 <_vfiprintf_r+0x78>
 8008476:	fb0c 3202 	mla	r2, ip, r2, r3
 800847a:	460c      	mov	r4, r1
 800847c:	2001      	movs	r0, #1
 800847e:	e7a6      	b.n	80083ce <_vfiprintf_r+0xfe>
 8008480:	2300      	movs	r3, #0
 8008482:	3401      	adds	r4, #1
 8008484:	9305      	str	r3, [sp, #20]
 8008486:	4619      	mov	r1, r3
 8008488:	f04f 0c0a 	mov.w	ip, #10
 800848c:	4620      	mov	r0, r4
 800848e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008492:	3a30      	subs	r2, #48	; 0x30
 8008494:	2a09      	cmp	r2, #9
 8008496:	d903      	bls.n	80084a0 <_vfiprintf_r+0x1d0>
 8008498:	2b00      	cmp	r3, #0
 800849a:	d0c6      	beq.n	800842a <_vfiprintf_r+0x15a>
 800849c:	9105      	str	r1, [sp, #20]
 800849e:	e7c4      	b.n	800842a <_vfiprintf_r+0x15a>
 80084a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80084a4:	4604      	mov	r4, r0
 80084a6:	2301      	movs	r3, #1
 80084a8:	e7f0      	b.n	800848c <_vfiprintf_r+0x1bc>
 80084aa:	ab03      	add	r3, sp, #12
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	462a      	mov	r2, r5
 80084b0:	4b12      	ldr	r3, [pc, #72]	; (80084fc <_vfiprintf_r+0x22c>)
 80084b2:	a904      	add	r1, sp, #16
 80084b4:	4630      	mov	r0, r6
 80084b6:	f3af 8000 	nop.w
 80084ba:	4607      	mov	r7, r0
 80084bc:	1c78      	adds	r0, r7, #1
 80084be:	d1d6      	bne.n	800846e <_vfiprintf_r+0x19e>
 80084c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084c2:	07d9      	lsls	r1, r3, #31
 80084c4:	d405      	bmi.n	80084d2 <_vfiprintf_r+0x202>
 80084c6:	89ab      	ldrh	r3, [r5, #12]
 80084c8:	059a      	lsls	r2, r3, #22
 80084ca:	d402      	bmi.n	80084d2 <_vfiprintf_r+0x202>
 80084cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084ce:	f7ff fc83 	bl	8007dd8 <__retarget_lock_release_recursive>
 80084d2:	89ab      	ldrh	r3, [r5, #12]
 80084d4:	065b      	lsls	r3, r3, #25
 80084d6:	f53f af1d 	bmi.w	8008314 <_vfiprintf_r+0x44>
 80084da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084dc:	e71c      	b.n	8008318 <_vfiprintf_r+0x48>
 80084de:	ab03      	add	r3, sp, #12
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	462a      	mov	r2, r5
 80084e4:	4b05      	ldr	r3, [pc, #20]	; (80084fc <_vfiprintf_r+0x22c>)
 80084e6:	a904      	add	r1, sp, #16
 80084e8:	4630      	mov	r0, r6
 80084ea:	f000 f879 	bl	80085e0 <_printf_i>
 80084ee:	e7e4      	b.n	80084ba <_vfiprintf_r+0x1ea>
 80084f0:	080095e4 	.word	0x080095e4
 80084f4:	080095ee 	.word	0x080095ee
 80084f8:	00000000 	.word	0x00000000
 80084fc:	080082ab 	.word	0x080082ab
 8008500:	080095ea 	.word	0x080095ea

08008504 <_printf_common>:
 8008504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008508:	4616      	mov	r6, r2
 800850a:	4699      	mov	r9, r3
 800850c:	688a      	ldr	r2, [r1, #8]
 800850e:	690b      	ldr	r3, [r1, #16]
 8008510:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008514:	4293      	cmp	r3, r2
 8008516:	bfb8      	it	lt
 8008518:	4613      	movlt	r3, r2
 800851a:	6033      	str	r3, [r6, #0]
 800851c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008520:	4607      	mov	r7, r0
 8008522:	460c      	mov	r4, r1
 8008524:	b10a      	cbz	r2, 800852a <_printf_common+0x26>
 8008526:	3301      	adds	r3, #1
 8008528:	6033      	str	r3, [r6, #0]
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	0699      	lsls	r1, r3, #26
 800852e:	bf42      	ittt	mi
 8008530:	6833      	ldrmi	r3, [r6, #0]
 8008532:	3302      	addmi	r3, #2
 8008534:	6033      	strmi	r3, [r6, #0]
 8008536:	6825      	ldr	r5, [r4, #0]
 8008538:	f015 0506 	ands.w	r5, r5, #6
 800853c:	d106      	bne.n	800854c <_printf_common+0x48>
 800853e:	f104 0a19 	add.w	sl, r4, #25
 8008542:	68e3      	ldr	r3, [r4, #12]
 8008544:	6832      	ldr	r2, [r6, #0]
 8008546:	1a9b      	subs	r3, r3, r2
 8008548:	42ab      	cmp	r3, r5
 800854a:	dc26      	bgt.n	800859a <_printf_common+0x96>
 800854c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008550:	1e13      	subs	r3, r2, #0
 8008552:	6822      	ldr	r2, [r4, #0]
 8008554:	bf18      	it	ne
 8008556:	2301      	movne	r3, #1
 8008558:	0692      	lsls	r2, r2, #26
 800855a:	d42b      	bmi.n	80085b4 <_printf_common+0xb0>
 800855c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008560:	4649      	mov	r1, r9
 8008562:	4638      	mov	r0, r7
 8008564:	47c0      	blx	r8
 8008566:	3001      	adds	r0, #1
 8008568:	d01e      	beq.n	80085a8 <_printf_common+0xa4>
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	6922      	ldr	r2, [r4, #16]
 800856e:	f003 0306 	and.w	r3, r3, #6
 8008572:	2b04      	cmp	r3, #4
 8008574:	bf02      	ittt	eq
 8008576:	68e5      	ldreq	r5, [r4, #12]
 8008578:	6833      	ldreq	r3, [r6, #0]
 800857a:	1aed      	subeq	r5, r5, r3
 800857c:	68a3      	ldr	r3, [r4, #8]
 800857e:	bf0c      	ite	eq
 8008580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008584:	2500      	movne	r5, #0
 8008586:	4293      	cmp	r3, r2
 8008588:	bfc4      	itt	gt
 800858a:	1a9b      	subgt	r3, r3, r2
 800858c:	18ed      	addgt	r5, r5, r3
 800858e:	2600      	movs	r6, #0
 8008590:	341a      	adds	r4, #26
 8008592:	42b5      	cmp	r5, r6
 8008594:	d11a      	bne.n	80085cc <_printf_common+0xc8>
 8008596:	2000      	movs	r0, #0
 8008598:	e008      	b.n	80085ac <_printf_common+0xa8>
 800859a:	2301      	movs	r3, #1
 800859c:	4652      	mov	r2, sl
 800859e:	4649      	mov	r1, r9
 80085a0:	4638      	mov	r0, r7
 80085a2:	47c0      	blx	r8
 80085a4:	3001      	adds	r0, #1
 80085a6:	d103      	bne.n	80085b0 <_printf_common+0xac>
 80085a8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b0:	3501      	adds	r5, #1
 80085b2:	e7c6      	b.n	8008542 <_printf_common+0x3e>
 80085b4:	18e1      	adds	r1, r4, r3
 80085b6:	1c5a      	adds	r2, r3, #1
 80085b8:	2030      	movs	r0, #48	; 0x30
 80085ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085be:	4422      	add	r2, r4
 80085c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085c8:	3302      	adds	r3, #2
 80085ca:	e7c7      	b.n	800855c <_printf_common+0x58>
 80085cc:	2301      	movs	r3, #1
 80085ce:	4622      	mov	r2, r4
 80085d0:	4649      	mov	r1, r9
 80085d2:	4638      	mov	r0, r7
 80085d4:	47c0      	blx	r8
 80085d6:	3001      	adds	r0, #1
 80085d8:	d0e6      	beq.n	80085a8 <_printf_common+0xa4>
 80085da:	3601      	adds	r6, #1
 80085dc:	e7d9      	b.n	8008592 <_printf_common+0x8e>
	...

080085e0 <_printf_i>:
 80085e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085e4:	7e0f      	ldrb	r7, [r1, #24]
 80085e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085e8:	2f78      	cmp	r7, #120	; 0x78
 80085ea:	4691      	mov	r9, r2
 80085ec:	4680      	mov	r8, r0
 80085ee:	460c      	mov	r4, r1
 80085f0:	469a      	mov	sl, r3
 80085f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085f6:	d807      	bhi.n	8008608 <_printf_i+0x28>
 80085f8:	2f62      	cmp	r7, #98	; 0x62
 80085fa:	d80a      	bhi.n	8008612 <_printf_i+0x32>
 80085fc:	2f00      	cmp	r7, #0
 80085fe:	f000 80d4 	beq.w	80087aa <_printf_i+0x1ca>
 8008602:	2f58      	cmp	r7, #88	; 0x58
 8008604:	f000 80c0 	beq.w	8008788 <_printf_i+0x1a8>
 8008608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800860c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008610:	e03a      	b.n	8008688 <_printf_i+0xa8>
 8008612:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008616:	2b15      	cmp	r3, #21
 8008618:	d8f6      	bhi.n	8008608 <_printf_i+0x28>
 800861a:	a101      	add	r1, pc, #4	; (adr r1, 8008620 <_printf_i+0x40>)
 800861c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008620:	08008679 	.word	0x08008679
 8008624:	0800868d 	.word	0x0800868d
 8008628:	08008609 	.word	0x08008609
 800862c:	08008609 	.word	0x08008609
 8008630:	08008609 	.word	0x08008609
 8008634:	08008609 	.word	0x08008609
 8008638:	0800868d 	.word	0x0800868d
 800863c:	08008609 	.word	0x08008609
 8008640:	08008609 	.word	0x08008609
 8008644:	08008609 	.word	0x08008609
 8008648:	08008609 	.word	0x08008609
 800864c:	08008791 	.word	0x08008791
 8008650:	080086b9 	.word	0x080086b9
 8008654:	0800874b 	.word	0x0800874b
 8008658:	08008609 	.word	0x08008609
 800865c:	08008609 	.word	0x08008609
 8008660:	080087b3 	.word	0x080087b3
 8008664:	08008609 	.word	0x08008609
 8008668:	080086b9 	.word	0x080086b9
 800866c:	08008609 	.word	0x08008609
 8008670:	08008609 	.word	0x08008609
 8008674:	08008753 	.word	0x08008753
 8008678:	682b      	ldr	r3, [r5, #0]
 800867a:	1d1a      	adds	r2, r3, #4
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	602a      	str	r2, [r5, #0]
 8008680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008688:	2301      	movs	r3, #1
 800868a:	e09f      	b.n	80087cc <_printf_i+0x1ec>
 800868c:	6820      	ldr	r0, [r4, #0]
 800868e:	682b      	ldr	r3, [r5, #0]
 8008690:	0607      	lsls	r7, r0, #24
 8008692:	f103 0104 	add.w	r1, r3, #4
 8008696:	6029      	str	r1, [r5, #0]
 8008698:	d501      	bpl.n	800869e <_printf_i+0xbe>
 800869a:	681e      	ldr	r6, [r3, #0]
 800869c:	e003      	b.n	80086a6 <_printf_i+0xc6>
 800869e:	0646      	lsls	r6, r0, #25
 80086a0:	d5fb      	bpl.n	800869a <_printf_i+0xba>
 80086a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80086a6:	2e00      	cmp	r6, #0
 80086a8:	da03      	bge.n	80086b2 <_printf_i+0xd2>
 80086aa:	232d      	movs	r3, #45	; 0x2d
 80086ac:	4276      	negs	r6, r6
 80086ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086b2:	485a      	ldr	r0, [pc, #360]	; (800881c <_printf_i+0x23c>)
 80086b4:	230a      	movs	r3, #10
 80086b6:	e012      	b.n	80086de <_printf_i+0xfe>
 80086b8:	682b      	ldr	r3, [r5, #0]
 80086ba:	6820      	ldr	r0, [r4, #0]
 80086bc:	1d19      	adds	r1, r3, #4
 80086be:	6029      	str	r1, [r5, #0]
 80086c0:	0605      	lsls	r5, r0, #24
 80086c2:	d501      	bpl.n	80086c8 <_printf_i+0xe8>
 80086c4:	681e      	ldr	r6, [r3, #0]
 80086c6:	e002      	b.n	80086ce <_printf_i+0xee>
 80086c8:	0641      	lsls	r1, r0, #25
 80086ca:	d5fb      	bpl.n	80086c4 <_printf_i+0xe4>
 80086cc:	881e      	ldrh	r6, [r3, #0]
 80086ce:	4853      	ldr	r0, [pc, #332]	; (800881c <_printf_i+0x23c>)
 80086d0:	2f6f      	cmp	r7, #111	; 0x6f
 80086d2:	bf0c      	ite	eq
 80086d4:	2308      	moveq	r3, #8
 80086d6:	230a      	movne	r3, #10
 80086d8:	2100      	movs	r1, #0
 80086da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086de:	6865      	ldr	r5, [r4, #4]
 80086e0:	60a5      	str	r5, [r4, #8]
 80086e2:	2d00      	cmp	r5, #0
 80086e4:	bfa2      	ittt	ge
 80086e6:	6821      	ldrge	r1, [r4, #0]
 80086e8:	f021 0104 	bicge.w	r1, r1, #4
 80086ec:	6021      	strge	r1, [r4, #0]
 80086ee:	b90e      	cbnz	r6, 80086f4 <_printf_i+0x114>
 80086f0:	2d00      	cmp	r5, #0
 80086f2:	d04b      	beq.n	800878c <_printf_i+0x1ac>
 80086f4:	4615      	mov	r5, r2
 80086f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80086fa:	fb03 6711 	mls	r7, r3, r1, r6
 80086fe:	5dc7      	ldrb	r7, [r0, r7]
 8008700:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008704:	4637      	mov	r7, r6
 8008706:	42bb      	cmp	r3, r7
 8008708:	460e      	mov	r6, r1
 800870a:	d9f4      	bls.n	80086f6 <_printf_i+0x116>
 800870c:	2b08      	cmp	r3, #8
 800870e:	d10b      	bne.n	8008728 <_printf_i+0x148>
 8008710:	6823      	ldr	r3, [r4, #0]
 8008712:	07de      	lsls	r6, r3, #31
 8008714:	d508      	bpl.n	8008728 <_printf_i+0x148>
 8008716:	6923      	ldr	r3, [r4, #16]
 8008718:	6861      	ldr	r1, [r4, #4]
 800871a:	4299      	cmp	r1, r3
 800871c:	bfde      	ittt	le
 800871e:	2330      	movle	r3, #48	; 0x30
 8008720:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008724:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008728:	1b52      	subs	r2, r2, r5
 800872a:	6122      	str	r2, [r4, #16]
 800872c:	f8cd a000 	str.w	sl, [sp]
 8008730:	464b      	mov	r3, r9
 8008732:	aa03      	add	r2, sp, #12
 8008734:	4621      	mov	r1, r4
 8008736:	4640      	mov	r0, r8
 8008738:	f7ff fee4 	bl	8008504 <_printf_common>
 800873c:	3001      	adds	r0, #1
 800873e:	d14a      	bne.n	80087d6 <_printf_i+0x1f6>
 8008740:	f04f 30ff 	mov.w	r0, #4294967295
 8008744:	b004      	add	sp, #16
 8008746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	f043 0320 	orr.w	r3, r3, #32
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	4833      	ldr	r0, [pc, #204]	; (8008820 <_printf_i+0x240>)
 8008754:	2778      	movs	r7, #120	; 0x78
 8008756:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	6829      	ldr	r1, [r5, #0]
 800875e:	061f      	lsls	r7, r3, #24
 8008760:	f851 6b04 	ldr.w	r6, [r1], #4
 8008764:	d402      	bmi.n	800876c <_printf_i+0x18c>
 8008766:	065f      	lsls	r7, r3, #25
 8008768:	bf48      	it	mi
 800876a:	b2b6      	uxthmi	r6, r6
 800876c:	07df      	lsls	r7, r3, #31
 800876e:	bf48      	it	mi
 8008770:	f043 0320 	orrmi.w	r3, r3, #32
 8008774:	6029      	str	r1, [r5, #0]
 8008776:	bf48      	it	mi
 8008778:	6023      	strmi	r3, [r4, #0]
 800877a:	b91e      	cbnz	r6, 8008784 <_printf_i+0x1a4>
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	f023 0320 	bic.w	r3, r3, #32
 8008782:	6023      	str	r3, [r4, #0]
 8008784:	2310      	movs	r3, #16
 8008786:	e7a7      	b.n	80086d8 <_printf_i+0xf8>
 8008788:	4824      	ldr	r0, [pc, #144]	; (800881c <_printf_i+0x23c>)
 800878a:	e7e4      	b.n	8008756 <_printf_i+0x176>
 800878c:	4615      	mov	r5, r2
 800878e:	e7bd      	b.n	800870c <_printf_i+0x12c>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	6826      	ldr	r6, [r4, #0]
 8008794:	6961      	ldr	r1, [r4, #20]
 8008796:	1d18      	adds	r0, r3, #4
 8008798:	6028      	str	r0, [r5, #0]
 800879a:	0635      	lsls	r5, r6, #24
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	d501      	bpl.n	80087a4 <_printf_i+0x1c4>
 80087a0:	6019      	str	r1, [r3, #0]
 80087a2:	e002      	b.n	80087aa <_printf_i+0x1ca>
 80087a4:	0670      	lsls	r0, r6, #25
 80087a6:	d5fb      	bpl.n	80087a0 <_printf_i+0x1c0>
 80087a8:	8019      	strh	r1, [r3, #0]
 80087aa:	2300      	movs	r3, #0
 80087ac:	6123      	str	r3, [r4, #16]
 80087ae:	4615      	mov	r5, r2
 80087b0:	e7bc      	b.n	800872c <_printf_i+0x14c>
 80087b2:	682b      	ldr	r3, [r5, #0]
 80087b4:	1d1a      	adds	r2, r3, #4
 80087b6:	602a      	str	r2, [r5, #0]
 80087b8:	681d      	ldr	r5, [r3, #0]
 80087ba:	6862      	ldr	r2, [r4, #4]
 80087bc:	2100      	movs	r1, #0
 80087be:	4628      	mov	r0, r5
 80087c0:	f7f7 fd06 	bl	80001d0 <memchr>
 80087c4:	b108      	cbz	r0, 80087ca <_printf_i+0x1ea>
 80087c6:	1b40      	subs	r0, r0, r5
 80087c8:	6060      	str	r0, [r4, #4]
 80087ca:	6863      	ldr	r3, [r4, #4]
 80087cc:	6123      	str	r3, [r4, #16]
 80087ce:	2300      	movs	r3, #0
 80087d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087d4:	e7aa      	b.n	800872c <_printf_i+0x14c>
 80087d6:	6923      	ldr	r3, [r4, #16]
 80087d8:	462a      	mov	r2, r5
 80087da:	4649      	mov	r1, r9
 80087dc:	4640      	mov	r0, r8
 80087de:	47d0      	blx	sl
 80087e0:	3001      	adds	r0, #1
 80087e2:	d0ad      	beq.n	8008740 <_printf_i+0x160>
 80087e4:	6823      	ldr	r3, [r4, #0]
 80087e6:	079b      	lsls	r3, r3, #30
 80087e8:	d413      	bmi.n	8008812 <_printf_i+0x232>
 80087ea:	68e0      	ldr	r0, [r4, #12]
 80087ec:	9b03      	ldr	r3, [sp, #12]
 80087ee:	4298      	cmp	r0, r3
 80087f0:	bfb8      	it	lt
 80087f2:	4618      	movlt	r0, r3
 80087f4:	e7a6      	b.n	8008744 <_printf_i+0x164>
 80087f6:	2301      	movs	r3, #1
 80087f8:	4632      	mov	r2, r6
 80087fa:	4649      	mov	r1, r9
 80087fc:	4640      	mov	r0, r8
 80087fe:	47d0      	blx	sl
 8008800:	3001      	adds	r0, #1
 8008802:	d09d      	beq.n	8008740 <_printf_i+0x160>
 8008804:	3501      	adds	r5, #1
 8008806:	68e3      	ldr	r3, [r4, #12]
 8008808:	9903      	ldr	r1, [sp, #12]
 800880a:	1a5b      	subs	r3, r3, r1
 800880c:	42ab      	cmp	r3, r5
 800880e:	dcf2      	bgt.n	80087f6 <_printf_i+0x216>
 8008810:	e7eb      	b.n	80087ea <_printf_i+0x20a>
 8008812:	2500      	movs	r5, #0
 8008814:	f104 0619 	add.w	r6, r4, #25
 8008818:	e7f5      	b.n	8008806 <_printf_i+0x226>
 800881a:	bf00      	nop
 800881c:	080095f5 	.word	0x080095f5
 8008820:	08009606 	.word	0x08009606

08008824 <__sflush_r>:
 8008824:	898a      	ldrh	r2, [r1, #12]
 8008826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800882a:	4605      	mov	r5, r0
 800882c:	0710      	lsls	r0, r2, #28
 800882e:	460c      	mov	r4, r1
 8008830:	d458      	bmi.n	80088e4 <__sflush_r+0xc0>
 8008832:	684b      	ldr	r3, [r1, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	dc05      	bgt.n	8008844 <__sflush_r+0x20>
 8008838:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800883a:	2b00      	cmp	r3, #0
 800883c:	dc02      	bgt.n	8008844 <__sflush_r+0x20>
 800883e:	2000      	movs	r0, #0
 8008840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008846:	2e00      	cmp	r6, #0
 8008848:	d0f9      	beq.n	800883e <__sflush_r+0x1a>
 800884a:	2300      	movs	r3, #0
 800884c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008850:	682f      	ldr	r7, [r5, #0]
 8008852:	6a21      	ldr	r1, [r4, #32]
 8008854:	602b      	str	r3, [r5, #0]
 8008856:	d032      	beq.n	80088be <__sflush_r+0x9a>
 8008858:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	075a      	lsls	r2, r3, #29
 800885e:	d505      	bpl.n	800886c <__sflush_r+0x48>
 8008860:	6863      	ldr	r3, [r4, #4]
 8008862:	1ac0      	subs	r0, r0, r3
 8008864:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008866:	b10b      	cbz	r3, 800886c <__sflush_r+0x48>
 8008868:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800886a:	1ac0      	subs	r0, r0, r3
 800886c:	2300      	movs	r3, #0
 800886e:	4602      	mov	r2, r0
 8008870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008872:	6a21      	ldr	r1, [r4, #32]
 8008874:	4628      	mov	r0, r5
 8008876:	47b0      	blx	r6
 8008878:	1c43      	adds	r3, r0, #1
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	d106      	bne.n	800888c <__sflush_r+0x68>
 800887e:	6829      	ldr	r1, [r5, #0]
 8008880:	291d      	cmp	r1, #29
 8008882:	d82b      	bhi.n	80088dc <__sflush_r+0xb8>
 8008884:	4a29      	ldr	r2, [pc, #164]	; (800892c <__sflush_r+0x108>)
 8008886:	410a      	asrs	r2, r1
 8008888:	07d6      	lsls	r6, r2, #31
 800888a:	d427      	bmi.n	80088dc <__sflush_r+0xb8>
 800888c:	2200      	movs	r2, #0
 800888e:	6062      	str	r2, [r4, #4]
 8008890:	04d9      	lsls	r1, r3, #19
 8008892:	6922      	ldr	r2, [r4, #16]
 8008894:	6022      	str	r2, [r4, #0]
 8008896:	d504      	bpl.n	80088a2 <__sflush_r+0x7e>
 8008898:	1c42      	adds	r2, r0, #1
 800889a:	d101      	bne.n	80088a0 <__sflush_r+0x7c>
 800889c:	682b      	ldr	r3, [r5, #0]
 800889e:	b903      	cbnz	r3, 80088a2 <__sflush_r+0x7e>
 80088a0:	6560      	str	r0, [r4, #84]	; 0x54
 80088a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088a4:	602f      	str	r7, [r5, #0]
 80088a6:	2900      	cmp	r1, #0
 80088a8:	d0c9      	beq.n	800883e <__sflush_r+0x1a>
 80088aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088ae:	4299      	cmp	r1, r3
 80088b0:	d002      	beq.n	80088b8 <__sflush_r+0x94>
 80088b2:	4628      	mov	r0, r5
 80088b4:	f7ff fa92 	bl	8007ddc <_free_r>
 80088b8:	2000      	movs	r0, #0
 80088ba:	6360      	str	r0, [r4, #52]	; 0x34
 80088bc:	e7c0      	b.n	8008840 <__sflush_r+0x1c>
 80088be:	2301      	movs	r3, #1
 80088c0:	4628      	mov	r0, r5
 80088c2:	47b0      	blx	r6
 80088c4:	1c41      	adds	r1, r0, #1
 80088c6:	d1c8      	bne.n	800885a <__sflush_r+0x36>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d0c5      	beq.n	800885a <__sflush_r+0x36>
 80088ce:	2b1d      	cmp	r3, #29
 80088d0:	d001      	beq.n	80088d6 <__sflush_r+0xb2>
 80088d2:	2b16      	cmp	r3, #22
 80088d4:	d101      	bne.n	80088da <__sflush_r+0xb6>
 80088d6:	602f      	str	r7, [r5, #0]
 80088d8:	e7b1      	b.n	800883e <__sflush_r+0x1a>
 80088da:	89a3      	ldrh	r3, [r4, #12]
 80088dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088e0:	81a3      	strh	r3, [r4, #12]
 80088e2:	e7ad      	b.n	8008840 <__sflush_r+0x1c>
 80088e4:	690f      	ldr	r7, [r1, #16]
 80088e6:	2f00      	cmp	r7, #0
 80088e8:	d0a9      	beq.n	800883e <__sflush_r+0x1a>
 80088ea:	0793      	lsls	r3, r2, #30
 80088ec:	680e      	ldr	r6, [r1, #0]
 80088ee:	bf08      	it	eq
 80088f0:	694b      	ldreq	r3, [r1, #20]
 80088f2:	600f      	str	r7, [r1, #0]
 80088f4:	bf18      	it	ne
 80088f6:	2300      	movne	r3, #0
 80088f8:	eba6 0807 	sub.w	r8, r6, r7
 80088fc:	608b      	str	r3, [r1, #8]
 80088fe:	f1b8 0f00 	cmp.w	r8, #0
 8008902:	dd9c      	ble.n	800883e <__sflush_r+0x1a>
 8008904:	6a21      	ldr	r1, [r4, #32]
 8008906:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008908:	4643      	mov	r3, r8
 800890a:	463a      	mov	r2, r7
 800890c:	4628      	mov	r0, r5
 800890e:	47b0      	blx	r6
 8008910:	2800      	cmp	r0, #0
 8008912:	dc06      	bgt.n	8008922 <__sflush_r+0xfe>
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800891a:	81a3      	strh	r3, [r4, #12]
 800891c:	f04f 30ff 	mov.w	r0, #4294967295
 8008920:	e78e      	b.n	8008840 <__sflush_r+0x1c>
 8008922:	4407      	add	r7, r0
 8008924:	eba8 0800 	sub.w	r8, r8, r0
 8008928:	e7e9      	b.n	80088fe <__sflush_r+0xda>
 800892a:	bf00      	nop
 800892c:	dfbffffe 	.word	0xdfbffffe

08008930 <_fflush_r>:
 8008930:	b538      	push	{r3, r4, r5, lr}
 8008932:	690b      	ldr	r3, [r1, #16]
 8008934:	4605      	mov	r5, r0
 8008936:	460c      	mov	r4, r1
 8008938:	b913      	cbnz	r3, 8008940 <_fflush_r+0x10>
 800893a:	2500      	movs	r5, #0
 800893c:	4628      	mov	r0, r5
 800893e:	bd38      	pop	{r3, r4, r5, pc}
 8008940:	b118      	cbz	r0, 800894a <_fflush_r+0x1a>
 8008942:	6a03      	ldr	r3, [r0, #32]
 8008944:	b90b      	cbnz	r3, 800894a <_fflush_r+0x1a>
 8008946:	f7ff f90d 	bl	8007b64 <__sinit>
 800894a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d0f3      	beq.n	800893a <_fflush_r+0xa>
 8008952:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008954:	07d0      	lsls	r0, r2, #31
 8008956:	d404      	bmi.n	8008962 <_fflush_r+0x32>
 8008958:	0599      	lsls	r1, r3, #22
 800895a:	d402      	bmi.n	8008962 <_fflush_r+0x32>
 800895c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800895e:	f7ff fa3a 	bl	8007dd6 <__retarget_lock_acquire_recursive>
 8008962:	4628      	mov	r0, r5
 8008964:	4621      	mov	r1, r4
 8008966:	f7ff ff5d 	bl	8008824 <__sflush_r>
 800896a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800896c:	07da      	lsls	r2, r3, #31
 800896e:	4605      	mov	r5, r0
 8008970:	d4e4      	bmi.n	800893c <_fflush_r+0xc>
 8008972:	89a3      	ldrh	r3, [r4, #12]
 8008974:	059b      	lsls	r3, r3, #22
 8008976:	d4e1      	bmi.n	800893c <_fflush_r+0xc>
 8008978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800897a:	f7ff fa2d 	bl	8007dd8 <__retarget_lock_release_recursive>
 800897e:	e7dd      	b.n	800893c <_fflush_r+0xc>

08008980 <__swbuf_r>:
 8008980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008982:	460e      	mov	r6, r1
 8008984:	4614      	mov	r4, r2
 8008986:	4605      	mov	r5, r0
 8008988:	b118      	cbz	r0, 8008992 <__swbuf_r+0x12>
 800898a:	6a03      	ldr	r3, [r0, #32]
 800898c:	b90b      	cbnz	r3, 8008992 <__swbuf_r+0x12>
 800898e:	f7ff f8e9 	bl	8007b64 <__sinit>
 8008992:	69a3      	ldr	r3, [r4, #24]
 8008994:	60a3      	str	r3, [r4, #8]
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	071a      	lsls	r2, r3, #28
 800899a:	d525      	bpl.n	80089e8 <__swbuf_r+0x68>
 800899c:	6923      	ldr	r3, [r4, #16]
 800899e:	b31b      	cbz	r3, 80089e8 <__swbuf_r+0x68>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	6922      	ldr	r2, [r4, #16]
 80089a4:	1a98      	subs	r0, r3, r2
 80089a6:	6963      	ldr	r3, [r4, #20]
 80089a8:	b2f6      	uxtb	r6, r6
 80089aa:	4283      	cmp	r3, r0
 80089ac:	4637      	mov	r7, r6
 80089ae:	dc04      	bgt.n	80089ba <__swbuf_r+0x3a>
 80089b0:	4621      	mov	r1, r4
 80089b2:	4628      	mov	r0, r5
 80089b4:	f7ff ffbc 	bl	8008930 <_fflush_r>
 80089b8:	b9e0      	cbnz	r0, 80089f4 <__swbuf_r+0x74>
 80089ba:	68a3      	ldr	r3, [r4, #8]
 80089bc:	3b01      	subs	r3, #1
 80089be:	60a3      	str	r3, [r4, #8]
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	1c5a      	adds	r2, r3, #1
 80089c4:	6022      	str	r2, [r4, #0]
 80089c6:	701e      	strb	r6, [r3, #0]
 80089c8:	6962      	ldr	r2, [r4, #20]
 80089ca:	1c43      	adds	r3, r0, #1
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d004      	beq.n	80089da <__swbuf_r+0x5a>
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	07db      	lsls	r3, r3, #31
 80089d4:	d506      	bpl.n	80089e4 <__swbuf_r+0x64>
 80089d6:	2e0a      	cmp	r6, #10
 80089d8:	d104      	bne.n	80089e4 <__swbuf_r+0x64>
 80089da:	4621      	mov	r1, r4
 80089dc:	4628      	mov	r0, r5
 80089de:	f7ff ffa7 	bl	8008930 <_fflush_r>
 80089e2:	b938      	cbnz	r0, 80089f4 <__swbuf_r+0x74>
 80089e4:	4638      	mov	r0, r7
 80089e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089e8:	4621      	mov	r1, r4
 80089ea:	4628      	mov	r0, r5
 80089ec:	f000 f806 	bl	80089fc <__swsetup_r>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d0d5      	beq.n	80089a0 <__swbuf_r+0x20>
 80089f4:	f04f 37ff 	mov.w	r7, #4294967295
 80089f8:	e7f4      	b.n	80089e4 <__swbuf_r+0x64>
	...

080089fc <__swsetup_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	4b2a      	ldr	r3, [pc, #168]	; (8008aa8 <__swsetup_r+0xac>)
 8008a00:	4605      	mov	r5, r0
 8008a02:	6818      	ldr	r0, [r3, #0]
 8008a04:	460c      	mov	r4, r1
 8008a06:	b118      	cbz	r0, 8008a10 <__swsetup_r+0x14>
 8008a08:	6a03      	ldr	r3, [r0, #32]
 8008a0a:	b90b      	cbnz	r3, 8008a10 <__swsetup_r+0x14>
 8008a0c:	f7ff f8aa 	bl	8007b64 <__sinit>
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a16:	0718      	lsls	r0, r3, #28
 8008a18:	d422      	bmi.n	8008a60 <__swsetup_r+0x64>
 8008a1a:	06d9      	lsls	r1, r3, #27
 8008a1c:	d407      	bmi.n	8008a2e <__swsetup_r+0x32>
 8008a1e:	2309      	movs	r3, #9
 8008a20:	602b      	str	r3, [r5, #0]
 8008a22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a26:	81a3      	strh	r3, [r4, #12]
 8008a28:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2c:	e034      	b.n	8008a98 <__swsetup_r+0x9c>
 8008a2e:	0758      	lsls	r0, r3, #29
 8008a30:	d512      	bpl.n	8008a58 <__swsetup_r+0x5c>
 8008a32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a34:	b141      	cbz	r1, 8008a48 <__swsetup_r+0x4c>
 8008a36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a3a:	4299      	cmp	r1, r3
 8008a3c:	d002      	beq.n	8008a44 <__swsetup_r+0x48>
 8008a3e:	4628      	mov	r0, r5
 8008a40:	f7ff f9cc 	bl	8007ddc <_free_r>
 8008a44:	2300      	movs	r3, #0
 8008a46:	6363      	str	r3, [r4, #52]	; 0x34
 8008a48:	89a3      	ldrh	r3, [r4, #12]
 8008a4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a4e:	81a3      	strh	r3, [r4, #12]
 8008a50:	2300      	movs	r3, #0
 8008a52:	6063      	str	r3, [r4, #4]
 8008a54:	6923      	ldr	r3, [r4, #16]
 8008a56:	6023      	str	r3, [r4, #0]
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	f043 0308 	orr.w	r3, r3, #8
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	6923      	ldr	r3, [r4, #16]
 8008a62:	b94b      	cbnz	r3, 8008a78 <__swsetup_r+0x7c>
 8008a64:	89a3      	ldrh	r3, [r4, #12]
 8008a66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a6e:	d003      	beq.n	8008a78 <__swsetup_r+0x7c>
 8008a70:	4621      	mov	r1, r4
 8008a72:	4628      	mov	r0, r5
 8008a74:	f000 f8a7 	bl	8008bc6 <__smakebuf_r>
 8008a78:	89a0      	ldrh	r0, [r4, #12]
 8008a7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a7e:	f010 0301 	ands.w	r3, r0, #1
 8008a82:	d00a      	beq.n	8008a9a <__swsetup_r+0x9e>
 8008a84:	2300      	movs	r3, #0
 8008a86:	60a3      	str	r3, [r4, #8]
 8008a88:	6963      	ldr	r3, [r4, #20]
 8008a8a:	425b      	negs	r3, r3
 8008a8c:	61a3      	str	r3, [r4, #24]
 8008a8e:	6923      	ldr	r3, [r4, #16]
 8008a90:	b943      	cbnz	r3, 8008aa4 <__swsetup_r+0xa8>
 8008a92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a96:	d1c4      	bne.n	8008a22 <__swsetup_r+0x26>
 8008a98:	bd38      	pop	{r3, r4, r5, pc}
 8008a9a:	0781      	lsls	r1, r0, #30
 8008a9c:	bf58      	it	pl
 8008a9e:	6963      	ldrpl	r3, [r4, #20]
 8008aa0:	60a3      	str	r3, [r4, #8]
 8008aa2:	e7f4      	b.n	8008a8e <__swsetup_r+0x92>
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	e7f7      	b.n	8008a98 <__swsetup_r+0x9c>
 8008aa8:	2000006c 	.word	0x2000006c

08008aac <memmove>:
 8008aac:	4288      	cmp	r0, r1
 8008aae:	b510      	push	{r4, lr}
 8008ab0:	eb01 0402 	add.w	r4, r1, r2
 8008ab4:	d902      	bls.n	8008abc <memmove+0x10>
 8008ab6:	4284      	cmp	r4, r0
 8008ab8:	4623      	mov	r3, r4
 8008aba:	d807      	bhi.n	8008acc <memmove+0x20>
 8008abc:	1e43      	subs	r3, r0, #1
 8008abe:	42a1      	cmp	r1, r4
 8008ac0:	d008      	beq.n	8008ad4 <memmove+0x28>
 8008ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008aca:	e7f8      	b.n	8008abe <memmove+0x12>
 8008acc:	4402      	add	r2, r0
 8008ace:	4601      	mov	r1, r0
 8008ad0:	428a      	cmp	r2, r1
 8008ad2:	d100      	bne.n	8008ad6 <memmove+0x2a>
 8008ad4:	bd10      	pop	{r4, pc}
 8008ad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ade:	e7f7      	b.n	8008ad0 <memmove+0x24>

08008ae0 <_sbrk_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	4d06      	ldr	r5, [pc, #24]	; (8008afc <_sbrk_r+0x1c>)
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	4608      	mov	r0, r1
 8008aea:	602b      	str	r3, [r5, #0]
 8008aec:	f7f9 fb90 	bl	8002210 <_sbrk>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d102      	bne.n	8008afa <_sbrk_r+0x1a>
 8008af4:	682b      	ldr	r3, [r5, #0]
 8008af6:	b103      	cbz	r3, 8008afa <_sbrk_r+0x1a>
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	20000554 	.word	0x20000554

08008b00 <memcpy>:
 8008b00:	440a      	add	r2, r1
 8008b02:	4291      	cmp	r1, r2
 8008b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b08:	d100      	bne.n	8008b0c <memcpy+0xc>
 8008b0a:	4770      	bx	lr
 8008b0c:	b510      	push	{r4, lr}
 8008b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b16:	4291      	cmp	r1, r2
 8008b18:	d1f9      	bne.n	8008b0e <memcpy+0xe>
 8008b1a:	bd10      	pop	{r4, pc}

08008b1c <_realloc_r>:
 8008b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b20:	4680      	mov	r8, r0
 8008b22:	4614      	mov	r4, r2
 8008b24:	460e      	mov	r6, r1
 8008b26:	b921      	cbnz	r1, 8008b32 <_realloc_r+0x16>
 8008b28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	f7ff b9c1 	b.w	8007eb4 <_malloc_r>
 8008b32:	b92a      	cbnz	r2, 8008b40 <_realloc_r+0x24>
 8008b34:	f7ff f952 	bl	8007ddc <_free_r>
 8008b38:	4625      	mov	r5, r4
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b40:	f000 f8a0 	bl	8008c84 <_malloc_usable_size_r>
 8008b44:	4284      	cmp	r4, r0
 8008b46:	4607      	mov	r7, r0
 8008b48:	d802      	bhi.n	8008b50 <_realloc_r+0x34>
 8008b4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b4e:	d812      	bhi.n	8008b76 <_realloc_r+0x5a>
 8008b50:	4621      	mov	r1, r4
 8008b52:	4640      	mov	r0, r8
 8008b54:	f7ff f9ae 	bl	8007eb4 <_malloc_r>
 8008b58:	4605      	mov	r5, r0
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d0ed      	beq.n	8008b3a <_realloc_r+0x1e>
 8008b5e:	42bc      	cmp	r4, r7
 8008b60:	4622      	mov	r2, r4
 8008b62:	4631      	mov	r1, r6
 8008b64:	bf28      	it	cs
 8008b66:	463a      	movcs	r2, r7
 8008b68:	f7ff ffca 	bl	8008b00 <memcpy>
 8008b6c:	4631      	mov	r1, r6
 8008b6e:	4640      	mov	r0, r8
 8008b70:	f7ff f934 	bl	8007ddc <_free_r>
 8008b74:	e7e1      	b.n	8008b3a <_realloc_r+0x1e>
 8008b76:	4635      	mov	r5, r6
 8008b78:	e7df      	b.n	8008b3a <_realloc_r+0x1e>

08008b7a <__swhatbuf_r>:
 8008b7a:	b570      	push	{r4, r5, r6, lr}
 8008b7c:	460c      	mov	r4, r1
 8008b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b82:	2900      	cmp	r1, #0
 8008b84:	b096      	sub	sp, #88	; 0x58
 8008b86:	4615      	mov	r5, r2
 8008b88:	461e      	mov	r6, r3
 8008b8a:	da0d      	bge.n	8008ba8 <__swhatbuf_r+0x2e>
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008b92:	f04f 0100 	mov.w	r1, #0
 8008b96:	bf0c      	ite	eq
 8008b98:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008b9c:	2340      	movne	r3, #64	; 0x40
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	6031      	str	r1, [r6, #0]
 8008ba2:	602b      	str	r3, [r5, #0]
 8008ba4:	b016      	add	sp, #88	; 0x58
 8008ba6:	bd70      	pop	{r4, r5, r6, pc}
 8008ba8:	466a      	mov	r2, sp
 8008baa:	f000 f849 	bl	8008c40 <_fstat_r>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	dbec      	blt.n	8008b8c <__swhatbuf_r+0x12>
 8008bb2:	9901      	ldr	r1, [sp, #4]
 8008bb4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008bb8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008bbc:	4259      	negs	r1, r3
 8008bbe:	4159      	adcs	r1, r3
 8008bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bc4:	e7eb      	b.n	8008b9e <__swhatbuf_r+0x24>

08008bc6 <__smakebuf_r>:
 8008bc6:	898b      	ldrh	r3, [r1, #12]
 8008bc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bca:	079d      	lsls	r5, r3, #30
 8008bcc:	4606      	mov	r6, r0
 8008bce:	460c      	mov	r4, r1
 8008bd0:	d507      	bpl.n	8008be2 <__smakebuf_r+0x1c>
 8008bd2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008bd6:	6023      	str	r3, [r4, #0]
 8008bd8:	6123      	str	r3, [r4, #16]
 8008bda:	2301      	movs	r3, #1
 8008bdc:	6163      	str	r3, [r4, #20]
 8008bde:	b002      	add	sp, #8
 8008be0:	bd70      	pop	{r4, r5, r6, pc}
 8008be2:	ab01      	add	r3, sp, #4
 8008be4:	466a      	mov	r2, sp
 8008be6:	f7ff ffc8 	bl	8008b7a <__swhatbuf_r>
 8008bea:	9900      	ldr	r1, [sp, #0]
 8008bec:	4605      	mov	r5, r0
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f7ff f960 	bl	8007eb4 <_malloc_r>
 8008bf4:	b948      	cbnz	r0, 8008c0a <__smakebuf_r+0x44>
 8008bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bfa:	059a      	lsls	r2, r3, #22
 8008bfc:	d4ef      	bmi.n	8008bde <__smakebuf_r+0x18>
 8008bfe:	f023 0303 	bic.w	r3, r3, #3
 8008c02:	f043 0302 	orr.w	r3, r3, #2
 8008c06:	81a3      	strh	r3, [r4, #12]
 8008c08:	e7e3      	b.n	8008bd2 <__smakebuf_r+0xc>
 8008c0a:	89a3      	ldrh	r3, [r4, #12]
 8008c0c:	6020      	str	r0, [r4, #0]
 8008c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c12:	81a3      	strh	r3, [r4, #12]
 8008c14:	9b00      	ldr	r3, [sp, #0]
 8008c16:	6163      	str	r3, [r4, #20]
 8008c18:	9b01      	ldr	r3, [sp, #4]
 8008c1a:	6120      	str	r0, [r4, #16]
 8008c1c:	b15b      	cbz	r3, 8008c36 <__smakebuf_r+0x70>
 8008c1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c22:	4630      	mov	r0, r6
 8008c24:	f000 f81e 	bl	8008c64 <_isatty_r>
 8008c28:	b128      	cbz	r0, 8008c36 <__smakebuf_r+0x70>
 8008c2a:	89a3      	ldrh	r3, [r4, #12]
 8008c2c:	f023 0303 	bic.w	r3, r3, #3
 8008c30:	f043 0301 	orr.w	r3, r3, #1
 8008c34:	81a3      	strh	r3, [r4, #12]
 8008c36:	89a3      	ldrh	r3, [r4, #12]
 8008c38:	431d      	orrs	r5, r3
 8008c3a:	81a5      	strh	r5, [r4, #12]
 8008c3c:	e7cf      	b.n	8008bde <__smakebuf_r+0x18>
	...

08008c40 <_fstat_r>:
 8008c40:	b538      	push	{r3, r4, r5, lr}
 8008c42:	4d07      	ldr	r5, [pc, #28]	; (8008c60 <_fstat_r+0x20>)
 8008c44:	2300      	movs	r3, #0
 8008c46:	4604      	mov	r4, r0
 8008c48:	4608      	mov	r0, r1
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	602b      	str	r3, [r5, #0]
 8008c4e:	f7f9 fab6 	bl	80021be <_fstat>
 8008c52:	1c43      	adds	r3, r0, #1
 8008c54:	d102      	bne.n	8008c5c <_fstat_r+0x1c>
 8008c56:	682b      	ldr	r3, [r5, #0]
 8008c58:	b103      	cbz	r3, 8008c5c <_fstat_r+0x1c>
 8008c5a:	6023      	str	r3, [r4, #0]
 8008c5c:	bd38      	pop	{r3, r4, r5, pc}
 8008c5e:	bf00      	nop
 8008c60:	20000554 	.word	0x20000554

08008c64 <_isatty_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	4d06      	ldr	r5, [pc, #24]	; (8008c80 <_isatty_r+0x1c>)
 8008c68:	2300      	movs	r3, #0
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	4608      	mov	r0, r1
 8008c6e:	602b      	str	r3, [r5, #0]
 8008c70:	f7f9 fab5 	bl	80021de <_isatty>
 8008c74:	1c43      	adds	r3, r0, #1
 8008c76:	d102      	bne.n	8008c7e <_isatty_r+0x1a>
 8008c78:	682b      	ldr	r3, [r5, #0]
 8008c7a:	b103      	cbz	r3, 8008c7e <_isatty_r+0x1a>
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	bd38      	pop	{r3, r4, r5, pc}
 8008c80:	20000554 	.word	0x20000554

08008c84 <_malloc_usable_size_r>:
 8008c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c88:	1f18      	subs	r0, r3, #4
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	bfbc      	itt	lt
 8008c8e:	580b      	ldrlt	r3, [r1, r0]
 8008c90:	18c0      	addlt	r0, r0, r3
 8008c92:	4770      	bx	lr

08008c94 <_init>:
 8008c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c96:	bf00      	nop
 8008c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9a:	bc08      	pop	{r3}
 8008c9c:	469e      	mov	lr, r3
 8008c9e:	4770      	bx	lr

08008ca0 <_fini>:
 8008ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca2:	bf00      	nop
 8008ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca6:	bc08      	pop	{r3}
 8008ca8:	469e      	mov	lr, r3
 8008caa:	4770      	bx	lr
