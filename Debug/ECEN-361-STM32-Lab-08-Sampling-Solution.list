
ECEN-361-STM32-Lab-08-Sampling-Solution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007824  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  080079b4  080079b4  000179b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800831c  0800831c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800831c  0800831c  0001831c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008324  08008324  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008324  08008324  00018324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008328  08008328  00018328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800832c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b70  2000006c  08008398  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bdc  08008398  00020bdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001704c  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002faa  00000000  00000000  0003712b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  0003a0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010de  00000000  00000000  0003b688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a618  00000000  00000000  0003c766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018acd  00000000  00000000  00066d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010a10c  00000000  00000000  0007f84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000063f0  00000000  00000000  00189958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0018fd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800799c 	.word	0x0800799c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800799c 	.word	0x0800799c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	817b      	strh	r3, [r7, #10]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]
 8000584:	e038      	b.n	80005f8 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10f      	bne.n	80005ae <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	4619      	mov	r1, r3
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f003 fd1f 	bl	8003fe0 <HAL_GPIO_WritePin>
			val >>= 1;
 80005a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005ac:	e00f      	b.n	80005ce <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005ae:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	09db      	lsrs	r3, r3, #7
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f003 fd0e 	bl	8003fe0 <HAL_GPIO_WritePin>
			val <<= 1;
 80005c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f003 fd03 	bl	8003fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f003 fcfd 	bl	8003fe0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005e6:	893b      	ldrh	r3, [r7, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f003 fcf7 	bl	8003fe0 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	3301      	adds	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <shiftOut+0x1a>
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <MultiFunctionShield_Display>:
	SEGMENT_VALUE[0] = 0x0e;    // Letter F
	}


void MultiFunctionShield_Display (int16_t value)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	80fb      	strh	r3, [r7, #6]
  if ((value > 9999) || (value < -999))   // out of range
 8000612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000616:	f242 720f 	movw	r2, #9999	; 0x270f
 800061a:	4293      	cmp	r3, r2
 800061c:	dc04      	bgt.n	8000628 <MultiFunctionShield_Display+0x20>
 800061e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000622:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000626:	dc0c      	bgt.n	8000642 <MultiFunctionShield_Display+0x3a>
  {
    SEGMENT_VALUE[0] = SEGMENT_MINUS;
 8000628:	22bf      	movs	r2, #191	; 0xbf
 800062a:	4b7f      	ldr	r3, [pc, #508]	; (8000828 <MultiFunctionShield_Display+0x220>)
 800062c:	701a      	strb	r2, [r3, #0]
    SEGMENT_VALUE[1] = SEGMENT_MINUS;
 800062e:	22bf      	movs	r2, #191	; 0xbf
 8000630:	4b7d      	ldr	r3, [pc, #500]	; (8000828 <MultiFunctionShield_Display+0x220>)
 8000632:	705a      	strb	r2, [r3, #1]
    SEGMENT_VALUE[2] = SEGMENT_MINUS;
 8000634:	22bf      	movs	r2, #191	; 0xbf
 8000636:	4b7c      	ldr	r3, [pc, #496]	; (8000828 <MultiFunctionShield_Display+0x220>)
 8000638:	709a      	strb	r2, [r3, #2]
    SEGMENT_VALUE[3] = SEGMENT_MINUS;
 800063a:	22bf      	movs	r2, #191	; 0xbf
 800063c:	4b7a      	ldr	r3, [pc, #488]	; (8000828 <MultiFunctionShield_Display+0x220>)
 800063e:	70da      	strb	r2, [r3, #3]
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;

      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
    }
  }
}
 8000640:	e0ec      	b.n	800081c <MultiFunctionShield_Display+0x214>
    if (value > 0)   // positive values
 8000642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000646:	2b00      	cmp	r3, #0
 8000648:	dd72      	ble.n	8000730 <MultiFunctionShield_Display+0x128>
      if (value > 999)
 800064a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800064e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000652:	db0f      	blt.n	8000674 <MultiFunctionShield_Display+0x6c>
        SEGMENT_VALUE[0] = SEGMENT_MAP [(uint8_t) (value / 1000)];
 8000654:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000658:	4a74      	ldr	r2, [pc, #464]	; (800082c <MultiFunctionShield_Display+0x224>)
 800065a:	fb82 1203 	smull	r1, r2, r2, r3
 800065e:	1192      	asrs	r2, r2, #6
 8000660:	17db      	asrs	r3, r3, #31
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	b21b      	sxth	r3, r3
 8000666:	b2db      	uxtb	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	4b71      	ldr	r3, [pc, #452]	; (8000830 <MultiFunctionShield_Display+0x228>)
 800066c:	5c9a      	ldrb	r2, [r3, r2]
 800066e:	4b6e      	ldr	r3, [pc, #440]	; (8000828 <MultiFunctionShield_Display+0x220>)
 8000670:	701a      	strb	r2, [r3, #0]
 8000672:	e002      	b.n	800067a <MultiFunctionShield_Display+0x72>
        SEGMENT_VALUE[0] = BLANK_OR_ZERO_FILL;
 8000674:	22ff      	movs	r2, #255	; 0xff
 8000676:	4b6c      	ldr	r3, [pc, #432]	; (8000828 <MultiFunctionShield_Display+0x220>)
 8000678:	701a      	strb	r2, [r3, #0]
      if (value > 99)
 800067a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800067e:	2b63      	cmp	r3, #99	; 0x63
 8000680:	dd1b      	ble.n	80006ba <MultiFunctionShield_Display+0xb2>
        SEGMENT_VALUE[1] = SEGMENT_MAP [(uint8_t) ((value / 100) % 10)];
 8000682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000686:	4a6b      	ldr	r2, [pc, #428]	; (8000834 <MultiFunctionShield_Display+0x22c>)
 8000688:	fb82 1203 	smull	r1, r2, r2, r3
 800068c:	1152      	asrs	r2, r2, #5
 800068e:	17db      	asrs	r3, r3, #31
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	b21a      	sxth	r2, r3
 8000694:	4b68      	ldr	r3, [pc, #416]	; (8000838 <MultiFunctionShield_Display+0x230>)
 8000696:	fb83 1302 	smull	r1, r3, r3, r2
 800069a:	1099      	asrs	r1, r3, #2
 800069c:	17d3      	asrs	r3, r2, #31
 800069e:	1ac9      	subs	r1, r1, r3
 80006a0:	460b      	mov	r3, r1
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	440b      	add	r3, r1
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	b21b      	sxth	r3, r3
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b5f      	ldr	r3, [pc, #380]	; (8000830 <MultiFunctionShield_Display+0x228>)
 80006b2:	5c9a      	ldrb	r2, [r3, r2]
 80006b4:	4b5c      	ldr	r3, [pc, #368]	; (8000828 <MultiFunctionShield_Display+0x220>)
 80006b6:	705a      	strb	r2, [r3, #1]
 80006b8:	e002      	b.n	80006c0 <MultiFunctionShield_Display+0xb8>
        SEGMENT_VALUE[1] = BLANK_OR_ZERO_FILL;
 80006ba:	22ff      	movs	r2, #255	; 0xff
 80006bc:	4b5a      	ldr	r3, [pc, #360]	; (8000828 <MultiFunctionShield_Display+0x220>)
 80006be:	705a      	strb	r2, [r3, #1]
      if (value > 9)
 80006c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c4:	2b09      	cmp	r3, #9
 80006c6:	dd1b      	ble.n	8000700 <MultiFunctionShield_Display+0xf8>
        SEGMENT_VALUE[2] = SEGMENT_MAP [(uint8_t) ((value / 10) % 10)];
 80006c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006cc:	4a5a      	ldr	r2, [pc, #360]	; (8000838 <MultiFunctionShield_Display+0x230>)
 80006ce:	fb82 1203 	smull	r1, r2, r2, r3
 80006d2:	1092      	asrs	r2, r2, #2
 80006d4:	17db      	asrs	r3, r3, #31
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	b21a      	sxth	r2, r3
 80006da:	4b57      	ldr	r3, [pc, #348]	; (8000838 <MultiFunctionShield_Display+0x230>)
 80006dc:	fb83 1302 	smull	r1, r3, r3, r2
 80006e0:	1099      	asrs	r1, r3, #2
 80006e2:	17d3      	asrs	r3, r2, #31
 80006e4:	1ac9      	subs	r1, r1, r3
 80006e6:	460b      	mov	r3, r1
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	440b      	add	r3, r1
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b21b      	sxth	r3, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b4e      	ldr	r3, [pc, #312]	; (8000830 <MultiFunctionShield_Display+0x228>)
 80006f8:	5c9a      	ldrb	r2, [r3, r2]
 80006fa:	4b4b      	ldr	r3, [pc, #300]	; (8000828 <MultiFunctionShield_Display+0x220>)
 80006fc:	709a      	strb	r2, [r3, #2]
 80006fe:	e002      	b.n	8000706 <MultiFunctionShield_Display+0xfe>
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;
 8000700:	22ff      	movs	r2, #255	; 0xff
 8000702:	4b49      	ldr	r3, [pc, #292]	; (8000828 <MultiFunctionShield_Display+0x220>)
 8000704:	709a      	strb	r2, [r3, #2]
      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
 8000706:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800070a:	4b4b      	ldr	r3, [pc, #300]	; (8000838 <MultiFunctionShield_Display+0x230>)
 800070c:	fb83 1302 	smull	r1, r3, r3, r2
 8000710:	1099      	asrs	r1, r3, #2
 8000712:	17d3      	asrs	r3, r2, #31
 8000714:	1ac9      	subs	r1, r1, r3
 8000716:	460b      	mov	r3, r1
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	440b      	add	r3, r1
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	b21b      	sxth	r3, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	461a      	mov	r2, r3
 8000726:	4b42      	ldr	r3, [pc, #264]	; (8000830 <MultiFunctionShield_Display+0x228>)
 8000728:	5c9a      	ldrb	r2, [r3, r2]
 800072a:	4b3f      	ldr	r3, [pc, #252]	; (8000828 <MultiFunctionShield_Display+0x220>)
 800072c:	70da      	strb	r2, [r3, #3]
}
 800072e:	e075      	b.n	800081c <MultiFunctionShield_Display+0x214>
    else if (value == 0)   // positive values
 8000730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d10c      	bne.n	8000752 <MultiFunctionShield_Display+0x14a>
		SEGMENT_VALUE[0] = SEGMENT_MAP[0];
 8000738:	22c0      	movs	r2, #192	; 0xc0
 800073a:	4b3b      	ldr	r3, [pc, #236]	; (8000828 <MultiFunctionShield_Display+0x220>)
 800073c:	701a      	strb	r2, [r3, #0]
		SEGMENT_VALUE[1] = SEGMENT_MAP[0];
 800073e:	22c0      	movs	r2, #192	; 0xc0
 8000740:	4b39      	ldr	r3, [pc, #228]	; (8000828 <MultiFunctionShield_Display+0x220>)
 8000742:	705a      	strb	r2, [r3, #1]
		SEGMENT_VALUE[2] = SEGMENT_MAP[0];
 8000744:	22c0      	movs	r2, #192	; 0xc0
 8000746:	4b38      	ldr	r3, [pc, #224]	; (8000828 <MultiFunctionShield_Display+0x220>)
 8000748:	709a      	strb	r2, [r3, #2]
		SEGMENT_VALUE[3] = SEGMENT_MAP[0];
 800074a:	22c0      	movs	r2, #192	; 0xc0
 800074c:	4b36      	ldr	r3, [pc, #216]	; (8000828 <MultiFunctionShield_Display+0x220>)
 800074e:	70da      	strb	r2, [r3, #3]
}
 8000750:	e064      	b.n	800081c <MultiFunctionShield_Display+0x214>
    else if (value < 0)      // negative values: "-" left
 8000752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000756:	2b00      	cmp	r3, #0
 8000758:	da60      	bge.n	800081c <MultiFunctionShield_Display+0x214>
      value *= -1;
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	425b      	negs	r3, r3
 800075e:	b29b      	uxth	r3, r3
 8000760:	80fb      	strh	r3, [r7, #6]
      SEGMENT_VALUE[0] = SEGMENT_MINUS;
 8000762:	22bf      	movs	r2, #191	; 0xbf
 8000764:	4b30      	ldr	r3, [pc, #192]	; (8000828 <MultiFunctionShield_Display+0x220>)
 8000766:	701a      	strb	r2, [r3, #0]
      if (value > 99)
 8000768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800076c:	2b63      	cmp	r3, #99	; 0x63
 800076e:	dd1b      	ble.n	80007a8 <MultiFunctionShield_Display+0x1a0>
        SEGMENT_VALUE[1] = SEGMENT_MAP [(uint8_t) ((value / 100) % 10)];
 8000770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000774:	4a2f      	ldr	r2, [pc, #188]	; (8000834 <MultiFunctionShield_Display+0x22c>)
 8000776:	fb82 1203 	smull	r1, r2, r2, r3
 800077a:	1152      	asrs	r2, r2, #5
 800077c:	17db      	asrs	r3, r3, #31
 800077e:	1ad3      	subs	r3, r2, r3
 8000780:	b21a      	sxth	r2, r3
 8000782:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <MultiFunctionShield_Display+0x230>)
 8000784:	fb83 1302 	smull	r1, r3, r3, r2
 8000788:	1099      	asrs	r1, r3, #2
 800078a:	17d3      	asrs	r3, r2, #31
 800078c:	1ac9      	subs	r1, r1, r3
 800078e:	460b      	mov	r3, r1
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	440b      	add	r3, r1
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	b21b      	sxth	r3, r3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	461a      	mov	r2, r3
 800079e:	4b24      	ldr	r3, [pc, #144]	; (8000830 <MultiFunctionShield_Display+0x228>)
 80007a0:	5c9a      	ldrb	r2, [r3, r2]
 80007a2:	4b21      	ldr	r3, [pc, #132]	; (8000828 <MultiFunctionShield_Display+0x220>)
 80007a4:	705a      	strb	r2, [r3, #1]
 80007a6:	e002      	b.n	80007ae <MultiFunctionShield_Display+0x1a6>
        SEGMENT_VALUE[1] = BLANK_OR_ZERO_FILL;
 80007a8:	22ff      	movs	r2, #255	; 0xff
 80007aa:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <MultiFunctionShield_Display+0x220>)
 80007ac:	705a      	strb	r2, [r3, #1]
      if (value > 9)
 80007ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007b2:	2b09      	cmp	r3, #9
 80007b4:	dd1b      	ble.n	80007ee <MultiFunctionShield_Display+0x1e6>
        SEGMENT_VALUE[2] = SEGMENT_MAP [(uint8_t) ((value / 10) % 10)];
 80007b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ba:	4a1f      	ldr	r2, [pc, #124]	; (8000838 <MultiFunctionShield_Display+0x230>)
 80007bc:	fb82 1203 	smull	r1, r2, r2, r3
 80007c0:	1092      	asrs	r2, r2, #2
 80007c2:	17db      	asrs	r3, r3, #31
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	b21a      	sxth	r2, r3
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MultiFunctionShield_Display+0x230>)
 80007ca:	fb83 1302 	smull	r1, r3, r3, r2
 80007ce:	1099      	asrs	r1, r3, #2
 80007d0:	17d3      	asrs	r3, r2, #31
 80007d2:	1ac9      	subs	r1, r1, r3
 80007d4:	460b      	mov	r3, r1
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	440b      	add	r3, r1
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	b21b      	sxth	r3, r3
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MultiFunctionShield_Display+0x228>)
 80007e6:	5c9a      	ldrb	r2, [r3, r2]
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MultiFunctionShield_Display+0x220>)
 80007ea:	709a      	strb	r2, [r3, #2]
 80007ec:	e002      	b.n	80007f4 <MultiFunctionShield_Display+0x1ec>
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;
 80007ee:	22ff      	movs	r2, #255	; 0xff
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MultiFunctionShield_Display+0x220>)
 80007f2:	709a      	strb	r2, [r3, #2]
      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
 80007f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MultiFunctionShield_Display+0x230>)
 80007fa:	fb83 1302 	smull	r1, r3, r3, r2
 80007fe:	1099      	asrs	r1, r3, #2
 8000800:	17d3      	asrs	r3, r2, #31
 8000802:	1ac9      	subs	r1, r1, r3
 8000804:	460b      	mov	r3, r1
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	440b      	add	r3, r1
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	b21b      	sxth	r3, r3
 8000810:	b2db      	uxtb	r3, r3
 8000812:	461a      	mov	r2, r3
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MultiFunctionShield_Display+0x228>)
 8000816:	5c9a      	ldrb	r2, [r3, r2]
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <MultiFunctionShield_Display+0x220>)
 800081a:	70da      	strb	r2, [r3, #3]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	2000008c 	.word	0x2000008c
 800082c:	10624dd3 	.word	0x10624dd3
 8000830:	080079e4 	.word	0x080079e4
 8000834:	51eb851f 	.word	0x51eb851f
 8000838:	66666667 	.word	0x66666667

0800083c <Clear_LEDs>:
		SEGMENT_VALUE[1] = SEGMENT_MAP [1];
		}
	}

void Clear_LEDs(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	  // Clear the LED lights


// LAB-04 needs D1 and D3 for SPI
#ifndef          LAB_04
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2180      	movs	r1, #128	; 0x80
 8000844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000848:	f003 fbca 	bl	8003fe0 <HAL_GPIO_WritePin>
#endif

  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2140      	movs	r1, #64	; 0x40
 8000850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000854:	f003 fbc4 	bl	8003fe0 <HAL_GPIO_WritePin>

#ifndef          LAB_06
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2140      	movs	r1, #64	; 0x40
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <Clear_LEDs+0x38>)
 800085e:	f003 fbbf 	bl	8003fe0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2120      	movs	r1, #32
 8000866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086a:	f003 fbb9 	bl	8003fe0 <HAL_GPIO_WritePin>
#endif
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	48000400 	.word	0x48000400

08000878 <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 800087c:	22ff      	movs	r2, #255	; 0xff
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MultiFunctionShield_Clear+0x28>)
 8000880:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 8000882:	22ff      	movs	r2, #255	; 0xff
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MultiFunctionShield_Clear+0x28>)
 8000886:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 8000888:	22ff      	movs	r2, #255	; 0xff
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <MultiFunctionShield_Clear+0x28>)
 800088c:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 800088e:	22ff      	movs	r2, #255	; 0xff
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <MultiFunctionShield_Clear+0x28>)
 8000892:	70da      	strb	r2, [r3, #3]
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	2000008c 	.word	0x2000008c

080008a4 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af02      	add	r7, sp, #8
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2120      	movs	r1, #32
 80008b2:	4816      	ldr	r0, [pc, #88]	; (800090c <MultiFunctionShield_WriteNumberToSegment+0x68>)
 80008b4:	f003 fb94 	bl	8003fe0 <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80008b8:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 80008ba:	4a15      	ldr	r2, [pc, #84]	; (8000910 <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 80008bc:	5cd3      	ldrb	r3, [r2, r3]
 80008be:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	2301      	movs	r3, #1
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d6:	f7ff fe49 	bl	800056c <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80008da:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 80008dc:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 80008de:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80008e0:	9301      	str	r3, [sp, #4]
 80008e2:	2301      	movs	r3, #1
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f7ff fe39 	bl	800056c <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	2120      	movs	r1, #32
 80008fe:	4803      	ldr	r0, [pc, #12]	; (800090c <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000900:	f003 fb6e 	bl	8003fe0 <HAL_GPIO_WritePin>
	}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	48000400 	.word	0x48000400
 8000910:	2000008c 	.word	0x2000008c
 8000914:	080079f0 	.word	0x080079f0

08000918 <MultiFunctionShield__ISRFunc>:
	}



void MultiFunctionShield__ISRFunc(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MultiFunctionShield__ISRFunc+0x60>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	3301      	adds	r3, #1
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MultiFunctionShield__ISRFunc+0x60>)
 8000928:	4611      	mov	r1, r2
 800092a:	7019      	strb	r1, [r3, #0]
 800092c:	4613      	mov	r3, r2
 800092e:	3b01      	subs	r3, #1
 8000930:	2b03      	cmp	r3, #3
 8000932:	d81e      	bhi.n	8000972 <MultiFunctionShield__ISRFunc+0x5a>
 8000934:	a201      	add	r2, pc, #4	; (adr r2, 800093c <MultiFunctionShield__ISRFunc+0x24>)
 8000936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093a:	bf00      	nop
 800093c:	0800094d 	.word	0x0800094d
 8000940:	08000955 	.word	0x08000955
 8000944:	0800095d 	.word	0x0800095d
 8000948:	08000965 	.word	0x08000965
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 800094c:	2000      	movs	r0, #0
 800094e:	f7ff ffa9 	bl	80008a4 <MultiFunctionShield_WriteNumberToSegment>
 8000952:	e00e      	b.n	8000972 <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8000954:	2001      	movs	r0, #1
 8000956:	f7ff ffa5 	bl	80008a4 <MultiFunctionShield_WriteNumberToSegment>
 800095a:	e00a      	b.n	8000972 <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 800095c:	2002      	movs	r0, #2
 800095e:	f7ff ffa1 	bl	80008a4 <MultiFunctionShield_WriteNumberToSegment>
 8000962:	e006      	b.n	8000972 <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8000964:	2003      	movs	r0, #3
 8000966:	f7ff ff9d 	bl	80008a4 <MultiFunctionShield_WriteNumberToSegment>
 800096a:	4b03      	ldr	r3, [pc, #12]	; (8000978 <MultiFunctionShield__ISRFunc+0x60>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
 8000970:	bf00      	nop
  }
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000088 	.word	0x20000088

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000980:	f000 febe 	bl	8001700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000984:	f000 f84e 	bl	8000a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000988:	f000 fa0a 	bl	8000da0 <MX_GPIO_Init>
  MX_DMA_Init();
 800098c:	f000 f9d6 	bl	8000d3c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000990:	f000 f9a4 	bl	8000cdc <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000994:	f000 f8fc 	bl	8000b90 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000998:	f000 f92c 	bl	8000bf4 <MX_TIM2_Init>
  MX_TIM17_Init();
 800099c:	f000 f978 	bl	8000c90 <MX_TIM17_Init>
  MX_ADC3_Init();
 80009a0:	f000 f892 	bl	8000ac8 <MX_ADC3_Init>


  // HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1);


  HAL_TIM_Base_Start_IT(&htim2);
 80009a4:	4816      	ldr	r0, [pc, #88]	; (8000a00 <main+0x84>)
 80009a6:	f004 fedd 	bl	8005764 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,1);

  printf("\033\143"); printf("Welcome to ECEN-361 SineWave Generator\n\r");
 80009aa:	4816      	ldr	r0, [pc, #88]	; (8000a04 <main+0x88>)
 80009ac:	f006 f980 	bl	8006cb0 <iprintf>
 80009b0:	4815      	ldr	r0, [pc, #84]	; (8000a08 <main+0x8c>)
 80009b2:	f006 f97d 	bl	8006cb0 <iprintf>

  // Start timer
  MultiFunctionShield_Clear();								// Clear the 7-seg display
 80009b6:	f7ff ff5f 	bl	8000878 <MultiFunctionShield_Clear>
  HAL_TIM_Base_Start_IT(&htim17);							// LED SevenSeg cycle thru them
 80009ba:	4814      	ldr	r0, [pc, #80]	; (8000a0c <main+0x90>)
 80009bc:	f004 fed2 	bl	8005764 <HAL_TIM_Base_Start_IT>
  Clear_LEDs();
 80009c0:	f7ff ff3c 	bl	800083c <Clear_LEDs>
  // MultiFunctionShield_Display(points_per_output_wave);
  MultiFunctionShield_Display(points_to_use_in_a_cycle);
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <main+0x94>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fe1c 	bl	8000608 <MultiFunctionShield_Display>

  /* Setup the DMA */

  if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)	{while(1);}
 80009d0:	4810      	ldr	r0, [pc, #64]	; (8000a14 <main+0x98>)
 80009d2:	f002 ff25 	bl	8003820 <HAL_DMA_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d000      	beq.n	80009de <main+0x62>
 80009dc:	e7fe      	b.n	80009dc <main+0x60>
  if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)		{while(1);}
 80009de:	480e      	ldr	r0, [pc, #56]	; (8000a18 <main+0x9c>)
 80009e0:	f002 ff1e 	bl	8003820 <HAL_DMA_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d000      	beq.n	80009ec <main+0x70>
 80009ea:	e7fe      	b.n	80009ea <main+0x6e>


  Start_the_DAC_DMA();
 80009ec:	f000 fab6 	bl	8000f5c <Start_the_DAC_DMA>

  HAL_ADC_Start_DMA(&hadc3, (uint32_t*) adc_buffer, ADC_BUFFER_LENGTH);
 80009f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009f4:	4909      	ldr	r1, [pc, #36]	; (8000a1c <main+0xa0>)
 80009f6:	480a      	ldr	r0, [pc, #40]	; (8000a20 <main+0xa4>)
 80009f8:	f001 fa68 	bl	8001ecc <HAL_ADC_Start_DMA>
	   //            HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_10_pts, 10,DAC_ALIGN_12B_R);

   // HAL_DMA_Start_IT(&hdma_dac_ch1, (uint32_t) &sineLookupTable_100_pts, (uint32_t) &hdac1, sizeof(sineLookupTable_100_pts));
   //HAL_DMA_PollForTransfer(&hdma_memtomem_dma1_channel1, );

  while (1)
 80009fc:	e7fe      	b.n	80009fc <main+0x80>
 80009fe:	bf00      	nop
 8000a00:	20000198 	.word	0x20000198
 8000a04:	080079b4 	.word	0x080079b4
 8000a08:	080079b8 	.word	0x080079b8
 8000a0c:	200001e4 	.word	0x200001e4
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000150 	.word	0x20000150
 8000a18:	200000f4 	.word	0x200000f4
 8000a1c:	200002b8 	.word	0x200002b8
 8000a20:	20000090 	.word	0x20000090

08000a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b096      	sub	sp, #88	; 0x58
 8000a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	2244      	movs	r2, #68	; 0x44
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f006 f991 	bl	8006d5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a46:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a4a:	f003 fb21 	bl	8004090 <HAL_PWREx_ControlVoltageScaling>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a54:	f000 fb1a 	bl	800108c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a60:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a62:	2310      	movs	r3, #16
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a66:	2302      	movs	r3, #2
 8000a68:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a72:	230a      	movs	r3, #10
 8000a74:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a76:	2307      	movs	r3, #7
 8000a78:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4618      	mov	r0, r3
 8000a88:	f003 fb58 	bl	800413c <HAL_RCC_OscConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a92:	f000 fafb 	bl	800108c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a96:	230f      	movs	r3, #15
 8000a98:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2104      	movs	r1, #4
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f003 ff20 	bl	80048f4 <HAL_RCC_ClockConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000aba:	f000 fae7 	bl	800108c <Error_Handler>
  }
}
 8000abe:	bf00      	nop
 8000ac0:	3758      	adds	r7, #88	; 0x58
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
 8000adc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000ade:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <MX_ADC3_Init+0xbc>)
 8000ae0:	4a29      	ldr	r2, [pc, #164]	; (8000b88 <MX_ADC3_Init+0xc0>)
 8000ae2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ae4:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <MX_ADC3_Init+0xbc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000aea:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <MX_ADC3_Init+0xbc>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <MX_ADC3_Init+0xbc>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000af6:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <MX_ADC3_Init+0xbc>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <MX_ADC3_Init+0xbc>)
 8000afe:	2204      	movs	r2, #4
 8000b00:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <MX_ADC3_Init+0xbc>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000b08:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <MX_ADC3_Init+0xbc>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <MX_ADC3_Init+0xbc>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <MX_ADC3_Init+0xbc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <MX_ADC3_Init+0xbc>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <MX_ADC3_Init+0xbc>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <MX_ADC3_Init+0xbc>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_ADC3_Init+0xbc>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <MX_ADC3_Init+0xbc>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b3e:	4811      	ldr	r0, [pc, #68]	; (8000b84 <MX_ADC3_Init+0xbc>)
 8000b40:	f001 f874 	bl	8001c2c <HAL_ADC_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000b4a:	f000 fa9f 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_ADC3_Init+0xc4>)
 8000b50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b52:	2306      	movs	r3, #6
 8000b54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b5a:	237f      	movs	r3, #127	; 0x7f
 8000b5c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b66:	463b      	mov	r3, r7
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4806      	ldr	r0, [pc, #24]	; (8000b84 <MX_ADC3_Init+0xbc>)
 8000b6c:	f001 fca2 	bl	80024b4 <HAL_ADC_ConfigChannel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000b76:	f000 fa89 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000090 	.word	0x20000090
 8000b88:	50040200 	.word	0x50040200
 8000b8c:	10c00010 	.word	0x10c00010

08000b90 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2224      	movs	r2, #36	; 0x24
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f006 f8dc 	bl	8006d5a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_DAC1_Init+0x5c>)
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <MX_DAC1_Init+0x60>)
 8000ba6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ba8:	4810      	ldr	r0, [pc, #64]	; (8000bec <MX_DAC1_Init+0x5c>)
 8000baa:	f002 fad2 	bl	8003152 <HAL_DAC_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000bb4:	f000 fa6a 	bl	800108c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bbc:	2324      	movs	r3, #36	; 0x24
 8000bbe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <MX_DAC1_Init+0x5c>)
 8000bd4:	f002 fc69 	bl	80034aa <HAL_DAC_ConfigChannel>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bde:	f000 fa55 	bl	800108c <Error_Handler>
  /* USER CODE BEGIN DAC1_Init 2 */
  // sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;

  /* USER CODE END DAC1_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	; 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2000013c 	.word	0x2000013c
 8000bf0:	40007400 	.word	0x40007400

08000bf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfa:	f107 0310 	add.w	r3, r7, #16
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c12:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <MX_TIM2_Init+0x98>)
 8000c14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_TIM2_Init+0x98>)
 8000c1c:	224f      	movs	r2, #79	; 0x4f
 8000c1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_TIM2_Init+0x98>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_TIM2_Init+0x98>)
 8000c28:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_TIM2_Init+0x98>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <MX_TIM2_Init+0x98>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c3a:	4814      	ldr	r0, [pc, #80]	; (8000c8c <MX_TIM2_Init+0x98>)
 8000c3c:	f004 fd3a 	bl	80056b4 <HAL_TIM_Base_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c46:	f000 fa21 	bl	800108c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	4619      	mov	r1, r3
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_TIM2_Init+0x98>)
 8000c58:	f004 fef6 	bl	8005a48 <HAL_TIM_ConfigClockSource>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c62:	f000 fa13 	bl	800108c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c66:	2320      	movs	r3, #32
 8000c68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_TIM2_Init+0x98>)
 8000c74:	f005 f90e 	bl	8005e94 <HAL_TIMEx_MasterConfigSynchronization>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c7e:	f000 fa05 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3720      	adds	r7, #32
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000198 	.word	0x20000198

08000c90 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_TIM17_Init+0x44>)
 8000c96:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <MX_TIM17_Init+0x48>)
 8000c98:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_TIM17_Init+0x44>)
 8000c9c:	f240 321f 	movw	r2, #799	; 0x31f
 8000ca0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_TIM17_Init+0x44>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <MX_TIM17_Init+0x44>)
 8000caa:	2264      	movs	r2, #100	; 0x64
 8000cac:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_TIM17_Init+0x44>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <MX_TIM17_Init+0x44>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_TIM17_Init+0x44>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <MX_TIM17_Init+0x44>)
 8000cc2:	f004 fcf7 	bl	80056b4 <HAL_TIM_Base_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000ccc:	f000 f9de 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200001e4 	.word	0x200001e4
 8000cd8:	40014800 	.word	0x40014800

08000cdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000ce2:	4a15      	ldr	r2, [pc, #84]	; (8000d38 <MX_USART2_UART_Init+0x5c>)
 8000ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d02:	220c      	movs	r2, #12
 8000d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_USART2_UART_Init+0x58>)
 8000d20:	f005 f95e 	bl	8005fe0 <HAL_UART_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d2a:	f000 f9af 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000230 	.word	0x20000230
 8000d38:	40004400 	.word	0x40004400

08000d3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_DMA_Init+0x60>)
 8000d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d46:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <MX_DMA_Init+0x60>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6493      	str	r3, [r2, #72]	; 0x48
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_DMA_Init+0x60>)
 8000d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <MX_DMA_Init+0x60>)
 8000d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d5e:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <MX_DMA_Init+0x60>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	6493      	str	r3, [r2, #72]	; 0x48
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <MX_DMA_Init+0x60>)
 8000d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2105      	movs	r1, #5
 8000d76:	200d      	movs	r0, #13
 8000d78:	f002 f9b5 	bl	80030e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d7c:	200d      	movs	r0, #13
 8000d7e:	f002 f9ce 	bl	800311e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	203c      	movs	r0, #60	; 0x3c
 8000d88:	f002 f9ad 	bl	80030e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000d8c:	203c      	movs	r0, #60	; 0x3c
 8000d8e:	f002 f9c6 	bl	800311e <HAL_NVIC_EnableIRQ>

}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	4b58      	ldr	r3, [pc, #352]	; (8000f18 <MX_GPIO_Init+0x178>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	4a57      	ldr	r2, [pc, #348]	; (8000f18 <MX_GPIO_Init+0x178>)
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc2:	4b55      	ldr	r3, [pc, #340]	; (8000f18 <MX_GPIO_Init+0x178>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	f003 0304 	and.w	r3, r3, #4
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dce:	4b52      	ldr	r3, [pc, #328]	; (8000f18 <MX_GPIO_Init+0x178>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a51      	ldr	r2, [pc, #324]	; (8000f18 <MX_GPIO_Init+0x178>)
 8000dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b4f      	ldr	r3, [pc, #316]	; (8000f18 <MX_GPIO_Init+0x178>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b4c      	ldr	r3, [pc, #304]	; (8000f18 <MX_GPIO_Init+0x178>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	4a4b      	ldr	r2, [pc, #300]	; (8000f18 <MX_GPIO_Init+0x178>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df2:	4b49      	ldr	r3, [pc, #292]	; (8000f18 <MX_GPIO_Init+0x178>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	4b46      	ldr	r3, [pc, #280]	; (8000f18 <MX_GPIO_Init+0x178>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	4a45      	ldr	r2, [pc, #276]	; (8000f18 <MX_GPIO_Init+0x178>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0a:	4b43      	ldr	r3, [pc, #268]	; (8000f18 <MX_GPIO_Init+0x178>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f003 f8de 	bl	8003fe0 <HAL_GPIO_WritePin>
                          |SevenSeg_DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SevenSeg_LATCH_Pin|LED_D4_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2160      	movs	r1, #96	; 0x60
 8000e28:	483c      	ldr	r0, [pc, #240]	; (8000f1c <MX_GPIO_Init+0x17c>)
 8000e2a:	f003 f8d9 	bl	8003fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e34:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4836      	ldr	r0, [pc, #216]	; (8000f20 <MX_GPIO_Init+0x180>)
 8000e46:	f002 ff21 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_1_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_1_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e62:	f002 ff13 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin LED_D2_Pin LED_D3_Pin SevenSeg_CLK_Pin
                           SevenSeg_DATA_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 8000e66:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000e6a:	617b      	str	r3, [r7, #20]
                          |SevenSeg_DATA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e82:	f002 ff03 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000e86:	2301      	movs	r3, #1
 8000e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4820      	ldr	r0, [pc, #128]	; (8000f1c <MX_GPIO_Init+0x17c>)
 8000e9c:	f002 fef6 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4818      	ldr	r0, [pc, #96]	; (8000f20 <MX_GPIO_Init+0x180>)
 8000ebe:	f002 fee5 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_LATCH_Pin LED_D4_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin|LED_D4_Pin;
 8000ec2:	2360      	movs	r3, #96	; 0x60
 8000ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4810      	ldr	r0, [pc, #64]	; (8000f1c <MX_GPIO_Init+0x17c>)
 8000eda:	f002 fed7 	bl	8003c8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2006      	movs	r0, #6
 8000ee4:	f002 f8ff 	bl	80030e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ee8:	2006      	movs	r0, #6
 8000eea:	f002 f918 	bl	800311e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2007      	movs	r0, #7
 8000ef4:	f002 f8f7 	bl	80030e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ef8:	2007      	movs	r0, #7
 8000efa:	f002 f910 	bl	800311e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	2028      	movs	r0, #40	; 0x28
 8000f04:	f002 f8ef 	bl	80030e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f08:	2028      	movs	r0, #40	; 0x28
 8000f0a:	f002 f908 	bl	800311e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	; 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	48000400 	.word	0x48000400
 8000f20:	48000800 	.word	0x48000800

08000f24 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000f2c:	1d39      	adds	r1, r7, #4
 8000f2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f32:	2201      	movs	r2, #1
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <__io_putchar+0x20>)
 8000f36:	f005 f8a1 	bl	800607c <HAL_UART_Transmit>

  return ch;
 8000f3a:	687b      	ldr	r3, [r7, #4]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000230 	.word	0x20000230

08000f48 <HAL_DAC_ConvCpltCallbackCh1>:



void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	/* Fill this in when I know what to do if I get here */
// printf("              FINISHED DAC OUT\n\n");
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <Start_the_DAC_DMA>:
		}
	}


void Start_the_DAC_DMA(void)
	{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af02      	add	r7, sp, #8
	 //First stop it, just to be clean (if running)
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000f62:	2100      	movs	r1, #0
 8000f64:	4817      	ldr	r0, [pc, #92]	; (8000fc4 <Start_the_DAC_DMA+0x68>)
 8000f66:	f002 f9e3 	bl	8003330 <HAL_DAC_Stop_DMA>
	// Just use the global

	switch(points_to_use_in_a_cycle)
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <Start_the_DAC_DMA+0x6c>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f72:	d019      	beq.n	8000fa8 <Start_the_DAC_DMA+0x4c>
 8000f74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f78:	dc20      	bgt.n	8000fbc <Start_the_DAC_DMA+0x60>
 8000f7a:	2b0a      	cmp	r3, #10
 8000f7c:	d002      	beq.n	8000f84 <Start_the_DAC_DMA+0x28>
 8000f7e:	2b64      	cmp	r3, #100	; 0x64
 8000f80:	d009      	beq.n	8000f96 <Start_the_DAC_DMA+0x3a>
			break;
		case thousand:
		   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_1000_pts, 1000,DAC_ALIGN_12B_R);
			break;
		}
	}
 8000f82:	e01b      	b.n	8000fbc <Start_the_DAC_DMA+0x60>
		   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_10_pts, 10,DAC_ALIGN_12B_R);
 8000f84:	2300      	movs	r3, #0
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	230a      	movs	r3, #10
 8000f8a:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <Start_the_DAC_DMA+0x70>)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <Start_the_DAC_DMA+0x68>)
 8000f90:	f002 f902 	bl	8003198 <HAL_DAC_Start_DMA>
			break;
 8000f94:	e012      	b.n	8000fbc <Start_the_DAC_DMA+0x60>
		   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_100_pts, 100,DAC_ALIGN_12B_R);
 8000f96:	2300      	movs	r3, #0
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2364      	movs	r3, #100	; 0x64
 8000f9c:	4a0c      	ldr	r2, [pc, #48]	; (8000fd0 <Start_the_DAC_DMA+0x74>)
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <Start_the_DAC_DMA+0x68>)
 8000fa2:	f002 f8f9 	bl	8003198 <HAL_DAC_Start_DMA>
			break;
 8000fa6:	e009      	b.n	8000fbc <Start_the_DAC_DMA+0x60>
		   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_1000_pts, 1000,DAC_ALIGN_12B_R);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb0:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <Start_the_DAC_DMA+0x78>)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <Start_the_DAC_DMA+0x68>)
 8000fb6:	f002 f8ef 	bl	8003198 <HAL_DAC_Start_DMA>
			break;
 8000fba:	bf00      	nop
	}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000013c 	.word	0x2000013c
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	080079f4 	.word	0x080079f4
 8000fd0:	08007a08 	.word	0x08007a08
 8000fd4:	08007ad0 	.word	0x08007ad0

08000fd8 <change_points_per_cycle>:




void change_points_per_cycle()
	{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	 *  2.) Change the DMA Call to point to the address of that set
	 *      and the new number of points
	 *
	 *  3.) Re-display the new set on the 7-Seg.  It'll show '10', or '100', or '1000'
	 */
	switch(points_to_use_in_a_cycle)
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <change_points_per_cycle+0x4c>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fe4:	d010      	beq.n	8001008 <change_points_per_cycle+0x30>
 8000fe6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fea:	dc11      	bgt.n	8001010 <change_points_per_cycle+0x38>
 8000fec:	2b0a      	cmp	r3, #10
 8000fee:	d002      	beq.n	8000ff6 <change_points_per_cycle+0x1e>
 8000ff0:	2b64      	cmp	r3, #100	; 0x64
 8000ff2:	d004      	beq.n	8000ffe <change_points_per_cycle+0x26>
 8000ff4:	e00c      	b.n	8001010 <change_points_per_cycle+0x38>
		{
		case ten:
			points_to_use_in_a_cycle = hundred;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <change_points_per_cycle+0x4c>)
 8000ff8:	2264      	movs	r2, #100	; 0x64
 8000ffa:	801a      	strh	r2, [r3, #0]
			break;
 8000ffc:	e008      	b.n	8001010 <change_points_per_cycle+0x38>
		case hundred:
			points_to_use_in_a_cycle = thousand;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <change_points_per_cycle+0x4c>)
 8001000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001004:	801a      	strh	r2, [r3, #0]
			break;
 8001006:	e003      	b.n	8001010 <change_points_per_cycle+0x38>
		case thousand:
			points_to_use_in_a_cycle = ten;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <change_points_per_cycle+0x4c>)
 800100a:	220a      	movs	r2, #10
 800100c:	801a      	strh	r2, [r3, #0]
			break;
 800100e:	bf00      	nop
		}
		Start_the_DAC_DMA();
 8001010:	f7ff ffa4 	bl	8000f5c <Start_the_DAC_DMA>
		MultiFunctionShield_Display(points_to_use_in_a_cycle);
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <change_points_per_cycle+0x4c>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	b21b      	sxth	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff faf4 	bl	8000608 <MultiFunctionShield_Display>
	}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000000 	.word	0x20000000

08001028 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if (htim == &htim17 ) { MultiFunctionShield__ISRFunc(); }
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d101      	bne.n	800103c <HAL_TIM_PeriodElapsedCallback+0x14>
 8001038:	f7ff fc6e 	bl	8000918 <MultiFunctionShield__ISRFunc>
		//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,(uint32_t) sineLookup[sindex++]);
		//HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
	  	// int u = 1;
		// if (sindex >=SINE_WAVE_SAMPLES ) {sindex=0;}
		}
	}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200001e4 	.word	0x200001e4

08001048 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	80fb      	strh	r3, [r7, #6]
	// When the DAC is being used, Button_2 is unavailable.
	// The other two generate GPIO interrupts
	// Don't spend much time in the ISR because there are other interrupts happening
	switch(GPIO_Pin)
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d006      	beq.n	8001066 <HAL_GPIO_EXTI_Callback+0x1e>
 8001058:	2b02      	cmp	r3, #2
 800105a:	d102      	bne.n	8001062 <HAL_GPIO_EXTI_Callback+0x1a>
	{
	case Button_1_Pin:
		change_points_per_cycle();
 800105c:	f7ff ffbc 	bl	8000fd8 <change_points_per_cycle>
		break;
 8001060:	e002      	b.n	8001068 <HAL_GPIO_EXTI_Callback+0x20>
	case Button_3_Pin:
		// Button_3 changes the Frequency of the DAC, going thru different
		// speeds
		break;
	default:
      __NOP();
 8001062:	bf00      	nop
	}
}
 8001064:	e000      	b.n	8001068 <HAL_GPIO_EXTI_Callback+0x20>
		break;
 8001066:	bf00      	nop
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc3) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	/* When the ADC Buffer is filled, come here and do the edge detect */
   HAL_GPIO_TogglePin(LED_D4_GPIO_Port, LED_D4_Pin);
 8001078:	2140      	movs	r1, #64	; 0x40
 800107a:	4803      	ldr	r0, [pc, #12]	; (8001088 <HAL_ADC_ConvCpltCallback+0x18>)
 800107c:	f002 ffc8 	bl	8004010 <HAL_GPIO_TogglePin>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	48000400 	.word	0x48000400

0800108c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001094:	e7fe      	b.n	8001094 <Error_Handler+0x8>
	...

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <HAL_MspInit+0x44>)
 80010a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a2:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <HAL_MspInit+0x44>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6613      	str	r3, [r2, #96]	; 0x60
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <HAL_MspInit+0x44>)
 80010ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_MspInit+0x44>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <HAL_MspInit+0x44>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c0:	6593      	str	r3, [r2, #88]	; 0x58
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_MspInit+0x44>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000

080010e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b0ac      	sub	sp, #176	; 0xb0
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2288      	movs	r2, #136	; 0x88
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f005 fe2a 	bl	8006d5a <memset>
  if(hadc->Instance==ADC3)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a41      	ldr	r2, [pc, #260]	; (8001210 <HAL_ADC_MspInit+0x130>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d17a      	bne.n	8001206 <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001110:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001114:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001116:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800111a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800111e:	2302      	movs	r3, #2
 8001120:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001122:	2301      	movs	r3, #1
 8001124:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001126:	2308      	movs	r3, #8
 8001128:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800112a:	2307      	movs	r3, #7
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800112e:	2302      	movs	r3, #2
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001132:	2302      	movs	r3, #2
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001136:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4618      	mov	r0, r3
 8001142:	f003 fdfb 	bl	8004d3c <HAL_RCCEx_PeriphCLKConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800114c:	f7ff ff9e 	bl	800108c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <HAL_ADC_MspInit+0x134>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001154:	4a2f      	ldr	r2, [pc, #188]	; (8001214 <HAL_ADC_MspInit+0x134>)
 8001156:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800115a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115c:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <HAL_ADC_MspInit+0x134>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001160:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001168:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <HAL_ADC_MspInit+0x134>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116c:	4a29      	ldr	r2, [pc, #164]	; (8001214 <HAL_ADC_MspInit+0x134>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001174:	4b27      	ldr	r3, [pc, #156]	; (8001214 <HAL_ADC_MspInit+0x134>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC3     ------> ADC3_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001180:	2308      	movs	r3, #8
 8001182:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001186:	230b      	movs	r3, #11
 8001188:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001192:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001196:	4619      	mov	r1, r3
 8001198:	481f      	ldr	r0, [pc, #124]	; (8001218 <HAL_ADC_MspInit+0x138>)
 800119a:	f002 fd77 	bl	8003c8c <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Channel5;
 800119e:	4b1f      	ldr	r3, [pc, #124]	; (800121c <HAL_ADC_MspInit+0x13c>)
 80011a0:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <HAL_ADC_MspInit+0x140>)
 80011a2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_0;
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <HAL_ADC_MspInit+0x13c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011aa:	4b1c      	ldr	r3, [pc, #112]	; (800121c <HAL_ADC_MspInit+0x13c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b0:	4b1a      	ldr	r3, [pc, #104]	; (800121c <HAL_ADC_MspInit+0x13c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80011b6:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_ADC_MspInit+0x13c>)
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_ADC_MspInit+0x13c>)
 80011be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_ADC_MspInit+0x13c>)
 80011c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ca:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <HAL_ADC_MspInit+0x13c>)
 80011ce:	2220      	movs	r2, #32
 80011d0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_ADC_MspInit+0x13c>)
 80011d4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80011d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80011da:	4810      	ldr	r0, [pc, #64]	; (800121c <HAL_ADC_MspInit+0x13c>)
 80011dc:	f002 fb20 	bl	8003820 <HAL_DMA_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 80011e6:	f7ff ff51 	bl	800108c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a0b      	ldr	r2, [pc, #44]	; (800121c <HAL_ADC_MspInit+0x13c>)
 80011ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80011f0:	4a0a      	ldr	r2, [pc, #40]	; (800121c <HAL_ADC_MspInit+0x13c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	202f      	movs	r0, #47	; 0x2f
 80011fc:	f001 ff73 	bl	80030e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001200:	202f      	movs	r0, #47	; 0x2f
 8001202:	f001 ff8c 	bl	800311e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001206:	bf00      	nop
 8001208:	37b0      	adds	r7, #176	; 0xb0
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	50040200 	.word	0x50040200
 8001214:	40021000 	.word	0x40021000
 8001218:	48000800 	.word	0x48000800
 800121c:	200000f4 	.word	0x200000f4
 8001220:	40020458 	.word	0x40020458

08001224 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a2f      	ldr	r2, [pc, #188]	; (8001300 <HAL_DAC_MspInit+0xdc>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d158      	bne.n	80012f8 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001246:	4b2f      	ldr	r3, [pc, #188]	; (8001304 <HAL_DAC_MspInit+0xe0>)
 8001248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124a:	4a2e      	ldr	r2, [pc, #184]	; (8001304 <HAL_DAC_MspInit+0xe0>)
 800124c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001250:	6593      	str	r3, [r2, #88]	; 0x58
 8001252:	4b2c      	ldr	r3, [pc, #176]	; (8001304 <HAL_DAC_MspInit+0xe0>)
 8001254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b29      	ldr	r3, [pc, #164]	; (8001304 <HAL_DAC_MspInit+0xe0>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a28      	ldr	r2, [pc, #160]	; (8001304 <HAL_DAC_MspInit+0xe0>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b26      	ldr	r3, [pc, #152]	; (8001304 <HAL_DAC_MspInit+0xe0>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001276:	2310      	movs	r3, #16
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127a:	2303      	movs	r3, #3
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128c:	f002 fcfe 	bl	8003c8c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <HAL_DAC_MspInit+0xe4>)
 8001292:	4a1e      	ldr	r2, [pc, #120]	; (800130c <HAL_DAC_MspInit+0xe8>)
 8001294:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <HAL_DAC_MspInit+0xe4>)
 8001298:	2206      	movs	r2, #6
 800129a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HAL_DAC_MspInit+0xe4>)
 800129e:	2210      	movs	r2, #16
 80012a0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_DAC_MspInit+0xe4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <HAL_DAC_MspInit+0xe4>)
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <HAL_DAC_MspInit+0xe4>)
 80012b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b4:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012b6:	4b14      	ldr	r3, [pc, #80]	; (8001308 <HAL_DAC_MspInit+0xe4>)
 80012b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012bc:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_DAC_MspInit+0xe4>)
 80012c0:	2220      	movs	r2, #32
 80012c2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <HAL_DAC_MspInit+0xe4>)
 80012c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80012cc:	480e      	ldr	r0, [pc, #56]	; (8001308 <HAL_DAC_MspInit+0xe4>)
 80012ce:	f002 faa7 	bl	8003820 <HAL_DMA_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80012d8:	f7ff fed8 	bl	800108c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <HAL_DAC_MspInit+0xe4>)
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	4a09      	ldr	r2, [pc, #36]	; (8001308 <HAL_DAC_MspInit+0xe4>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	2036      	movs	r0, #54	; 0x36
 80012ee:	f001 fefa 	bl	80030e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012f2:	2036      	movs	r0, #54	; 0x36
 80012f4:	f001 ff13 	bl	800311e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40007400 	.word	0x40007400
 8001304:	40021000 	.word	0x40021000
 8001308:	20000150 	.word	0x20000150
 800130c:	40020030 	.word	0x40020030

08001310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001320:	d114      	bne.n	800134c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_TIM_Base_MspInit+0x78>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	4a18      	ldr	r2, [pc, #96]	; (8001388 <HAL_TIM_Base_MspInit+0x78>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6593      	str	r3, [r2, #88]	; 0x58
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <HAL_TIM_Base_MspInit+0x78>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	201c      	movs	r0, #28
 8001340:	f001 fed1 	bl	80030e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001344:	201c      	movs	r0, #28
 8001346:	f001 feea 	bl	800311e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800134a:	e018      	b.n	800137e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0e      	ldr	r2, [pc, #56]	; (800138c <HAL_TIM_Base_MspInit+0x7c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d113      	bne.n	800137e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_TIM_Base_MspInit+0x78>)
 8001358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135a:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <HAL_TIM_Base_MspInit+0x78>)
 800135c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001360:	6613      	str	r3, [r2, #96]	; 0x60
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_TIM_Base_MspInit+0x78>)
 8001364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	201a      	movs	r0, #26
 8001374:	f001 feb7 	bl	80030e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001378:	201a      	movs	r0, #26
 800137a:	f001 fed0 	bl	800311e <HAL_NVIC_EnableIRQ>
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	40014800 	.word	0x40014800

08001390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b0ac      	sub	sp, #176	; 0xb0
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2288      	movs	r2, #136	; 0x88
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f005 fcd2 	bl	8006d5a <memset>
  if(huart->Instance==USART2)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a21      	ldr	r2, [pc, #132]	; (8001440 <HAL_UART_MspInit+0xb0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d13b      	bne.n	8001438 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013c0:	2302      	movs	r3, #2
 80013c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4618      	mov	r0, r3
 80013ce:	f003 fcb5 	bl	8004d3c <HAL_RCCEx_PeriphCLKConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013d8:	f7ff fe58 	bl	800108c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_UART_MspInit+0xb4>)
 80013de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e0:	4a18      	ldr	r2, [pc, #96]	; (8001444 <HAL_UART_MspInit+0xb4>)
 80013e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e6:	6593      	str	r3, [r2, #88]	; 0x58
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <HAL_UART_MspInit+0xb4>)
 80013ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <HAL_UART_MspInit+0xb4>)
 80013f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f8:	4a12      	ldr	r2, [pc, #72]	; (8001444 <HAL_UART_MspInit+0xb4>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001400:	4b10      	ldr	r3, [pc, #64]	; (8001444 <HAL_UART_MspInit+0xb4>)
 8001402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800140c:	230c      	movs	r3, #12
 800140e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001424:	2307      	movs	r3, #7
 8001426:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001434:	f002 fc2a 	bl	8003c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001438:	bf00      	nop
 800143a:	37b0      	adds	r7, #176	; 0xb0
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40004400 	.word	0x40004400
 8001444:	40021000 	.word	0x40021000

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800144c:	e7fe      	b.n	800144c <NMI_Handler+0x4>

0800144e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <MemManage_Handler+0x4>

0800145a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <UsageFault_Handler+0x4>

08001466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001494:	f000 f990 	bl	80017b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}

0800149c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f002 fdcf 	bl	8004044 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}

080014aa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 80014ae:	2002      	movs	r0, #2
 80014b0:	f002 fdc8 	bl	8004044 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <DMA1_Channel3_IRQHandler+0x10>)
 80014be:	f002 fb05 	bl	8003acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000150 	.word	0x20000150

080014cc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80014d2:	f004 f9b7 	bl	8005844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200001e4 	.word	0x200001e4

080014e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <TIM2_IRQHandler+0x10>)
 80014e6:	f004 f9ad 	bl	8005844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000198 	.word	0x20000198

080014f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80014f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014fc:	f002 fda2 	bl	8004044 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <ADC3_IRQHandler+0x10>)
 800150a:	f000 fd9b 	bl	8002044 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000090 	.word	0x20000090

08001518 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <TIM6_DAC_IRQHandler+0x10>)
 800151e:	f001 ff4c 	bl	80033ba <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2000013c 	.word	0x2000013c

0800152c <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <DMA2_Channel5_IRQHandler+0x10>)
 8001532:	f002 facb 	bl	8003acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200000f4 	.word	0x200000f4

08001540 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	e00a      	b.n	8001568 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001552:	f3af 8000 	nop.w
 8001556:	4601      	mov	r1, r0
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	60ba      	str	r2, [r7, #8]
 800155e:	b2ca      	uxtb	r2, r1
 8001560:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	429a      	cmp	r2, r3
 800156e:	dbf0      	blt.n	8001552 <_read+0x12>
  }

  return len;
 8001570:	687b      	ldr	r3, [r7, #4]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	e009      	b.n	80015a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	60ba      	str	r2, [r7, #8]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fcc5 	bl	8000f24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbf1      	blt.n	800158c <_write+0x12>
  }
  return len;
 80015a8:	687b      	ldr	r3, [r7, #4]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_close>:

int _close(int file)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015da:	605a      	str	r2, [r3, #4]
  return 0;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <_isatty>:

int _isatty(int file)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001624:	4a14      	ldr	r2, [pc, #80]	; (8001678 <_sbrk+0x5c>)
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <_sbrk+0x60>)
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <_sbrk+0x64>)
 800163a:	4a12      	ldr	r2, [pc, #72]	; (8001684 <_sbrk+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	429a      	cmp	r2, r3
 800164a:	d207      	bcs.n	800165c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800164c:	f005 fbd4 	bl	8006df8 <__errno>
 8001650:	4603      	mov	r3, r0
 8001652:	220c      	movs	r2, #12
 8001654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	e009      	b.n	8001670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <_sbrk+0x64>)
 800166c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20018000 	.word	0x20018000
 800167c:	00000400 	.word	0x00000400
 8001680:	20000a88 	.word	0x20000a88
 8001684:	20000be0 	.word	0x20000be0

08001688 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <SystemInit+0x20>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <SystemInit+0x20>)
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016b0:	f7ff ffea 	bl	8001688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016b6:	490d      	ldr	r1, [pc, #52]	; (80016ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <LoopForever+0xe>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016cc:	4c0a      	ldr	r4, [pc, #40]	; (80016f8 <LoopForever+0x16>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016da:	f005 fb93 	bl	8006e04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016de:	f7ff f94d 	bl	800097c <main>

080016e2 <LoopForever>:

LoopForever:
    b LoopForever
 80016e2:	e7fe      	b.n	80016e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ec:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80016f0:	0800832c 	.word	0x0800832c
  ldr r2, =_sbss
 80016f4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80016f8:	20000bdc 	.word	0x20000bdc

080016fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC1_2_IRQHandler>
	...

08001700 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_Init+0x3c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <HAL_Init+0x3c>)
 8001710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001714:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001716:	2003      	movs	r0, #3
 8001718:	f001 fcda 	bl	80030d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800171c:	200f      	movs	r0, #15
 800171e:	f000 f80f 	bl	8001740 <HAL_InitTick>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	71fb      	strb	r3, [r7, #7]
 800172c:	e001      	b.n	8001732 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800172e:	f7ff fcb3 	bl	8001098 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001732:	79fb      	ldrb	r3, [r7, #7]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40022000 	.word	0x40022000

08001740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800174c:	4b17      	ldr	r3, [pc, #92]	; (80017ac <HAL_InitTick+0x6c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d023      	beq.n	800179c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HAL_InitTick+0x70>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_InitTick+0x6c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001762:	fbb3 f3f1 	udiv	r3, r3, r1
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f001 fce5 	bl	800313a <HAL_SYSTICK_Config>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10f      	bne.n	8001796 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b0f      	cmp	r3, #15
 800177a:	d809      	bhi.n	8001790 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f001 fcaf 	bl	80030e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001788:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <HAL_InitTick+0x74>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e007      	b.n	80017a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	e004      	b.n	80017a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	73fb      	strb	r3, [r7, #15]
 800179a:	e001      	b.n	80017a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000000c 	.word	0x2000000c
 80017b0:	20000004 	.word	0x20000004
 80017b4:	20000008 	.word	0x20000008

080017b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_IncTick+0x20>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_IncTick+0x24>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	4a04      	ldr	r2, [pc, #16]	; (80017dc <HAL_IncTick+0x24>)
 80017ca:	6013      	str	r3, [r2, #0]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	2000000c 	.word	0x2000000c
 80017dc:	20000a8c 	.word	0x20000a8c

080017e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return uwTick;
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <HAL_GetTick+0x14>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000a8c 	.word	0x20000a8c

080017f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001800:	f7ff ffee 	bl	80017e0 <HAL_GetTick>
 8001804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001810:	d005      	beq.n	800181e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_Delay+0x44>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4413      	add	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800181e:	bf00      	nop
 8001820:	f7ff ffde 	bl	80017e0 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	429a      	cmp	r2, r3
 800182e:	d8f7      	bhi.n	8001820 <HAL_Delay+0x28>
  {
  }
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000000c 	.word	0x2000000c

08001840 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	609a      	str	r2, [r3, #8]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	609a      	str	r2, [r3, #8]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3360      	adds	r3, #96	; 0x60
 80018ba:	461a      	mov	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <LL_ADC_SetOffset+0x44>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	4313      	orrs	r3, r2
 80018d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018e0:	bf00      	nop
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	03fff000 	.word	0x03fff000

080018f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3360      	adds	r3, #96	; 0x60
 80018fe:	461a      	mov	r2, r3
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3360      	adds	r3, #96	; 0x60
 800192c:	461a      	mov	r2, r3
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	431a      	orrs	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001946:	bf00      	nop
 8001948:	371c      	adds	r7, #28
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001978:	b480      	push	{r7}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3330      	adds	r3, #48	; 0x30
 8001988:	461a      	mov	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	4413      	add	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	211f      	movs	r1, #31
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	401a      	ands	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	0e9b      	lsrs	r3, r3, #26
 80019b0:	f003 011f 	and.w	r1, r3, #31
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	431a      	orrs	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019c4:	bf00      	nop
 80019c6:	371c      	adds	r7, #28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b087      	sub	sp, #28
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3314      	adds	r3, #20
 8001a06:	461a      	mov	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	0e5b      	lsrs	r3, r3, #25
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	4413      	add	r3, r2
 8001a14:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	0d1b      	lsrs	r3, r3, #20
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	2107      	movs	r1, #7
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	0d1b      	lsrs	r3, r3, #20
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a40:	bf00      	nop
 8001a42:	371c      	adds	r7, #28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a64:	43db      	mvns	r3, r3
 8001a66:	401a      	ands	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0318 	and.w	r3, r3, #24
 8001a6e:	4908      	ldr	r1, [pc, #32]	; (8001a90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a70:	40d9      	lsrs	r1, r3
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	400b      	ands	r3, r1
 8001a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	0007ffff 	.word	0x0007ffff

08001a94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 031f 	and.w	r3, r3, #31
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001adc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6093      	str	r3, [r2, #8]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b04:	d101      	bne.n	8001b0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b54:	d101      	bne.n	8001b5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b7c:	f043 0201 	orr.w	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <LL_ADC_IsEnabled+0x18>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <LL_ADC_IsEnabled+0x1a>
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bc6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bca:	f043 0204 	orr.w	r2, r3, #4
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d101      	bne.n	8001bf6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d101      	bne.n	8001c1c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c2c:	b590      	push	{r4, r7, lr}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e130      	b.n	8001ea8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff fa43 	bl	80010e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff3f 	bl	8001af0 <LL_ADC_IsDeepPowerDownEnabled>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d004      	beq.n	8001c82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff25 	bl	8001acc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff5a 	bl	8001b40 <LL_ADC_IsInternalRegulatorEnabled>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d115      	bne.n	8001cbe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff3e 	bl	8001b18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c9c:	4b84      	ldr	r3, [pc, #528]	; (8001eb0 <HAL_ADC_Init+0x284>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	099b      	lsrs	r3, r3, #6
 8001ca2:	4a84      	ldr	r2, [pc, #528]	; (8001eb4 <HAL_ADC_Init+0x288>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	099b      	lsrs	r3, r3, #6
 8001caa:	3301      	adds	r3, #1
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cb0:	e002      	b.n	8001cb8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f9      	bne.n	8001cb2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ff3c 	bl	8001b40 <LL_ADC_IsInternalRegulatorEnabled>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10d      	bne.n	8001cea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd2:	f043 0210 	orr.w	r2, r3, #16
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	f043 0201 	orr.w	r2, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff75 	bl	8001bde <LL_ADC_REG_IsConversionOngoing>
 8001cf4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfa:	f003 0310 	and.w	r3, r3, #16
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f040 80c9 	bne.w	8001e96 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f040 80c5 	bne.w	8001e96 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d10:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d14:	f043 0202 	orr.w	r2, r3, #2
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff35 	bl	8001b90 <LL_ADC_IsEnabled>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d115      	bne.n	8001d58 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d2c:	4862      	ldr	r0, [pc, #392]	; (8001eb8 <HAL_ADC_Init+0x28c>)
 8001d2e:	f7ff ff2f 	bl	8001b90 <LL_ADC_IsEnabled>
 8001d32:	4604      	mov	r4, r0
 8001d34:	4861      	ldr	r0, [pc, #388]	; (8001ebc <HAL_ADC_Init+0x290>)
 8001d36:	f7ff ff2b 	bl	8001b90 <LL_ADC_IsEnabled>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	431c      	orrs	r4, r3
 8001d3e:	4860      	ldr	r0, [pc, #384]	; (8001ec0 <HAL_ADC_Init+0x294>)
 8001d40:	f7ff ff26 	bl	8001b90 <LL_ADC_IsEnabled>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4323      	orrs	r3, r4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d105      	bne.n	8001d58 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	4619      	mov	r1, r3
 8001d52:	485c      	ldr	r0, [pc, #368]	; (8001ec4 <HAL_ADC_Init+0x298>)
 8001d54:	f7ff fd74 	bl	8001840 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7e5b      	ldrb	r3, [r3, #25]
 8001d5c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d62:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d68:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d6e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d76:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d106      	bne.n	8001d94 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	045b      	lsls	r3, r3, #17
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d009      	beq.n	8001db0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <HAL_ADC_Init+0x29c>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	69b9      	ldr	r1, [r7, #24]
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff1b 	bl	8001c04 <LL_ADC_INJ_IsConversionOngoing>
 8001dce:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d13d      	bne.n	8001e52 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d13a      	bne.n	8001e52 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001de0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001de8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001df8:	f023 0302 	bic.w	r3, r3, #2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	69b9      	ldr	r1, [r7, #24]
 8001e02:	430b      	orrs	r3, r1
 8001e04:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d118      	bne.n	8001e42 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001e1a:	f023 0304 	bic.w	r3, r3, #4
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e26:	4311      	orrs	r1, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e32:	430a      	orrs	r2, r1
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	611a      	str	r2, [r3, #16]
 8001e40:	e007      	b.n	8001e52 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0201 	bic.w	r2, r2, #1
 8001e50:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d10c      	bne.n	8001e74 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	f023 010f 	bic.w	r1, r3, #15
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	1e5a      	subs	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	631a      	str	r2, [r3, #48]	; 0x30
 8001e72:	e007      	b.n	8001e84 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 020f 	bic.w	r2, r2, #15
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e88:	f023 0303 	bic.w	r3, r3, #3
 8001e8c:	f043 0201 	orr.w	r2, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	655a      	str	r2, [r3, #84]	; 0x54
 8001e94:	e007      	b.n	8001ea6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	f043 0210 	orr.w	r2, r3, #16
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ea6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3724      	adds	r7, #36	; 0x24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd90      	pop	{r4, r7, pc}
 8001eb0:	20000004 	.word	0x20000004
 8001eb4:	053e2d63 	.word	0x053e2d63
 8001eb8:	50040000 	.word	0x50040000
 8001ebc:	50040100 	.word	0x50040100
 8001ec0:	50040200 	.word	0x50040200
 8001ec4:	50040300 	.word	0x50040300
 8001ec8:	fff0c007 	.word	0xfff0c007

08001ecc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ed8:	4853      	ldr	r0, [pc, #332]	; (8002028 <HAL_ADC_Start_DMA+0x15c>)
 8001eda:	f7ff fddb 	bl	8001a94 <LL_ADC_GetMultimode>
 8001ede:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fe7a 	bl	8001bde <LL_ADC_REG_IsConversionOngoing>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f040 8093 	bne.w	8002018 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_Start_DMA+0x34>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e08e      	b.n	800201e <HAL_ADC_Start_DMA+0x152>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a47      	ldr	r2, [pc, #284]	; (800202c <HAL_ADC_Start_DMA+0x160>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d008      	beq.n	8001f24 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	d002      	beq.n	8001f24 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b09      	cmp	r3, #9
 8001f22:	d172      	bne.n	800200a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 feb7 	bl	8002c98 <ADC_Enable>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d165      	bne.n	8002000 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a38      	ldr	r2, [pc, #224]	; (8002030 <HAL_ADC_Start_DMA+0x164>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d002      	beq.n	8001f58 <HAL_ADC_Start_DMA+0x8c>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	e000      	b.n	8001f5a <HAL_ADC_Start_DMA+0x8e>
 8001f58:	4b36      	ldr	r3, [pc, #216]	; (8002034 <HAL_ADC_Start_DMA+0x168>)
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d002      	beq.n	8001f68 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d105      	bne.n	8001f74 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f023 0206 	bic.w	r2, r3, #6
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	659a      	str	r2, [r3, #88]	; 0x58
 8001f8c:	e002      	b.n	8001f94 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f98:	4a27      	ldr	r2, [pc, #156]	; (8002038 <HAL_ADC_Start_DMA+0x16c>)
 8001f9a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa0:	4a26      	ldr	r2, [pc, #152]	; (800203c <HAL_ADC_Start_DMA+0x170>)
 8001fa2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa8:	4a25      	ldr	r2, [pc, #148]	; (8002040 <HAL_ADC_Start_DMA+0x174>)
 8001faa:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	221c      	movs	r2, #28
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0210 	orr.w	r2, r2, #16
 8001fca:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	3340      	adds	r3, #64	; 0x40
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f001 fcd0 	bl	8003990 <HAL_DMA_Start_IT>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fddc 	bl	8001bb6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001ffe:	e00d      	b.n	800201c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002008:	e008      	b.n	800201c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002016:	e001      	b.n	800201c <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002018:	2302      	movs	r3, #2
 800201a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800201c:	7dfb      	ldrb	r3, [r7, #23]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	50040300 	.word	0x50040300
 800202c:	50040200 	.word	0x50040200
 8002030:	50040100 	.word	0x50040100
 8002034:	50040000 	.word	0x50040000
 8002038:	08002da5 	.word	0x08002da5
 800203c:	08002e7d 	.word	0x08002e7d
 8002040:	08002e99 	.word	0x08002e99

08002044 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002060:	4882      	ldr	r0, [pc, #520]	; (800226c <HAL_ADC_IRQHandler+0x228>)
 8002062:	f7ff fd17 	bl	8001a94 <LL_ADC_GetMultimode>
 8002066:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d017      	beq.n	80020a2 <HAL_ADC_IRQHandler+0x5e>
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d012      	beq.n	80020a2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	2b00      	cmp	r3, #0
 8002086:	d105      	bne.n	8002094 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 ff41 	bl	8002f1c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2202      	movs	r2, #2
 80020a0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d004      	beq.n	80020b6 <HAL_ADC_IRQHandler+0x72>
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10a      	bne.n	80020cc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 8083 	beq.w	80021c8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d07d      	beq.n	80021c8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d105      	bne.n	80020e4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fc32 	bl	8001952 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d062      	beq.n	80021ba <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a5d      	ldr	r2, [pc, #372]	; (8002270 <HAL_ADC_IRQHandler+0x22c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d002      	beq.n	8002104 <HAL_ADC_IRQHandler+0xc0>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	e000      	b.n	8002106 <HAL_ADC_IRQHandler+0xc2>
 8002104:	4b5b      	ldr	r3, [pc, #364]	; (8002274 <HAL_ADC_IRQHandler+0x230>)
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	4293      	cmp	r3, r2
 800210c:	d008      	beq.n	8002120 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2b05      	cmp	r3, #5
 8002118:	d002      	beq.n	8002120 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2b09      	cmp	r3, #9
 800211e:	d104      	bne.n	800212a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	623b      	str	r3, [r7, #32]
 8002128:	e00c      	b.n	8002144 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a50      	ldr	r2, [pc, #320]	; (8002270 <HAL_ADC_IRQHandler+0x22c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d002      	beq.n	800213a <HAL_ADC_IRQHandler+0xf6>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	e000      	b.n	800213c <HAL_ADC_IRQHandler+0xf8>
 800213a:	4b4e      	ldr	r3, [pc, #312]	; (8002274 <HAL_ADC_IRQHandler+0x230>)
 800213c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d135      	bne.n	80021ba <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b08      	cmp	r3, #8
 800215a:	d12e      	bne.n	80021ba <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fd3c 	bl	8001bde <LL_ADC_REG_IsConversionOngoing>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d11a      	bne.n	80021a2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 020c 	bic.w	r2, r2, #12
 800217a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002180:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d112      	bne.n	80021ba <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002198:	f043 0201 	orr.w	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	655a      	str	r2, [r3, #84]	; 0x54
 80021a0:	e00b      	b.n	80021ba <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a6:	f043 0210 	orr.w	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	f043 0201 	orr.w	r2, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe ff58 	bl	8001070 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	220c      	movs	r2, #12
 80021c6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0320 	and.w	r3, r3, #32
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d004      	beq.n	80021dc <HAL_ADC_IRQHandler+0x198>
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10b      	bne.n	80021f4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 809f 	beq.w	8002326 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8099 	beq.w	8002326 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002204:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fbdd 	bl	80019d0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002216:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fb98 	bl	8001952 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002222:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a11      	ldr	r2, [pc, #68]	; (8002270 <HAL_ADC_IRQHandler+0x22c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d002      	beq.n	8002234 <HAL_ADC_IRQHandler+0x1f0>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	e000      	b.n	8002236 <HAL_ADC_IRQHandler+0x1f2>
 8002234:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <HAL_ADC_IRQHandler+0x230>)
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	4293      	cmp	r3, r2
 800223c:	d008      	beq.n	8002250 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b06      	cmp	r3, #6
 8002248:	d002      	beq.n	8002250 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b07      	cmp	r3, #7
 800224e:	d104      	bne.n	800225a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	623b      	str	r3, [r7, #32]
 8002258:	e013      	b.n	8002282 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a04      	ldr	r2, [pc, #16]	; (8002270 <HAL_ADC_IRQHandler+0x22c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d009      	beq.n	8002278 <HAL_ADC_IRQHandler+0x234>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	e007      	b.n	800227a <HAL_ADC_IRQHandler+0x236>
 800226a:	bf00      	nop
 800226c:	50040300 	.word	0x50040300
 8002270:	50040100 	.word	0x50040100
 8002274:	50040000 	.word	0x50040000
 8002278:	4b7d      	ldr	r3, [pc, #500]	; (8002470 <HAL_ADC_IRQHandler+0x42c>)
 800227a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d047      	beq.n	8002318 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d007      	beq.n	80022a2 <HAL_ADC_IRQHandler+0x25e>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d03f      	beq.n	8002318 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d13a      	bne.n	8002318 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ac:	2b40      	cmp	r3, #64	; 0x40
 80022ae:	d133      	bne.n	8002318 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d12e      	bne.n	8002318 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fca0 	bl	8001c04 <LL_ADC_INJ_IsConversionOngoing>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d11a      	bne.n	8002300 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022d8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d112      	bne.n	8002318 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f6:	f043 0201 	orr.w	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
 80022fe:	e00b      	b.n	8002318 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002304:	f043 0210 	orr.w	r2, r3, #16
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 fdd7 	bl	8002ecc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2260      	movs	r2, #96	; 0x60
 8002324:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232c:	2b00      	cmp	r3, #0
 800232e:	d011      	beq.n	8002354 <HAL_ADC_IRQHandler+0x310>
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00c      	beq.n	8002354 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f8a0 	bl	800248c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2280      	movs	r2, #128	; 0x80
 8002352:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d012      	beq.n	8002384 <HAL_ADC_IRQHandler+0x340>
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00d      	beq.n	8002384 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fdbd 	bl	8002ef4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002382:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800238a:	2b00      	cmp	r3, #0
 800238c:	d012      	beq.n	80023b4 <HAL_ADC_IRQHandler+0x370>
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00d      	beq.n	80023b4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 fdaf 	bl	8002f08 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d036      	beq.n	800242c <HAL_ADC_IRQHandler+0x3e8>
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d031      	beq.n	800242c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d102      	bne.n	80023d6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80023d0:	2301      	movs	r3, #1
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
 80023d4:	e014      	b.n	8002400 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80023dc:	4825      	ldr	r0, [pc, #148]	; (8002474 <HAL_ADC_IRQHandler+0x430>)
 80023de:	f7ff fb67 	bl	8001ab0 <LL_ADC_GetMultiDMATransfer>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00b      	beq.n	8002400 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80023e8:	2301      	movs	r3, #1
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
 80023ec:	e008      	b.n	8002400 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80023fc:	2301      	movs	r3, #1
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	2b01      	cmp	r3, #1
 8002404:	d10e      	bne.n	8002424 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002416:	f043 0202 	orr.w	r2, r3, #2
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f83e 	bl	80024a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2210      	movs	r2, #16
 800242a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002432:	2b00      	cmp	r3, #0
 8002434:	d018      	beq.n	8002468 <HAL_ADC_IRQHandler+0x424>
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243c:	2b00      	cmp	r3, #0
 800243e:	d013      	beq.n	8002468 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002444:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002450:	f043 0208 	orr.w	r2, r3, #8
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002460:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fd3c 	bl	8002ee0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002468:	bf00      	nop
 800246a:	3728      	adds	r7, #40	; 0x28
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	50040000 	.word	0x50040000
 8002474:	50040300 	.word	0x50040300

08002478 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b0b6      	sub	sp, #216	; 0xd8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x22>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e3c9      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x7b6>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fb7b 	bl	8001bde <LL_ADC_REG_IsConversionOngoing>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 83aa 	bne.w	8002c44 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b05      	cmp	r3, #5
 80024fe:	d824      	bhi.n	800254a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	3b02      	subs	r3, #2
 8002506:	2b03      	cmp	r3, #3
 8002508:	d81b      	bhi.n	8002542 <HAL_ADC_ConfigChannel+0x8e>
 800250a:	a201      	add	r2, pc, #4	; (adr r2, 8002510 <HAL_ADC_ConfigChannel+0x5c>)
 800250c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002510:	08002521 	.word	0x08002521
 8002514:	08002529 	.word	0x08002529
 8002518:	08002531 	.word	0x08002531
 800251c:	08002539 	.word	0x08002539
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002520:	230c      	movs	r3, #12
 8002522:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002526:	e010      	b.n	800254a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002528:	2312      	movs	r3, #18
 800252a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800252e:	e00c      	b.n	800254a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002530:	2318      	movs	r3, #24
 8002532:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002536:	e008      	b.n	800254a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800253c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002540:	e003      	b.n	800254a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002542:	2306      	movs	r3, #6
 8002544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002548:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002558:	f7ff fa0e 	bl	8001978 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fb3c 	bl	8001bde <LL_ADC_REG_IsConversionOngoing>
 8002566:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fb48 	bl	8001c04 <LL_ADC_INJ_IsConversionOngoing>
 8002574:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002578:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800257c:	2b00      	cmp	r3, #0
 800257e:	f040 81a4 	bne.w	80028ca <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002586:	2b00      	cmp	r3, #0
 8002588:	f040 819f 	bne.w	80028ca <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	6819      	ldr	r1, [r3, #0]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	461a      	mov	r2, r3
 800259a:	f7ff fa2c 	bl	80019f6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	08db      	lsrs	r3, r3, #3
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d00a      	beq.n	80025d6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	6919      	ldr	r1, [r3, #16]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025d0:	f7ff f96a 	bl	80018a8 <LL_ADC_SetOffset>
 80025d4:	e179      	b.n	80028ca <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff f987 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10a      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x14e>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff f97c 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 80025f8:	4603      	mov	r3, r0
 80025fa:	0e9b      	lsrs	r3, r3, #26
 80025fc:	f003 021f 	and.w	r2, r3, #31
 8002600:	e01e      	b.n	8002640 <HAL_ADC_ConfigChannel+0x18c>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff f971 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 800260e:	4603      	mov	r3, r0
 8002610:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002620:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002624:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002628:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002630:	2320      	movs	r3, #32
 8002632:	e004      	b.n	800263e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002634:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002638:	fab3 f383 	clz	r3, r3
 800263c:	b2db      	uxtb	r3, r3
 800263e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002648:	2b00      	cmp	r3, #0
 800264a:	d105      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1a4>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0e9b      	lsrs	r3, r3, #26
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	e018      	b.n	800268a <HAL_ADC_ConfigChannel+0x1d6>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002664:	fa93 f3a3 	rbit	r3, r3
 8002668:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800266c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002674:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800267c:	2320      	movs	r3, #32
 800267e:	e004      	b.n	800268a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002680:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800268a:	429a      	cmp	r2, r3
 800268c:	d106      	bne.n	800269c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2200      	movs	r2, #0
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff f940 	bl	800191c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2101      	movs	r1, #1
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff f924 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10a      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x214>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2101      	movs	r1, #1
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff f919 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 80026be:	4603      	mov	r3, r0
 80026c0:	0e9b      	lsrs	r3, r3, #26
 80026c2:	f003 021f 	and.w	r2, r3, #31
 80026c6:	e01e      	b.n	8002706 <HAL_ADC_ConfigChannel+0x252>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2101      	movs	r1, #1
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff f90e 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026de:	fa93 f3a3 	rbit	r3, r3
 80026e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80026e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80026ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80026f6:	2320      	movs	r3, #32
 80026f8:	e004      	b.n	8002704 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80026fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270e:	2b00      	cmp	r3, #0
 8002710:	d105      	bne.n	800271e <HAL_ADC_ConfigChannel+0x26a>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	0e9b      	lsrs	r3, r3, #26
 8002718:	f003 031f 	and.w	r3, r3, #31
 800271c:	e018      	b.n	8002750 <HAL_ADC_ConfigChannel+0x29c>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002732:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002736:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800273a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002742:	2320      	movs	r3, #32
 8002744:	e004      	b.n	8002750 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002746:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800274a:	fab3 f383 	clz	r3, r3
 800274e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002750:	429a      	cmp	r2, r3
 8002752:	d106      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2200      	movs	r2, #0
 800275a:	2101      	movs	r1, #1
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff f8dd 	bl	800191c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2102      	movs	r1, #2
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff f8c1 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 800276e:	4603      	mov	r3, r0
 8002770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10a      	bne.n	800278e <HAL_ADC_ConfigChannel+0x2da>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2102      	movs	r1, #2
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff f8b6 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 8002784:	4603      	mov	r3, r0
 8002786:	0e9b      	lsrs	r3, r3, #26
 8002788:	f003 021f 	and.w	r2, r3, #31
 800278c:	e01e      	b.n	80027cc <HAL_ADC_ConfigChannel+0x318>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2102      	movs	r1, #2
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff f8ab 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 800279a:	4603      	mov	r3, r0
 800279c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027a4:	fa93 f3a3 	rbit	r3, r3
 80027a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80027ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80027b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80027bc:	2320      	movs	r3, #32
 80027be:	e004      	b.n	80027ca <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80027c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d105      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x330>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	0e9b      	lsrs	r3, r3, #26
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	e014      	b.n	800280e <HAL_ADC_ConfigChannel+0x35a>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80027f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80027f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002800:	2320      	movs	r3, #32
 8002802:	e004      	b.n	800280e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002804:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800280e:	429a      	cmp	r2, r3
 8002810:	d106      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2200      	movs	r2, #0
 8002818:	2102      	movs	r1, #2
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff f87e 	bl	800191c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2103      	movs	r1, #3
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff f862 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 800282c:	4603      	mov	r3, r0
 800282e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10a      	bne.n	800284c <HAL_ADC_ConfigChannel+0x398>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2103      	movs	r1, #3
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff f857 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 8002842:	4603      	mov	r3, r0
 8002844:	0e9b      	lsrs	r3, r3, #26
 8002846:	f003 021f 	and.w	r2, r3, #31
 800284a:	e017      	b.n	800287c <HAL_ADC_ConfigChannel+0x3c8>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2103      	movs	r1, #3
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff f84c 	bl	80018f0 <LL_ADC_GetOffsetChannel>
 8002858:	4603      	mov	r3, r0
 800285a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002866:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800286e:	2320      	movs	r3, #32
 8002870:	e003      	b.n	800287a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002874:	fab3 f383 	clz	r3, r3
 8002878:	b2db      	uxtb	r3, r3
 800287a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002884:	2b00      	cmp	r3, #0
 8002886:	d105      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x3e0>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	0e9b      	lsrs	r3, r3, #26
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	e011      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x404>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800289c:	fa93 f3a3 	rbit	r3, r3
 80028a0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80028a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028a4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80028a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80028ac:	2320      	movs	r3, #32
 80028ae:	e003      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80028b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d106      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2200      	movs	r2, #0
 80028c2:	2103      	movs	r1, #3
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff f829 	bl	800191c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff f95e 	bl	8001b90 <LL_ADC_IsEnabled>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f040 8140 	bne.w	8002b5c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6819      	ldr	r1, [r3, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	461a      	mov	r2, r3
 80028ea:	f7ff f8af 	bl	8001a4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	4a8f      	ldr	r2, [pc, #572]	; (8002b30 <HAL_ADC_ConfigChannel+0x67c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	f040 8131 	bne.w	8002b5c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10b      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x46e>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	0e9b      	lsrs	r3, r3, #26
 8002910:	3301      	adds	r3, #1
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	2b09      	cmp	r3, #9
 8002918:	bf94      	ite	ls
 800291a:	2301      	movls	r3, #1
 800291c:	2300      	movhi	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	e019      	b.n	8002956 <HAL_ADC_ConfigChannel+0x4a2>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002932:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800293a:	2320      	movs	r3, #32
 800293c:	e003      	b.n	8002946 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800293e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	3301      	adds	r3, #1
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	2b09      	cmp	r3, #9
 800294e:	bf94      	ite	ls
 8002950:	2301      	movls	r3, #1
 8002952:	2300      	movhi	r3, #0
 8002954:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002956:	2b00      	cmp	r3, #0
 8002958:	d079      	beq.n	8002a4e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002962:	2b00      	cmp	r3, #0
 8002964:	d107      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x4c2>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	0e9b      	lsrs	r3, r3, #26
 800296c:	3301      	adds	r3, #1
 800296e:	069b      	lsls	r3, r3, #26
 8002970:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002974:	e015      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x4ee>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002986:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800298e:	2320      	movs	r3, #32
 8002990:	e003      	b.n	800299a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	3301      	adds	r3, #1
 800299c:	069b      	lsls	r3, r3, #26
 800299e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x50e>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	0e9b      	lsrs	r3, r3, #26
 80029b4:	3301      	adds	r3, #1
 80029b6:	f003 031f 	and.w	r3, r3, #31
 80029ba:	2101      	movs	r1, #1
 80029bc:	fa01 f303 	lsl.w	r3, r1, r3
 80029c0:	e017      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x53e>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80029d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80029d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80029da:	2320      	movs	r3, #32
 80029dc:	e003      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80029de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029e0:	fab3 f383 	clz	r3, r3
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	3301      	adds	r3, #1
 80029e8:	f003 031f 	and.w	r3, r3, #31
 80029ec:	2101      	movs	r1, #1
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	ea42 0103 	orr.w	r1, r2, r3
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10a      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x564>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	0e9b      	lsrs	r3, r3, #26
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f003 021f 	and.w	r2, r3, #31
 8002a0e:	4613      	mov	r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4413      	add	r3, r2
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	e018      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x596>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002a30:	2320      	movs	r3, #32
 8002a32:	e003      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	f003 021f 	and.w	r2, r3, #31
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	e081      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d107      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x5b6>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	0e9b      	lsrs	r3, r3, #26
 8002a60:	3301      	adds	r3, #1
 8002a62:	069b      	lsls	r3, r3, #26
 8002a64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a68:	e015      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x5e2>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002a82:	2320      	movs	r3, #32
 8002a84:	e003      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	069b      	lsls	r3, r3, #26
 8002a92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d109      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x602>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	0e9b      	lsrs	r3, r3, #26
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	2101      	movs	r1, #1
 8002ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab4:	e017      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x632>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	61bb      	str	r3, [r7, #24]
  return result;
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002ace:	2320      	movs	r3, #32
 8002ad0:	e003      	b.n	8002ada <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	ea42 0103 	orr.w	r1, r2, r3
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10d      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x65e>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	0e9b      	lsrs	r3, r3, #26
 8002afc:	3301      	adds	r3, #1
 8002afe:	f003 021f 	and.w	r2, r3, #31
 8002b02:	4613      	mov	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4413      	add	r3, r2
 8002b08:	3b1e      	subs	r3, #30
 8002b0a:	051b      	lsls	r3, r3, #20
 8002b0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b10:	e01e      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x69c>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	60fb      	str	r3, [r7, #12]
  return result;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d104      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	e006      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x688>
 8002b2e:	bf00      	nop
 8002b30:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f003 021f 	and.w	r2, r3, #31
 8002b42:	4613      	mov	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4413      	add	r3, r2
 8002b48:	3b1e      	subs	r3, #30
 8002b4a:	051b      	lsls	r3, r3, #20
 8002b4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b50:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b56:	4619      	mov	r1, r3
 8002b58:	f7fe ff4d 	bl	80019f6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b44      	ldr	r3, [pc, #272]	; (8002c74 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d07a      	beq.n	8002c5e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b68:	4843      	ldr	r0, [pc, #268]	; (8002c78 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b6a:	f7fe fe8f 	bl	800188c <LL_ADC_GetCommonPathInternalCh>
 8002b6e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a41      	ldr	r2, [pc, #260]	; (8002c7c <HAL_ADC_ConfigChannel+0x7c8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d12c      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d126      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a3c      	ldr	r2, [pc, #240]	; (8002c80 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d004      	beq.n	8002b9c <HAL_ADC_ConfigChannel+0x6e8>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a3b      	ldr	r2, [pc, #236]	; (8002c84 <HAL_ADC_ConfigChannel+0x7d0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d15d      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ba0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4834      	ldr	r0, [pc, #208]	; (8002c78 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ba8:	f7fe fe5d 	bl	8001866 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bac:	4b36      	ldr	r3, [pc, #216]	; (8002c88 <HAL_ADC_ConfigChannel+0x7d4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	099b      	lsrs	r3, r3, #6
 8002bb2:	4a36      	ldr	r2, [pc, #216]	; (8002c8c <HAL_ADC_ConfigChannel+0x7d8>)
 8002bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb8:	099b      	lsrs	r3, r3, #6
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002bc6:	e002      	b.n	8002bce <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f9      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bd4:	e040      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a2d      	ldr	r2, [pc, #180]	; (8002c90 <HAL_ADC_ConfigChannel+0x7dc>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d118      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002be0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d112      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a23      	ldr	r2, [pc, #140]	; (8002c80 <HAL_ADC_ConfigChannel+0x7cc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d004      	beq.n	8002c00 <HAL_ADC_ConfigChannel+0x74c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a22      	ldr	r2, [pc, #136]	; (8002c84 <HAL_ADC_ConfigChannel+0x7d0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d12d      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c08:	4619      	mov	r1, r3
 8002c0a:	481b      	ldr	r0, [pc, #108]	; (8002c78 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c0c:	f7fe fe2b 	bl	8001866 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c10:	e024      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a1f      	ldr	r2, [pc, #124]	; (8002c94 <HAL_ADC_ConfigChannel+0x7e0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d120      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d11a      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <HAL_ADC_ConfigChannel+0x7cc>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d115      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	480e      	ldr	r0, [pc, #56]	; (8002c78 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c3e:	f7fe fe12 	bl	8001866 <LL_ADC_SetCommonPathInternalCh>
 8002c42:	e00c      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c48:	f043 0220 	orr.w	r2, r3, #32
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002c56:	e002      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c58:	bf00      	nop
 8002c5a:	e000      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c66:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	37d8      	adds	r7, #216	; 0xd8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	80080000 	.word	0x80080000
 8002c78:	50040300 	.word	0x50040300
 8002c7c:	c7520000 	.word	0xc7520000
 8002c80:	50040000 	.word	0x50040000
 8002c84:	50040200 	.word	0x50040200
 8002c88:	20000004 	.word	0x20000004
 8002c8c:	053e2d63 	.word	0x053e2d63
 8002c90:	cb840000 	.word	0xcb840000
 8002c94:	80000001 	.word	0x80000001

08002c98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe ff71 	bl	8001b90 <LL_ADC_IsEnabled>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d169      	bne.n	8002d88 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	4b36      	ldr	r3, [pc, #216]	; (8002d94 <ADC_Enable+0xfc>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00d      	beq.n	8002cde <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc6:	f043 0210 	orr.w	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd2:	f043 0201 	orr.w	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e055      	b.n	8002d8a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe ff40 	bl	8001b68 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ce8:	482b      	ldr	r0, [pc, #172]	; (8002d98 <ADC_Enable+0x100>)
 8002cea:	f7fe fdcf 	bl	800188c <LL_ADC_GetCommonPathInternalCh>
 8002cee:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002cf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cf8:	4b28      	ldr	r3, [pc, #160]	; (8002d9c <ADC_Enable+0x104>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	099b      	lsrs	r3, r3, #6
 8002cfe:	4a28      	ldr	r2, [pc, #160]	; (8002da0 <ADC_Enable+0x108>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	099b      	lsrs	r3, r3, #6
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	4613      	mov	r3, r2
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d12:	e002      	b.n	8002d1a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f9      	bne.n	8002d14 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d20:	f7fe fd5e 	bl	80017e0 <HAL_GetTick>
 8002d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d26:	e028      	b.n	8002d7a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe ff2f 	bl	8001b90 <LL_ADC_IsEnabled>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d104      	bne.n	8002d42 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe ff13 	bl	8001b68 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d42:	f7fe fd4d 	bl	80017e0 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d914      	bls.n	8002d7a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d00d      	beq.n	8002d7a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	f043 0210 	orr.w	r2, r3, #16
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6e:	f043 0201 	orr.w	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e007      	b.n	8002d8a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d1cf      	bne.n	8002d28 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	8000003f 	.word	0x8000003f
 8002d98:	50040300 	.word	0x50040300
 8002d9c:	20000004 	.word	0x20000004
 8002da0:	053e2d63 	.word	0x053e2d63

08002da4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d14b      	bne.n	8002e56 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d021      	beq.n	8002e1c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe fdb8 	bl	8001952 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d032      	beq.n	8002e4e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d12b      	bne.n	8002e4e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d11f      	bne.n	8002e4e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e12:	f043 0201 	orr.w	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	655a      	str	r2, [r3, #84]	; 0x54
 8002e1a:	e018      	b.n	8002e4e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d111      	bne.n	8002e4e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d105      	bne.n	8002e4e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e46:	f043 0201 	orr.w	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f7fe f90e 	bl	8001070 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e54:	e00e      	b.n	8002e74 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f7ff fb1c 	bl	80024a0 <HAL_ADC_ErrorCallback>
}
 8002e68:	e004      	b.n	8002e74 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4798      	blx	r3
}
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7ff faf4 	bl	8002478 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e90:	bf00      	nop
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb6:	f043 0204 	orr.w	r2, r3, #4
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7ff faee 	bl	80024a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <__NVIC_SetPriorityGrouping+0x44>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f62:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <__NVIC_SetPriorityGrouping+0x44>)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	60d3      	str	r3, [r2, #12]
}
 8002f68:	bf00      	nop
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <__NVIC_GetPriorityGrouping+0x18>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	f003 0307 	and.w	r3, r3, #7
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	db0b      	blt.n	8002fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	f003 021f 	and.w	r2, r3, #31
 8002fac:	4907      	ldr	r1, [pc, #28]	; (8002fcc <__NVIC_EnableIRQ+0x38>)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	e000e100 	.word	0xe000e100

08002fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	6039      	str	r1, [r7, #0]
 8002fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	db0a      	blt.n	8002ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	490c      	ldr	r1, [pc, #48]	; (800301c <__NVIC_SetPriority+0x4c>)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	0112      	lsls	r2, r2, #4
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff8:	e00a      	b.n	8003010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	4908      	ldr	r1, [pc, #32]	; (8003020 <__NVIC_SetPriority+0x50>)
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	3b04      	subs	r3, #4
 8003008:	0112      	lsls	r2, r2, #4
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	440b      	add	r3, r1
 800300e:	761a      	strb	r2, [r3, #24]
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000e100 	.word	0xe000e100
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003024:	b480      	push	{r7}
 8003026:	b089      	sub	sp, #36	; 0x24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f1c3 0307 	rsb	r3, r3, #7
 800303e:	2b04      	cmp	r3, #4
 8003040:	bf28      	it	cs
 8003042:	2304      	movcs	r3, #4
 8003044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3304      	adds	r3, #4
 800304a:	2b06      	cmp	r3, #6
 800304c:	d902      	bls.n	8003054 <NVIC_EncodePriority+0x30>
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3b03      	subs	r3, #3
 8003052:	e000      	b.n	8003056 <NVIC_EncodePriority+0x32>
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003058:	f04f 32ff 	mov.w	r2, #4294967295
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43da      	mvns	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	401a      	ands	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800306c:	f04f 31ff 	mov.w	r1, #4294967295
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	fa01 f303 	lsl.w	r3, r1, r3
 8003076:	43d9      	mvns	r1, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800307c:	4313      	orrs	r3, r2
         );
}
 800307e:	4618      	mov	r0, r3
 8003080:	3724      	adds	r7, #36	; 0x24
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3b01      	subs	r3, #1
 8003098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800309c:	d301      	bcc.n	80030a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800309e:	2301      	movs	r3, #1
 80030a0:	e00f      	b.n	80030c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030a2:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <SysTick_Config+0x40>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030aa:	210f      	movs	r1, #15
 80030ac:	f04f 30ff 	mov.w	r0, #4294967295
 80030b0:	f7ff ff8e 	bl	8002fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <SysTick_Config+0x40>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ba:	4b04      	ldr	r3, [pc, #16]	; (80030cc <SysTick_Config+0x40>)
 80030bc:	2207      	movs	r2, #7
 80030be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	e000e010 	.word	0xe000e010

080030d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff ff29 	bl	8002f30 <__NVIC_SetPriorityGrouping>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b086      	sub	sp, #24
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	4603      	mov	r3, r0
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030f8:	f7ff ff3e 	bl	8002f78 <__NVIC_GetPriorityGrouping>
 80030fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	6978      	ldr	r0, [r7, #20]
 8003104:	f7ff ff8e 	bl	8003024 <NVIC_EncodePriority>
 8003108:	4602      	mov	r2, r0
 800310a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800310e:	4611      	mov	r1, r2
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff5d 	bl	8002fd0 <__NVIC_SetPriority>
}
 8003116:	bf00      	nop
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	4603      	mov	r3, r0
 8003126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff ff31 	bl	8002f94 <__NVIC_EnableIRQ>
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff ffa2 	bl	800308c <SysTick_Config>
 8003148:	4603      	mov	r3, r0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e014      	b.n	800318e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	791b      	ldrb	r3, [r3, #4]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d105      	bne.n	800317a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7fe f855 	bl	8001224 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	795b      	ldrb	r3, [r3, #5]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_DAC_Start_DMA+0x1e>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e0ab      	b.n	800330e <HAL_DAC_Start_DMA+0x176>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2202      	movs	r2, #2
 80031c0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d12f      	bne.n	8003228 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4a52      	ldr	r2, [pc, #328]	; (8003318 <HAL_DAC_Start_DMA+0x180>)
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4a51      	ldr	r2, [pc, #324]	; (800331c <HAL_DAC_Start_DMA+0x184>)
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	4a50      	ldr	r2, [pc, #320]	; (8003320 <HAL_DAC_Start_DMA+0x188>)
 80031de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031ee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d013      	beq.n	800321e <HAL_DAC_Start_DMA+0x86>
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d845      	bhi.n	8003288 <HAL_DAC_Start_DMA+0xf0>
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_DAC_Start_DMA+0x72>
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	2b04      	cmp	r3, #4
 8003206:	d005      	beq.n	8003214 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003208:	e03e      	b.n	8003288 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3308      	adds	r3, #8
 8003210:	613b      	str	r3, [r7, #16]
        break;
 8003212:	e03c      	b.n	800328e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	613b      	str	r3, [r7, #16]
        break;
 800321c:	e037      	b.n	800328e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3310      	adds	r3, #16
 8003224:	613b      	str	r3, [r7, #16]
        break;
 8003226:	e032      	b.n	800328e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4a3d      	ldr	r2, [pc, #244]	; (8003324 <HAL_DAC_Start_DMA+0x18c>)
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4a3c      	ldr	r2, [pc, #240]	; (8003328 <HAL_DAC_Start_DMA+0x190>)
 8003236:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4a3b      	ldr	r2, [pc, #236]	; (800332c <HAL_DAC_Start_DMA+0x194>)
 800323e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800324e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	2b08      	cmp	r3, #8
 8003254:	d013      	beq.n	800327e <HAL_DAC_Start_DMA+0xe6>
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d817      	bhi.n	800328c <HAL_DAC_Start_DMA+0xf4>
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_DAC_Start_DMA+0xd2>
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	2b04      	cmp	r3, #4
 8003266:	d005      	beq.n	8003274 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003268:	e010      	b.n	800328c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3314      	adds	r3, #20
 8003270:	613b      	str	r3, [r7, #16]
        break;
 8003272:	e00c      	b.n	800328e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3318      	adds	r3, #24
 800327a:	613b      	str	r3, [r7, #16]
        break;
 800327c:	e007      	b.n	800328e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	331c      	adds	r3, #28
 8003284:	613b      	str	r3, [r7, #16]
        break;
 8003286:	e002      	b.n	800328e <HAL_DAC_Start_DMA+0xf6>
        break;
 8003288:	bf00      	nop
 800328a:	e000      	b.n	800328e <HAL_DAC_Start_DMA+0xf6>
        break;
 800328c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d111      	bne.n	80032b8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6898      	ldr	r0, [r3, #8]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	f000 fb6f 	bl	8003990 <HAL_DMA_Start_IT>
 80032b2:	4603      	mov	r3, r0
 80032b4:	75fb      	strb	r3, [r7, #23]
 80032b6:	e010      	b.n	80032da <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80032c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	68d8      	ldr	r0, [r3, #12]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	f000 fb5d 	bl	8003990 <HAL_DMA_Start_IT>
 80032d6:	4603      	mov	r3, r0
 80032d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10c      	bne.n	8003300 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6819      	ldr	r1, [r3, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2201      	movs	r2, #1
 80032f4:	409a      	lsls	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	e005      	b.n	800330c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f043 0204 	orr.w	r2, r3, #4
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800330c:	7dfb      	ldrb	r3, [r7, #23]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	080036f9 	.word	0x080036f9
 800331c:	0800371b 	.word	0x0800371b
 8003320:	08003737 	.word	0x08003737
 8003324:	080037b5 	.word	0x080037b5
 8003328:	080037d7 	.word	0x080037d7
 800332c:	080037f3 	.word	0x080037f3

08003330 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6819      	ldr	r1, [r3, #0]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43da      	mvns	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	400a      	ands	r2, r1
 8003356:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6819      	ldr	r1, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2201      	movs	r2, #1
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43da      	mvns	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	400a      	ands	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10d      	bne.n	8003396 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fb66 	bl	8003a50 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	e00c      	b.n	80033b0 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fb58 	bl	8003a50 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80033ae:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d0:	d120      	bne.n	8003414 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e0:	d118      	bne.n	8003414 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2204      	movs	r2, #4
 80033e6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	f043 0201 	orr.w	r2, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800340c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f841 	bl	8003496 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800341e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003422:	d120      	bne.n	8003466 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800342e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003432:	d118      	bne.n	8003466 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2204      	movs	r2, #4
 8003438:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f043 0202 	orr.w	r2, r3, #2
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800344e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800345e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f99d 	bl	80037a0 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b088      	sub	sp, #32
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	795b      	ldrb	r3, [r3, #5]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_DAC_ConfigChannel+0x1c>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e114      	b.n	80036f0 <HAL_DAC_ConfigChannel+0x246>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2202      	movs	r2, #2
 80034d0:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	f040 8081 	bne.w	80035de <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80034dc:	f7fe f980 	bl	80017e0 <HAL_GetTick>
 80034e0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d140      	bne.n	800356a <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034e8:	e018      	b.n	800351c <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80034ea:	f7fe f979 	bl	80017e0 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d911      	bls.n	800351c <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f043 0208 	orr.w	r2, r3, #8
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2203      	movs	r2, #3
 8003516:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e0e9      	b.n	80036f0 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1df      	bne.n	80034ea <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800352a:	2001      	movs	r0, #1
 800352c:	f7fe f964 	bl	80017f8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	6992      	ldr	r2, [r2, #24]
 8003538:	641a      	str	r2, [r3, #64]	; 0x40
 800353a:	e023      	b.n	8003584 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800353c:	f7fe f950 	bl	80017e0 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b01      	cmp	r3, #1
 8003548:	d90f      	bls.n	800356a <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003550:	2b00      	cmp	r3, #0
 8003552:	da0a      	bge.n	800356a <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f043 0208 	orr.w	r2, r3, #8
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2203      	movs	r2, #3
 8003564:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e0c2      	b.n	80036f0 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003570:	2b00      	cmp	r3, #0
 8003572:	dbe3      	blt.n	800353c <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003574:	2001      	movs	r0, #1
 8003576:	f7fe f93f 	bl	80017f8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	6992      	ldr	r2, [r2, #24]
 8003582:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003594:	fa01 f303 	lsl.w	r3, r1, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	ea02 0103 	and.w	r1, r2, r3
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	69da      	ldr	r2, [r3, #28]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	409a      	lsls	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f003 0310 	and.w	r3, r3, #16
 80035be:	21ff      	movs	r1, #255	; 0xff
 80035c0:	fa01 f303 	lsl.w	r3, r1, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	ea02 0103 	and.w	r1, r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	6a1a      	ldr	r2, [r3, #32]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	409a      	lsls	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d11d      	bne.n	8003622 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	221f      	movs	r2, #31
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4313      	orrs	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003628:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	2207      	movs	r2, #7
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4013      	ands	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	431a      	orrs	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6819      	ldr	r1, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43da      	mvns	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	400a      	ands	r2, r1
 8003686:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f003 0310 	and.w	r3, r3, #16
 8003696:	f640 72fc 	movw	r2, #4092	; 0xffc
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6819      	ldr	r1, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	22c0      	movs	r2, #192	; 0xc0
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43da      	mvns	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	400a      	ands	r2, r1
 80036e0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f7fd fc1e 	bl	8000f48 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	711a      	strb	r2, [r3, #4]
}
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003726:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7ff fea0 	bl	800346e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f043 0204 	orr.w	r2, r3, #4
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f7ff fe96 	bl	8003482 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2201      	movs	r2, #1
 800375a:	711a      	strb	r2, [r3, #4]
}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f7ff ffce 	bl	8003764 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	711a      	strb	r2, [r3, #4]
}
 80037ce:	bf00      	nop
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f7ff ffc7 	bl	8003778 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f043 0204 	orr.w	r2, r3, #4
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f7ff ffbd 	bl	800378c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	711a      	strb	r2, [r3, #4]
}
 8003818:	bf00      	nop
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e098      	b.n	8003964 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	4b4d      	ldr	r3, [pc, #308]	; (8003970 <HAL_DMA_Init+0x150>)
 800383a:	429a      	cmp	r2, r3
 800383c:	d80f      	bhi.n	800385e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	4b4b      	ldr	r3, [pc, #300]	; (8003974 <HAL_DMA_Init+0x154>)
 8003846:	4413      	add	r3, r2
 8003848:	4a4b      	ldr	r2, [pc, #300]	; (8003978 <HAL_DMA_Init+0x158>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	091b      	lsrs	r3, r3, #4
 8003850:	009a      	lsls	r2, r3, #2
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a48      	ldr	r2, [pc, #288]	; (800397c <HAL_DMA_Init+0x15c>)
 800385a:	641a      	str	r2, [r3, #64]	; 0x40
 800385c:	e00e      	b.n	800387c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	4b46      	ldr	r3, [pc, #280]	; (8003980 <HAL_DMA_Init+0x160>)
 8003866:	4413      	add	r3, r2
 8003868:	4a43      	ldr	r2, [pc, #268]	; (8003978 <HAL_DMA_Init+0x158>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	091b      	lsrs	r3, r3, #4
 8003870:	009a      	lsls	r2, r3, #2
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a42      	ldr	r2, [pc, #264]	; (8003984 <HAL_DMA_Init+0x164>)
 800387a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003896:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80038a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038d6:	d039      	beq.n	800394c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	4a27      	ldr	r2, [pc, #156]	; (800397c <HAL_DMA_Init+0x15c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d11a      	bne.n	8003918 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038e2:	4b29      	ldr	r3, [pc, #164]	; (8003988 <HAL_DMA_Init+0x168>)
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	f003 031c 	and.w	r3, r3, #28
 80038ee:	210f      	movs	r1, #15
 80038f0:	fa01 f303 	lsl.w	r3, r1, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	4924      	ldr	r1, [pc, #144]	; (8003988 <HAL_DMA_Init+0x168>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80038fc:	4b22      	ldr	r3, [pc, #136]	; (8003988 <HAL_DMA_Init+0x168>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003908:	f003 031c 	and.w	r3, r3, #28
 800390c:	fa01 f303 	lsl.w	r3, r1, r3
 8003910:	491d      	ldr	r1, [pc, #116]	; (8003988 <HAL_DMA_Init+0x168>)
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]
 8003916:	e019      	b.n	800394c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003918:	4b1c      	ldr	r3, [pc, #112]	; (800398c <HAL_DMA_Init+0x16c>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003920:	f003 031c 	and.w	r3, r3, #28
 8003924:	210f      	movs	r1, #15
 8003926:	fa01 f303 	lsl.w	r3, r1, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	4917      	ldr	r1, [pc, #92]	; (800398c <HAL_DMA_Init+0x16c>)
 800392e:	4013      	ands	r3, r2
 8003930:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003932:	4b16      	ldr	r3, [pc, #88]	; (800398c <HAL_DMA_Init+0x16c>)
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6859      	ldr	r1, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f003 031c 	and.w	r3, r3, #28
 8003942:	fa01 f303 	lsl.w	r3, r1, r3
 8003946:	4911      	ldr	r1, [pc, #68]	; (800398c <HAL_DMA_Init+0x16c>)
 8003948:	4313      	orrs	r3, r2
 800394a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	40020407 	.word	0x40020407
 8003974:	bffdfff8 	.word	0xbffdfff8
 8003978:	cccccccd 	.word	0xcccccccd
 800397c:	40020000 	.word	0x40020000
 8003980:	bffdfbf8 	.word	0xbffdfbf8
 8003984:	40020400 	.word	0x40020400
 8003988:	400200a8 	.word	0x400200a8
 800398c:	400204a8 	.word	0x400204a8

08003990 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_DMA_Start_IT+0x20>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e04b      	b.n	8003a48 <HAL_DMA_Start_IT+0xb8>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d13a      	bne.n	8003a3a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0201 	bic.w	r2, r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	68b9      	ldr	r1, [r7, #8]
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f91e 	bl	8003c2a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d008      	beq.n	8003a08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 020e 	orr.w	r2, r2, #14
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	e00f      	b.n	8003a28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0204 	bic.w	r2, r2, #4
 8003a16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 020a 	orr.w	r2, r2, #10
 8003a26:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	e005      	b.n	8003a46 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a42:	2302      	movs	r3, #2
 8003a44:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d008      	beq.n	8003a7a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e022      	b.n	8003ac0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 020e 	bic.w	r2, r2, #14
 8003a88:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0201 	bic.w	r2, r2, #1
 8003a98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	f003 021c 	and.w	r2, r3, #28
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8003aac:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	f003 031c 	and.w	r3, r3, #28
 8003aec:	2204      	movs	r2, #4
 8003aee:	409a      	lsls	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d026      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x7a>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d021      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d107      	bne.n	8003b20 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0204 	bic.w	r2, r2, #4
 8003b1e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	f003 021c 	and.w	r2, r3, #28
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	2104      	movs	r1, #4
 8003b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b32:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d071      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b44:	e06c      	b.n	8003c20 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	f003 031c 	and.w	r3, r3, #28
 8003b4e:	2202      	movs	r2, #2
 8003b50:	409a      	lsls	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4013      	ands	r3, r2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d02e      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0xec>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d029      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10b      	bne.n	8003b8a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 020a 	bic.w	r2, r2, #10
 8003b80:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f003 021c 	and.w	r2, r3, #28
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	2102      	movs	r1, #2
 8003b98:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d038      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003bb6:	e033      	b.n	8003c20 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbc:	f003 031c 	and.w	r3, r3, #28
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d02a      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x156>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d025      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 020e 	bic.w	r2, r2, #14
 8003be4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	f003 021c 	and.w	r2, r3, #28
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d004      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c20:	bf00      	nop
 8003c22:	bf00      	nop
}
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
 8003c36:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3c:	f003 021c 	and.w	r2, r3, #28
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	2101      	movs	r1, #1
 8003c46:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d108      	bne.n	8003c6e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c6c:	e007      	b.n	8003c7e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	60da      	str	r2, [r3, #12]
}
 8003c7e:	bf00      	nop
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c9a:	e17f      	b.n	8003f9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca8:	4013      	ands	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 8171 	beq.w	8003f96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d005      	beq.n	8003ccc <HAL_GPIO_Init+0x40>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d130      	bne.n	8003d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d02:	2201      	movs	r2, #1
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	f003 0201 	and.w	r2, r3, #1
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d118      	bne.n	8003d6c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003d40:	2201      	movs	r2, #1
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	08db      	lsrs	r3, r3, #3
 8003d56:	f003 0201 	and.w	r2, r3, #1
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d017      	beq.n	8003da8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	2203      	movs	r2, #3
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d123      	bne.n	8003dfc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	08da      	lsrs	r2, r3, #3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3208      	adds	r2, #8
 8003dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	220f      	movs	r2, #15
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	08da      	lsrs	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3208      	adds	r2, #8
 8003df6:	6939      	ldr	r1, [r7, #16]
 8003df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	2203      	movs	r2, #3
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4013      	ands	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 0203 	and.w	r2, r3, #3
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 80ac 	beq.w	8003f96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e3e:	4b5f      	ldr	r3, [pc, #380]	; (8003fbc <HAL_GPIO_Init+0x330>)
 8003e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e42:	4a5e      	ldr	r2, [pc, #376]	; (8003fbc <HAL_GPIO_Init+0x330>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	6613      	str	r3, [r2, #96]	; 0x60
 8003e4a:	4b5c      	ldr	r3, [pc, #368]	; (8003fbc <HAL_GPIO_Init+0x330>)
 8003e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e56:	4a5a      	ldr	r2, [pc, #360]	; (8003fc0 <HAL_GPIO_Init+0x334>)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	089b      	lsrs	r3, r3, #2
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	220f      	movs	r2, #15
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4013      	ands	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e80:	d025      	beq.n	8003ece <HAL_GPIO_Init+0x242>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a4f      	ldr	r2, [pc, #316]	; (8003fc4 <HAL_GPIO_Init+0x338>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01f      	beq.n	8003eca <HAL_GPIO_Init+0x23e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a4e      	ldr	r2, [pc, #312]	; (8003fc8 <HAL_GPIO_Init+0x33c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d019      	beq.n	8003ec6 <HAL_GPIO_Init+0x23a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a4d      	ldr	r2, [pc, #308]	; (8003fcc <HAL_GPIO_Init+0x340>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <HAL_GPIO_Init+0x236>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a4c      	ldr	r2, [pc, #304]	; (8003fd0 <HAL_GPIO_Init+0x344>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00d      	beq.n	8003ebe <HAL_GPIO_Init+0x232>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a4b      	ldr	r2, [pc, #300]	; (8003fd4 <HAL_GPIO_Init+0x348>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d007      	beq.n	8003eba <HAL_GPIO_Init+0x22e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a4a      	ldr	r2, [pc, #296]	; (8003fd8 <HAL_GPIO_Init+0x34c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d101      	bne.n	8003eb6 <HAL_GPIO_Init+0x22a>
 8003eb2:	2306      	movs	r3, #6
 8003eb4:	e00c      	b.n	8003ed0 <HAL_GPIO_Init+0x244>
 8003eb6:	2307      	movs	r3, #7
 8003eb8:	e00a      	b.n	8003ed0 <HAL_GPIO_Init+0x244>
 8003eba:	2305      	movs	r3, #5
 8003ebc:	e008      	b.n	8003ed0 <HAL_GPIO_Init+0x244>
 8003ebe:	2304      	movs	r3, #4
 8003ec0:	e006      	b.n	8003ed0 <HAL_GPIO_Init+0x244>
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e004      	b.n	8003ed0 <HAL_GPIO_Init+0x244>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e002      	b.n	8003ed0 <HAL_GPIO_Init+0x244>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <HAL_GPIO_Init+0x244>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	f002 0203 	and.w	r2, r2, #3
 8003ed6:	0092      	lsls	r2, r2, #2
 8003ed8:	4093      	lsls	r3, r2
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ee0:	4937      	ldr	r1, [pc, #220]	; (8003fc0 <HAL_GPIO_Init+0x334>)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	089b      	lsrs	r3, r3, #2
 8003ee6:	3302      	adds	r3, #2
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003eee:	4b3b      	ldr	r3, [pc, #236]	; (8003fdc <HAL_GPIO_Init+0x350>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f12:	4a32      	ldr	r2, [pc, #200]	; (8003fdc <HAL_GPIO_Init+0x350>)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f18:	4b30      	ldr	r3, [pc, #192]	; (8003fdc <HAL_GPIO_Init+0x350>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	43db      	mvns	r3, r3
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4013      	ands	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f3c:	4a27      	ldr	r2, [pc, #156]	; (8003fdc <HAL_GPIO_Init+0x350>)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f42:	4b26      	ldr	r3, [pc, #152]	; (8003fdc <HAL_GPIO_Init+0x350>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f66:	4a1d      	ldr	r2, [pc, #116]	; (8003fdc <HAL_GPIO_Init+0x350>)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f6c:	4b1b      	ldr	r3, [pc, #108]	; (8003fdc <HAL_GPIO_Init+0x350>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	43db      	mvns	r3, r3
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f90:	4a12      	ldr	r2, [pc, #72]	; (8003fdc <HAL_GPIO_Init+0x350>)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f47f ae78 	bne.w	8003c9c <HAL_GPIO_Init+0x10>
  }
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40010000 	.word	0x40010000
 8003fc4:	48000400 	.word	0x48000400
 8003fc8:	48000800 	.word	0x48000800
 8003fcc:	48000c00 	.word	0x48000c00
 8003fd0:	48001000 	.word	0x48001000
 8003fd4:	48001400 	.word	0x48001400
 8003fd8:	48001800 	.word	0x48001800
 8003fdc:	40010400 	.word	0x40010400

08003fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	807b      	strh	r3, [r7, #2]
 8003fec:	4613      	mov	r3, r2
 8003fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ff0:	787b      	ldrb	r3, [r7, #1]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ff6:	887a      	ldrh	r2, [r7, #2]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ffc:	e002      	b.n	8004004 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ffe:	887a      	ldrh	r2, [r7, #2]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004022:	887a      	ldrh	r2, [r7, #2]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4013      	ands	r3, r2
 8004028:	041a      	lsls	r2, r3, #16
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	43d9      	mvns	r1, r3
 800402e:	887b      	ldrh	r3, [r7, #2]
 8004030:	400b      	ands	r3, r1
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	619a      	str	r2, [r3, #24]
}
 8004038:	bf00      	nop
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800404e:	4b08      	ldr	r3, [pc, #32]	; (8004070 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004050:	695a      	ldr	r2, [r3, #20]
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	4013      	ands	r3, r2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d006      	beq.n	8004068 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800405a:	4a05      	ldr	r2, [pc, #20]	; (8004070 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800405c:	88fb      	ldrh	r3, [r7, #6]
 800405e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004060:	88fb      	ldrh	r3, [r7, #6]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fc fff0 	bl	8001048 <HAL_GPIO_EXTI_Callback>
  }
}
 8004068:	bf00      	nop
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40010400 	.word	0x40010400

08004074 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004078:	4b04      	ldr	r3, [pc, #16]	; (800408c <HAL_PWREx_GetVoltageRange+0x18>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004080:	4618      	mov	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40007000 	.word	0x40007000

08004090 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800409e:	d130      	bne.n	8004102 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80040a0:	4b23      	ldr	r3, [pc, #140]	; (8004130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ac:	d038      	beq.n	8004120 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040ae:	4b20      	ldr	r3, [pc, #128]	; (8004130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040b6:	4a1e      	ldr	r2, [pc, #120]	; (8004130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040be:	4b1d      	ldr	r3, [pc, #116]	; (8004134 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2232      	movs	r2, #50	; 0x32
 80040c4:	fb02 f303 	mul.w	r3, r2, r3
 80040c8:	4a1b      	ldr	r2, [pc, #108]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	0c9b      	lsrs	r3, r3, #18
 80040d0:	3301      	adds	r3, #1
 80040d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040d4:	e002      	b.n	80040dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3b01      	subs	r3, #1
 80040da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040dc:	4b14      	ldr	r3, [pc, #80]	; (8004130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e8:	d102      	bne.n	80040f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1f2      	bne.n	80040d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040f0:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fc:	d110      	bne.n	8004120 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e00f      	b.n	8004122 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004102:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800410a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410e:	d007      	beq.n	8004120 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004118:	4a05      	ldr	r2, [pc, #20]	; (8004130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800411a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800411e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40007000 	.word	0x40007000
 8004134:	20000004 	.word	0x20000004
 8004138:	431bde83 	.word	0x431bde83

0800413c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e3ca      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800414e:	4b97      	ldr	r3, [pc, #604]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004158:	4b94      	ldr	r3, [pc, #592]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 80e4 	beq.w	8004338 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <HAL_RCC_OscConfig+0x4a>
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	2b0c      	cmp	r3, #12
 800417a:	f040 808b 	bne.w	8004294 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b01      	cmp	r3, #1
 8004182:	f040 8087 	bne.w	8004294 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004186:	4b89      	ldr	r3, [pc, #548]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <HAL_RCC_OscConfig+0x62>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e3a2      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1a      	ldr	r2, [r3, #32]
 80041a2:	4b82      	ldr	r3, [pc, #520]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d004      	beq.n	80041b8 <HAL_RCC_OscConfig+0x7c>
 80041ae:	4b7f      	ldr	r3, [pc, #508]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041b6:	e005      	b.n	80041c4 <HAL_RCC_OscConfig+0x88>
 80041b8:	4b7c      	ldr	r3, [pc, #496]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 80041ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041be:	091b      	lsrs	r3, r3, #4
 80041c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d223      	bcs.n	8004210 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fd55 	bl	8004c7c <RCC_SetFlashLatencyFromMSIRange>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e383      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041dc:	4b73      	ldr	r3, [pc, #460]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a72      	ldr	r2, [pc, #456]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 80041e2:	f043 0308 	orr.w	r3, r3, #8
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	4b70      	ldr	r3, [pc, #448]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	496d      	ldr	r1, [pc, #436]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041fa:	4b6c      	ldr	r3, [pc, #432]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	4968      	ldr	r1, [pc, #416]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 800420a:	4313      	orrs	r3, r2
 800420c:	604b      	str	r3, [r1, #4]
 800420e:	e025      	b.n	800425c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004210:	4b66      	ldr	r3, [pc, #408]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a65      	ldr	r2, [pc, #404]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 8004216:	f043 0308 	orr.w	r3, r3, #8
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	4b63      	ldr	r3, [pc, #396]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	4960      	ldr	r1, [pc, #384]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800422e:	4b5f      	ldr	r3, [pc, #380]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	495b      	ldr	r1, [pc, #364]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 800423e:	4313      	orrs	r3, r2
 8004240:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d109      	bne.n	800425c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fd15 	bl	8004c7c <RCC_SetFlashLatencyFromMSIRange>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e343      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800425c:	f000 fc4a 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 8004260:	4602      	mov	r2, r0
 8004262:	4b52      	ldr	r3, [pc, #328]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	091b      	lsrs	r3, r3, #4
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	4950      	ldr	r1, [pc, #320]	; (80043b0 <HAL_RCC_OscConfig+0x274>)
 800426e:	5ccb      	ldrb	r3, [r1, r3]
 8004270:	f003 031f 	and.w	r3, r3, #31
 8004274:	fa22 f303 	lsr.w	r3, r2, r3
 8004278:	4a4e      	ldr	r2, [pc, #312]	; (80043b4 <HAL_RCC_OscConfig+0x278>)
 800427a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800427c:	4b4e      	ldr	r3, [pc, #312]	; (80043b8 <HAL_RCC_OscConfig+0x27c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f7fd fa5d 	bl	8001740 <HAL_InitTick>
 8004286:	4603      	mov	r3, r0
 8004288:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d052      	beq.n	8004336 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	e327      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d032      	beq.n	8004302 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800429c:	4b43      	ldr	r3, [pc, #268]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a42      	ldr	r2, [pc, #264]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042a8:	f7fd fa9a 	bl	80017e0 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042b0:	f7fd fa96 	bl	80017e0 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e310      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042c2:	4b3a      	ldr	r3, [pc, #232]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0f0      	beq.n	80042b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042ce:	4b37      	ldr	r3, [pc, #220]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a36      	ldr	r2, [pc, #216]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 80042d4:	f043 0308 	orr.w	r3, r3, #8
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	4b34      	ldr	r3, [pc, #208]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	4931      	ldr	r1, [pc, #196]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042ec:	4b2f      	ldr	r3, [pc, #188]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	492c      	ldr	r1, [pc, #176]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	604b      	str	r3, [r1, #4]
 8004300:	e01a      	b.n	8004338 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004302:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a29      	ldr	r2, [pc, #164]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 8004308:	f023 0301 	bic.w	r3, r3, #1
 800430c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800430e:	f7fd fa67 	bl	80017e0 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004316:	f7fd fa63 	bl	80017e0 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e2dd      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004328:	4b20      	ldr	r3, [pc, #128]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f0      	bne.n	8004316 <HAL_RCC_OscConfig+0x1da>
 8004334:	e000      	b.n	8004338 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004336:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d074      	beq.n	800442e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b08      	cmp	r3, #8
 8004348:	d005      	beq.n	8004356 <HAL_RCC_OscConfig+0x21a>
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b0c      	cmp	r3, #12
 800434e:	d10e      	bne.n	800436e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	2b03      	cmp	r3, #3
 8004354:	d10b      	bne.n	800436e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004356:	4b15      	ldr	r3, [pc, #84]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d064      	beq.n	800442c <HAL_RCC_OscConfig+0x2f0>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d160      	bne.n	800442c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e2ba      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004376:	d106      	bne.n	8004386 <HAL_RCC_OscConfig+0x24a>
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a0b      	ldr	r2, [pc, #44]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 800437e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	e026      	b.n	80043d4 <HAL_RCC_OscConfig+0x298>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800438e:	d115      	bne.n	80043bc <HAL_RCC_OscConfig+0x280>
 8004390:	4b06      	ldr	r3, [pc, #24]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a05      	ldr	r2, [pc, #20]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 8004396:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a02      	ldr	r2, [pc, #8]	; (80043ac <HAL_RCC_OscConfig+0x270>)
 80043a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	e014      	b.n	80043d4 <HAL_RCC_OscConfig+0x298>
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
 80043b0:	080082a0 	.word	0x080082a0
 80043b4:	20000004 	.word	0x20000004
 80043b8:	20000008 	.word	0x20000008
 80043bc:	4ba0      	ldr	r3, [pc, #640]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a9f      	ldr	r2, [pc, #636]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 80043c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	4b9d      	ldr	r3, [pc, #628]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a9c      	ldr	r2, [pc, #624]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 80043ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d013      	beq.n	8004404 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fd fa00 	bl	80017e0 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e4:	f7fd f9fc 	bl	80017e0 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b64      	cmp	r3, #100	; 0x64
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e276      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043f6:	4b92      	ldr	r3, [pc, #584]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0x2a8>
 8004402:	e014      	b.n	800442e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fd f9ec 	bl	80017e0 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800440c:	f7fd f9e8 	bl	80017e0 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	; 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e262      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800441e:	4b88      	ldr	r3, [pc, #544]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0x2d0>
 800442a:	e000      	b.n	800442e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800442c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d060      	beq.n	80044fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	2b04      	cmp	r3, #4
 800443e:	d005      	beq.n	800444c <HAL_RCC_OscConfig+0x310>
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	2b0c      	cmp	r3, #12
 8004444:	d119      	bne.n	800447a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d116      	bne.n	800447a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800444c:	4b7c      	ldr	r3, [pc, #496]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <HAL_RCC_OscConfig+0x328>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e23f      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004464:	4b76      	ldr	r3, [pc, #472]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	061b      	lsls	r3, r3, #24
 8004472:	4973      	ldr	r1, [pc, #460]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 8004474:	4313      	orrs	r3, r2
 8004476:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004478:	e040      	b.n	80044fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d023      	beq.n	80044ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004482:	4b6f      	ldr	r3, [pc, #444]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a6e      	ldr	r2, [pc, #440]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 8004488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448e:	f7fd f9a7 	bl	80017e0 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004496:	f7fd f9a3 	bl	80017e0 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e21d      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044a8:	4b65      	ldr	r3, [pc, #404]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b4:	4b62      	ldr	r3, [pc, #392]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	061b      	lsls	r3, r3, #24
 80044c2:	495f      	ldr	r1, [pc, #380]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	604b      	str	r3, [r1, #4]
 80044c8:	e018      	b.n	80044fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ca:	4b5d      	ldr	r3, [pc, #372]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a5c      	ldr	r2, [pc, #368]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 80044d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d6:	f7fd f983 	bl	80017e0 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044de:	f7fd f97f 	bl	80017e0 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e1f9      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044f0:	4b53      	ldr	r3, [pc, #332]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f0      	bne.n	80044de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b00      	cmp	r3, #0
 8004506:	d03c      	beq.n	8004582 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01c      	beq.n	800454a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004510:	4b4b      	ldr	r3, [pc, #300]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 8004512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004516:	4a4a      	ldr	r2, [pc, #296]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004520:	f7fd f95e 	bl	80017e0 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004528:	f7fd f95a 	bl	80017e0 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e1d4      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800453a:	4b41      	ldr	r3, [pc, #260]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 800453c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0ef      	beq.n	8004528 <HAL_RCC_OscConfig+0x3ec>
 8004548:	e01b      	b.n	8004582 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800454a:	4b3d      	ldr	r3, [pc, #244]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 800454c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004550:	4a3b      	ldr	r2, [pc, #236]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 8004552:	f023 0301 	bic.w	r3, r3, #1
 8004556:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455a:	f7fd f941 	bl	80017e0 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004562:	f7fd f93d 	bl	80017e0 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e1b7      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004574:	4b32      	ldr	r3, [pc, #200]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 8004576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1ef      	bne.n	8004562 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 80a6 	beq.w	80046dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004590:	2300      	movs	r3, #0
 8004592:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004594:	4b2a      	ldr	r3, [pc, #168]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10d      	bne.n	80045bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a0:	4b27      	ldr	r3, [pc, #156]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	4a26      	ldr	r2, [pc, #152]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 80045a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045aa:	6593      	str	r3, [r2, #88]	; 0x58
 80045ac:	4b24      	ldr	r3, [pc, #144]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 80045ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b8:	2301      	movs	r3, #1
 80045ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045bc:	4b21      	ldr	r3, [pc, #132]	; (8004644 <HAL_RCC_OscConfig+0x508>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d118      	bne.n	80045fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045c8:	4b1e      	ldr	r3, [pc, #120]	; (8004644 <HAL_RCC_OscConfig+0x508>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <HAL_RCC_OscConfig+0x508>)
 80045ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d4:	f7fd f904 	bl	80017e0 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045dc:	f7fd f900 	bl	80017e0 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e17a      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ee:	4b15      	ldr	r3, [pc, #84]	; (8004644 <HAL_RCC_OscConfig+0x508>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0f0      	beq.n	80045dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d108      	bne.n	8004614 <HAL_RCC_OscConfig+0x4d8>
 8004602:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 8004604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004608:	4a0d      	ldr	r2, [pc, #52]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004612:	e029      	b.n	8004668 <HAL_RCC_OscConfig+0x52c>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b05      	cmp	r3, #5
 800461a:	d115      	bne.n	8004648 <HAL_RCC_OscConfig+0x50c>
 800461c:	4b08      	ldr	r3, [pc, #32]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004622:	4a07      	ldr	r2, [pc, #28]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 8004624:	f043 0304 	orr.w	r3, r3, #4
 8004628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800462c:	4b04      	ldr	r3, [pc, #16]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	4a03      	ldr	r2, [pc, #12]	; (8004640 <HAL_RCC_OscConfig+0x504>)
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800463c:	e014      	b.n	8004668 <HAL_RCC_OscConfig+0x52c>
 800463e:	bf00      	nop
 8004640:	40021000 	.word	0x40021000
 8004644:	40007000 	.word	0x40007000
 8004648:	4b9c      	ldr	r3, [pc, #624]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464e:	4a9b      	ldr	r2, [pc, #620]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 8004650:	f023 0301 	bic.w	r3, r3, #1
 8004654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004658:	4b98      	ldr	r3, [pc, #608]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465e:	4a97      	ldr	r2, [pc, #604]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 8004660:	f023 0304 	bic.w	r3, r3, #4
 8004664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d016      	beq.n	800469e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004670:	f7fd f8b6 	bl	80017e0 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004676:	e00a      	b.n	800468e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004678:	f7fd f8b2 	bl	80017e0 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	; 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e12a      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800468e:	4b8b      	ldr	r3, [pc, #556]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0ed      	beq.n	8004678 <HAL_RCC_OscConfig+0x53c>
 800469c:	e015      	b.n	80046ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469e:	f7fd f89f 	bl	80017e0 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046a4:	e00a      	b.n	80046bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a6:	f7fd f89b 	bl	80017e0 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e113      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046bc:	4b7f      	ldr	r3, [pc, #508]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1ed      	bne.n	80046a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046ca:	7ffb      	ldrb	r3, [r7, #31]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d105      	bne.n	80046dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d0:	4b7a      	ldr	r3, [pc, #488]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 80046d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d4:	4a79      	ldr	r2, [pc, #484]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 80046d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80fe 	beq.w	80048e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	f040 80d0 	bne.w	8004890 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80046f0:	4b72      	ldr	r3, [pc, #456]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f003 0203 	and.w	r2, r3, #3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	429a      	cmp	r2, r3
 8004702:	d130      	bne.n	8004766 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	3b01      	subs	r3, #1
 8004710:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004712:	429a      	cmp	r2, r3
 8004714:	d127      	bne.n	8004766 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004720:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004722:	429a      	cmp	r2, r3
 8004724:	d11f      	bne.n	8004766 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004730:	2a07      	cmp	r2, #7
 8004732:	bf14      	ite	ne
 8004734:	2201      	movne	r2, #1
 8004736:	2200      	moveq	r2, #0
 8004738:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800473a:	4293      	cmp	r3, r2
 800473c:	d113      	bne.n	8004766 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	3b01      	subs	r3, #1
 800474c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800474e:	429a      	cmp	r2, r3
 8004750:	d109      	bne.n	8004766 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475c:	085b      	lsrs	r3, r3, #1
 800475e:	3b01      	subs	r3, #1
 8004760:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d06e      	beq.n	8004844 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	2b0c      	cmp	r3, #12
 800476a:	d069      	beq.n	8004840 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800476c:	4b53      	ldr	r3, [pc, #332]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d105      	bne.n	8004784 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004778:	4b50      	ldr	r3, [pc, #320]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0ad      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004788:	4b4c      	ldr	r3, [pc, #304]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a4b      	ldr	r2, [pc, #300]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 800478e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004792:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004794:	f7fd f824 	bl	80017e0 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479c:	f7fd f820 	bl	80017e0 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e09a      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ae:	4b43      	ldr	r3, [pc, #268]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ba:	4b40      	ldr	r3, [pc, #256]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	4b40      	ldr	r3, [pc, #256]	; (80048c0 <HAL_RCC_OscConfig+0x784>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047ca:	3a01      	subs	r2, #1
 80047cc:	0112      	lsls	r2, r2, #4
 80047ce:	4311      	orrs	r1, r2
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047d4:	0212      	lsls	r2, r2, #8
 80047d6:	4311      	orrs	r1, r2
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047dc:	0852      	lsrs	r2, r2, #1
 80047de:	3a01      	subs	r2, #1
 80047e0:	0552      	lsls	r2, r2, #21
 80047e2:	4311      	orrs	r1, r2
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047e8:	0852      	lsrs	r2, r2, #1
 80047ea:	3a01      	subs	r2, #1
 80047ec:	0652      	lsls	r2, r2, #25
 80047ee:	4311      	orrs	r1, r2
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047f4:	0912      	lsrs	r2, r2, #4
 80047f6:	0452      	lsls	r2, r2, #17
 80047f8:	430a      	orrs	r2, r1
 80047fa:	4930      	ldr	r1, [pc, #192]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004800:	4b2e      	ldr	r3, [pc, #184]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a2d      	ldr	r2, [pc, #180]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 8004806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800480a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800480c:	4b2b      	ldr	r3, [pc, #172]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4a2a      	ldr	r2, [pc, #168]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 8004812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004816:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004818:	f7fc ffe2 	bl	80017e0 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004820:	f7fc ffde 	bl	80017e0 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e058      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004832:	4b22      	ldr	r3, [pc, #136]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800483e:	e050      	b.n	80048e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e04f      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004844:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d148      	bne.n	80048e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004850:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a19      	ldr	r2, [pc, #100]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 8004856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800485a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800485c:	4b17      	ldr	r3, [pc, #92]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4a16      	ldr	r2, [pc, #88]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 8004862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004866:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004868:	f7fc ffba 	bl	80017e0 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004870:	f7fc ffb6 	bl	80017e0 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e030      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004882:	4b0e      	ldr	r3, [pc, #56]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0x734>
 800488e:	e028      	b.n	80048e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	2b0c      	cmp	r3, #12
 8004894:	d023      	beq.n	80048de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004896:	4b09      	ldr	r3, [pc, #36]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a08      	ldr	r2, [pc, #32]	; (80048bc <HAL_RCC_OscConfig+0x780>)
 800489c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a2:	f7fc ff9d 	bl	80017e0 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048a8:	e00c      	b.n	80048c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048aa:	f7fc ff99 	bl	80017e0 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d905      	bls.n	80048c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e013      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
 80048bc:	40021000 	.word	0x40021000
 80048c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048c4:	4b09      	ldr	r3, [pc, #36]	; (80048ec <HAL_RCC_OscConfig+0x7b0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1ec      	bne.n	80048aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80048d0:	4b06      	ldr	r3, [pc, #24]	; (80048ec <HAL_RCC_OscConfig+0x7b0>)
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	4905      	ldr	r1, [pc, #20]	; (80048ec <HAL_RCC_OscConfig+0x7b0>)
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <HAL_RCC_OscConfig+0x7b4>)
 80048d8:	4013      	ands	r3, r2
 80048da:	60cb      	str	r3, [r1, #12]
 80048dc:	e001      	b.n	80048e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3720      	adds	r7, #32
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40021000 	.word	0x40021000
 80048f0:	feeefffc 	.word	0xfeeefffc

080048f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e0e7      	b.n	8004ad8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004908:	4b75      	ldr	r3, [pc, #468]	; (8004ae0 <HAL_RCC_ClockConfig+0x1ec>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d910      	bls.n	8004938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004916:	4b72      	ldr	r3, [pc, #456]	; (8004ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f023 0207 	bic.w	r2, r3, #7
 800491e:	4970      	ldr	r1, [pc, #448]	; (8004ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	4313      	orrs	r3, r2
 8004924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004926:	4b6e      	ldr	r3, [pc, #440]	; (8004ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d001      	beq.n	8004938 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0cf      	b.n	8004ad8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d010      	beq.n	8004966 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	4b66      	ldr	r3, [pc, #408]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f0>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004950:	429a      	cmp	r2, r3
 8004952:	d908      	bls.n	8004966 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004954:	4b63      	ldr	r3, [pc, #396]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	4960      	ldr	r1, [pc, #384]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8004962:	4313      	orrs	r3, r2
 8004964:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d04c      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b03      	cmp	r3, #3
 8004978:	d107      	bne.n	800498a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800497a:	4b5a      	ldr	r3, [pc, #360]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d121      	bne.n	80049ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e0a6      	b.n	8004ad8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d107      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004992:	4b54      	ldr	r3, [pc, #336]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d115      	bne.n	80049ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e09a      	b.n	8004ad8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d107      	bne.n	80049ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049aa:	4b4e      	ldr	r3, [pc, #312]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d109      	bne.n	80049ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e08e      	b.n	8004ad8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049ba:	4b4a      	ldr	r3, [pc, #296]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e086      	b.n	8004ad8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049ca:	4b46      	ldr	r3, [pc, #280]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f023 0203 	bic.w	r2, r3, #3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	4943      	ldr	r1, [pc, #268]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049dc:	f7fc ff00 	bl	80017e0 <HAL_GetTick>
 80049e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e2:	e00a      	b.n	80049fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e4:	f7fc fefc 	bl	80017e0 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e06e      	b.n	8004ad8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fa:	4b3a      	ldr	r3, [pc, #232]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 020c 	and.w	r2, r3, #12
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d1eb      	bne.n	80049e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d010      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	4b31      	ldr	r3, [pc, #196]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d208      	bcs.n	8004a3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a28:	4b2e      	ldr	r3, [pc, #184]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	492b      	ldr	r1, [pc, #172]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a3a:	4b29      	ldr	r3, [pc, #164]	; (8004ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d210      	bcs.n	8004a6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a48:	4b25      	ldr	r3, [pc, #148]	; (8004ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f023 0207 	bic.w	r2, r3, #7
 8004a50:	4923      	ldr	r1, [pc, #140]	; (8004ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a58:	4b21      	ldr	r3, [pc, #132]	; (8004ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d001      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e036      	b.n	8004ad8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d008      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a76:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	4918      	ldr	r1, [pc, #96]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d009      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a94:	4b13      	ldr	r3, [pc, #76]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	4910      	ldr	r1, [pc, #64]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004aa8:	f000 f824 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 8004aac:	4602      	mov	r2, r0
 8004aae:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	490b      	ldr	r1, [pc, #44]	; (8004ae8 <HAL_RCC_ClockConfig+0x1f4>)
 8004aba:	5ccb      	ldrb	r3, [r1, r3]
 8004abc:	f003 031f 	and.w	r3, r3, #31
 8004ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac4:	4a09      	ldr	r2, [pc, #36]	; (8004aec <HAL_RCC_ClockConfig+0x1f8>)
 8004ac6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ac8:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <HAL_RCC_ClockConfig+0x1fc>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fc fe37 	bl	8001740 <HAL_InitTick>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ad6:	7afb      	ldrb	r3, [r7, #11]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40022000 	.word	0x40022000
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	080082a0 	.word	0x080082a0
 8004aec:	20000004 	.word	0x20000004
 8004af0:	20000008 	.word	0x20000008

08004af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b089      	sub	sp, #36	; 0x24
 8004af8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
 8004afe:	2300      	movs	r3, #0
 8004b00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b02:	4b3e      	ldr	r3, [pc, #248]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b0c:	4b3b      	ldr	r3, [pc, #236]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0x34>
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b0c      	cmp	r3, #12
 8004b20:	d121      	bne.n	8004b66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d11e      	bne.n	8004b66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b28:	4b34      	ldr	r3, [pc, #208]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d107      	bne.n	8004b44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b34:	4b31      	ldr	r3, [pc, #196]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b3a:	0a1b      	lsrs	r3, r3, #8
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	61fb      	str	r3, [r7, #28]
 8004b42:	e005      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b44:	4b2d      	ldr	r3, [pc, #180]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	091b      	lsrs	r3, r3, #4
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b50:	4a2b      	ldr	r2, [pc, #172]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10d      	bne.n	8004b7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b64:	e00a      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d102      	bne.n	8004b72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b6c:	4b25      	ldr	r3, [pc, #148]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b6e:	61bb      	str	r3, [r7, #24]
 8004b70:	e004      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d101      	bne.n	8004b7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b78:	4b23      	ldr	r3, [pc, #140]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	2b0c      	cmp	r3, #12
 8004b80:	d134      	bne.n	8004bec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b82:	4b1e      	ldr	r3, [pc, #120]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d003      	beq.n	8004b9a <HAL_RCC_GetSysClockFreq+0xa6>
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	d003      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xac>
 8004b98:	e005      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b9a:	4b1a      	ldr	r3, [pc, #104]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b9c:	617b      	str	r3, [r7, #20]
      break;
 8004b9e:	e005      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ba0:	4b19      	ldr	r3, [pc, #100]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ba2:	617b      	str	r3, [r7, #20]
      break;
 8004ba4:	e002      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	617b      	str	r3, [r7, #20]
      break;
 8004baa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bac:	4b13      	ldr	r3, [pc, #76]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bba:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	0a1b      	lsrs	r3, r3, #8
 8004bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	fb03 f202 	mul.w	r2, r3, r2
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	0e5b      	lsrs	r3, r3, #25
 8004bd8:	f003 0303 	and.w	r3, r3, #3
 8004bdc:	3301      	adds	r3, #1
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004bec:	69bb      	ldr	r3, [r7, #24]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3724      	adds	r7, #36	; 0x24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	080082b8 	.word	0x080082b8
 8004c04:	00f42400 	.word	0x00f42400
 8004c08:	007a1200 	.word	0x007a1200

08004c0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c10:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c12:	681b      	ldr	r3, [r3, #0]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000004 	.word	0x20000004

08004c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c28:	f7ff fff0 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	0a1b      	lsrs	r3, r3, #8
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	4904      	ldr	r1, [pc, #16]	; (8004c4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c3a:	5ccb      	ldrb	r3, [r1, r3]
 8004c3c:	f003 031f 	and.w	r3, r3, #31
 8004c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	080082b0 	.word	0x080082b0

08004c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c54:	f7ff ffda 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	0adb      	lsrs	r3, r3, #11
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	4904      	ldr	r1, [pc, #16]	; (8004c78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c66:	5ccb      	ldrb	r3, [r1, r3]
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40021000 	.word	0x40021000
 8004c78:	080082b0 	.word	0x080082b0

08004c7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c84:	2300      	movs	r3, #0
 8004c86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c88:	4b2a      	ldr	r3, [pc, #168]	; (8004d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c94:	f7ff f9ee 	bl	8004074 <HAL_PWREx_GetVoltageRange>
 8004c98:	6178      	str	r0, [r7, #20]
 8004c9a:	e014      	b.n	8004cc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c9c:	4b25      	ldr	r3, [pc, #148]	; (8004d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca0:	4a24      	ldr	r2, [pc, #144]	; (8004d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ca8:	4b22      	ldr	r3, [pc, #136]	; (8004d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004cb4:	f7ff f9de 	bl	8004074 <HAL_PWREx_GetVoltageRange>
 8004cb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cba:	4b1e      	ldr	r3, [pc, #120]	; (8004d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbe:	4a1d      	ldr	r2, [pc, #116]	; (8004d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cc4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ccc:	d10b      	bne.n	8004ce6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b80      	cmp	r3, #128	; 0x80
 8004cd2:	d919      	bls.n	8004d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2ba0      	cmp	r3, #160	; 0xa0
 8004cd8:	d902      	bls.n	8004ce0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cda:	2302      	movs	r3, #2
 8004cdc:	613b      	str	r3, [r7, #16]
 8004cde:	e013      	b.n	8004d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	613b      	str	r3, [r7, #16]
 8004ce4:	e010      	b.n	8004d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b80      	cmp	r3, #128	; 0x80
 8004cea:	d902      	bls.n	8004cf2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004cec:	2303      	movs	r3, #3
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	e00a      	b.n	8004d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b80      	cmp	r3, #128	; 0x80
 8004cf6:	d102      	bne.n	8004cfe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	e004      	b.n	8004d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b70      	cmp	r3, #112	; 0x70
 8004d02:	d101      	bne.n	8004d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d04:	2301      	movs	r3, #1
 8004d06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f023 0207 	bic.w	r2, r3, #7
 8004d10:	4909      	ldr	r1, [pc, #36]	; (8004d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d18:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d001      	beq.n	8004d2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40021000 	.word	0x40021000
 8004d38:	40022000 	.word	0x40022000

08004d3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d44:	2300      	movs	r3, #0
 8004d46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d48:	2300      	movs	r3, #0
 8004d4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d041      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d60:	d02a      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d66:	d824      	bhi.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d6c:	d008      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d72:	d81e      	bhi.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d7c:	d010      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d7e:	e018      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d80:	4b86      	ldr	r3, [pc, #536]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	4a85      	ldr	r2, [pc, #532]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d8a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d8c:	e015      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3304      	adds	r3, #4
 8004d92:	2100      	movs	r1, #0
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fabb 	bl	8005310 <RCCEx_PLLSAI1_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d9e:	e00c      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3320      	adds	r3, #32
 8004da4:	2100      	movs	r1, #0
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fba6 	bl	80054f8 <RCCEx_PLLSAI2_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004db0:	e003      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	74fb      	strb	r3, [r7, #19]
      break;
 8004db6:	e000      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dba:	7cfb      	ldrb	r3, [r7, #19]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10b      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dc0:	4b76      	ldr	r3, [pc, #472]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dce:	4973      	ldr	r1, [pc, #460]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004dd6:	e001      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd8:	7cfb      	ldrb	r3, [r7, #19]
 8004dda:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d041      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004df0:	d02a      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004df2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004df6:	d824      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004df8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dfc:	d008      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004dfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e02:	d81e      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e0c:	d010      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e0e:	e018      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e10:	4b62      	ldr	r3, [pc, #392]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	4a61      	ldr	r2, [pc, #388]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e1a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e1c:	e015      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3304      	adds	r3, #4
 8004e22:	2100      	movs	r1, #0
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fa73 	bl	8005310 <RCCEx_PLLSAI1_Config>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e2e:	e00c      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3320      	adds	r3, #32
 8004e34:	2100      	movs	r1, #0
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fb5e 	bl	80054f8 <RCCEx_PLLSAI2_Config>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e40:	e003      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	74fb      	strb	r3, [r7, #19]
      break;
 8004e46:	e000      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004e48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e4a:	7cfb      	ldrb	r3, [r7, #19]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10b      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e50:	4b52      	ldr	r3, [pc, #328]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e5e:	494f      	ldr	r1, [pc, #316]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e66:	e001      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e68:	7cfb      	ldrb	r3, [r7, #19]
 8004e6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 80a0 	beq.w	8004fba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e7e:	4b47      	ldr	r3, [pc, #284]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00d      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e94:	4b41      	ldr	r3, [pc, #260]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e98:	4a40      	ldr	r2, [pc, #256]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8004ea0:	4b3e      	ldr	r3, [pc, #248]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea8:	60bb      	str	r3, [r7, #8]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eac:	2301      	movs	r3, #1
 8004eae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004eb0:	4b3b      	ldr	r3, [pc, #236]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a3a      	ldr	r2, [pc, #232]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ebc:	f7fc fc90 	bl	80017e0 <HAL_GetTick>
 8004ec0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ec2:	e009      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec4:	f7fc fc8c 	bl	80017e0 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d902      	bls.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	74fb      	strb	r3, [r7, #19]
        break;
 8004ed6:	e005      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ed8:	4b31      	ldr	r3, [pc, #196]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0ef      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ee4:	7cfb      	ldrb	r3, [r7, #19]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d15c      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004eea:	4b2c      	ldr	r3, [pc, #176]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01f      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d019      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f08:	4b24      	ldr	r3, [pc, #144]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f14:	4b21      	ldr	r3, [pc, #132]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1a:	4a20      	ldr	r2, [pc, #128]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f24:	4b1d      	ldr	r3, [pc, #116]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	4a1c      	ldr	r2, [pc, #112]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f34:	4a19      	ldr	r2, [pc, #100]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d016      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f46:	f7fc fc4b 	bl	80017e0 <HAL_GetTick>
 8004f4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f4c:	e00b      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f4e:	f7fc fc47 	bl	80017e0 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d902      	bls.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	74fb      	strb	r3, [r7, #19]
            break;
 8004f64:	e006      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f66:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0ec      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004f74:	7cfb      	ldrb	r3, [r7, #19]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10c      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f7a:	4b08      	ldr	r3, [pc, #32]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f8a:	4904      	ldr	r1, [pc, #16]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f92:	e009      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f94:	7cfb      	ldrb	r3, [r7, #19]
 8004f96:	74bb      	strb	r3, [r7, #18]
 8004f98:	e006      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f9a:	bf00      	nop
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa4:	7cfb      	ldrb	r3, [r7, #19]
 8004fa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fa8:	7c7b      	ldrb	r3, [r7, #17]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d105      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fae:	4b9e      	ldr	r3, [pc, #632]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb2:	4a9d      	ldr	r2, [pc, #628]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fc6:	4b98      	ldr	r3, [pc, #608]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fcc:	f023 0203 	bic.w	r2, r3, #3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	4994      	ldr	r1, [pc, #592]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00a      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fe8:	4b8f      	ldr	r3, [pc, #572]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fee:	f023 020c 	bic.w	r2, r3, #12
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff6:	498c      	ldr	r1, [pc, #560]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800500a:	4b87      	ldr	r3, [pc, #540]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005010:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	4983      	ldr	r1, [pc, #524]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800502c:	4b7e      	ldr	r3, [pc, #504]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800502e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005032:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503a:	497b      	ldr	r1, [pc, #492]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800504e:	4b76      	ldr	r3, [pc, #472]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800505c:	4972      	ldr	r1, [pc, #456]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0320 	and.w	r3, r3, #32
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005070:	4b6d      	ldr	r3, [pc, #436]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005076:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800507e:	496a      	ldr	r1, [pc, #424]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005092:	4b65      	ldr	r3, [pc, #404]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005098:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a0:	4961      	ldr	r1, [pc, #388]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050b4:	4b5c      	ldr	r3, [pc, #368]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c2:	4959      	ldr	r1, [pc, #356]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050d6:	4b54      	ldr	r3, [pc, #336]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e4:	4950      	ldr	r1, [pc, #320]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050f8:	4b4b      	ldr	r3, [pc, #300]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005106:	4948      	ldr	r1, [pc, #288]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800511a:	4b43      	ldr	r3, [pc, #268]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005120:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005128:	493f      	ldr	r1, [pc, #252]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d028      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800513c:	4b3a      	ldr	r3, [pc, #232]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800513e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005142:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800514a:	4937      	ldr	r1, [pc, #220]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800515a:	d106      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800515c:	4b32      	ldr	r3, [pc, #200]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	4a31      	ldr	r2, [pc, #196]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005166:	60d3      	str	r3, [r2, #12]
 8005168:	e011      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800516e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005172:	d10c      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3304      	adds	r3, #4
 8005178:	2101      	movs	r1, #1
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f8c8 	bl	8005310 <RCCEx_PLLSAI1_Config>
 8005180:	4603      	mov	r3, r0
 8005182:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005184:	7cfb      	ldrb	r3, [r7, #19]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800518a:	7cfb      	ldrb	r3, [r7, #19]
 800518c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d028      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800519a:	4b23      	ldr	r3, [pc, #140]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a8:	491f      	ldr	r1, [pc, #124]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051b8:	d106      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051ba:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	4a1a      	ldr	r2, [pc, #104]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051c4:	60d3      	str	r3, [r2, #12]
 80051c6:	e011      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051d0:	d10c      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3304      	adds	r3, #4
 80051d6:	2101      	movs	r1, #1
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 f899 	bl	8005310 <RCCEx_PLLSAI1_Config>
 80051de:	4603      	mov	r3, r0
 80051e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051e2:	7cfb      	ldrb	r3, [r7, #19]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80051e8:	7cfb      	ldrb	r3, [r7, #19]
 80051ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d02b      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051f8:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005206:	4908      	ldr	r1, [pc, #32]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005216:	d109      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005218:	4b03      	ldr	r3, [pc, #12]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	4a02      	ldr	r2, [pc, #8]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005222:	60d3      	str	r3, [r2, #12]
 8005224:	e014      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005226:	bf00      	nop
 8005228:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005234:	d10c      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3304      	adds	r3, #4
 800523a:	2101      	movs	r1, #1
 800523c:	4618      	mov	r0, r3
 800523e:	f000 f867 	bl	8005310 <RCCEx_PLLSAI1_Config>
 8005242:	4603      	mov	r3, r0
 8005244:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005246:	7cfb      	ldrb	r3, [r7, #19]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800524c:	7cfb      	ldrb	r3, [r7, #19]
 800524e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d02f      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800525c:	4b2b      	ldr	r3, [pc, #172]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800525e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005262:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800526a:	4928      	ldr	r1, [pc, #160]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005276:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800527a:	d10d      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3304      	adds	r3, #4
 8005280:	2102      	movs	r1, #2
 8005282:	4618      	mov	r0, r3
 8005284:	f000 f844 	bl	8005310 <RCCEx_PLLSAI1_Config>
 8005288:	4603      	mov	r3, r0
 800528a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800528c:	7cfb      	ldrb	r3, [r7, #19]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d014      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005292:	7cfb      	ldrb	r3, [r7, #19]
 8005294:	74bb      	strb	r3, [r7, #18]
 8005296:	e011      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800529c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a0:	d10c      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3320      	adds	r3, #32
 80052a6:	2102      	movs	r1, #2
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 f925 	bl	80054f8 <RCCEx_PLLSAI2_Config>
 80052ae:	4603      	mov	r3, r0
 80052b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052b2:	7cfb      	ldrb	r3, [r7, #19]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80052b8:	7cfb      	ldrb	r3, [r7, #19]
 80052ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052c8:	4b10      	ldr	r3, [pc, #64]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052d6:	490d      	ldr	r1, [pc, #52]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00b      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052ea:	4b08      	ldr	r3, [pc, #32]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052fa:	4904      	ldr	r1, [pc, #16]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005302:	7cbb      	ldrb	r3, [r7, #18]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40021000 	.word	0x40021000

08005310 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800531e:	4b75      	ldr	r3, [pc, #468]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d018      	beq.n	800535c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800532a:	4b72      	ldr	r3, [pc, #456]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f003 0203 	and.w	r2, r3, #3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d10d      	bne.n	8005356 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
       ||
 800533e:	2b00      	cmp	r3, #0
 8005340:	d009      	beq.n	8005356 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005342:	4b6c      	ldr	r3, [pc, #432]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	091b      	lsrs	r3, r3, #4
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
       ||
 8005352:	429a      	cmp	r2, r3
 8005354:	d047      	beq.n	80053e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	73fb      	strb	r3, [r7, #15]
 800535a:	e044      	b.n	80053e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b03      	cmp	r3, #3
 8005362:	d018      	beq.n	8005396 <RCCEx_PLLSAI1_Config+0x86>
 8005364:	2b03      	cmp	r3, #3
 8005366:	d825      	bhi.n	80053b4 <RCCEx_PLLSAI1_Config+0xa4>
 8005368:	2b01      	cmp	r3, #1
 800536a:	d002      	beq.n	8005372 <RCCEx_PLLSAI1_Config+0x62>
 800536c:	2b02      	cmp	r3, #2
 800536e:	d009      	beq.n	8005384 <RCCEx_PLLSAI1_Config+0x74>
 8005370:	e020      	b.n	80053b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005372:	4b60      	ldr	r3, [pc, #384]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d11d      	bne.n	80053ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005382:	e01a      	b.n	80053ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005384:	4b5b      	ldr	r3, [pc, #364]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538c:	2b00      	cmp	r3, #0
 800538e:	d116      	bne.n	80053be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005394:	e013      	b.n	80053be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005396:	4b57      	ldr	r3, [pc, #348]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10f      	bne.n	80053c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053a2:	4b54      	ldr	r3, [pc, #336]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d109      	bne.n	80053c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053b2:	e006      	b.n	80053c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	73fb      	strb	r3, [r7, #15]
      break;
 80053b8:	e004      	b.n	80053c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053ba:	bf00      	nop
 80053bc:	e002      	b.n	80053c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053be:	bf00      	nop
 80053c0:	e000      	b.n	80053c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10d      	bne.n	80053e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053ca:	4b4a      	ldr	r3, [pc, #296]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6819      	ldr	r1, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	3b01      	subs	r3, #1
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	430b      	orrs	r3, r1
 80053e0:	4944      	ldr	r1, [pc, #272]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d17d      	bne.n	80054e8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053ec:	4b41      	ldr	r3, [pc, #260]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a40      	ldr	r2, [pc, #256]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f8:	f7fc f9f2 	bl	80017e0 <HAL_GetTick>
 80053fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053fe:	e009      	b.n	8005414 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005400:	f7fc f9ee 	bl	80017e0 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d902      	bls.n	8005414 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	73fb      	strb	r3, [r7, #15]
        break;
 8005412:	e005      	b.n	8005420 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005414:	4b37      	ldr	r3, [pc, #220]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1ef      	bne.n	8005400 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d160      	bne.n	80054e8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d111      	bne.n	8005450 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800542c:	4b31      	ldr	r3, [pc, #196]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6892      	ldr	r2, [r2, #8]
 800543c:	0211      	lsls	r1, r2, #8
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	68d2      	ldr	r2, [r2, #12]
 8005442:	0912      	lsrs	r2, r2, #4
 8005444:	0452      	lsls	r2, r2, #17
 8005446:	430a      	orrs	r2, r1
 8005448:	492a      	ldr	r1, [pc, #168]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800544a:	4313      	orrs	r3, r2
 800544c:	610b      	str	r3, [r1, #16]
 800544e:	e027      	b.n	80054a0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d112      	bne.n	800547c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005456:	4b27      	ldr	r3, [pc, #156]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800545e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6892      	ldr	r2, [r2, #8]
 8005466:	0211      	lsls	r1, r2, #8
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6912      	ldr	r2, [r2, #16]
 800546c:	0852      	lsrs	r2, r2, #1
 800546e:	3a01      	subs	r2, #1
 8005470:	0552      	lsls	r2, r2, #21
 8005472:	430a      	orrs	r2, r1
 8005474:	491f      	ldr	r1, [pc, #124]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005476:	4313      	orrs	r3, r2
 8005478:	610b      	str	r3, [r1, #16]
 800547a:	e011      	b.n	80054a0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800547c:	4b1d      	ldr	r3, [pc, #116]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005484:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6892      	ldr	r2, [r2, #8]
 800548c:	0211      	lsls	r1, r2, #8
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6952      	ldr	r2, [r2, #20]
 8005492:	0852      	lsrs	r2, r2, #1
 8005494:	3a01      	subs	r2, #1
 8005496:	0652      	lsls	r2, r2, #25
 8005498:	430a      	orrs	r2, r1
 800549a:	4916      	ldr	r1, [pc, #88]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800549c:	4313      	orrs	r3, r2
 800549e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80054a0:	4b14      	ldr	r3, [pc, #80]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a13      	ldr	r2, [pc, #76]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ac:	f7fc f998 	bl	80017e0 <HAL_GetTick>
 80054b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054b2:	e009      	b.n	80054c8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054b4:	f7fc f994 	bl	80017e0 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d902      	bls.n	80054c8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	73fb      	strb	r3, [r7, #15]
          break;
 80054c6:	e005      	b.n	80054d4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054c8:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0ef      	beq.n	80054b4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054da:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054dc:	691a      	ldr	r2, [r3, #16]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	4904      	ldr	r1, [pc, #16]	; (80054f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40021000 	.word	0x40021000

080054f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005506:	4b6a      	ldr	r3, [pc, #424]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d018      	beq.n	8005544 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005512:	4b67      	ldr	r3, [pc, #412]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f003 0203 	and.w	r2, r3, #3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d10d      	bne.n	800553e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
       ||
 8005526:	2b00      	cmp	r3, #0
 8005528:	d009      	beq.n	800553e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800552a:	4b61      	ldr	r3, [pc, #388]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	091b      	lsrs	r3, r3, #4
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
       ||
 800553a:	429a      	cmp	r2, r3
 800553c:	d047      	beq.n	80055ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	73fb      	strb	r3, [r7, #15]
 8005542:	e044      	b.n	80055ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b03      	cmp	r3, #3
 800554a:	d018      	beq.n	800557e <RCCEx_PLLSAI2_Config+0x86>
 800554c:	2b03      	cmp	r3, #3
 800554e:	d825      	bhi.n	800559c <RCCEx_PLLSAI2_Config+0xa4>
 8005550:	2b01      	cmp	r3, #1
 8005552:	d002      	beq.n	800555a <RCCEx_PLLSAI2_Config+0x62>
 8005554:	2b02      	cmp	r3, #2
 8005556:	d009      	beq.n	800556c <RCCEx_PLLSAI2_Config+0x74>
 8005558:	e020      	b.n	800559c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800555a:	4b55      	ldr	r3, [pc, #340]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d11d      	bne.n	80055a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800556a:	e01a      	b.n	80055a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800556c:	4b50      	ldr	r3, [pc, #320]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005574:	2b00      	cmp	r3, #0
 8005576:	d116      	bne.n	80055a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800557c:	e013      	b.n	80055a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800557e:	4b4c      	ldr	r3, [pc, #304]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10f      	bne.n	80055aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800558a:	4b49      	ldr	r3, [pc, #292]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d109      	bne.n	80055aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800559a:	e006      	b.n	80055aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	73fb      	strb	r3, [r7, #15]
      break;
 80055a0:	e004      	b.n	80055ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055a2:	bf00      	nop
 80055a4:	e002      	b.n	80055ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055a6:	bf00      	nop
 80055a8:	e000      	b.n	80055ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10d      	bne.n	80055ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055b2:	4b3f      	ldr	r3, [pc, #252]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6819      	ldr	r1, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	430b      	orrs	r3, r1
 80055c8:	4939      	ldr	r1, [pc, #228]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d167      	bne.n	80056a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80055d4:	4b36      	ldr	r3, [pc, #216]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a35      	ldr	r2, [pc, #212]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e0:	f7fc f8fe 	bl	80017e0 <HAL_GetTick>
 80055e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055e6:	e009      	b.n	80055fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055e8:	f7fc f8fa 	bl	80017e0 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d902      	bls.n	80055fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	73fb      	strb	r3, [r7, #15]
        break;
 80055fa:	e005      	b.n	8005608 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055fc:	4b2c      	ldr	r3, [pc, #176]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1ef      	bne.n	80055e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d14a      	bne.n	80056a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d111      	bne.n	8005638 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005614:	4b26      	ldr	r3, [pc, #152]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800561c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6892      	ldr	r2, [r2, #8]
 8005624:	0211      	lsls	r1, r2, #8
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	68d2      	ldr	r2, [r2, #12]
 800562a:	0912      	lsrs	r2, r2, #4
 800562c:	0452      	lsls	r2, r2, #17
 800562e:	430a      	orrs	r2, r1
 8005630:	491f      	ldr	r1, [pc, #124]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005632:	4313      	orrs	r3, r2
 8005634:	614b      	str	r3, [r1, #20]
 8005636:	e011      	b.n	800565c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005638:	4b1d      	ldr	r3, [pc, #116]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005640:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6892      	ldr	r2, [r2, #8]
 8005648:	0211      	lsls	r1, r2, #8
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6912      	ldr	r2, [r2, #16]
 800564e:	0852      	lsrs	r2, r2, #1
 8005650:	3a01      	subs	r2, #1
 8005652:	0652      	lsls	r2, r2, #25
 8005654:	430a      	orrs	r2, r1
 8005656:	4916      	ldr	r1, [pc, #88]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005658:	4313      	orrs	r3, r2
 800565a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800565c:	4b14      	ldr	r3, [pc, #80]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a13      	ldr	r2, [pc, #76]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005666:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005668:	f7fc f8ba 	bl	80017e0 <HAL_GetTick>
 800566c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800566e:	e009      	b.n	8005684 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005670:	f7fc f8b6 	bl	80017e0 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d902      	bls.n	8005684 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	73fb      	strb	r3, [r7, #15]
          break;
 8005682:	e005      	b.n	8005690 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005684:	4b0a      	ldr	r3, [pc, #40]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0ef      	beq.n	8005670 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005696:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005698:	695a      	ldr	r2, [r3, #20]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	4904      	ldr	r1, [pc, #16]	; (80056b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	40021000 	.word	0x40021000

080056b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e049      	b.n	800575a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7fb fe18 	bl	8001310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3304      	adds	r3, #4
 80056f0:	4619      	mov	r1, r3
 80056f2:	4610      	mov	r0, r2
 80056f4:	f000 fa9a 	bl	8005c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	d001      	beq.n	800577c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e04f      	b.n	800581c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a23      	ldr	r2, [pc, #140]	; (8005828 <HAL_TIM_Base_Start_IT+0xc4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d01d      	beq.n	80057da <HAL_TIM_Base_Start_IT+0x76>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a6:	d018      	beq.n	80057da <HAL_TIM_Base_Start_IT+0x76>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1f      	ldr	r2, [pc, #124]	; (800582c <HAL_TIM_Base_Start_IT+0xc8>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d013      	beq.n	80057da <HAL_TIM_Base_Start_IT+0x76>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1e      	ldr	r2, [pc, #120]	; (8005830 <HAL_TIM_Base_Start_IT+0xcc>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00e      	beq.n	80057da <HAL_TIM_Base_Start_IT+0x76>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1c      	ldr	r2, [pc, #112]	; (8005834 <HAL_TIM_Base_Start_IT+0xd0>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_TIM_Base_Start_IT+0x76>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1b      	ldr	r2, [pc, #108]	; (8005838 <HAL_TIM_Base_Start_IT+0xd4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d004      	beq.n	80057da <HAL_TIM_Base_Start_IT+0x76>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a19      	ldr	r2, [pc, #100]	; (800583c <HAL_TIM_Base_Start_IT+0xd8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d115      	bne.n	8005806 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	4b17      	ldr	r3, [pc, #92]	; (8005840 <HAL_TIM_Base_Start_IT+0xdc>)
 80057e2:	4013      	ands	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b06      	cmp	r3, #6
 80057ea:	d015      	beq.n	8005818 <HAL_TIM_Base_Start_IT+0xb4>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f2:	d011      	beq.n	8005818 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0201 	orr.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005804:	e008      	b.n	8005818 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f042 0201 	orr.w	r2, r2, #1
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	e000      	b.n	800581a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005818:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	40012c00 	.word	0x40012c00
 800582c:	40000400 	.word	0x40000400
 8005830:	40000800 	.word	0x40000800
 8005834:	40000c00 	.word	0x40000c00
 8005838:	40013400 	.word	0x40013400
 800583c:	40014000 	.word	0x40014000
 8005840:	00010007 	.word	0x00010007

08005844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d020      	beq.n	80058a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01b      	beq.n	80058a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f06f 0202 	mvn.w	r2, #2
 8005878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f9ad 	bl	8005bee <HAL_TIM_IC_CaptureCallback>
 8005894:	e005      	b.n	80058a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f99f 	bl	8005bda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f9b0 	bl	8005c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d020      	beq.n	80058f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01b      	beq.n	80058f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f06f 0204 	mvn.w	r2, #4
 80058c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2202      	movs	r2, #2
 80058ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f987 	bl	8005bee <HAL_TIM_IC_CaptureCallback>
 80058e0:	e005      	b.n	80058ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f979 	bl	8005bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f98a 	bl	8005c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d020      	beq.n	8005940 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01b      	beq.n	8005940 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0208 	mvn.w	r2, #8
 8005910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2204      	movs	r2, #4
 8005916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f961 	bl	8005bee <HAL_TIM_IC_CaptureCallback>
 800592c:	e005      	b.n	800593a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f953 	bl	8005bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f964 	bl	8005c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f003 0310 	and.w	r3, r3, #16
 8005946:	2b00      	cmp	r3, #0
 8005948:	d020      	beq.n	800598c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f003 0310 	and.w	r3, r3, #16
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01b      	beq.n	800598c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0210 	mvn.w	r2, #16
 800595c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2208      	movs	r2, #8
 8005962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f93b 	bl	8005bee <HAL_TIM_IC_CaptureCallback>
 8005978:	e005      	b.n	8005986 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f92d 	bl	8005bda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f93e 	bl	8005c02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00c      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d007      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0201 	mvn.w	r2, #1
 80059a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fb fb3c 	bl	8001028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00c      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d007      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 faf2 	bl	8005fb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00c      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 faea 	bl	8005fcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00c      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d007      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f8fd 	bl	8005c16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00c      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d007      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0220 	mvn.w	r2, #32
 8005a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fab2 	bl	8005fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a40:	bf00      	nop
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_TIM_ConfigClockSource+0x1c>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e0b6      	b.n	8005bd2 <HAL_TIM_ConfigClockSource+0x18a>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa0:	d03e      	beq.n	8005b20 <HAL_TIM_ConfigClockSource+0xd8>
 8005aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa6:	f200 8087 	bhi.w	8005bb8 <HAL_TIM_ConfigClockSource+0x170>
 8005aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aae:	f000 8086 	beq.w	8005bbe <HAL_TIM_ConfigClockSource+0x176>
 8005ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab6:	d87f      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x170>
 8005ab8:	2b70      	cmp	r3, #112	; 0x70
 8005aba:	d01a      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0xaa>
 8005abc:	2b70      	cmp	r3, #112	; 0x70
 8005abe:	d87b      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x170>
 8005ac0:	2b60      	cmp	r3, #96	; 0x60
 8005ac2:	d050      	beq.n	8005b66 <HAL_TIM_ConfigClockSource+0x11e>
 8005ac4:	2b60      	cmp	r3, #96	; 0x60
 8005ac6:	d877      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x170>
 8005ac8:	2b50      	cmp	r3, #80	; 0x50
 8005aca:	d03c      	beq.n	8005b46 <HAL_TIM_ConfigClockSource+0xfe>
 8005acc:	2b50      	cmp	r3, #80	; 0x50
 8005ace:	d873      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x170>
 8005ad0:	2b40      	cmp	r3, #64	; 0x40
 8005ad2:	d058      	beq.n	8005b86 <HAL_TIM_ConfigClockSource+0x13e>
 8005ad4:	2b40      	cmp	r3, #64	; 0x40
 8005ad6:	d86f      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x170>
 8005ad8:	2b30      	cmp	r3, #48	; 0x30
 8005ada:	d064      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8005adc:	2b30      	cmp	r3, #48	; 0x30
 8005ade:	d86b      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x170>
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	d060      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	d867      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x170>
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d05c      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8005aec:	2b10      	cmp	r3, #16
 8005aee:	d05a      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8005af0:	e062      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b02:	f000 f9a7 	bl	8005e54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	609a      	str	r2, [r3, #8]
      break;
 8005b1e:	e04f      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b30:	f000 f990 	bl	8005e54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b42:	609a      	str	r2, [r3, #8]
      break;
 8005b44:	e03c      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b52:	461a      	mov	r2, r3
 8005b54:	f000 f904 	bl	8005d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2150      	movs	r1, #80	; 0x50
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 f95d 	bl	8005e1e <TIM_ITRx_SetConfig>
      break;
 8005b64:	e02c      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b72:	461a      	mov	r2, r3
 8005b74:	f000 f923 	bl	8005dbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2160      	movs	r1, #96	; 0x60
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 f94d 	bl	8005e1e <TIM_ITRx_SetConfig>
      break;
 8005b84:	e01c      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b92:	461a      	mov	r2, r3
 8005b94:	f000 f8e4 	bl	8005d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2140      	movs	r1, #64	; 0x40
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 f93d 	bl	8005e1e <TIM_ITRx_SetConfig>
      break;
 8005ba4:	e00c      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	f000 f934 	bl	8005e1e <TIM_ITRx_SetConfig>
      break;
 8005bb6:	e003      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	73fb      	strb	r3, [r7, #15]
      break;
 8005bbc:	e000      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005bbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
	...

08005c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a40      	ldr	r2, [pc, #256]	; (8005d40 <TIM_Base_SetConfig+0x114>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d013      	beq.n	8005c6c <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4a:	d00f      	beq.n	8005c6c <TIM_Base_SetConfig+0x40>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a3d      	ldr	r2, [pc, #244]	; (8005d44 <TIM_Base_SetConfig+0x118>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00b      	beq.n	8005c6c <TIM_Base_SetConfig+0x40>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a3c      	ldr	r2, [pc, #240]	; (8005d48 <TIM_Base_SetConfig+0x11c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d007      	beq.n	8005c6c <TIM_Base_SetConfig+0x40>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a3b      	ldr	r2, [pc, #236]	; (8005d4c <TIM_Base_SetConfig+0x120>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d003      	beq.n	8005c6c <TIM_Base_SetConfig+0x40>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a3a      	ldr	r2, [pc, #232]	; (8005d50 <TIM_Base_SetConfig+0x124>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d108      	bne.n	8005c7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a2f      	ldr	r2, [pc, #188]	; (8005d40 <TIM_Base_SetConfig+0x114>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d01f      	beq.n	8005cc6 <TIM_Base_SetConfig+0x9a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8c:	d01b      	beq.n	8005cc6 <TIM_Base_SetConfig+0x9a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2c      	ldr	r2, [pc, #176]	; (8005d44 <TIM_Base_SetConfig+0x118>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d017      	beq.n	8005cc6 <TIM_Base_SetConfig+0x9a>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2b      	ldr	r2, [pc, #172]	; (8005d48 <TIM_Base_SetConfig+0x11c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d013      	beq.n	8005cc6 <TIM_Base_SetConfig+0x9a>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a2a      	ldr	r2, [pc, #168]	; (8005d4c <TIM_Base_SetConfig+0x120>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00f      	beq.n	8005cc6 <TIM_Base_SetConfig+0x9a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a29      	ldr	r2, [pc, #164]	; (8005d50 <TIM_Base_SetConfig+0x124>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00b      	beq.n	8005cc6 <TIM_Base_SetConfig+0x9a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a28      	ldr	r2, [pc, #160]	; (8005d54 <TIM_Base_SetConfig+0x128>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d007      	beq.n	8005cc6 <TIM_Base_SetConfig+0x9a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a27      	ldr	r2, [pc, #156]	; (8005d58 <TIM_Base_SetConfig+0x12c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d003      	beq.n	8005cc6 <TIM_Base_SetConfig+0x9a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a26      	ldr	r2, [pc, #152]	; (8005d5c <TIM_Base_SetConfig+0x130>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d108      	bne.n	8005cd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a10      	ldr	r2, [pc, #64]	; (8005d40 <TIM_Base_SetConfig+0x114>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00f      	beq.n	8005d24 <TIM_Base_SetConfig+0xf8>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a12      	ldr	r2, [pc, #72]	; (8005d50 <TIM_Base_SetConfig+0x124>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00b      	beq.n	8005d24 <TIM_Base_SetConfig+0xf8>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a11      	ldr	r2, [pc, #68]	; (8005d54 <TIM_Base_SetConfig+0x128>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d007      	beq.n	8005d24 <TIM_Base_SetConfig+0xf8>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a10      	ldr	r2, [pc, #64]	; (8005d58 <TIM_Base_SetConfig+0x12c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_Base_SetConfig+0xf8>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a0f      	ldr	r2, [pc, #60]	; (8005d5c <TIM_Base_SetConfig+0x130>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d103      	bne.n	8005d2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	615a      	str	r2, [r3, #20]
}
 8005d32:	bf00      	nop
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40012c00 	.word	0x40012c00
 8005d44:	40000400 	.word	0x40000400
 8005d48:	40000800 	.word	0x40000800
 8005d4c:	40000c00 	.word	0x40000c00
 8005d50:	40013400 	.word	0x40013400
 8005d54:	40014000 	.word	0x40014000
 8005d58:	40014400 	.word	0x40014400
 8005d5c:	40014800 	.word	0x40014800

08005d60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	f023 0201 	bic.w	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f023 030a 	bic.w	r3, r3, #10
 8005d9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	621a      	str	r2, [r3, #32]
}
 8005db2:	bf00      	nop
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b087      	sub	sp, #28
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	f023 0210 	bic.w	r2, r3, #16
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005de8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	031b      	lsls	r3, r3, #12
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	bf00      	nop
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b085      	sub	sp, #20
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f043 0307 	orr.w	r3, r3, #7
 8005e40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	609a      	str	r2, [r3, #8]
}
 8005e48:	bf00      	nop
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	021a      	lsls	r2, r3, #8
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	431a      	orrs	r2, r3
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	609a      	str	r2, [r3, #8]
}
 8005e88:	bf00      	nop
 8005e8a:	371c      	adds	r7, #28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d101      	bne.n	8005eac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	e068      	b.n	8005f7e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a2e      	ldr	r2, [pc, #184]	; (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d004      	beq.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a2d      	ldr	r2, [pc, #180]	; (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d108      	bne.n	8005ef2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ee6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a1e      	ldr	r2, [pc, #120]	; (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d01d      	beq.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f1e:	d018      	beq.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a1b      	ldr	r2, [pc, #108]	; (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d013      	beq.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a1a      	ldr	r2, [pc, #104]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00e      	beq.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a18      	ldr	r2, [pc, #96]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d009      	beq.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a13      	ldr	r2, [pc, #76]	; (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d004      	beq.n	8005f52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a14      	ldr	r2, [pc, #80]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d10c      	bne.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40012c00 	.word	0x40012c00
 8005f90:	40013400 	.word	0x40013400
 8005f94:	40000400 	.word	0x40000400
 8005f98:	40000800 	.word	0x40000800
 8005f9c:	40000c00 	.word	0x40000c00
 8005fa0:	40014000 	.word	0x40014000

08005fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e040      	b.n	8006074 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d106      	bne.n	8006008 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fb f9c4 	bl	8001390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2224      	movs	r2, #36	; 0x24
 800600c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0201 	bic.w	r2, r2, #1
 800601c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fb6a 	bl	8006700 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f8af 	bl	8006190 <UART_SetConfig>
 8006032:	4603      	mov	r3, r0
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e01b      	b.n	8006074 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800604a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689a      	ldr	r2, [r3, #8]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800605a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fbe9 	bl	8006844 <UART_CheckIdleState>
 8006072:	4603      	mov	r3, r0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08a      	sub	sp, #40	; 0x28
 8006080:	af02      	add	r7, sp, #8
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	4613      	mov	r3, r2
 800608a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006090:	2b20      	cmp	r3, #32
 8006092:	d178      	bne.n	8006186 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <HAL_UART_Transmit+0x24>
 800609a:	88fb      	ldrh	r3, [r7, #6]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e071      	b.n	8006188 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2221      	movs	r2, #33	; 0x21
 80060b0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060b2:	f7fb fb95 	bl	80017e0 <HAL_GetTick>
 80060b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	88fa      	ldrh	r2, [r7, #6]
 80060bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	88fa      	ldrh	r2, [r7, #6]
 80060c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d0:	d108      	bne.n	80060e4 <HAL_UART_Transmit+0x68>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d104      	bne.n	80060e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	61bb      	str	r3, [r7, #24]
 80060e2:	e003      	b.n	80060ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060ec:	e030      	b.n	8006150 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2200      	movs	r2, #0
 80060f6:	2180      	movs	r1, #128	; 0x80
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 fc4b 	bl	8006994 <UART_WaitOnFlagUntilTimeout>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d004      	beq.n	800610e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2220      	movs	r2, #32
 8006108:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e03c      	b.n	8006188 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10b      	bne.n	800612c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	881a      	ldrh	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006120:	b292      	uxth	r2, r2
 8006122:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	3302      	adds	r3, #2
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	e008      	b.n	800613e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	781a      	ldrb	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	b292      	uxth	r2, r2
 8006136:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	3301      	adds	r3, #1
 800613c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006144:	b29b      	uxth	r3, r3
 8006146:	3b01      	subs	r3, #1
 8006148:	b29a      	uxth	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1c8      	bne.n	80060ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	2200      	movs	r2, #0
 8006164:	2140      	movs	r1, #64	; 0x40
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 fc14 	bl	8006994 <UART_WaitOnFlagUntilTimeout>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d004      	beq.n	800617c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2220      	movs	r2, #32
 8006176:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e005      	b.n	8006188 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2220      	movs	r2, #32
 8006180:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	e000      	b.n	8006188 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006186:	2302      	movs	r3, #2
  }
}
 8006188:	4618      	mov	r0, r3
 800618a:	3720      	adds	r7, #32
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006194:	b08a      	sub	sp, #40	; 0x28
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	431a      	orrs	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	431a      	orrs	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	69db      	ldr	r3, [r3, #28]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	4ba4      	ldr	r3, [pc, #656]	; (8006450 <UART_SetConfig+0x2c0>)
 80061c0:	4013      	ands	r3, r2
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	6812      	ldr	r2, [r2, #0]
 80061c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061c8:	430b      	orrs	r3, r1
 80061ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a99      	ldr	r2, [pc, #612]	; (8006454 <UART_SetConfig+0x2c4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d004      	beq.n	80061fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f8:	4313      	orrs	r3, r2
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800620c:	430a      	orrs	r2, r1
 800620e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a90      	ldr	r2, [pc, #576]	; (8006458 <UART_SetConfig+0x2c8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d126      	bne.n	8006268 <UART_SetConfig+0xd8>
 800621a:	4b90      	ldr	r3, [pc, #576]	; (800645c <UART_SetConfig+0x2cc>)
 800621c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	2b03      	cmp	r3, #3
 8006226:	d81b      	bhi.n	8006260 <UART_SetConfig+0xd0>
 8006228:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <UART_SetConfig+0xa0>)
 800622a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622e:	bf00      	nop
 8006230:	08006241 	.word	0x08006241
 8006234:	08006251 	.word	0x08006251
 8006238:	08006249 	.word	0x08006249
 800623c:	08006259 	.word	0x08006259
 8006240:	2301      	movs	r3, #1
 8006242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006246:	e116      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006248:	2302      	movs	r3, #2
 800624a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800624e:	e112      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006250:	2304      	movs	r3, #4
 8006252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006256:	e10e      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006258:	2308      	movs	r3, #8
 800625a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800625e:	e10a      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006260:	2310      	movs	r3, #16
 8006262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006266:	e106      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a7c      	ldr	r2, [pc, #496]	; (8006460 <UART_SetConfig+0x2d0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d138      	bne.n	80062e4 <UART_SetConfig+0x154>
 8006272:	4b7a      	ldr	r3, [pc, #488]	; (800645c <UART_SetConfig+0x2cc>)
 8006274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006278:	f003 030c 	and.w	r3, r3, #12
 800627c:	2b0c      	cmp	r3, #12
 800627e:	d82d      	bhi.n	80062dc <UART_SetConfig+0x14c>
 8006280:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <UART_SetConfig+0xf8>)
 8006282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006286:	bf00      	nop
 8006288:	080062bd 	.word	0x080062bd
 800628c:	080062dd 	.word	0x080062dd
 8006290:	080062dd 	.word	0x080062dd
 8006294:	080062dd 	.word	0x080062dd
 8006298:	080062cd 	.word	0x080062cd
 800629c:	080062dd 	.word	0x080062dd
 80062a0:	080062dd 	.word	0x080062dd
 80062a4:	080062dd 	.word	0x080062dd
 80062a8:	080062c5 	.word	0x080062c5
 80062ac:	080062dd 	.word	0x080062dd
 80062b0:	080062dd 	.word	0x080062dd
 80062b4:	080062dd 	.word	0x080062dd
 80062b8:	080062d5 	.word	0x080062d5
 80062bc:	2300      	movs	r3, #0
 80062be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062c2:	e0d8      	b.n	8006476 <UART_SetConfig+0x2e6>
 80062c4:	2302      	movs	r3, #2
 80062c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ca:	e0d4      	b.n	8006476 <UART_SetConfig+0x2e6>
 80062cc:	2304      	movs	r3, #4
 80062ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062d2:	e0d0      	b.n	8006476 <UART_SetConfig+0x2e6>
 80062d4:	2308      	movs	r3, #8
 80062d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062da:	e0cc      	b.n	8006476 <UART_SetConfig+0x2e6>
 80062dc:	2310      	movs	r3, #16
 80062de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062e2:	e0c8      	b.n	8006476 <UART_SetConfig+0x2e6>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a5e      	ldr	r2, [pc, #376]	; (8006464 <UART_SetConfig+0x2d4>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d125      	bne.n	800633a <UART_SetConfig+0x1aa>
 80062ee:	4b5b      	ldr	r3, [pc, #364]	; (800645c <UART_SetConfig+0x2cc>)
 80062f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062f8:	2b30      	cmp	r3, #48	; 0x30
 80062fa:	d016      	beq.n	800632a <UART_SetConfig+0x19a>
 80062fc:	2b30      	cmp	r3, #48	; 0x30
 80062fe:	d818      	bhi.n	8006332 <UART_SetConfig+0x1a2>
 8006300:	2b20      	cmp	r3, #32
 8006302:	d00a      	beq.n	800631a <UART_SetConfig+0x18a>
 8006304:	2b20      	cmp	r3, #32
 8006306:	d814      	bhi.n	8006332 <UART_SetConfig+0x1a2>
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <UART_SetConfig+0x182>
 800630c:	2b10      	cmp	r3, #16
 800630e:	d008      	beq.n	8006322 <UART_SetConfig+0x192>
 8006310:	e00f      	b.n	8006332 <UART_SetConfig+0x1a2>
 8006312:	2300      	movs	r3, #0
 8006314:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006318:	e0ad      	b.n	8006476 <UART_SetConfig+0x2e6>
 800631a:	2302      	movs	r3, #2
 800631c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006320:	e0a9      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006322:	2304      	movs	r3, #4
 8006324:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006328:	e0a5      	b.n	8006476 <UART_SetConfig+0x2e6>
 800632a:	2308      	movs	r3, #8
 800632c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006330:	e0a1      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006332:	2310      	movs	r3, #16
 8006334:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006338:	e09d      	b.n	8006476 <UART_SetConfig+0x2e6>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a4a      	ldr	r2, [pc, #296]	; (8006468 <UART_SetConfig+0x2d8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d125      	bne.n	8006390 <UART_SetConfig+0x200>
 8006344:	4b45      	ldr	r3, [pc, #276]	; (800645c <UART_SetConfig+0x2cc>)
 8006346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800634e:	2bc0      	cmp	r3, #192	; 0xc0
 8006350:	d016      	beq.n	8006380 <UART_SetConfig+0x1f0>
 8006352:	2bc0      	cmp	r3, #192	; 0xc0
 8006354:	d818      	bhi.n	8006388 <UART_SetConfig+0x1f8>
 8006356:	2b80      	cmp	r3, #128	; 0x80
 8006358:	d00a      	beq.n	8006370 <UART_SetConfig+0x1e0>
 800635a:	2b80      	cmp	r3, #128	; 0x80
 800635c:	d814      	bhi.n	8006388 <UART_SetConfig+0x1f8>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <UART_SetConfig+0x1d8>
 8006362:	2b40      	cmp	r3, #64	; 0x40
 8006364:	d008      	beq.n	8006378 <UART_SetConfig+0x1e8>
 8006366:	e00f      	b.n	8006388 <UART_SetConfig+0x1f8>
 8006368:	2300      	movs	r3, #0
 800636a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800636e:	e082      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006370:	2302      	movs	r3, #2
 8006372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006376:	e07e      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006378:	2304      	movs	r3, #4
 800637a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800637e:	e07a      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006380:	2308      	movs	r3, #8
 8006382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006386:	e076      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006388:	2310      	movs	r3, #16
 800638a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800638e:	e072      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a35      	ldr	r2, [pc, #212]	; (800646c <UART_SetConfig+0x2dc>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d12a      	bne.n	80063f0 <UART_SetConfig+0x260>
 800639a:	4b30      	ldr	r3, [pc, #192]	; (800645c <UART_SetConfig+0x2cc>)
 800639c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063a8:	d01a      	beq.n	80063e0 <UART_SetConfig+0x250>
 80063aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063ae:	d81b      	bhi.n	80063e8 <UART_SetConfig+0x258>
 80063b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b4:	d00c      	beq.n	80063d0 <UART_SetConfig+0x240>
 80063b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ba:	d815      	bhi.n	80063e8 <UART_SetConfig+0x258>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <UART_SetConfig+0x238>
 80063c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c4:	d008      	beq.n	80063d8 <UART_SetConfig+0x248>
 80063c6:	e00f      	b.n	80063e8 <UART_SetConfig+0x258>
 80063c8:	2300      	movs	r3, #0
 80063ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ce:	e052      	b.n	8006476 <UART_SetConfig+0x2e6>
 80063d0:	2302      	movs	r3, #2
 80063d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063d6:	e04e      	b.n	8006476 <UART_SetConfig+0x2e6>
 80063d8:	2304      	movs	r3, #4
 80063da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063de:	e04a      	b.n	8006476 <UART_SetConfig+0x2e6>
 80063e0:	2308      	movs	r3, #8
 80063e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063e6:	e046      	b.n	8006476 <UART_SetConfig+0x2e6>
 80063e8:	2310      	movs	r3, #16
 80063ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ee:	e042      	b.n	8006476 <UART_SetConfig+0x2e6>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a17      	ldr	r2, [pc, #92]	; (8006454 <UART_SetConfig+0x2c4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d13a      	bne.n	8006470 <UART_SetConfig+0x2e0>
 80063fa:	4b18      	ldr	r3, [pc, #96]	; (800645c <UART_SetConfig+0x2cc>)
 80063fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006400:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006404:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006408:	d01a      	beq.n	8006440 <UART_SetConfig+0x2b0>
 800640a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800640e:	d81b      	bhi.n	8006448 <UART_SetConfig+0x2b8>
 8006410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006414:	d00c      	beq.n	8006430 <UART_SetConfig+0x2a0>
 8006416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800641a:	d815      	bhi.n	8006448 <UART_SetConfig+0x2b8>
 800641c:	2b00      	cmp	r3, #0
 800641e:	d003      	beq.n	8006428 <UART_SetConfig+0x298>
 8006420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006424:	d008      	beq.n	8006438 <UART_SetConfig+0x2a8>
 8006426:	e00f      	b.n	8006448 <UART_SetConfig+0x2b8>
 8006428:	2300      	movs	r3, #0
 800642a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800642e:	e022      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006430:	2302      	movs	r3, #2
 8006432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006436:	e01e      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006438:	2304      	movs	r3, #4
 800643a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800643e:	e01a      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006440:	2308      	movs	r3, #8
 8006442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006446:	e016      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006448:	2310      	movs	r3, #16
 800644a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800644e:	e012      	b.n	8006476 <UART_SetConfig+0x2e6>
 8006450:	efff69f3 	.word	0xefff69f3
 8006454:	40008000 	.word	0x40008000
 8006458:	40013800 	.word	0x40013800
 800645c:	40021000 	.word	0x40021000
 8006460:	40004400 	.word	0x40004400
 8006464:	40004800 	.word	0x40004800
 8006468:	40004c00 	.word	0x40004c00
 800646c:	40005000 	.word	0x40005000
 8006470:	2310      	movs	r3, #16
 8006472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a9f      	ldr	r2, [pc, #636]	; (80066f8 <UART_SetConfig+0x568>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d17a      	bne.n	8006576 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006480:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006484:	2b08      	cmp	r3, #8
 8006486:	d824      	bhi.n	80064d2 <UART_SetConfig+0x342>
 8006488:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <UART_SetConfig+0x300>)
 800648a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648e:	bf00      	nop
 8006490:	080064b5 	.word	0x080064b5
 8006494:	080064d3 	.word	0x080064d3
 8006498:	080064bd 	.word	0x080064bd
 800649c:	080064d3 	.word	0x080064d3
 80064a0:	080064c3 	.word	0x080064c3
 80064a4:	080064d3 	.word	0x080064d3
 80064a8:	080064d3 	.word	0x080064d3
 80064ac:	080064d3 	.word	0x080064d3
 80064b0:	080064cb 	.word	0x080064cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b4:	f7fe fbb6 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 80064b8:	61f8      	str	r0, [r7, #28]
        break;
 80064ba:	e010      	b.n	80064de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064bc:	4b8f      	ldr	r3, [pc, #572]	; (80066fc <UART_SetConfig+0x56c>)
 80064be:	61fb      	str	r3, [r7, #28]
        break;
 80064c0:	e00d      	b.n	80064de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064c2:	f7fe fb17 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 80064c6:	61f8      	str	r0, [r7, #28]
        break;
 80064c8:	e009      	b.n	80064de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ce:	61fb      	str	r3, [r7, #28]
        break;
 80064d0:	e005      	b.n	80064de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80064dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 80fb 	beq.w	80066dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	4613      	mov	r3, r2
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	4413      	add	r3, r2
 80064f0:	69fa      	ldr	r2, [r7, #28]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d305      	bcc.n	8006502 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064fc:	69fa      	ldr	r2, [r7, #28]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d903      	bls.n	800650a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006508:	e0e8      	b.n	80066dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	2200      	movs	r2, #0
 800650e:	461c      	mov	r4, r3
 8006510:	4615      	mov	r5, r2
 8006512:	f04f 0200 	mov.w	r2, #0
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	022b      	lsls	r3, r5, #8
 800651c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006520:	0222      	lsls	r2, r4, #8
 8006522:	68f9      	ldr	r1, [r7, #12]
 8006524:	6849      	ldr	r1, [r1, #4]
 8006526:	0849      	lsrs	r1, r1, #1
 8006528:	2000      	movs	r0, #0
 800652a:	4688      	mov	r8, r1
 800652c:	4681      	mov	r9, r0
 800652e:	eb12 0a08 	adds.w	sl, r2, r8
 8006532:	eb43 0b09 	adc.w	fp, r3, r9
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	603b      	str	r3, [r7, #0]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006544:	4650      	mov	r0, sl
 8006546:	4659      	mov	r1, fp
 8006548:	f7f9 fe92 	bl	8000270 <__aeabi_uldivmod>
 800654c:	4602      	mov	r2, r0
 800654e:	460b      	mov	r3, r1
 8006550:	4613      	mov	r3, r2
 8006552:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800655a:	d308      	bcc.n	800656e <UART_SetConfig+0x3de>
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006562:	d204      	bcs.n	800656e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	60da      	str	r2, [r3, #12]
 800656c:	e0b6      	b.n	80066dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006574:	e0b2      	b.n	80066dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800657e:	d15e      	bne.n	800663e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006580:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006584:	2b08      	cmp	r3, #8
 8006586:	d828      	bhi.n	80065da <UART_SetConfig+0x44a>
 8006588:	a201      	add	r2, pc, #4	; (adr r2, 8006590 <UART_SetConfig+0x400>)
 800658a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658e:	bf00      	nop
 8006590:	080065b5 	.word	0x080065b5
 8006594:	080065bd 	.word	0x080065bd
 8006598:	080065c5 	.word	0x080065c5
 800659c:	080065db 	.word	0x080065db
 80065a0:	080065cb 	.word	0x080065cb
 80065a4:	080065db 	.word	0x080065db
 80065a8:	080065db 	.word	0x080065db
 80065ac:	080065db 	.word	0x080065db
 80065b0:	080065d3 	.word	0x080065d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065b4:	f7fe fb36 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 80065b8:	61f8      	str	r0, [r7, #28]
        break;
 80065ba:	e014      	b.n	80065e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065bc:	f7fe fb48 	bl	8004c50 <HAL_RCC_GetPCLK2Freq>
 80065c0:	61f8      	str	r0, [r7, #28]
        break;
 80065c2:	e010      	b.n	80065e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065c4:	4b4d      	ldr	r3, [pc, #308]	; (80066fc <UART_SetConfig+0x56c>)
 80065c6:	61fb      	str	r3, [r7, #28]
        break;
 80065c8:	e00d      	b.n	80065e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ca:	f7fe fa93 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 80065ce:	61f8      	str	r0, [r7, #28]
        break;
 80065d0:	e009      	b.n	80065e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065d6:	61fb      	str	r3, [r7, #28]
        break;
 80065d8:	e005      	b.n	80065e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d077      	beq.n	80066dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	005a      	lsls	r2, r3, #1
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	085b      	lsrs	r3, r3, #1
 80065f6:	441a      	add	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006600:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	2b0f      	cmp	r3, #15
 8006606:	d916      	bls.n	8006636 <UART_SetConfig+0x4a6>
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800660e:	d212      	bcs.n	8006636 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	b29b      	uxth	r3, r3
 8006614:	f023 030f 	bic.w	r3, r3, #15
 8006618:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	085b      	lsrs	r3, r3, #1
 800661e:	b29b      	uxth	r3, r3
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	b29a      	uxth	r2, r3
 8006626:	8afb      	ldrh	r3, [r7, #22]
 8006628:	4313      	orrs	r3, r2
 800662a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	8afa      	ldrh	r2, [r7, #22]
 8006632:	60da      	str	r2, [r3, #12]
 8006634:	e052      	b.n	80066dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800663c:	e04e      	b.n	80066dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800663e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006642:	2b08      	cmp	r3, #8
 8006644:	d827      	bhi.n	8006696 <UART_SetConfig+0x506>
 8006646:	a201      	add	r2, pc, #4	; (adr r2, 800664c <UART_SetConfig+0x4bc>)
 8006648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664c:	08006671 	.word	0x08006671
 8006650:	08006679 	.word	0x08006679
 8006654:	08006681 	.word	0x08006681
 8006658:	08006697 	.word	0x08006697
 800665c:	08006687 	.word	0x08006687
 8006660:	08006697 	.word	0x08006697
 8006664:	08006697 	.word	0x08006697
 8006668:	08006697 	.word	0x08006697
 800666c:	0800668f 	.word	0x0800668f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006670:	f7fe fad8 	bl	8004c24 <HAL_RCC_GetPCLK1Freq>
 8006674:	61f8      	str	r0, [r7, #28]
        break;
 8006676:	e014      	b.n	80066a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006678:	f7fe faea 	bl	8004c50 <HAL_RCC_GetPCLK2Freq>
 800667c:	61f8      	str	r0, [r7, #28]
        break;
 800667e:	e010      	b.n	80066a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006680:	4b1e      	ldr	r3, [pc, #120]	; (80066fc <UART_SetConfig+0x56c>)
 8006682:	61fb      	str	r3, [r7, #28]
        break;
 8006684:	e00d      	b.n	80066a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006686:	f7fe fa35 	bl	8004af4 <HAL_RCC_GetSysClockFreq>
 800668a:	61f8      	str	r0, [r7, #28]
        break;
 800668c:	e009      	b.n	80066a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800668e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006692:	61fb      	str	r3, [r7, #28]
        break;
 8006694:	e005      	b.n	80066a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80066a0:	bf00      	nop
    }

    if (pclk != 0U)
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d019      	beq.n	80066dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	085a      	lsrs	r2, r3, #1
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	441a      	add	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	2b0f      	cmp	r3, #15
 80066c0:	d909      	bls.n	80066d6 <UART_SetConfig+0x546>
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066c8:	d205      	bcs.n	80066d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	60da      	str	r2, [r3, #12]
 80066d4:	e002      	b.n	80066dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80066e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3728      	adds	r7, #40	; 0x28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066f6:	bf00      	nop
 80066f8:	40008000 	.word	0x40008000
 80066fc:	00f42400 	.word	0x00f42400

08006700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	f003 0308 	and.w	r3, r3, #8
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00a      	beq.n	800672a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00a      	beq.n	800676e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	f003 0304 	and.w	r3, r3, #4
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	f003 0310 	and.w	r3, r3, #16
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00a      	beq.n	80067b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	f003 0320 	and.w	r3, r3, #32
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01a      	beq.n	8006816 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067fe:	d10a      	bne.n	8006816 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00a      	beq.n	8006838 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	605a      	str	r2, [r3, #4]
  }
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b098      	sub	sp, #96	; 0x60
 8006848:	af02      	add	r7, sp, #8
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006854:	f7fa ffc4 	bl	80017e0 <HAL_GetTick>
 8006858:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0308 	and.w	r3, r3, #8
 8006864:	2b08      	cmp	r3, #8
 8006866:	d12e      	bne.n	80068c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006870:	2200      	movs	r2, #0
 8006872:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f88c 	bl	8006994 <UART_WaitOnFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d021      	beq.n	80068c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688a:	e853 3f00 	ldrex	r3, [r3]
 800688e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006896:	653b      	str	r3, [r7, #80]	; 0x50
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a0:	647b      	str	r3, [r7, #68]	; 0x44
 80068a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068a8:	e841 2300 	strex	r3, r2, [r1]
 80068ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1e6      	bne.n	8006882 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2220      	movs	r2, #32
 80068b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e062      	b.n	800698c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0304 	and.w	r3, r3, #4
 80068d0:	2b04      	cmp	r3, #4
 80068d2:	d149      	bne.n	8006968 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068dc:	2200      	movs	r2, #0
 80068de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f856 	bl	8006994 <UART_WaitOnFlagUntilTimeout>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d03c      	beq.n	8006968 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	e853 3f00 	ldrex	r3, [r3]
 80068fa:	623b      	str	r3, [r7, #32]
   return(result);
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	461a      	mov	r2, r3
 800690a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800690c:	633b      	str	r3, [r7, #48]	; 0x30
 800690e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e6      	bne.n	80068ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	3308      	adds	r3, #8
 8006926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0301 	bic.w	r3, r3, #1
 8006936:	64bb      	str	r3, [r7, #72]	; 0x48
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3308      	adds	r3, #8
 800693e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006940:	61fa      	str	r2, [r7, #28]
 8006942:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	69b9      	ldr	r1, [r7, #24]
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	617b      	str	r3, [r7, #20]
   return(result);
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e5      	bne.n	8006920 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e011      	b.n	800698c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2220      	movs	r2, #32
 800696c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2220      	movs	r2, #32
 8006972:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3758      	adds	r7, #88	; 0x58
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	603b      	str	r3, [r7, #0]
 80069a0:	4613      	mov	r3, r2
 80069a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069a4:	e049      	b.n	8006a3a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ac:	d045      	beq.n	8006a3a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ae:	f7fa ff17 	bl	80017e0 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d302      	bcc.n	80069c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e048      	b.n	8006a5a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0304 	and.w	r3, r3, #4
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d031      	beq.n	8006a3a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d110      	bne.n	8006a06 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2208      	movs	r2, #8
 80069ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 f838 	bl	8006a62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2208      	movs	r2, #8
 80069f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e029      	b.n	8006a5a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a14:	d111      	bne.n	8006a3a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 f81e 	bl	8006a62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e00f      	b.n	8006a5a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69da      	ldr	r2, [r3, #28]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	4013      	ands	r3, r2
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	bf0c      	ite	eq
 8006a4a:	2301      	moveq	r3, #1
 8006a4c:	2300      	movne	r3, #0
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	461a      	mov	r2, r3
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d0a6      	beq.n	80069a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b095      	sub	sp, #84	; 0x54
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a72:	e853 3f00 	ldrex	r3, [r3]
 8006a76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	461a      	mov	r2, r3
 8006a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a88:	643b      	str	r3, [r7, #64]	; 0x40
 8006a8a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a90:	e841 2300 	strex	r3, r2, [r1]
 8006a94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e6      	bne.n	8006a6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f023 0301 	bic.w	r3, r3, #1
 8006ab2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3308      	adds	r3, #8
 8006aba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006abc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006abe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ac4:	e841 2300 	strex	r3, r2, [r1]
 8006ac8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1e5      	bne.n	8006a9c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d118      	bne.n	8006b0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	f023 0310 	bic.w	r3, r3, #16
 8006aec:	647b      	str	r3, [r7, #68]	; 0x44
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af6:	61bb      	str	r3, [r7, #24]
 8006af8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	6979      	ldr	r1, [r7, #20]
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	e841 2300 	strex	r3, r2, [r1]
 8006b02:	613b      	str	r3, [r7, #16]
   return(result);
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1e6      	bne.n	8006ad8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006b1e:	bf00      	nop
 8006b20:	3754      	adds	r7, #84	; 0x54
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
	...

08006b2c <std>:
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	b510      	push	{r4, lr}
 8006b30:	4604      	mov	r4, r0
 8006b32:	e9c0 3300 	strd	r3, r3, [r0]
 8006b36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b3a:	6083      	str	r3, [r0, #8]
 8006b3c:	8181      	strh	r1, [r0, #12]
 8006b3e:	6643      	str	r3, [r0, #100]	; 0x64
 8006b40:	81c2      	strh	r2, [r0, #14]
 8006b42:	6183      	str	r3, [r0, #24]
 8006b44:	4619      	mov	r1, r3
 8006b46:	2208      	movs	r2, #8
 8006b48:	305c      	adds	r0, #92	; 0x5c
 8006b4a:	f000 f906 	bl	8006d5a <memset>
 8006b4e:	4b0d      	ldr	r3, [pc, #52]	; (8006b84 <std+0x58>)
 8006b50:	6263      	str	r3, [r4, #36]	; 0x24
 8006b52:	4b0d      	ldr	r3, [pc, #52]	; (8006b88 <std+0x5c>)
 8006b54:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b56:	4b0d      	ldr	r3, [pc, #52]	; (8006b8c <std+0x60>)
 8006b58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b5a:	4b0d      	ldr	r3, [pc, #52]	; (8006b90 <std+0x64>)
 8006b5c:	6323      	str	r3, [r4, #48]	; 0x30
 8006b5e:	4b0d      	ldr	r3, [pc, #52]	; (8006b94 <std+0x68>)
 8006b60:	6224      	str	r4, [r4, #32]
 8006b62:	429c      	cmp	r4, r3
 8006b64:	d006      	beq.n	8006b74 <std+0x48>
 8006b66:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006b6a:	4294      	cmp	r4, r2
 8006b6c:	d002      	beq.n	8006b74 <std+0x48>
 8006b6e:	33d0      	adds	r3, #208	; 0xd0
 8006b70:	429c      	cmp	r4, r3
 8006b72:	d105      	bne.n	8006b80 <std+0x54>
 8006b74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b7c:	f000 b966 	b.w	8006e4c <__retarget_lock_init_recursive>
 8006b80:	bd10      	pop	{r4, pc}
 8006b82:	bf00      	nop
 8006b84:	08006cd5 	.word	0x08006cd5
 8006b88:	08006cf7 	.word	0x08006cf7
 8006b8c:	08006d2f 	.word	0x08006d2f
 8006b90:	08006d53 	.word	0x08006d53
 8006b94:	20000a90 	.word	0x20000a90

08006b98 <stdio_exit_handler>:
 8006b98:	4a02      	ldr	r2, [pc, #8]	; (8006ba4 <stdio_exit_handler+0xc>)
 8006b9a:	4903      	ldr	r1, [pc, #12]	; (8006ba8 <stdio_exit_handler+0x10>)
 8006b9c:	4803      	ldr	r0, [pc, #12]	; (8006bac <stdio_exit_handler+0x14>)
 8006b9e:	f000 b869 	b.w	8006c74 <_fwalk_sglue>
 8006ba2:	bf00      	nop
 8006ba4:	20000010 	.word	0x20000010
 8006ba8:	080076f9 	.word	0x080076f9
 8006bac:	2000001c 	.word	0x2000001c

08006bb0 <cleanup_stdio>:
 8006bb0:	6841      	ldr	r1, [r0, #4]
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <cleanup_stdio+0x34>)
 8006bb4:	4299      	cmp	r1, r3
 8006bb6:	b510      	push	{r4, lr}
 8006bb8:	4604      	mov	r4, r0
 8006bba:	d001      	beq.n	8006bc0 <cleanup_stdio+0x10>
 8006bbc:	f000 fd9c 	bl	80076f8 <_fflush_r>
 8006bc0:	68a1      	ldr	r1, [r4, #8]
 8006bc2:	4b09      	ldr	r3, [pc, #36]	; (8006be8 <cleanup_stdio+0x38>)
 8006bc4:	4299      	cmp	r1, r3
 8006bc6:	d002      	beq.n	8006bce <cleanup_stdio+0x1e>
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f000 fd95 	bl	80076f8 <_fflush_r>
 8006bce:	68e1      	ldr	r1, [r4, #12]
 8006bd0:	4b06      	ldr	r3, [pc, #24]	; (8006bec <cleanup_stdio+0x3c>)
 8006bd2:	4299      	cmp	r1, r3
 8006bd4:	d004      	beq.n	8006be0 <cleanup_stdio+0x30>
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bdc:	f000 bd8c 	b.w	80076f8 <_fflush_r>
 8006be0:	bd10      	pop	{r4, pc}
 8006be2:	bf00      	nop
 8006be4:	20000a90 	.word	0x20000a90
 8006be8:	20000af8 	.word	0x20000af8
 8006bec:	20000b60 	.word	0x20000b60

08006bf0 <global_stdio_init.part.0>:
 8006bf0:	b510      	push	{r4, lr}
 8006bf2:	4b0b      	ldr	r3, [pc, #44]	; (8006c20 <global_stdio_init.part.0+0x30>)
 8006bf4:	4c0b      	ldr	r4, [pc, #44]	; (8006c24 <global_stdio_init.part.0+0x34>)
 8006bf6:	4a0c      	ldr	r2, [pc, #48]	; (8006c28 <global_stdio_init.part.0+0x38>)
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	2104      	movs	r1, #4
 8006c00:	f7ff ff94 	bl	8006b2c <std>
 8006c04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006c08:	2201      	movs	r2, #1
 8006c0a:	2109      	movs	r1, #9
 8006c0c:	f7ff ff8e 	bl	8006b2c <std>
 8006c10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006c14:	2202      	movs	r2, #2
 8006c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c1a:	2112      	movs	r1, #18
 8006c1c:	f7ff bf86 	b.w	8006b2c <std>
 8006c20:	20000bc8 	.word	0x20000bc8
 8006c24:	20000a90 	.word	0x20000a90
 8006c28:	08006b99 	.word	0x08006b99

08006c2c <__sfp_lock_acquire>:
 8006c2c:	4801      	ldr	r0, [pc, #4]	; (8006c34 <__sfp_lock_acquire+0x8>)
 8006c2e:	f000 b90e 	b.w	8006e4e <__retarget_lock_acquire_recursive>
 8006c32:	bf00      	nop
 8006c34:	20000bd1 	.word	0x20000bd1

08006c38 <__sfp_lock_release>:
 8006c38:	4801      	ldr	r0, [pc, #4]	; (8006c40 <__sfp_lock_release+0x8>)
 8006c3a:	f000 b909 	b.w	8006e50 <__retarget_lock_release_recursive>
 8006c3e:	bf00      	nop
 8006c40:	20000bd1 	.word	0x20000bd1

08006c44 <__sinit>:
 8006c44:	b510      	push	{r4, lr}
 8006c46:	4604      	mov	r4, r0
 8006c48:	f7ff fff0 	bl	8006c2c <__sfp_lock_acquire>
 8006c4c:	6a23      	ldr	r3, [r4, #32]
 8006c4e:	b11b      	cbz	r3, 8006c58 <__sinit+0x14>
 8006c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c54:	f7ff bff0 	b.w	8006c38 <__sfp_lock_release>
 8006c58:	4b04      	ldr	r3, [pc, #16]	; (8006c6c <__sinit+0x28>)
 8006c5a:	6223      	str	r3, [r4, #32]
 8006c5c:	4b04      	ldr	r3, [pc, #16]	; (8006c70 <__sinit+0x2c>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1f5      	bne.n	8006c50 <__sinit+0xc>
 8006c64:	f7ff ffc4 	bl	8006bf0 <global_stdio_init.part.0>
 8006c68:	e7f2      	b.n	8006c50 <__sinit+0xc>
 8006c6a:	bf00      	nop
 8006c6c:	08006bb1 	.word	0x08006bb1
 8006c70:	20000bc8 	.word	0x20000bc8

08006c74 <_fwalk_sglue>:
 8006c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c78:	4607      	mov	r7, r0
 8006c7a:	4688      	mov	r8, r1
 8006c7c:	4614      	mov	r4, r2
 8006c7e:	2600      	movs	r6, #0
 8006c80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c84:	f1b9 0901 	subs.w	r9, r9, #1
 8006c88:	d505      	bpl.n	8006c96 <_fwalk_sglue+0x22>
 8006c8a:	6824      	ldr	r4, [r4, #0]
 8006c8c:	2c00      	cmp	r4, #0
 8006c8e:	d1f7      	bne.n	8006c80 <_fwalk_sglue+0xc>
 8006c90:	4630      	mov	r0, r6
 8006c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c96:	89ab      	ldrh	r3, [r5, #12]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d907      	bls.n	8006cac <_fwalk_sglue+0x38>
 8006c9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	d003      	beq.n	8006cac <_fwalk_sglue+0x38>
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	4638      	mov	r0, r7
 8006ca8:	47c0      	blx	r8
 8006caa:	4306      	orrs	r6, r0
 8006cac:	3568      	adds	r5, #104	; 0x68
 8006cae:	e7e9      	b.n	8006c84 <_fwalk_sglue+0x10>

08006cb0 <iprintf>:
 8006cb0:	b40f      	push	{r0, r1, r2, r3}
 8006cb2:	b507      	push	{r0, r1, r2, lr}
 8006cb4:	4906      	ldr	r1, [pc, #24]	; (8006cd0 <iprintf+0x20>)
 8006cb6:	ab04      	add	r3, sp, #16
 8006cb8:	6808      	ldr	r0, [r1, #0]
 8006cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cbe:	6881      	ldr	r1, [r0, #8]
 8006cc0:	9301      	str	r3, [sp, #4]
 8006cc2:	f000 f9e9 	bl	8007098 <_vfiprintf_r>
 8006cc6:	b003      	add	sp, #12
 8006cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ccc:	b004      	add	sp, #16
 8006cce:	4770      	bx	lr
 8006cd0:	20000068 	.word	0x20000068

08006cd4 <__sread>:
 8006cd4:	b510      	push	{r4, lr}
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cdc:	f000 f868 	bl	8006db0 <_read_r>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	bfab      	itete	ge
 8006ce4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ce6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ce8:	181b      	addge	r3, r3, r0
 8006cea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cee:	bfac      	ite	ge
 8006cf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cf2:	81a3      	strhlt	r3, [r4, #12]
 8006cf4:	bd10      	pop	{r4, pc}

08006cf6 <__swrite>:
 8006cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cfa:	461f      	mov	r7, r3
 8006cfc:	898b      	ldrh	r3, [r1, #12]
 8006cfe:	05db      	lsls	r3, r3, #23
 8006d00:	4605      	mov	r5, r0
 8006d02:	460c      	mov	r4, r1
 8006d04:	4616      	mov	r6, r2
 8006d06:	d505      	bpl.n	8006d14 <__swrite+0x1e>
 8006d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f000 f83c 	bl	8006d8c <_lseek_r>
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d1e:	81a3      	strh	r3, [r4, #12]
 8006d20:	4632      	mov	r2, r6
 8006d22:	463b      	mov	r3, r7
 8006d24:	4628      	mov	r0, r5
 8006d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2a:	f000 b853 	b.w	8006dd4 <_write_r>

08006d2e <__sseek>:
 8006d2e:	b510      	push	{r4, lr}
 8006d30:	460c      	mov	r4, r1
 8006d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d36:	f000 f829 	bl	8006d8c <_lseek_r>
 8006d3a:	1c43      	adds	r3, r0, #1
 8006d3c:	89a3      	ldrh	r3, [r4, #12]
 8006d3e:	bf15      	itete	ne
 8006d40:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d4a:	81a3      	strheq	r3, [r4, #12]
 8006d4c:	bf18      	it	ne
 8006d4e:	81a3      	strhne	r3, [r4, #12]
 8006d50:	bd10      	pop	{r4, pc}

08006d52 <__sclose>:
 8006d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d56:	f000 b809 	b.w	8006d6c <_close_r>

08006d5a <memset>:
 8006d5a:	4402      	add	r2, r0
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d100      	bne.n	8006d64 <memset+0xa>
 8006d62:	4770      	bx	lr
 8006d64:	f803 1b01 	strb.w	r1, [r3], #1
 8006d68:	e7f9      	b.n	8006d5e <memset+0x4>
	...

08006d6c <_close_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	4d06      	ldr	r5, [pc, #24]	; (8006d88 <_close_r+0x1c>)
 8006d70:	2300      	movs	r3, #0
 8006d72:	4604      	mov	r4, r0
 8006d74:	4608      	mov	r0, r1
 8006d76:	602b      	str	r3, [r5, #0]
 8006d78:	f7fa fc1b 	bl	80015b2 <_close>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d102      	bne.n	8006d86 <_close_r+0x1a>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	b103      	cbz	r3, 8006d86 <_close_r+0x1a>
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	bd38      	pop	{r3, r4, r5, pc}
 8006d88:	20000bcc 	.word	0x20000bcc

08006d8c <_lseek_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	4d07      	ldr	r5, [pc, #28]	; (8006dac <_lseek_r+0x20>)
 8006d90:	4604      	mov	r4, r0
 8006d92:	4608      	mov	r0, r1
 8006d94:	4611      	mov	r1, r2
 8006d96:	2200      	movs	r2, #0
 8006d98:	602a      	str	r2, [r5, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f7fa fc30 	bl	8001600 <_lseek>
 8006da0:	1c43      	adds	r3, r0, #1
 8006da2:	d102      	bne.n	8006daa <_lseek_r+0x1e>
 8006da4:	682b      	ldr	r3, [r5, #0]
 8006da6:	b103      	cbz	r3, 8006daa <_lseek_r+0x1e>
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	bd38      	pop	{r3, r4, r5, pc}
 8006dac:	20000bcc 	.word	0x20000bcc

08006db0 <_read_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	4d07      	ldr	r5, [pc, #28]	; (8006dd0 <_read_r+0x20>)
 8006db4:	4604      	mov	r4, r0
 8006db6:	4608      	mov	r0, r1
 8006db8:	4611      	mov	r1, r2
 8006dba:	2200      	movs	r2, #0
 8006dbc:	602a      	str	r2, [r5, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f7fa fbbe 	bl	8001540 <_read>
 8006dc4:	1c43      	adds	r3, r0, #1
 8006dc6:	d102      	bne.n	8006dce <_read_r+0x1e>
 8006dc8:	682b      	ldr	r3, [r5, #0]
 8006dca:	b103      	cbz	r3, 8006dce <_read_r+0x1e>
 8006dcc:	6023      	str	r3, [r4, #0]
 8006dce:	bd38      	pop	{r3, r4, r5, pc}
 8006dd0:	20000bcc 	.word	0x20000bcc

08006dd4 <_write_r>:
 8006dd4:	b538      	push	{r3, r4, r5, lr}
 8006dd6:	4d07      	ldr	r5, [pc, #28]	; (8006df4 <_write_r+0x20>)
 8006dd8:	4604      	mov	r4, r0
 8006dda:	4608      	mov	r0, r1
 8006ddc:	4611      	mov	r1, r2
 8006dde:	2200      	movs	r2, #0
 8006de0:	602a      	str	r2, [r5, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	f7fa fbc9 	bl	800157a <_write>
 8006de8:	1c43      	adds	r3, r0, #1
 8006dea:	d102      	bne.n	8006df2 <_write_r+0x1e>
 8006dec:	682b      	ldr	r3, [r5, #0]
 8006dee:	b103      	cbz	r3, 8006df2 <_write_r+0x1e>
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	bd38      	pop	{r3, r4, r5, pc}
 8006df4:	20000bcc 	.word	0x20000bcc

08006df8 <__errno>:
 8006df8:	4b01      	ldr	r3, [pc, #4]	; (8006e00 <__errno+0x8>)
 8006dfa:	6818      	ldr	r0, [r3, #0]
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	20000068 	.word	0x20000068

08006e04 <__libc_init_array>:
 8006e04:	b570      	push	{r4, r5, r6, lr}
 8006e06:	4d0d      	ldr	r5, [pc, #52]	; (8006e3c <__libc_init_array+0x38>)
 8006e08:	4c0d      	ldr	r4, [pc, #52]	; (8006e40 <__libc_init_array+0x3c>)
 8006e0a:	1b64      	subs	r4, r4, r5
 8006e0c:	10a4      	asrs	r4, r4, #2
 8006e0e:	2600      	movs	r6, #0
 8006e10:	42a6      	cmp	r6, r4
 8006e12:	d109      	bne.n	8006e28 <__libc_init_array+0x24>
 8006e14:	4d0b      	ldr	r5, [pc, #44]	; (8006e44 <__libc_init_array+0x40>)
 8006e16:	4c0c      	ldr	r4, [pc, #48]	; (8006e48 <__libc_init_array+0x44>)
 8006e18:	f000 fdc0 	bl	800799c <_init>
 8006e1c:	1b64      	subs	r4, r4, r5
 8006e1e:	10a4      	asrs	r4, r4, #2
 8006e20:	2600      	movs	r6, #0
 8006e22:	42a6      	cmp	r6, r4
 8006e24:	d105      	bne.n	8006e32 <__libc_init_array+0x2e>
 8006e26:	bd70      	pop	{r4, r5, r6, pc}
 8006e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e2c:	4798      	blx	r3
 8006e2e:	3601      	adds	r6, #1
 8006e30:	e7ee      	b.n	8006e10 <__libc_init_array+0xc>
 8006e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e36:	4798      	blx	r3
 8006e38:	3601      	adds	r6, #1
 8006e3a:	e7f2      	b.n	8006e22 <__libc_init_array+0x1e>
 8006e3c:	08008324 	.word	0x08008324
 8006e40:	08008324 	.word	0x08008324
 8006e44:	08008324 	.word	0x08008324
 8006e48:	08008328 	.word	0x08008328

08006e4c <__retarget_lock_init_recursive>:
 8006e4c:	4770      	bx	lr

08006e4e <__retarget_lock_acquire_recursive>:
 8006e4e:	4770      	bx	lr

08006e50 <__retarget_lock_release_recursive>:
 8006e50:	4770      	bx	lr
	...

08006e54 <_free_r>:
 8006e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e56:	2900      	cmp	r1, #0
 8006e58:	d044      	beq.n	8006ee4 <_free_r+0x90>
 8006e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e5e:	9001      	str	r0, [sp, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f1a1 0404 	sub.w	r4, r1, #4
 8006e66:	bfb8      	it	lt
 8006e68:	18e4      	addlt	r4, r4, r3
 8006e6a:	f000 f8df 	bl	800702c <__malloc_lock>
 8006e6e:	4a1e      	ldr	r2, [pc, #120]	; (8006ee8 <_free_r+0x94>)
 8006e70:	9801      	ldr	r0, [sp, #4]
 8006e72:	6813      	ldr	r3, [r2, #0]
 8006e74:	b933      	cbnz	r3, 8006e84 <_free_r+0x30>
 8006e76:	6063      	str	r3, [r4, #4]
 8006e78:	6014      	str	r4, [r2, #0]
 8006e7a:	b003      	add	sp, #12
 8006e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e80:	f000 b8da 	b.w	8007038 <__malloc_unlock>
 8006e84:	42a3      	cmp	r3, r4
 8006e86:	d908      	bls.n	8006e9a <_free_r+0x46>
 8006e88:	6825      	ldr	r5, [r4, #0]
 8006e8a:	1961      	adds	r1, r4, r5
 8006e8c:	428b      	cmp	r3, r1
 8006e8e:	bf01      	itttt	eq
 8006e90:	6819      	ldreq	r1, [r3, #0]
 8006e92:	685b      	ldreq	r3, [r3, #4]
 8006e94:	1949      	addeq	r1, r1, r5
 8006e96:	6021      	streq	r1, [r4, #0]
 8006e98:	e7ed      	b.n	8006e76 <_free_r+0x22>
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	b10b      	cbz	r3, 8006ea4 <_free_r+0x50>
 8006ea0:	42a3      	cmp	r3, r4
 8006ea2:	d9fa      	bls.n	8006e9a <_free_r+0x46>
 8006ea4:	6811      	ldr	r1, [r2, #0]
 8006ea6:	1855      	adds	r5, r2, r1
 8006ea8:	42a5      	cmp	r5, r4
 8006eaa:	d10b      	bne.n	8006ec4 <_free_r+0x70>
 8006eac:	6824      	ldr	r4, [r4, #0]
 8006eae:	4421      	add	r1, r4
 8006eb0:	1854      	adds	r4, r2, r1
 8006eb2:	42a3      	cmp	r3, r4
 8006eb4:	6011      	str	r1, [r2, #0]
 8006eb6:	d1e0      	bne.n	8006e7a <_free_r+0x26>
 8006eb8:	681c      	ldr	r4, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	6053      	str	r3, [r2, #4]
 8006ebe:	440c      	add	r4, r1
 8006ec0:	6014      	str	r4, [r2, #0]
 8006ec2:	e7da      	b.n	8006e7a <_free_r+0x26>
 8006ec4:	d902      	bls.n	8006ecc <_free_r+0x78>
 8006ec6:	230c      	movs	r3, #12
 8006ec8:	6003      	str	r3, [r0, #0]
 8006eca:	e7d6      	b.n	8006e7a <_free_r+0x26>
 8006ecc:	6825      	ldr	r5, [r4, #0]
 8006ece:	1961      	adds	r1, r4, r5
 8006ed0:	428b      	cmp	r3, r1
 8006ed2:	bf04      	itt	eq
 8006ed4:	6819      	ldreq	r1, [r3, #0]
 8006ed6:	685b      	ldreq	r3, [r3, #4]
 8006ed8:	6063      	str	r3, [r4, #4]
 8006eda:	bf04      	itt	eq
 8006edc:	1949      	addeq	r1, r1, r5
 8006ede:	6021      	streq	r1, [r4, #0]
 8006ee0:	6054      	str	r4, [r2, #4]
 8006ee2:	e7ca      	b.n	8006e7a <_free_r+0x26>
 8006ee4:	b003      	add	sp, #12
 8006ee6:	bd30      	pop	{r4, r5, pc}
 8006ee8:	20000bd4 	.word	0x20000bd4

08006eec <sbrk_aligned>:
 8006eec:	b570      	push	{r4, r5, r6, lr}
 8006eee:	4e0e      	ldr	r6, [pc, #56]	; (8006f28 <sbrk_aligned+0x3c>)
 8006ef0:	460c      	mov	r4, r1
 8006ef2:	6831      	ldr	r1, [r6, #0]
 8006ef4:	4605      	mov	r5, r0
 8006ef6:	b911      	cbnz	r1, 8006efe <sbrk_aligned+0x12>
 8006ef8:	f000 fcbc 	bl	8007874 <_sbrk_r>
 8006efc:	6030      	str	r0, [r6, #0]
 8006efe:	4621      	mov	r1, r4
 8006f00:	4628      	mov	r0, r5
 8006f02:	f000 fcb7 	bl	8007874 <_sbrk_r>
 8006f06:	1c43      	adds	r3, r0, #1
 8006f08:	d00a      	beq.n	8006f20 <sbrk_aligned+0x34>
 8006f0a:	1cc4      	adds	r4, r0, #3
 8006f0c:	f024 0403 	bic.w	r4, r4, #3
 8006f10:	42a0      	cmp	r0, r4
 8006f12:	d007      	beq.n	8006f24 <sbrk_aligned+0x38>
 8006f14:	1a21      	subs	r1, r4, r0
 8006f16:	4628      	mov	r0, r5
 8006f18:	f000 fcac 	bl	8007874 <_sbrk_r>
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d101      	bne.n	8006f24 <sbrk_aligned+0x38>
 8006f20:	f04f 34ff 	mov.w	r4, #4294967295
 8006f24:	4620      	mov	r0, r4
 8006f26:	bd70      	pop	{r4, r5, r6, pc}
 8006f28:	20000bd8 	.word	0x20000bd8

08006f2c <_malloc_r>:
 8006f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f30:	1ccd      	adds	r5, r1, #3
 8006f32:	f025 0503 	bic.w	r5, r5, #3
 8006f36:	3508      	adds	r5, #8
 8006f38:	2d0c      	cmp	r5, #12
 8006f3a:	bf38      	it	cc
 8006f3c:	250c      	movcc	r5, #12
 8006f3e:	2d00      	cmp	r5, #0
 8006f40:	4607      	mov	r7, r0
 8006f42:	db01      	blt.n	8006f48 <_malloc_r+0x1c>
 8006f44:	42a9      	cmp	r1, r5
 8006f46:	d905      	bls.n	8006f54 <_malloc_r+0x28>
 8006f48:	230c      	movs	r3, #12
 8006f4a:	603b      	str	r3, [r7, #0]
 8006f4c:	2600      	movs	r6, #0
 8006f4e:	4630      	mov	r0, r6
 8006f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007028 <_malloc_r+0xfc>
 8006f58:	f000 f868 	bl	800702c <__malloc_lock>
 8006f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f60:	461c      	mov	r4, r3
 8006f62:	bb5c      	cbnz	r4, 8006fbc <_malloc_r+0x90>
 8006f64:	4629      	mov	r1, r5
 8006f66:	4638      	mov	r0, r7
 8006f68:	f7ff ffc0 	bl	8006eec <sbrk_aligned>
 8006f6c:	1c43      	adds	r3, r0, #1
 8006f6e:	4604      	mov	r4, r0
 8006f70:	d155      	bne.n	800701e <_malloc_r+0xf2>
 8006f72:	f8d8 4000 	ldr.w	r4, [r8]
 8006f76:	4626      	mov	r6, r4
 8006f78:	2e00      	cmp	r6, #0
 8006f7a:	d145      	bne.n	8007008 <_malloc_r+0xdc>
 8006f7c:	2c00      	cmp	r4, #0
 8006f7e:	d048      	beq.n	8007012 <_malloc_r+0xe6>
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	4631      	mov	r1, r6
 8006f84:	4638      	mov	r0, r7
 8006f86:	eb04 0903 	add.w	r9, r4, r3
 8006f8a:	f000 fc73 	bl	8007874 <_sbrk_r>
 8006f8e:	4581      	cmp	r9, r0
 8006f90:	d13f      	bne.n	8007012 <_malloc_r+0xe6>
 8006f92:	6821      	ldr	r1, [r4, #0]
 8006f94:	1a6d      	subs	r5, r5, r1
 8006f96:	4629      	mov	r1, r5
 8006f98:	4638      	mov	r0, r7
 8006f9a:	f7ff ffa7 	bl	8006eec <sbrk_aligned>
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d037      	beq.n	8007012 <_malloc_r+0xe6>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	442b      	add	r3, r5
 8006fa6:	6023      	str	r3, [r4, #0]
 8006fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d038      	beq.n	8007022 <_malloc_r+0xf6>
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	42a2      	cmp	r2, r4
 8006fb4:	d12b      	bne.n	800700e <_malloc_r+0xe2>
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	605a      	str	r2, [r3, #4]
 8006fba:	e00f      	b.n	8006fdc <_malloc_r+0xb0>
 8006fbc:	6822      	ldr	r2, [r4, #0]
 8006fbe:	1b52      	subs	r2, r2, r5
 8006fc0:	d41f      	bmi.n	8007002 <_malloc_r+0xd6>
 8006fc2:	2a0b      	cmp	r2, #11
 8006fc4:	d917      	bls.n	8006ff6 <_malloc_r+0xca>
 8006fc6:	1961      	adds	r1, r4, r5
 8006fc8:	42a3      	cmp	r3, r4
 8006fca:	6025      	str	r5, [r4, #0]
 8006fcc:	bf18      	it	ne
 8006fce:	6059      	strne	r1, [r3, #4]
 8006fd0:	6863      	ldr	r3, [r4, #4]
 8006fd2:	bf08      	it	eq
 8006fd4:	f8c8 1000 	streq.w	r1, [r8]
 8006fd8:	5162      	str	r2, [r4, r5]
 8006fda:	604b      	str	r3, [r1, #4]
 8006fdc:	4638      	mov	r0, r7
 8006fde:	f104 060b 	add.w	r6, r4, #11
 8006fe2:	f000 f829 	bl	8007038 <__malloc_unlock>
 8006fe6:	f026 0607 	bic.w	r6, r6, #7
 8006fea:	1d23      	adds	r3, r4, #4
 8006fec:	1af2      	subs	r2, r6, r3
 8006fee:	d0ae      	beq.n	8006f4e <_malloc_r+0x22>
 8006ff0:	1b9b      	subs	r3, r3, r6
 8006ff2:	50a3      	str	r3, [r4, r2]
 8006ff4:	e7ab      	b.n	8006f4e <_malloc_r+0x22>
 8006ff6:	42a3      	cmp	r3, r4
 8006ff8:	6862      	ldr	r2, [r4, #4]
 8006ffa:	d1dd      	bne.n	8006fb8 <_malloc_r+0x8c>
 8006ffc:	f8c8 2000 	str.w	r2, [r8]
 8007000:	e7ec      	b.n	8006fdc <_malloc_r+0xb0>
 8007002:	4623      	mov	r3, r4
 8007004:	6864      	ldr	r4, [r4, #4]
 8007006:	e7ac      	b.n	8006f62 <_malloc_r+0x36>
 8007008:	4634      	mov	r4, r6
 800700a:	6876      	ldr	r6, [r6, #4]
 800700c:	e7b4      	b.n	8006f78 <_malloc_r+0x4c>
 800700e:	4613      	mov	r3, r2
 8007010:	e7cc      	b.n	8006fac <_malloc_r+0x80>
 8007012:	230c      	movs	r3, #12
 8007014:	603b      	str	r3, [r7, #0]
 8007016:	4638      	mov	r0, r7
 8007018:	f000 f80e 	bl	8007038 <__malloc_unlock>
 800701c:	e797      	b.n	8006f4e <_malloc_r+0x22>
 800701e:	6025      	str	r5, [r4, #0]
 8007020:	e7dc      	b.n	8006fdc <_malloc_r+0xb0>
 8007022:	605b      	str	r3, [r3, #4]
 8007024:	deff      	udf	#255	; 0xff
 8007026:	bf00      	nop
 8007028:	20000bd4 	.word	0x20000bd4

0800702c <__malloc_lock>:
 800702c:	4801      	ldr	r0, [pc, #4]	; (8007034 <__malloc_lock+0x8>)
 800702e:	f7ff bf0e 	b.w	8006e4e <__retarget_lock_acquire_recursive>
 8007032:	bf00      	nop
 8007034:	20000bd0 	.word	0x20000bd0

08007038 <__malloc_unlock>:
 8007038:	4801      	ldr	r0, [pc, #4]	; (8007040 <__malloc_unlock+0x8>)
 800703a:	f7ff bf09 	b.w	8006e50 <__retarget_lock_release_recursive>
 800703e:	bf00      	nop
 8007040:	20000bd0 	.word	0x20000bd0

08007044 <__sfputc_r>:
 8007044:	6893      	ldr	r3, [r2, #8]
 8007046:	3b01      	subs	r3, #1
 8007048:	2b00      	cmp	r3, #0
 800704a:	b410      	push	{r4}
 800704c:	6093      	str	r3, [r2, #8]
 800704e:	da08      	bge.n	8007062 <__sfputc_r+0x1e>
 8007050:	6994      	ldr	r4, [r2, #24]
 8007052:	42a3      	cmp	r3, r4
 8007054:	db01      	blt.n	800705a <__sfputc_r+0x16>
 8007056:	290a      	cmp	r1, #10
 8007058:	d103      	bne.n	8007062 <__sfputc_r+0x1e>
 800705a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800705e:	f000 bb73 	b.w	8007748 <__swbuf_r>
 8007062:	6813      	ldr	r3, [r2, #0]
 8007064:	1c58      	adds	r0, r3, #1
 8007066:	6010      	str	r0, [r2, #0]
 8007068:	7019      	strb	r1, [r3, #0]
 800706a:	4608      	mov	r0, r1
 800706c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007070:	4770      	bx	lr

08007072 <__sfputs_r>:
 8007072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007074:	4606      	mov	r6, r0
 8007076:	460f      	mov	r7, r1
 8007078:	4614      	mov	r4, r2
 800707a:	18d5      	adds	r5, r2, r3
 800707c:	42ac      	cmp	r4, r5
 800707e:	d101      	bne.n	8007084 <__sfputs_r+0x12>
 8007080:	2000      	movs	r0, #0
 8007082:	e007      	b.n	8007094 <__sfputs_r+0x22>
 8007084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007088:	463a      	mov	r2, r7
 800708a:	4630      	mov	r0, r6
 800708c:	f7ff ffda 	bl	8007044 <__sfputc_r>
 8007090:	1c43      	adds	r3, r0, #1
 8007092:	d1f3      	bne.n	800707c <__sfputs_r+0xa>
 8007094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007098 <_vfiprintf_r>:
 8007098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709c:	460d      	mov	r5, r1
 800709e:	b09d      	sub	sp, #116	; 0x74
 80070a0:	4614      	mov	r4, r2
 80070a2:	4698      	mov	r8, r3
 80070a4:	4606      	mov	r6, r0
 80070a6:	b118      	cbz	r0, 80070b0 <_vfiprintf_r+0x18>
 80070a8:	6a03      	ldr	r3, [r0, #32]
 80070aa:	b90b      	cbnz	r3, 80070b0 <_vfiprintf_r+0x18>
 80070ac:	f7ff fdca 	bl	8006c44 <__sinit>
 80070b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070b2:	07d9      	lsls	r1, r3, #31
 80070b4:	d405      	bmi.n	80070c2 <_vfiprintf_r+0x2a>
 80070b6:	89ab      	ldrh	r3, [r5, #12]
 80070b8:	059a      	lsls	r2, r3, #22
 80070ba:	d402      	bmi.n	80070c2 <_vfiprintf_r+0x2a>
 80070bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070be:	f7ff fec6 	bl	8006e4e <__retarget_lock_acquire_recursive>
 80070c2:	89ab      	ldrh	r3, [r5, #12]
 80070c4:	071b      	lsls	r3, r3, #28
 80070c6:	d501      	bpl.n	80070cc <_vfiprintf_r+0x34>
 80070c8:	692b      	ldr	r3, [r5, #16]
 80070ca:	b99b      	cbnz	r3, 80070f4 <_vfiprintf_r+0x5c>
 80070cc:	4629      	mov	r1, r5
 80070ce:	4630      	mov	r0, r6
 80070d0:	f000 fb78 	bl	80077c4 <__swsetup_r>
 80070d4:	b170      	cbz	r0, 80070f4 <_vfiprintf_r+0x5c>
 80070d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070d8:	07dc      	lsls	r4, r3, #31
 80070da:	d504      	bpl.n	80070e6 <_vfiprintf_r+0x4e>
 80070dc:	f04f 30ff 	mov.w	r0, #4294967295
 80070e0:	b01d      	add	sp, #116	; 0x74
 80070e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e6:	89ab      	ldrh	r3, [r5, #12]
 80070e8:	0598      	lsls	r0, r3, #22
 80070ea:	d4f7      	bmi.n	80070dc <_vfiprintf_r+0x44>
 80070ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070ee:	f7ff feaf 	bl	8006e50 <__retarget_lock_release_recursive>
 80070f2:	e7f3      	b.n	80070dc <_vfiprintf_r+0x44>
 80070f4:	2300      	movs	r3, #0
 80070f6:	9309      	str	r3, [sp, #36]	; 0x24
 80070f8:	2320      	movs	r3, #32
 80070fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007102:	2330      	movs	r3, #48	; 0x30
 8007104:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80072b8 <_vfiprintf_r+0x220>
 8007108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800710c:	f04f 0901 	mov.w	r9, #1
 8007110:	4623      	mov	r3, r4
 8007112:	469a      	mov	sl, r3
 8007114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007118:	b10a      	cbz	r2, 800711e <_vfiprintf_r+0x86>
 800711a:	2a25      	cmp	r2, #37	; 0x25
 800711c:	d1f9      	bne.n	8007112 <_vfiprintf_r+0x7a>
 800711e:	ebba 0b04 	subs.w	fp, sl, r4
 8007122:	d00b      	beq.n	800713c <_vfiprintf_r+0xa4>
 8007124:	465b      	mov	r3, fp
 8007126:	4622      	mov	r2, r4
 8007128:	4629      	mov	r1, r5
 800712a:	4630      	mov	r0, r6
 800712c:	f7ff ffa1 	bl	8007072 <__sfputs_r>
 8007130:	3001      	adds	r0, #1
 8007132:	f000 80a9 	beq.w	8007288 <_vfiprintf_r+0x1f0>
 8007136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007138:	445a      	add	r2, fp
 800713a:	9209      	str	r2, [sp, #36]	; 0x24
 800713c:	f89a 3000 	ldrb.w	r3, [sl]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 80a1 	beq.w	8007288 <_vfiprintf_r+0x1f0>
 8007146:	2300      	movs	r3, #0
 8007148:	f04f 32ff 	mov.w	r2, #4294967295
 800714c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007150:	f10a 0a01 	add.w	sl, sl, #1
 8007154:	9304      	str	r3, [sp, #16]
 8007156:	9307      	str	r3, [sp, #28]
 8007158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800715c:	931a      	str	r3, [sp, #104]	; 0x68
 800715e:	4654      	mov	r4, sl
 8007160:	2205      	movs	r2, #5
 8007162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007166:	4854      	ldr	r0, [pc, #336]	; (80072b8 <_vfiprintf_r+0x220>)
 8007168:	f7f9 f832 	bl	80001d0 <memchr>
 800716c:	9a04      	ldr	r2, [sp, #16]
 800716e:	b9d8      	cbnz	r0, 80071a8 <_vfiprintf_r+0x110>
 8007170:	06d1      	lsls	r1, r2, #27
 8007172:	bf44      	itt	mi
 8007174:	2320      	movmi	r3, #32
 8007176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800717a:	0713      	lsls	r3, r2, #28
 800717c:	bf44      	itt	mi
 800717e:	232b      	movmi	r3, #43	; 0x2b
 8007180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007184:	f89a 3000 	ldrb.w	r3, [sl]
 8007188:	2b2a      	cmp	r3, #42	; 0x2a
 800718a:	d015      	beq.n	80071b8 <_vfiprintf_r+0x120>
 800718c:	9a07      	ldr	r2, [sp, #28]
 800718e:	4654      	mov	r4, sl
 8007190:	2000      	movs	r0, #0
 8007192:	f04f 0c0a 	mov.w	ip, #10
 8007196:	4621      	mov	r1, r4
 8007198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800719c:	3b30      	subs	r3, #48	; 0x30
 800719e:	2b09      	cmp	r3, #9
 80071a0:	d94d      	bls.n	800723e <_vfiprintf_r+0x1a6>
 80071a2:	b1b0      	cbz	r0, 80071d2 <_vfiprintf_r+0x13a>
 80071a4:	9207      	str	r2, [sp, #28]
 80071a6:	e014      	b.n	80071d2 <_vfiprintf_r+0x13a>
 80071a8:	eba0 0308 	sub.w	r3, r0, r8
 80071ac:	fa09 f303 	lsl.w	r3, r9, r3
 80071b0:	4313      	orrs	r3, r2
 80071b2:	9304      	str	r3, [sp, #16]
 80071b4:	46a2      	mov	sl, r4
 80071b6:	e7d2      	b.n	800715e <_vfiprintf_r+0xc6>
 80071b8:	9b03      	ldr	r3, [sp, #12]
 80071ba:	1d19      	adds	r1, r3, #4
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	9103      	str	r1, [sp, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bfbb      	ittet	lt
 80071c4:	425b      	neglt	r3, r3
 80071c6:	f042 0202 	orrlt.w	r2, r2, #2
 80071ca:	9307      	strge	r3, [sp, #28]
 80071cc:	9307      	strlt	r3, [sp, #28]
 80071ce:	bfb8      	it	lt
 80071d0:	9204      	strlt	r2, [sp, #16]
 80071d2:	7823      	ldrb	r3, [r4, #0]
 80071d4:	2b2e      	cmp	r3, #46	; 0x2e
 80071d6:	d10c      	bne.n	80071f2 <_vfiprintf_r+0x15a>
 80071d8:	7863      	ldrb	r3, [r4, #1]
 80071da:	2b2a      	cmp	r3, #42	; 0x2a
 80071dc:	d134      	bne.n	8007248 <_vfiprintf_r+0x1b0>
 80071de:	9b03      	ldr	r3, [sp, #12]
 80071e0:	1d1a      	adds	r2, r3, #4
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	9203      	str	r2, [sp, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	bfb8      	it	lt
 80071ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80071ee:	3402      	adds	r4, #2
 80071f0:	9305      	str	r3, [sp, #20]
 80071f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80072c8 <_vfiprintf_r+0x230>
 80071f6:	7821      	ldrb	r1, [r4, #0]
 80071f8:	2203      	movs	r2, #3
 80071fa:	4650      	mov	r0, sl
 80071fc:	f7f8 ffe8 	bl	80001d0 <memchr>
 8007200:	b138      	cbz	r0, 8007212 <_vfiprintf_r+0x17a>
 8007202:	9b04      	ldr	r3, [sp, #16]
 8007204:	eba0 000a 	sub.w	r0, r0, sl
 8007208:	2240      	movs	r2, #64	; 0x40
 800720a:	4082      	lsls	r2, r0
 800720c:	4313      	orrs	r3, r2
 800720e:	3401      	adds	r4, #1
 8007210:	9304      	str	r3, [sp, #16]
 8007212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007216:	4829      	ldr	r0, [pc, #164]	; (80072bc <_vfiprintf_r+0x224>)
 8007218:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800721c:	2206      	movs	r2, #6
 800721e:	f7f8 ffd7 	bl	80001d0 <memchr>
 8007222:	2800      	cmp	r0, #0
 8007224:	d03f      	beq.n	80072a6 <_vfiprintf_r+0x20e>
 8007226:	4b26      	ldr	r3, [pc, #152]	; (80072c0 <_vfiprintf_r+0x228>)
 8007228:	bb1b      	cbnz	r3, 8007272 <_vfiprintf_r+0x1da>
 800722a:	9b03      	ldr	r3, [sp, #12]
 800722c:	3307      	adds	r3, #7
 800722e:	f023 0307 	bic.w	r3, r3, #7
 8007232:	3308      	adds	r3, #8
 8007234:	9303      	str	r3, [sp, #12]
 8007236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007238:	443b      	add	r3, r7
 800723a:	9309      	str	r3, [sp, #36]	; 0x24
 800723c:	e768      	b.n	8007110 <_vfiprintf_r+0x78>
 800723e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007242:	460c      	mov	r4, r1
 8007244:	2001      	movs	r0, #1
 8007246:	e7a6      	b.n	8007196 <_vfiprintf_r+0xfe>
 8007248:	2300      	movs	r3, #0
 800724a:	3401      	adds	r4, #1
 800724c:	9305      	str	r3, [sp, #20]
 800724e:	4619      	mov	r1, r3
 8007250:	f04f 0c0a 	mov.w	ip, #10
 8007254:	4620      	mov	r0, r4
 8007256:	f810 2b01 	ldrb.w	r2, [r0], #1
 800725a:	3a30      	subs	r2, #48	; 0x30
 800725c:	2a09      	cmp	r2, #9
 800725e:	d903      	bls.n	8007268 <_vfiprintf_r+0x1d0>
 8007260:	2b00      	cmp	r3, #0
 8007262:	d0c6      	beq.n	80071f2 <_vfiprintf_r+0x15a>
 8007264:	9105      	str	r1, [sp, #20]
 8007266:	e7c4      	b.n	80071f2 <_vfiprintf_r+0x15a>
 8007268:	fb0c 2101 	mla	r1, ip, r1, r2
 800726c:	4604      	mov	r4, r0
 800726e:	2301      	movs	r3, #1
 8007270:	e7f0      	b.n	8007254 <_vfiprintf_r+0x1bc>
 8007272:	ab03      	add	r3, sp, #12
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	462a      	mov	r2, r5
 8007278:	4b12      	ldr	r3, [pc, #72]	; (80072c4 <_vfiprintf_r+0x22c>)
 800727a:	a904      	add	r1, sp, #16
 800727c:	4630      	mov	r0, r6
 800727e:	f3af 8000 	nop.w
 8007282:	4607      	mov	r7, r0
 8007284:	1c78      	adds	r0, r7, #1
 8007286:	d1d6      	bne.n	8007236 <_vfiprintf_r+0x19e>
 8007288:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800728a:	07d9      	lsls	r1, r3, #31
 800728c:	d405      	bmi.n	800729a <_vfiprintf_r+0x202>
 800728e:	89ab      	ldrh	r3, [r5, #12]
 8007290:	059a      	lsls	r2, r3, #22
 8007292:	d402      	bmi.n	800729a <_vfiprintf_r+0x202>
 8007294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007296:	f7ff fddb 	bl	8006e50 <__retarget_lock_release_recursive>
 800729a:	89ab      	ldrh	r3, [r5, #12]
 800729c:	065b      	lsls	r3, r3, #25
 800729e:	f53f af1d 	bmi.w	80070dc <_vfiprintf_r+0x44>
 80072a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072a4:	e71c      	b.n	80070e0 <_vfiprintf_r+0x48>
 80072a6:	ab03      	add	r3, sp, #12
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	462a      	mov	r2, r5
 80072ac:	4b05      	ldr	r3, [pc, #20]	; (80072c4 <_vfiprintf_r+0x22c>)
 80072ae:	a904      	add	r1, sp, #16
 80072b0:	4630      	mov	r0, r6
 80072b2:	f000 f879 	bl	80073a8 <_printf_i>
 80072b6:	e7e4      	b.n	8007282 <_vfiprintf_r+0x1ea>
 80072b8:	080082e8 	.word	0x080082e8
 80072bc:	080082f2 	.word	0x080082f2
 80072c0:	00000000 	.word	0x00000000
 80072c4:	08007073 	.word	0x08007073
 80072c8:	080082ee 	.word	0x080082ee

080072cc <_printf_common>:
 80072cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d0:	4616      	mov	r6, r2
 80072d2:	4699      	mov	r9, r3
 80072d4:	688a      	ldr	r2, [r1, #8]
 80072d6:	690b      	ldr	r3, [r1, #16]
 80072d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072dc:	4293      	cmp	r3, r2
 80072de:	bfb8      	it	lt
 80072e0:	4613      	movlt	r3, r2
 80072e2:	6033      	str	r3, [r6, #0]
 80072e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072e8:	4607      	mov	r7, r0
 80072ea:	460c      	mov	r4, r1
 80072ec:	b10a      	cbz	r2, 80072f2 <_printf_common+0x26>
 80072ee:	3301      	adds	r3, #1
 80072f0:	6033      	str	r3, [r6, #0]
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	0699      	lsls	r1, r3, #26
 80072f6:	bf42      	ittt	mi
 80072f8:	6833      	ldrmi	r3, [r6, #0]
 80072fa:	3302      	addmi	r3, #2
 80072fc:	6033      	strmi	r3, [r6, #0]
 80072fe:	6825      	ldr	r5, [r4, #0]
 8007300:	f015 0506 	ands.w	r5, r5, #6
 8007304:	d106      	bne.n	8007314 <_printf_common+0x48>
 8007306:	f104 0a19 	add.w	sl, r4, #25
 800730a:	68e3      	ldr	r3, [r4, #12]
 800730c:	6832      	ldr	r2, [r6, #0]
 800730e:	1a9b      	subs	r3, r3, r2
 8007310:	42ab      	cmp	r3, r5
 8007312:	dc26      	bgt.n	8007362 <_printf_common+0x96>
 8007314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007318:	1e13      	subs	r3, r2, #0
 800731a:	6822      	ldr	r2, [r4, #0]
 800731c:	bf18      	it	ne
 800731e:	2301      	movne	r3, #1
 8007320:	0692      	lsls	r2, r2, #26
 8007322:	d42b      	bmi.n	800737c <_printf_common+0xb0>
 8007324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007328:	4649      	mov	r1, r9
 800732a:	4638      	mov	r0, r7
 800732c:	47c0      	blx	r8
 800732e:	3001      	adds	r0, #1
 8007330:	d01e      	beq.n	8007370 <_printf_common+0xa4>
 8007332:	6823      	ldr	r3, [r4, #0]
 8007334:	6922      	ldr	r2, [r4, #16]
 8007336:	f003 0306 	and.w	r3, r3, #6
 800733a:	2b04      	cmp	r3, #4
 800733c:	bf02      	ittt	eq
 800733e:	68e5      	ldreq	r5, [r4, #12]
 8007340:	6833      	ldreq	r3, [r6, #0]
 8007342:	1aed      	subeq	r5, r5, r3
 8007344:	68a3      	ldr	r3, [r4, #8]
 8007346:	bf0c      	ite	eq
 8007348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800734c:	2500      	movne	r5, #0
 800734e:	4293      	cmp	r3, r2
 8007350:	bfc4      	itt	gt
 8007352:	1a9b      	subgt	r3, r3, r2
 8007354:	18ed      	addgt	r5, r5, r3
 8007356:	2600      	movs	r6, #0
 8007358:	341a      	adds	r4, #26
 800735a:	42b5      	cmp	r5, r6
 800735c:	d11a      	bne.n	8007394 <_printf_common+0xc8>
 800735e:	2000      	movs	r0, #0
 8007360:	e008      	b.n	8007374 <_printf_common+0xa8>
 8007362:	2301      	movs	r3, #1
 8007364:	4652      	mov	r2, sl
 8007366:	4649      	mov	r1, r9
 8007368:	4638      	mov	r0, r7
 800736a:	47c0      	blx	r8
 800736c:	3001      	adds	r0, #1
 800736e:	d103      	bne.n	8007378 <_printf_common+0xac>
 8007370:	f04f 30ff 	mov.w	r0, #4294967295
 8007374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007378:	3501      	adds	r5, #1
 800737a:	e7c6      	b.n	800730a <_printf_common+0x3e>
 800737c:	18e1      	adds	r1, r4, r3
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	2030      	movs	r0, #48	; 0x30
 8007382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007386:	4422      	add	r2, r4
 8007388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800738c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007390:	3302      	adds	r3, #2
 8007392:	e7c7      	b.n	8007324 <_printf_common+0x58>
 8007394:	2301      	movs	r3, #1
 8007396:	4622      	mov	r2, r4
 8007398:	4649      	mov	r1, r9
 800739a:	4638      	mov	r0, r7
 800739c:	47c0      	blx	r8
 800739e:	3001      	adds	r0, #1
 80073a0:	d0e6      	beq.n	8007370 <_printf_common+0xa4>
 80073a2:	3601      	adds	r6, #1
 80073a4:	e7d9      	b.n	800735a <_printf_common+0x8e>
	...

080073a8 <_printf_i>:
 80073a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073ac:	7e0f      	ldrb	r7, [r1, #24]
 80073ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073b0:	2f78      	cmp	r7, #120	; 0x78
 80073b2:	4691      	mov	r9, r2
 80073b4:	4680      	mov	r8, r0
 80073b6:	460c      	mov	r4, r1
 80073b8:	469a      	mov	sl, r3
 80073ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073be:	d807      	bhi.n	80073d0 <_printf_i+0x28>
 80073c0:	2f62      	cmp	r7, #98	; 0x62
 80073c2:	d80a      	bhi.n	80073da <_printf_i+0x32>
 80073c4:	2f00      	cmp	r7, #0
 80073c6:	f000 80d4 	beq.w	8007572 <_printf_i+0x1ca>
 80073ca:	2f58      	cmp	r7, #88	; 0x58
 80073cc:	f000 80c0 	beq.w	8007550 <_printf_i+0x1a8>
 80073d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073d8:	e03a      	b.n	8007450 <_printf_i+0xa8>
 80073da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073de:	2b15      	cmp	r3, #21
 80073e0:	d8f6      	bhi.n	80073d0 <_printf_i+0x28>
 80073e2:	a101      	add	r1, pc, #4	; (adr r1, 80073e8 <_printf_i+0x40>)
 80073e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073e8:	08007441 	.word	0x08007441
 80073ec:	08007455 	.word	0x08007455
 80073f0:	080073d1 	.word	0x080073d1
 80073f4:	080073d1 	.word	0x080073d1
 80073f8:	080073d1 	.word	0x080073d1
 80073fc:	080073d1 	.word	0x080073d1
 8007400:	08007455 	.word	0x08007455
 8007404:	080073d1 	.word	0x080073d1
 8007408:	080073d1 	.word	0x080073d1
 800740c:	080073d1 	.word	0x080073d1
 8007410:	080073d1 	.word	0x080073d1
 8007414:	08007559 	.word	0x08007559
 8007418:	08007481 	.word	0x08007481
 800741c:	08007513 	.word	0x08007513
 8007420:	080073d1 	.word	0x080073d1
 8007424:	080073d1 	.word	0x080073d1
 8007428:	0800757b 	.word	0x0800757b
 800742c:	080073d1 	.word	0x080073d1
 8007430:	08007481 	.word	0x08007481
 8007434:	080073d1 	.word	0x080073d1
 8007438:	080073d1 	.word	0x080073d1
 800743c:	0800751b 	.word	0x0800751b
 8007440:	682b      	ldr	r3, [r5, #0]
 8007442:	1d1a      	adds	r2, r3, #4
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	602a      	str	r2, [r5, #0]
 8007448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800744c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007450:	2301      	movs	r3, #1
 8007452:	e09f      	b.n	8007594 <_printf_i+0x1ec>
 8007454:	6820      	ldr	r0, [r4, #0]
 8007456:	682b      	ldr	r3, [r5, #0]
 8007458:	0607      	lsls	r7, r0, #24
 800745a:	f103 0104 	add.w	r1, r3, #4
 800745e:	6029      	str	r1, [r5, #0]
 8007460:	d501      	bpl.n	8007466 <_printf_i+0xbe>
 8007462:	681e      	ldr	r6, [r3, #0]
 8007464:	e003      	b.n	800746e <_printf_i+0xc6>
 8007466:	0646      	lsls	r6, r0, #25
 8007468:	d5fb      	bpl.n	8007462 <_printf_i+0xba>
 800746a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800746e:	2e00      	cmp	r6, #0
 8007470:	da03      	bge.n	800747a <_printf_i+0xd2>
 8007472:	232d      	movs	r3, #45	; 0x2d
 8007474:	4276      	negs	r6, r6
 8007476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800747a:	485a      	ldr	r0, [pc, #360]	; (80075e4 <_printf_i+0x23c>)
 800747c:	230a      	movs	r3, #10
 800747e:	e012      	b.n	80074a6 <_printf_i+0xfe>
 8007480:	682b      	ldr	r3, [r5, #0]
 8007482:	6820      	ldr	r0, [r4, #0]
 8007484:	1d19      	adds	r1, r3, #4
 8007486:	6029      	str	r1, [r5, #0]
 8007488:	0605      	lsls	r5, r0, #24
 800748a:	d501      	bpl.n	8007490 <_printf_i+0xe8>
 800748c:	681e      	ldr	r6, [r3, #0]
 800748e:	e002      	b.n	8007496 <_printf_i+0xee>
 8007490:	0641      	lsls	r1, r0, #25
 8007492:	d5fb      	bpl.n	800748c <_printf_i+0xe4>
 8007494:	881e      	ldrh	r6, [r3, #0]
 8007496:	4853      	ldr	r0, [pc, #332]	; (80075e4 <_printf_i+0x23c>)
 8007498:	2f6f      	cmp	r7, #111	; 0x6f
 800749a:	bf0c      	ite	eq
 800749c:	2308      	moveq	r3, #8
 800749e:	230a      	movne	r3, #10
 80074a0:	2100      	movs	r1, #0
 80074a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074a6:	6865      	ldr	r5, [r4, #4]
 80074a8:	60a5      	str	r5, [r4, #8]
 80074aa:	2d00      	cmp	r5, #0
 80074ac:	bfa2      	ittt	ge
 80074ae:	6821      	ldrge	r1, [r4, #0]
 80074b0:	f021 0104 	bicge.w	r1, r1, #4
 80074b4:	6021      	strge	r1, [r4, #0]
 80074b6:	b90e      	cbnz	r6, 80074bc <_printf_i+0x114>
 80074b8:	2d00      	cmp	r5, #0
 80074ba:	d04b      	beq.n	8007554 <_printf_i+0x1ac>
 80074bc:	4615      	mov	r5, r2
 80074be:	fbb6 f1f3 	udiv	r1, r6, r3
 80074c2:	fb03 6711 	mls	r7, r3, r1, r6
 80074c6:	5dc7      	ldrb	r7, [r0, r7]
 80074c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074cc:	4637      	mov	r7, r6
 80074ce:	42bb      	cmp	r3, r7
 80074d0:	460e      	mov	r6, r1
 80074d2:	d9f4      	bls.n	80074be <_printf_i+0x116>
 80074d4:	2b08      	cmp	r3, #8
 80074d6:	d10b      	bne.n	80074f0 <_printf_i+0x148>
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	07de      	lsls	r6, r3, #31
 80074dc:	d508      	bpl.n	80074f0 <_printf_i+0x148>
 80074de:	6923      	ldr	r3, [r4, #16]
 80074e0:	6861      	ldr	r1, [r4, #4]
 80074e2:	4299      	cmp	r1, r3
 80074e4:	bfde      	ittt	le
 80074e6:	2330      	movle	r3, #48	; 0x30
 80074e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074f0:	1b52      	subs	r2, r2, r5
 80074f2:	6122      	str	r2, [r4, #16]
 80074f4:	f8cd a000 	str.w	sl, [sp]
 80074f8:	464b      	mov	r3, r9
 80074fa:	aa03      	add	r2, sp, #12
 80074fc:	4621      	mov	r1, r4
 80074fe:	4640      	mov	r0, r8
 8007500:	f7ff fee4 	bl	80072cc <_printf_common>
 8007504:	3001      	adds	r0, #1
 8007506:	d14a      	bne.n	800759e <_printf_i+0x1f6>
 8007508:	f04f 30ff 	mov.w	r0, #4294967295
 800750c:	b004      	add	sp, #16
 800750e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	f043 0320 	orr.w	r3, r3, #32
 8007518:	6023      	str	r3, [r4, #0]
 800751a:	4833      	ldr	r0, [pc, #204]	; (80075e8 <_printf_i+0x240>)
 800751c:	2778      	movs	r7, #120	; 0x78
 800751e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	6829      	ldr	r1, [r5, #0]
 8007526:	061f      	lsls	r7, r3, #24
 8007528:	f851 6b04 	ldr.w	r6, [r1], #4
 800752c:	d402      	bmi.n	8007534 <_printf_i+0x18c>
 800752e:	065f      	lsls	r7, r3, #25
 8007530:	bf48      	it	mi
 8007532:	b2b6      	uxthmi	r6, r6
 8007534:	07df      	lsls	r7, r3, #31
 8007536:	bf48      	it	mi
 8007538:	f043 0320 	orrmi.w	r3, r3, #32
 800753c:	6029      	str	r1, [r5, #0]
 800753e:	bf48      	it	mi
 8007540:	6023      	strmi	r3, [r4, #0]
 8007542:	b91e      	cbnz	r6, 800754c <_printf_i+0x1a4>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	f023 0320 	bic.w	r3, r3, #32
 800754a:	6023      	str	r3, [r4, #0]
 800754c:	2310      	movs	r3, #16
 800754e:	e7a7      	b.n	80074a0 <_printf_i+0xf8>
 8007550:	4824      	ldr	r0, [pc, #144]	; (80075e4 <_printf_i+0x23c>)
 8007552:	e7e4      	b.n	800751e <_printf_i+0x176>
 8007554:	4615      	mov	r5, r2
 8007556:	e7bd      	b.n	80074d4 <_printf_i+0x12c>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	6826      	ldr	r6, [r4, #0]
 800755c:	6961      	ldr	r1, [r4, #20]
 800755e:	1d18      	adds	r0, r3, #4
 8007560:	6028      	str	r0, [r5, #0]
 8007562:	0635      	lsls	r5, r6, #24
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	d501      	bpl.n	800756c <_printf_i+0x1c4>
 8007568:	6019      	str	r1, [r3, #0]
 800756a:	e002      	b.n	8007572 <_printf_i+0x1ca>
 800756c:	0670      	lsls	r0, r6, #25
 800756e:	d5fb      	bpl.n	8007568 <_printf_i+0x1c0>
 8007570:	8019      	strh	r1, [r3, #0]
 8007572:	2300      	movs	r3, #0
 8007574:	6123      	str	r3, [r4, #16]
 8007576:	4615      	mov	r5, r2
 8007578:	e7bc      	b.n	80074f4 <_printf_i+0x14c>
 800757a:	682b      	ldr	r3, [r5, #0]
 800757c:	1d1a      	adds	r2, r3, #4
 800757e:	602a      	str	r2, [r5, #0]
 8007580:	681d      	ldr	r5, [r3, #0]
 8007582:	6862      	ldr	r2, [r4, #4]
 8007584:	2100      	movs	r1, #0
 8007586:	4628      	mov	r0, r5
 8007588:	f7f8 fe22 	bl	80001d0 <memchr>
 800758c:	b108      	cbz	r0, 8007592 <_printf_i+0x1ea>
 800758e:	1b40      	subs	r0, r0, r5
 8007590:	6060      	str	r0, [r4, #4]
 8007592:	6863      	ldr	r3, [r4, #4]
 8007594:	6123      	str	r3, [r4, #16]
 8007596:	2300      	movs	r3, #0
 8007598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800759c:	e7aa      	b.n	80074f4 <_printf_i+0x14c>
 800759e:	6923      	ldr	r3, [r4, #16]
 80075a0:	462a      	mov	r2, r5
 80075a2:	4649      	mov	r1, r9
 80075a4:	4640      	mov	r0, r8
 80075a6:	47d0      	blx	sl
 80075a8:	3001      	adds	r0, #1
 80075aa:	d0ad      	beq.n	8007508 <_printf_i+0x160>
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	079b      	lsls	r3, r3, #30
 80075b0:	d413      	bmi.n	80075da <_printf_i+0x232>
 80075b2:	68e0      	ldr	r0, [r4, #12]
 80075b4:	9b03      	ldr	r3, [sp, #12]
 80075b6:	4298      	cmp	r0, r3
 80075b8:	bfb8      	it	lt
 80075ba:	4618      	movlt	r0, r3
 80075bc:	e7a6      	b.n	800750c <_printf_i+0x164>
 80075be:	2301      	movs	r3, #1
 80075c0:	4632      	mov	r2, r6
 80075c2:	4649      	mov	r1, r9
 80075c4:	4640      	mov	r0, r8
 80075c6:	47d0      	blx	sl
 80075c8:	3001      	adds	r0, #1
 80075ca:	d09d      	beq.n	8007508 <_printf_i+0x160>
 80075cc:	3501      	adds	r5, #1
 80075ce:	68e3      	ldr	r3, [r4, #12]
 80075d0:	9903      	ldr	r1, [sp, #12]
 80075d2:	1a5b      	subs	r3, r3, r1
 80075d4:	42ab      	cmp	r3, r5
 80075d6:	dcf2      	bgt.n	80075be <_printf_i+0x216>
 80075d8:	e7eb      	b.n	80075b2 <_printf_i+0x20a>
 80075da:	2500      	movs	r5, #0
 80075dc:	f104 0619 	add.w	r6, r4, #25
 80075e0:	e7f5      	b.n	80075ce <_printf_i+0x226>
 80075e2:	bf00      	nop
 80075e4:	080082f9 	.word	0x080082f9
 80075e8:	0800830a 	.word	0x0800830a

080075ec <__sflush_r>:
 80075ec:	898a      	ldrh	r2, [r1, #12]
 80075ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f2:	4605      	mov	r5, r0
 80075f4:	0710      	lsls	r0, r2, #28
 80075f6:	460c      	mov	r4, r1
 80075f8:	d458      	bmi.n	80076ac <__sflush_r+0xc0>
 80075fa:	684b      	ldr	r3, [r1, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	dc05      	bgt.n	800760c <__sflush_r+0x20>
 8007600:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007602:	2b00      	cmp	r3, #0
 8007604:	dc02      	bgt.n	800760c <__sflush_r+0x20>
 8007606:	2000      	movs	r0, #0
 8007608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800760c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800760e:	2e00      	cmp	r6, #0
 8007610:	d0f9      	beq.n	8007606 <__sflush_r+0x1a>
 8007612:	2300      	movs	r3, #0
 8007614:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007618:	682f      	ldr	r7, [r5, #0]
 800761a:	6a21      	ldr	r1, [r4, #32]
 800761c:	602b      	str	r3, [r5, #0]
 800761e:	d032      	beq.n	8007686 <__sflush_r+0x9a>
 8007620:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	075a      	lsls	r2, r3, #29
 8007626:	d505      	bpl.n	8007634 <__sflush_r+0x48>
 8007628:	6863      	ldr	r3, [r4, #4]
 800762a:	1ac0      	subs	r0, r0, r3
 800762c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800762e:	b10b      	cbz	r3, 8007634 <__sflush_r+0x48>
 8007630:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007632:	1ac0      	subs	r0, r0, r3
 8007634:	2300      	movs	r3, #0
 8007636:	4602      	mov	r2, r0
 8007638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800763a:	6a21      	ldr	r1, [r4, #32]
 800763c:	4628      	mov	r0, r5
 800763e:	47b0      	blx	r6
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	d106      	bne.n	8007654 <__sflush_r+0x68>
 8007646:	6829      	ldr	r1, [r5, #0]
 8007648:	291d      	cmp	r1, #29
 800764a:	d82b      	bhi.n	80076a4 <__sflush_r+0xb8>
 800764c:	4a29      	ldr	r2, [pc, #164]	; (80076f4 <__sflush_r+0x108>)
 800764e:	410a      	asrs	r2, r1
 8007650:	07d6      	lsls	r6, r2, #31
 8007652:	d427      	bmi.n	80076a4 <__sflush_r+0xb8>
 8007654:	2200      	movs	r2, #0
 8007656:	6062      	str	r2, [r4, #4]
 8007658:	04d9      	lsls	r1, r3, #19
 800765a:	6922      	ldr	r2, [r4, #16]
 800765c:	6022      	str	r2, [r4, #0]
 800765e:	d504      	bpl.n	800766a <__sflush_r+0x7e>
 8007660:	1c42      	adds	r2, r0, #1
 8007662:	d101      	bne.n	8007668 <__sflush_r+0x7c>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	b903      	cbnz	r3, 800766a <__sflush_r+0x7e>
 8007668:	6560      	str	r0, [r4, #84]	; 0x54
 800766a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800766c:	602f      	str	r7, [r5, #0]
 800766e:	2900      	cmp	r1, #0
 8007670:	d0c9      	beq.n	8007606 <__sflush_r+0x1a>
 8007672:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007676:	4299      	cmp	r1, r3
 8007678:	d002      	beq.n	8007680 <__sflush_r+0x94>
 800767a:	4628      	mov	r0, r5
 800767c:	f7ff fbea 	bl	8006e54 <_free_r>
 8007680:	2000      	movs	r0, #0
 8007682:	6360      	str	r0, [r4, #52]	; 0x34
 8007684:	e7c0      	b.n	8007608 <__sflush_r+0x1c>
 8007686:	2301      	movs	r3, #1
 8007688:	4628      	mov	r0, r5
 800768a:	47b0      	blx	r6
 800768c:	1c41      	adds	r1, r0, #1
 800768e:	d1c8      	bne.n	8007622 <__sflush_r+0x36>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0c5      	beq.n	8007622 <__sflush_r+0x36>
 8007696:	2b1d      	cmp	r3, #29
 8007698:	d001      	beq.n	800769e <__sflush_r+0xb2>
 800769a:	2b16      	cmp	r3, #22
 800769c:	d101      	bne.n	80076a2 <__sflush_r+0xb6>
 800769e:	602f      	str	r7, [r5, #0]
 80076a0:	e7b1      	b.n	8007606 <__sflush_r+0x1a>
 80076a2:	89a3      	ldrh	r3, [r4, #12]
 80076a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076a8:	81a3      	strh	r3, [r4, #12]
 80076aa:	e7ad      	b.n	8007608 <__sflush_r+0x1c>
 80076ac:	690f      	ldr	r7, [r1, #16]
 80076ae:	2f00      	cmp	r7, #0
 80076b0:	d0a9      	beq.n	8007606 <__sflush_r+0x1a>
 80076b2:	0793      	lsls	r3, r2, #30
 80076b4:	680e      	ldr	r6, [r1, #0]
 80076b6:	bf08      	it	eq
 80076b8:	694b      	ldreq	r3, [r1, #20]
 80076ba:	600f      	str	r7, [r1, #0]
 80076bc:	bf18      	it	ne
 80076be:	2300      	movne	r3, #0
 80076c0:	eba6 0807 	sub.w	r8, r6, r7
 80076c4:	608b      	str	r3, [r1, #8]
 80076c6:	f1b8 0f00 	cmp.w	r8, #0
 80076ca:	dd9c      	ble.n	8007606 <__sflush_r+0x1a>
 80076cc:	6a21      	ldr	r1, [r4, #32]
 80076ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076d0:	4643      	mov	r3, r8
 80076d2:	463a      	mov	r2, r7
 80076d4:	4628      	mov	r0, r5
 80076d6:	47b0      	blx	r6
 80076d8:	2800      	cmp	r0, #0
 80076da:	dc06      	bgt.n	80076ea <__sflush_r+0xfe>
 80076dc:	89a3      	ldrh	r3, [r4, #12]
 80076de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e2:	81a3      	strh	r3, [r4, #12]
 80076e4:	f04f 30ff 	mov.w	r0, #4294967295
 80076e8:	e78e      	b.n	8007608 <__sflush_r+0x1c>
 80076ea:	4407      	add	r7, r0
 80076ec:	eba8 0800 	sub.w	r8, r8, r0
 80076f0:	e7e9      	b.n	80076c6 <__sflush_r+0xda>
 80076f2:	bf00      	nop
 80076f4:	dfbffffe 	.word	0xdfbffffe

080076f8 <_fflush_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	690b      	ldr	r3, [r1, #16]
 80076fc:	4605      	mov	r5, r0
 80076fe:	460c      	mov	r4, r1
 8007700:	b913      	cbnz	r3, 8007708 <_fflush_r+0x10>
 8007702:	2500      	movs	r5, #0
 8007704:	4628      	mov	r0, r5
 8007706:	bd38      	pop	{r3, r4, r5, pc}
 8007708:	b118      	cbz	r0, 8007712 <_fflush_r+0x1a>
 800770a:	6a03      	ldr	r3, [r0, #32]
 800770c:	b90b      	cbnz	r3, 8007712 <_fflush_r+0x1a>
 800770e:	f7ff fa99 	bl	8006c44 <__sinit>
 8007712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0f3      	beq.n	8007702 <_fflush_r+0xa>
 800771a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800771c:	07d0      	lsls	r0, r2, #31
 800771e:	d404      	bmi.n	800772a <_fflush_r+0x32>
 8007720:	0599      	lsls	r1, r3, #22
 8007722:	d402      	bmi.n	800772a <_fflush_r+0x32>
 8007724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007726:	f7ff fb92 	bl	8006e4e <__retarget_lock_acquire_recursive>
 800772a:	4628      	mov	r0, r5
 800772c:	4621      	mov	r1, r4
 800772e:	f7ff ff5d 	bl	80075ec <__sflush_r>
 8007732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007734:	07da      	lsls	r2, r3, #31
 8007736:	4605      	mov	r5, r0
 8007738:	d4e4      	bmi.n	8007704 <_fflush_r+0xc>
 800773a:	89a3      	ldrh	r3, [r4, #12]
 800773c:	059b      	lsls	r3, r3, #22
 800773e:	d4e1      	bmi.n	8007704 <_fflush_r+0xc>
 8007740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007742:	f7ff fb85 	bl	8006e50 <__retarget_lock_release_recursive>
 8007746:	e7dd      	b.n	8007704 <_fflush_r+0xc>

08007748 <__swbuf_r>:
 8007748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774a:	460e      	mov	r6, r1
 800774c:	4614      	mov	r4, r2
 800774e:	4605      	mov	r5, r0
 8007750:	b118      	cbz	r0, 800775a <__swbuf_r+0x12>
 8007752:	6a03      	ldr	r3, [r0, #32]
 8007754:	b90b      	cbnz	r3, 800775a <__swbuf_r+0x12>
 8007756:	f7ff fa75 	bl	8006c44 <__sinit>
 800775a:	69a3      	ldr	r3, [r4, #24]
 800775c:	60a3      	str	r3, [r4, #8]
 800775e:	89a3      	ldrh	r3, [r4, #12]
 8007760:	071a      	lsls	r2, r3, #28
 8007762:	d525      	bpl.n	80077b0 <__swbuf_r+0x68>
 8007764:	6923      	ldr	r3, [r4, #16]
 8007766:	b31b      	cbz	r3, 80077b0 <__swbuf_r+0x68>
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	6922      	ldr	r2, [r4, #16]
 800776c:	1a98      	subs	r0, r3, r2
 800776e:	6963      	ldr	r3, [r4, #20]
 8007770:	b2f6      	uxtb	r6, r6
 8007772:	4283      	cmp	r3, r0
 8007774:	4637      	mov	r7, r6
 8007776:	dc04      	bgt.n	8007782 <__swbuf_r+0x3a>
 8007778:	4621      	mov	r1, r4
 800777a:	4628      	mov	r0, r5
 800777c:	f7ff ffbc 	bl	80076f8 <_fflush_r>
 8007780:	b9e0      	cbnz	r0, 80077bc <__swbuf_r+0x74>
 8007782:	68a3      	ldr	r3, [r4, #8]
 8007784:	3b01      	subs	r3, #1
 8007786:	60a3      	str	r3, [r4, #8]
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	6022      	str	r2, [r4, #0]
 800778e:	701e      	strb	r6, [r3, #0]
 8007790:	6962      	ldr	r2, [r4, #20]
 8007792:	1c43      	adds	r3, r0, #1
 8007794:	429a      	cmp	r2, r3
 8007796:	d004      	beq.n	80077a2 <__swbuf_r+0x5a>
 8007798:	89a3      	ldrh	r3, [r4, #12]
 800779a:	07db      	lsls	r3, r3, #31
 800779c:	d506      	bpl.n	80077ac <__swbuf_r+0x64>
 800779e:	2e0a      	cmp	r6, #10
 80077a0:	d104      	bne.n	80077ac <__swbuf_r+0x64>
 80077a2:	4621      	mov	r1, r4
 80077a4:	4628      	mov	r0, r5
 80077a6:	f7ff ffa7 	bl	80076f8 <_fflush_r>
 80077aa:	b938      	cbnz	r0, 80077bc <__swbuf_r+0x74>
 80077ac:	4638      	mov	r0, r7
 80077ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077b0:	4621      	mov	r1, r4
 80077b2:	4628      	mov	r0, r5
 80077b4:	f000 f806 	bl	80077c4 <__swsetup_r>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	d0d5      	beq.n	8007768 <__swbuf_r+0x20>
 80077bc:	f04f 37ff 	mov.w	r7, #4294967295
 80077c0:	e7f4      	b.n	80077ac <__swbuf_r+0x64>
	...

080077c4 <__swsetup_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4b2a      	ldr	r3, [pc, #168]	; (8007870 <__swsetup_r+0xac>)
 80077c8:	4605      	mov	r5, r0
 80077ca:	6818      	ldr	r0, [r3, #0]
 80077cc:	460c      	mov	r4, r1
 80077ce:	b118      	cbz	r0, 80077d8 <__swsetup_r+0x14>
 80077d0:	6a03      	ldr	r3, [r0, #32]
 80077d2:	b90b      	cbnz	r3, 80077d8 <__swsetup_r+0x14>
 80077d4:	f7ff fa36 	bl	8006c44 <__sinit>
 80077d8:	89a3      	ldrh	r3, [r4, #12]
 80077da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077de:	0718      	lsls	r0, r3, #28
 80077e0:	d422      	bmi.n	8007828 <__swsetup_r+0x64>
 80077e2:	06d9      	lsls	r1, r3, #27
 80077e4:	d407      	bmi.n	80077f6 <__swsetup_r+0x32>
 80077e6:	2309      	movs	r3, #9
 80077e8:	602b      	str	r3, [r5, #0]
 80077ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80077ee:	81a3      	strh	r3, [r4, #12]
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295
 80077f4:	e034      	b.n	8007860 <__swsetup_r+0x9c>
 80077f6:	0758      	lsls	r0, r3, #29
 80077f8:	d512      	bpl.n	8007820 <__swsetup_r+0x5c>
 80077fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077fc:	b141      	cbz	r1, 8007810 <__swsetup_r+0x4c>
 80077fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007802:	4299      	cmp	r1, r3
 8007804:	d002      	beq.n	800780c <__swsetup_r+0x48>
 8007806:	4628      	mov	r0, r5
 8007808:	f7ff fb24 	bl	8006e54 <_free_r>
 800780c:	2300      	movs	r3, #0
 800780e:	6363      	str	r3, [r4, #52]	; 0x34
 8007810:	89a3      	ldrh	r3, [r4, #12]
 8007812:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007816:	81a3      	strh	r3, [r4, #12]
 8007818:	2300      	movs	r3, #0
 800781a:	6063      	str	r3, [r4, #4]
 800781c:	6923      	ldr	r3, [r4, #16]
 800781e:	6023      	str	r3, [r4, #0]
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	f043 0308 	orr.w	r3, r3, #8
 8007826:	81a3      	strh	r3, [r4, #12]
 8007828:	6923      	ldr	r3, [r4, #16]
 800782a:	b94b      	cbnz	r3, 8007840 <__swsetup_r+0x7c>
 800782c:	89a3      	ldrh	r3, [r4, #12]
 800782e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007836:	d003      	beq.n	8007840 <__swsetup_r+0x7c>
 8007838:	4621      	mov	r1, r4
 800783a:	4628      	mov	r0, r5
 800783c:	f000 f850 	bl	80078e0 <__smakebuf_r>
 8007840:	89a0      	ldrh	r0, [r4, #12]
 8007842:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007846:	f010 0301 	ands.w	r3, r0, #1
 800784a:	d00a      	beq.n	8007862 <__swsetup_r+0x9e>
 800784c:	2300      	movs	r3, #0
 800784e:	60a3      	str	r3, [r4, #8]
 8007850:	6963      	ldr	r3, [r4, #20]
 8007852:	425b      	negs	r3, r3
 8007854:	61a3      	str	r3, [r4, #24]
 8007856:	6923      	ldr	r3, [r4, #16]
 8007858:	b943      	cbnz	r3, 800786c <__swsetup_r+0xa8>
 800785a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800785e:	d1c4      	bne.n	80077ea <__swsetup_r+0x26>
 8007860:	bd38      	pop	{r3, r4, r5, pc}
 8007862:	0781      	lsls	r1, r0, #30
 8007864:	bf58      	it	pl
 8007866:	6963      	ldrpl	r3, [r4, #20]
 8007868:	60a3      	str	r3, [r4, #8]
 800786a:	e7f4      	b.n	8007856 <__swsetup_r+0x92>
 800786c:	2000      	movs	r0, #0
 800786e:	e7f7      	b.n	8007860 <__swsetup_r+0x9c>
 8007870:	20000068 	.word	0x20000068

08007874 <_sbrk_r>:
 8007874:	b538      	push	{r3, r4, r5, lr}
 8007876:	4d06      	ldr	r5, [pc, #24]	; (8007890 <_sbrk_r+0x1c>)
 8007878:	2300      	movs	r3, #0
 800787a:	4604      	mov	r4, r0
 800787c:	4608      	mov	r0, r1
 800787e:	602b      	str	r3, [r5, #0]
 8007880:	f7f9 fecc 	bl	800161c <_sbrk>
 8007884:	1c43      	adds	r3, r0, #1
 8007886:	d102      	bne.n	800788e <_sbrk_r+0x1a>
 8007888:	682b      	ldr	r3, [r5, #0]
 800788a:	b103      	cbz	r3, 800788e <_sbrk_r+0x1a>
 800788c:	6023      	str	r3, [r4, #0]
 800788e:	bd38      	pop	{r3, r4, r5, pc}
 8007890:	20000bcc 	.word	0x20000bcc

08007894 <__swhatbuf_r>:
 8007894:	b570      	push	{r4, r5, r6, lr}
 8007896:	460c      	mov	r4, r1
 8007898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800789c:	2900      	cmp	r1, #0
 800789e:	b096      	sub	sp, #88	; 0x58
 80078a0:	4615      	mov	r5, r2
 80078a2:	461e      	mov	r6, r3
 80078a4:	da0d      	bge.n	80078c2 <__swhatbuf_r+0x2e>
 80078a6:	89a3      	ldrh	r3, [r4, #12]
 80078a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80078ac:	f04f 0100 	mov.w	r1, #0
 80078b0:	bf0c      	ite	eq
 80078b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80078b6:	2340      	movne	r3, #64	; 0x40
 80078b8:	2000      	movs	r0, #0
 80078ba:	6031      	str	r1, [r6, #0]
 80078bc:	602b      	str	r3, [r5, #0]
 80078be:	b016      	add	sp, #88	; 0x58
 80078c0:	bd70      	pop	{r4, r5, r6, pc}
 80078c2:	466a      	mov	r2, sp
 80078c4:	f000 f848 	bl	8007958 <_fstat_r>
 80078c8:	2800      	cmp	r0, #0
 80078ca:	dbec      	blt.n	80078a6 <__swhatbuf_r+0x12>
 80078cc:	9901      	ldr	r1, [sp, #4]
 80078ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80078d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80078d6:	4259      	negs	r1, r3
 80078d8:	4159      	adcs	r1, r3
 80078da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078de:	e7eb      	b.n	80078b8 <__swhatbuf_r+0x24>

080078e0 <__smakebuf_r>:
 80078e0:	898b      	ldrh	r3, [r1, #12]
 80078e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078e4:	079d      	lsls	r5, r3, #30
 80078e6:	4606      	mov	r6, r0
 80078e8:	460c      	mov	r4, r1
 80078ea:	d507      	bpl.n	80078fc <__smakebuf_r+0x1c>
 80078ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	6123      	str	r3, [r4, #16]
 80078f4:	2301      	movs	r3, #1
 80078f6:	6163      	str	r3, [r4, #20]
 80078f8:	b002      	add	sp, #8
 80078fa:	bd70      	pop	{r4, r5, r6, pc}
 80078fc:	ab01      	add	r3, sp, #4
 80078fe:	466a      	mov	r2, sp
 8007900:	f7ff ffc8 	bl	8007894 <__swhatbuf_r>
 8007904:	9900      	ldr	r1, [sp, #0]
 8007906:	4605      	mov	r5, r0
 8007908:	4630      	mov	r0, r6
 800790a:	f7ff fb0f 	bl	8006f2c <_malloc_r>
 800790e:	b948      	cbnz	r0, 8007924 <__smakebuf_r+0x44>
 8007910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007914:	059a      	lsls	r2, r3, #22
 8007916:	d4ef      	bmi.n	80078f8 <__smakebuf_r+0x18>
 8007918:	f023 0303 	bic.w	r3, r3, #3
 800791c:	f043 0302 	orr.w	r3, r3, #2
 8007920:	81a3      	strh	r3, [r4, #12]
 8007922:	e7e3      	b.n	80078ec <__smakebuf_r+0xc>
 8007924:	89a3      	ldrh	r3, [r4, #12]
 8007926:	6020      	str	r0, [r4, #0]
 8007928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800792c:	81a3      	strh	r3, [r4, #12]
 800792e:	9b00      	ldr	r3, [sp, #0]
 8007930:	6163      	str	r3, [r4, #20]
 8007932:	9b01      	ldr	r3, [sp, #4]
 8007934:	6120      	str	r0, [r4, #16]
 8007936:	b15b      	cbz	r3, 8007950 <__smakebuf_r+0x70>
 8007938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800793c:	4630      	mov	r0, r6
 800793e:	f000 f81d 	bl	800797c <_isatty_r>
 8007942:	b128      	cbz	r0, 8007950 <__smakebuf_r+0x70>
 8007944:	89a3      	ldrh	r3, [r4, #12]
 8007946:	f023 0303 	bic.w	r3, r3, #3
 800794a:	f043 0301 	orr.w	r3, r3, #1
 800794e:	81a3      	strh	r3, [r4, #12]
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	431d      	orrs	r5, r3
 8007954:	81a5      	strh	r5, [r4, #12]
 8007956:	e7cf      	b.n	80078f8 <__smakebuf_r+0x18>

08007958 <_fstat_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4d07      	ldr	r5, [pc, #28]	; (8007978 <_fstat_r+0x20>)
 800795c:	2300      	movs	r3, #0
 800795e:	4604      	mov	r4, r0
 8007960:	4608      	mov	r0, r1
 8007962:	4611      	mov	r1, r2
 8007964:	602b      	str	r3, [r5, #0]
 8007966:	f7f9 fe30 	bl	80015ca <_fstat>
 800796a:	1c43      	adds	r3, r0, #1
 800796c:	d102      	bne.n	8007974 <_fstat_r+0x1c>
 800796e:	682b      	ldr	r3, [r5, #0]
 8007970:	b103      	cbz	r3, 8007974 <_fstat_r+0x1c>
 8007972:	6023      	str	r3, [r4, #0]
 8007974:	bd38      	pop	{r3, r4, r5, pc}
 8007976:	bf00      	nop
 8007978:	20000bcc 	.word	0x20000bcc

0800797c <_isatty_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	4d06      	ldr	r5, [pc, #24]	; (8007998 <_isatty_r+0x1c>)
 8007980:	2300      	movs	r3, #0
 8007982:	4604      	mov	r4, r0
 8007984:	4608      	mov	r0, r1
 8007986:	602b      	str	r3, [r5, #0]
 8007988:	f7f9 fe2f 	bl	80015ea <_isatty>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	d102      	bne.n	8007996 <_isatty_r+0x1a>
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	b103      	cbz	r3, 8007996 <_isatty_r+0x1a>
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	bd38      	pop	{r3, r4, r5, pc}
 8007998:	20000bcc 	.word	0x20000bcc

0800799c <_init>:
 800799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799e:	bf00      	nop
 80079a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a2:	bc08      	pop	{r3}
 80079a4:	469e      	mov	lr, r3
 80079a6:	4770      	bx	lr

080079a8 <_fini>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	bf00      	nop
 80079ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ae:	bc08      	pop	{r3}
 80079b0:	469e      	mov	lr, r3
 80079b2:	4770      	bx	lr
