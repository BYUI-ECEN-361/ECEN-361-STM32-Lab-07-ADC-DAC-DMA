
ECEN-361-STM32-Lab-08-Sampling-Solution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08005e6c  08005e6c  00015e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f3c  08005f3c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f3c  08005f3c  00015f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f44  08005f44  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f44  08005f44  00015f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f48  08005f48  00015f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000006c  08005fb8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08005fb8  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000128cf  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029c3  00000000  00000000  000329ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  00035378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dbf  00000000  00000000  00036530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000286d3  00000000  00000000  000372ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001434e  00000000  00000000  0005f9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6d22  00000000  00000000  00073d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005184  00000000  00000000  0016aa34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0016fbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e54 	.word	0x08005e54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005e54 	.word	0x08005e54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	817b      	strh	r3, [r7, #10]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]
 8000584:	e038      	b.n	80005f8 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10f      	bne.n	80005ae <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	4619      	mov	r1, r3
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f001 ff99 	bl	80024d4 <HAL_GPIO_WritePin>
			val >>= 1;
 80005a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005ac:	e00f      	b.n	80005ce <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005ae:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	09db      	lsrs	r3, r3, #7
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f001 ff88 	bl	80024d4 <HAL_GPIO_WritePin>
			val <<= 1;
 80005c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f001 ff7d 	bl	80024d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 ff77 	bl	80024d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005e6:	893b      	ldrh	r3, [r7, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 ff71 	bl	80024d4 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	3301      	adds	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <shiftOut+0x1a>
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <MultiFunctionShield_Display>:
	SEGMENT_VALUE[0] = 0x0e;    // Letter F
	}


void MultiFunctionShield_Display (int16_t value)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	80fb      	strh	r3, [r7, #6]
  if ((value > 9999) || (value < -999))   // out of range
 8000612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000616:	f242 720f 	movw	r2, #9999	; 0x270f
 800061a:	4293      	cmp	r3, r2
 800061c:	dc04      	bgt.n	8000628 <MultiFunctionShield_Display+0x20>
 800061e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000622:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000626:	dc0c      	bgt.n	8000642 <MultiFunctionShield_Display+0x3a>
  {
    SEGMENT_VALUE[0] = SEGMENT_MINUS;
 8000628:	22bf      	movs	r2, #191	; 0xbf
 800062a:	4b7f      	ldr	r3, [pc, #508]	; (8000828 <MultiFunctionShield_Display+0x220>)
 800062c:	701a      	strb	r2, [r3, #0]
    SEGMENT_VALUE[1] = SEGMENT_MINUS;
 800062e:	22bf      	movs	r2, #191	; 0xbf
 8000630:	4b7d      	ldr	r3, [pc, #500]	; (8000828 <MultiFunctionShield_Display+0x220>)
 8000632:	705a      	strb	r2, [r3, #1]
    SEGMENT_VALUE[2] = SEGMENT_MINUS;
 8000634:	22bf      	movs	r2, #191	; 0xbf
 8000636:	4b7c      	ldr	r3, [pc, #496]	; (8000828 <MultiFunctionShield_Display+0x220>)
 8000638:	709a      	strb	r2, [r3, #2]
    SEGMENT_VALUE[3] = SEGMENT_MINUS;
 800063a:	22bf      	movs	r2, #191	; 0xbf
 800063c:	4b7a      	ldr	r3, [pc, #488]	; (8000828 <MultiFunctionShield_Display+0x220>)
 800063e:	70da      	strb	r2, [r3, #3]
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;

      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
    }
  }
}
 8000640:	e0ec      	b.n	800081c <MultiFunctionShield_Display+0x214>
    if (value > 0)   // positive values
 8000642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000646:	2b00      	cmp	r3, #0
 8000648:	dd72      	ble.n	8000730 <MultiFunctionShield_Display+0x128>
      if (value > 999)
 800064a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800064e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000652:	db0f      	blt.n	8000674 <MultiFunctionShield_Display+0x6c>
        SEGMENT_VALUE[0] = SEGMENT_MAP [(uint8_t) (value / 1000)];
 8000654:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000658:	4a74      	ldr	r2, [pc, #464]	; (800082c <MultiFunctionShield_Display+0x224>)
 800065a:	fb82 1203 	smull	r1, r2, r2, r3
 800065e:	1192      	asrs	r2, r2, #6
 8000660:	17db      	asrs	r3, r3, #31
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	b21b      	sxth	r3, r3
 8000666:	b2db      	uxtb	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	4b71      	ldr	r3, [pc, #452]	; (8000830 <MultiFunctionShield_Display+0x228>)
 800066c:	5c9a      	ldrb	r2, [r3, r2]
 800066e:	4b6e      	ldr	r3, [pc, #440]	; (8000828 <MultiFunctionShield_Display+0x220>)
 8000670:	701a      	strb	r2, [r3, #0]
 8000672:	e002      	b.n	800067a <MultiFunctionShield_Display+0x72>
        SEGMENT_VALUE[0] = BLANK_OR_ZERO_FILL;
 8000674:	22c0      	movs	r2, #192	; 0xc0
 8000676:	4b6c      	ldr	r3, [pc, #432]	; (8000828 <MultiFunctionShield_Display+0x220>)
 8000678:	701a      	strb	r2, [r3, #0]
      if (value > 99)
 800067a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800067e:	2b63      	cmp	r3, #99	; 0x63
 8000680:	dd1b      	ble.n	80006ba <MultiFunctionShield_Display+0xb2>
        SEGMENT_VALUE[1] = SEGMENT_MAP [(uint8_t) ((value / 100) % 10)];
 8000682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000686:	4a6b      	ldr	r2, [pc, #428]	; (8000834 <MultiFunctionShield_Display+0x22c>)
 8000688:	fb82 1203 	smull	r1, r2, r2, r3
 800068c:	1152      	asrs	r2, r2, #5
 800068e:	17db      	asrs	r3, r3, #31
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	b21a      	sxth	r2, r3
 8000694:	4b68      	ldr	r3, [pc, #416]	; (8000838 <MultiFunctionShield_Display+0x230>)
 8000696:	fb83 1302 	smull	r1, r3, r3, r2
 800069a:	1099      	asrs	r1, r3, #2
 800069c:	17d3      	asrs	r3, r2, #31
 800069e:	1ac9      	subs	r1, r1, r3
 80006a0:	460b      	mov	r3, r1
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	440b      	add	r3, r1
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	b21b      	sxth	r3, r3
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b5f      	ldr	r3, [pc, #380]	; (8000830 <MultiFunctionShield_Display+0x228>)
 80006b2:	5c9a      	ldrb	r2, [r3, r2]
 80006b4:	4b5c      	ldr	r3, [pc, #368]	; (8000828 <MultiFunctionShield_Display+0x220>)
 80006b6:	705a      	strb	r2, [r3, #1]
 80006b8:	e002      	b.n	80006c0 <MultiFunctionShield_Display+0xb8>
        SEGMENT_VALUE[1] = BLANK_OR_ZERO_FILL;
 80006ba:	22c0      	movs	r2, #192	; 0xc0
 80006bc:	4b5a      	ldr	r3, [pc, #360]	; (8000828 <MultiFunctionShield_Display+0x220>)
 80006be:	705a      	strb	r2, [r3, #1]
      if (value > 9)
 80006c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c4:	2b09      	cmp	r3, #9
 80006c6:	dd1b      	ble.n	8000700 <MultiFunctionShield_Display+0xf8>
        SEGMENT_VALUE[2] = SEGMENT_MAP [(uint8_t) ((value / 10) % 10)];
 80006c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006cc:	4a5a      	ldr	r2, [pc, #360]	; (8000838 <MultiFunctionShield_Display+0x230>)
 80006ce:	fb82 1203 	smull	r1, r2, r2, r3
 80006d2:	1092      	asrs	r2, r2, #2
 80006d4:	17db      	asrs	r3, r3, #31
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	b21a      	sxth	r2, r3
 80006da:	4b57      	ldr	r3, [pc, #348]	; (8000838 <MultiFunctionShield_Display+0x230>)
 80006dc:	fb83 1302 	smull	r1, r3, r3, r2
 80006e0:	1099      	asrs	r1, r3, #2
 80006e2:	17d3      	asrs	r3, r2, #31
 80006e4:	1ac9      	subs	r1, r1, r3
 80006e6:	460b      	mov	r3, r1
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	440b      	add	r3, r1
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b21b      	sxth	r3, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b4e      	ldr	r3, [pc, #312]	; (8000830 <MultiFunctionShield_Display+0x228>)
 80006f8:	5c9a      	ldrb	r2, [r3, r2]
 80006fa:	4b4b      	ldr	r3, [pc, #300]	; (8000828 <MultiFunctionShield_Display+0x220>)
 80006fc:	709a      	strb	r2, [r3, #2]
 80006fe:	e002      	b.n	8000706 <MultiFunctionShield_Display+0xfe>
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;
 8000700:	22c0      	movs	r2, #192	; 0xc0
 8000702:	4b49      	ldr	r3, [pc, #292]	; (8000828 <MultiFunctionShield_Display+0x220>)
 8000704:	709a      	strb	r2, [r3, #2]
      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
 8000706:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800070a:	4b4b      	ldr	r3, [pc, #300]	; (8000838 <MultiFunctionShield_Display+0x230>)
 800070c:	fb83 1302 	smull	r1, r3, r3, r2
 8000710:	1099      	asrs	r1, r3, #2
 8000712:	17d3      	asrs	r3, r2, #31
 8000714:	1ac9      	subs	r1, r1, r3
 8000716:	460b      	mov	r3, r1
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	440b      	add	r3, r1
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	b21b      	sxth	r3, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	461a      	mov	r2, r3
 8000726:	4b42      	ldr	r3, [pc, #264]	; (8000830 <MultiFunctionShield_Display+0x228>)
 8000728:	5c9a      	ldrb	r2, [r3, r2]
 800072a:	4b3f      	ldr	r3, [pc, #252]	; (8000828 <MultiFunctionShield_Display+0x220>)
 800072c:	70da      	strb	r2, [r3, #3]
}
 800072e:	e075      	b.n	800081c <MultiFunctionShield_Display+0x214>
    else if (value == 0)   // positive values
 8000730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d10c      	bne.n	8000752 <MultiFunctionShield_Display+0x14a>
		SEGMENT_VALUE[0] = SEGMENT_MAP[0];
 8000738:	22c0      	movs	r2, #192	; 0xc0
 800073a:	4b3b      	ldr	r3, [pc, #236]	; (8000828 <MultiFunctionShield_Display+0x220>)
 800073c:	701a      	strb	r2, [r3, #0]
		SEGMENT_VALUE[1] = SEGMENT_MAP[0];
 800073e:	22c0      	movs	r2, #192	; 0xc0
 8000740:	4b39      	ldr	r3, [pc, #228]	; (8000828 <MultiFunctionShield_Display+0x220>)
 8000742:	705a      	strb	r2, [r3, #1]
		SEGMENT_VALUE[2] = SEGMENT_MAP[0];
 8000744:	22c0      	movs	r2, #192	; 0xc0
 8000746:	4b38      	ldr	r3, [pc, #224]	; (8000828 <MultiFunctionShield_Display+0x220>)
 8000748:	709a      	strb	r2, [r3, #2]
		SEGMENT_VALUE[3] = SEGMENT_MAP[0];
 800074a:	22c0      	movs	r2, #192	; 0xc0
 800074c:	4b36      	ldr	r3, [pc, #216]	; (8000828 <MultiFunctionShield_Display+0x220>)
 800074e:	70da      	strb	r2, [r3, #3]
}
 8000750:	e064      	b.n	800081c <MultiFunctionShield_Display+0x214>
    else if (value < 0)      // negative values: "-" left
 8000752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000756:	2b00      	cmp	r3, #0
 8000758:	da60      	bge.n	800081c <MultiFunctionShield_Display+0x214>
      value *= -1;
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	425b      	negs	r3, r3
 800075e:	b29b      	uxth	r3, r3
 8000760:	80fb      	strh	r3, [r7, #6]
      SEGMENT_VALUE[0] = SEGMENT_MINUS;
 8000762:	22bf      	movs	r2, #191	; 0xbf
 8000764:	4b30      	ldr	r3, [pc, #192]	; (8000828 <MultiFunctionShield_Display+0x220>)
 8000766:	701a      	strb	r2, [r3, #0]
      if (value > 99)
 8000768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800076c:	2b63      	cmp	r3, #99	; 0x63
 800076e:	dd1b      	ble.n	80007a8 <MultiFunctionShield_Display+0x1a0>
        SEGMENT_VALUE[1] = SEGMENT_MAP [(uint8_t) ((value / 100) % 10)];
 8000770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000774:	4a2f      	ldr	r2, [pc, #188]	; (8000834 <MultiFunctionShield_Display+0x22c>)
 8000776:	fb82 1203 	smull	r1, r2, r2, r3
 800077a:	1152      	asrs	r2, r2, #5
 800077c:	17db      	asrs	r3, r3, #31
 800077e:	1ad3      	subs	r3, r2, r3
 8000780:	b21a      	sxth	r2, r3
 8000782:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <MultiFunctionShield_Display+0x230>)
 8000784:	fb83 1302 	smull	r1, r3, r3, r2
 8000788:	1099      	asrs	r1, r3, #2
 800078a:	17d3      	asrs	r3, r2, #31
 800078c:	1ac9      	subs	r1, r1, r3
 800078e:	460b      	mov	r3, r1
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	440b      	add	r3, r1
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	b21b      	sxth	r3, r3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	461a      	mov	r2, r3
 800079e:	4b24      	ldr	r3, [pc, #144]	; (8000830 <MultiFunctionShield_Display+0x228>)
 80007a0:	5c9a      	ldrb	r2, [r3, r2]
 80007a2:	4b21      	ldr	r3, [pc, #132]	; (8000828 <MultiFunctionShield_Display+0x220>)
 80007a4:	705a      	strb	r2, [r3, #1]
 80007a6:	e002      	b.n	80007ae <MultiFunctionShield_Display+0x1a6>
        SEGMENT_VALUE[1] = BLANK_OR_ZERO_FILL;
 80007a8:	22c0      	movs	r2, #192	; 0xc0
 80007aa:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <MultiFunctionShield_Display+0x220>)
 80007ac:	705a      	strb	r2, [r3, #1]
      if (value > 9)
 80007ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007b2:	2b09      	cmp	r3, #9
 80007b4:	dd1b      	ble.n	80007ee <MultiFunctionShield_Display+0x1e6>
        SEGMENT_VALUE[2] = SEGMENT_MAP [(uint8_t) ((value / 10) % 10)];
 80007b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ba:	4a1f      	ldr	r2, [pc, #124]	; (8000838 <MultiFunctionShield_Display+0x230>)
 80007bc:	fb82 1203 	smull	r1, r2, r2, r3
 80007c0:	1092      	asrs	r2, r2, #2
 80007c2:	17db      	asrs	r3, r3, #31
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	b21a      	sxth	r2, r3
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MultiFunctionShield_Display+0x230>)
 80007ca:	fb83 1302 	smull	r1, r3, r3, r2
 80007ce:	1099      	asrs	r1, r3, #2
 80007d0:	17d3      	asrs	r3, r2, #31
 80007d2:	1ac9      	subs	r1, r1, r3
 80007d4:	460b      	mov	r3, r1
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	440b      	add	r3, r1
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	b21b      	sxth	r3, r3
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MultiFunctionShield_Display+0x228>)
 80007e6:	5c9a      	ldrb	r2, [r3, r2]
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MultiFunctionShield_Display+0x220>)
 80007ea:	709a      	strb	r2, [r3, #2]
 80007ec:	e002      	b.n	80007f4 <MultiFunctionShield_Display+0x1ec>
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;
 80007ee:	22c0      	movs	r2, #192	; 0xc0
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MultiFunctionShield_Display+0x220>)
 80007f2:	709a      	strb	r2, [r3, #2]
      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
 80007f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MultiFunctionShield_Display+0x230>)
 80007fa:	fb83 1302 	smull	r1, r3, r3, r2
 80007fe:	1099      	asrs	r1, r3, #2
 8000800:	17d3      	asrs	r3, r2, #31
 8000802:	1ac9      	subs	r1, r1, r3
 8000804:	460b      	mov	r3, r1
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	440b      	add	r3, r1
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	b21b      	sxth	r3, r3
 8000810:	b2db      	uxtb	r3, r3
 8000812:	461a      	mov	r2, r3
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MultiFunctionShield_Display+0x228>)
 8000816:	5c9a      	ldrb	r2, [r3, r2]
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <MultiFunctionShield_Display+0x220>)
 800081a:	70da      	strb	r2, [r3, #3]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	2000008c 	.word	0x2000008c
 800082c:	10624dd3 	.word	0x10624dd3
 8000830:	08005e9c 	.word	0x08005e9c
 8000834:	51eb851f 	.word	0x51eb851f
 8000838:	66666667 	.word	0x66666667

0800083c <Clear_LEDs>:
		SEGMENT_VALUE[1] = SEGMENT_MAP [1];
		}
	}

void Clear_LEDs(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	  // Clear the LED lights


// LAB-04 needs D1 and D3 for SPI
#ifndef          LAB_04
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2180      	movs	r1, #128	; 0x80
 8000844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000848:	f001 fe44 	bl	80024d4 <HAL_GPIO_WritePin>
#endif

  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2140      	movs	r1, #64	; 0x40
 8000850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000854:	f001 fe3e 	bl	80024d4 <HAL_GPIO_WritePin>

#ifndef          LAB_06
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2140      	movs	r1, #64	; 0x40
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <Clear_LEDs+0x38>)
 800085e:	f001 fe39 	bl	80024d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2120      	movs	r1, #32
 8000866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086a:	f001 fe33 	bl	80024d4 <HAL_GPIO_WritePin>
#endif
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	48000400 	.word	0x48000400

08000878 <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 800087c:	22ff      	movs	r2, #255	; 0xff
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MultiFunctionShield_Clear+0x28>)
 8000880:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 8000882:	22ff      	movs	r2, #255	; 0xff
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MultiFunctionShield_Clear+0x28>)
 8000886:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 8000888:	22ff      	movs	r2, #255	; 0xff
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <MultiFunctionShield_Clear+0x28>)
 800088c:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 800088e:	22ff      	movs	r2, #255	; 0xff
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <MultiFunctionShield_Clear+0x28>)
 8000892:	70da      	strb	r2, [r3, #3]
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	2000008c 	.word	0x2000008c

080008a4 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af02      	add	r7, sp, #8
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2120      	movs	r1, #32
 80008b2:	4816      	ldr	r0, [pc, #88]	; (800090c <MultiFunctionShield_WriteNumberToSegment+0x68>)
 80008b4:	f001 fe0e 	bl	80024d4 <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80008b8:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 80008ba:	4a15      	ldr	r2, [pc, #84]	; (8000910 <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 80008bc:	5cd3      	ldrb	r3, [r2, r3]
 80008be:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	2301      	movs	r3, #1
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d6:	f7ff fe49 	bl	800056c <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80008da:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 80008dc:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 80008de:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80008e0:	9301      	str	r3, [sp, #4]
 80008e2:	2301      	movs	r3, #1
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80008ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f7ff fe39 	bl	800056c <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	2120      	movs	r1, #32
 80008fe:	4803      	ldr	r0, [pc, #12]	; (800090c <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000900:	f001 fde8 	bl	80024d4 <HAL_GPIO_WritePin>
	}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	48000400 	.word	0x48000400
 8000910:	2000008c 	.word	0x2000008c
 8000914:	08005ea8 	.word	0x08005ea8

08000918 <MultiFunctionShield__ISRFunc>:
	}



void MultiFunctionShield__ISRFunc(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MultiFunctionShield__ISRFunc+0x60>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	3301      	adds	r3, #1
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MultiFunctionShield__ISRFunc+0x60>)
 8000928:	4611      	mov	r1, r2
 800092a:	7019      	strb	r1, [r3, #0]
 800092c:	4613      	mov	r3, r2
 800092e:	3b01      	subs	r3, #1
 8000930:	2b03      	cmp	r3, #3
 8000932:	d81e      	bhi.n	8000972 <MultiFunctionShield__ISRFunc+0x5a>
 8000934:	a201      	add	r2, pc, #4	; (adr r2, 800093c <MultiFunctionShield__ISRFunc+0x24>)
 8000936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093a:	bf00      	nop
 800093c:	0800094d 	.word	0x0800094d
 8000940:	08000955 	.word	0x08000955
 8000944:	0800095d 	.word	0x0800095d
 8000948:	08000965 	.word	0x08000965
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 800094c:	2000      	movs	r0, #0
 800094e:	f7ff ffa9 	bl	80008a4 <MultiFunctionShield_WriteNumberToSegment>
 8000952:	e00e      	b.n	8000972 <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8000954:	2001      	movs	r0, #1
 8000956:	f7ff ffa5 	bl	80008a4 <MultiFunctionShield_WriteNumberToSegment>
 800095a:	e00a      	b.n	8000972 <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 800095c:	2002      	movs	r0, #2
 800095e:	f7ff ffa1 	bl	80008a4 <MultiFunctionShield_WriteNumberToSegment>
 8000962:	e006      	b.n	8000972 <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8000964:	2003      	movs	r0, #3
 8000966:	f7ff ff9d 	bl	80008a4 <MultiFunctionShield_WriteNumberToSegment>
 800096a:	4b03      	ldr	r3, [pc, #12]	; (8000978 <MultiFunctionShield__ISRFunc+0x60>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
 8000970:	bf00      	nop
  }
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000088 	.word	0x20000088

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000982:	f000 fd31 	bl	80013e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000986:	f000 f83f 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098a:	f000 f983 	bl	8000c94 <MX_GPIO_Init>
  MX_DMA_Init();
 800098e:	f000 f963 	bl	8000c58 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000992:	f000 f931 	bl	8000bf8 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000996:	f000 f889 	bl	8000aac <MX_DAC1_Init>
  MX_TIM2_Init();
 800099a:	f000 f8b9 	bl	8000b10 <MX_TIM2_Init>
  MX_TIM17_Init();
 800099e:	f000 f905 	bl	8000bac <MX_TIM17_Init>


  // HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1);


  HAL_TIM_Base_Start_IT(&htim2);
 80009a2:	4812      	ldr	r0, [pc, #72]	; (80009ec <main+0x70>)
 80009a4:	f003 f93e 	bl	8003c24 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,1);

  printf("\033\143"); printf("Welcome to ECEN-361 SineWave Generator\n\r");
 80009a8:	4811      	ldr	r0, [pc, #68]	; (80009f0 <main+0x74>)
 80009aa:	f004 fbe1 	bl	8005170 <iprintf>
 80009ae:	4811      	ldr	r0, [pc, #68]	; (80009f4 <main+0x78>)
 80009b0:	f004 fbde 	bl	8005170 <iprintf>

  // Start timer
  MultiFunctionShield_Clear();								// Clear the 7-seg display
 80009b4:	f7ff ff60 	bl	8000878 <MultiFunctionShield_Clear>
  HAL_TIM_Base_Start_IT(&htim17);							// LED SevenSeg cycle thru them
 80009b8:	480f      	ldr	r0, [pc, #60]	; (80009f8 <main+0x7c>)
 80009ba:	f003 f933 	bl	8003c24 <HAL_TIM_Base_Start_IT>
  Clear_LEDs();
 80009be:	f7ff ff3d 	bl	800083c <Clear_LEDs>
  // MultiFunctionShield_Display(points_per_output_wave);
  MultiFunctionShield_Display(1234);
 80009c2:	f240 40d2 	movw	r0, #1234	; 0x4d2
 80009c6:	f7ff fe1f 	bl	8000608 <MultiFunctionShield_Display>

  /* Setup the DMA */

  if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80009ca:	480c      	ldr	r0, [pc, #48]	; (80009fc <main+0x80>)
 80009cc:	f001 f9e0 	bl	8001d90 <HAL_DMA_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d000      	beq.n	80009d8 <main+0x5c>
 	  {while(1);}
 80009d6:	e7fe      	b.n	80009d6 <main+0x5a>

   // HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_1000_pts, 1000,DAC_ALIGN_12B_R);
	   //HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_100_pts, 100,DAC_ALIGN_12B_R);
	   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_10_pts, 10,DAC_ALIGN_12B_R);
 80009d8:	2300      	movs	r3, #0
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	230a      	movs	r3, #10
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <main+0x84>)
 80009e0:	2100      	movs	r1, #0
 80009e2:	4808      	ldr	r0, [pc, #32]	; (8000a04 <main+0x88>)
 80009e4:	f000 fed4 	bl	8001790 <HAL_DAC_Start_DMA>
   // HAL_DMA_Start_IT(&hdma_dac_ch1, (uint32_t) &sineLookupTable_100_pts, (uint32_t) &hdac1, sizeof(sineLookupTable_100_pts));
   //HAL_DMA_PollForTransfer(&hdma_memtomem_dma1_channel1, );

  while (1)
 80009e8:	e7fe      	b.n	80009e8 <main+0x6c>
 80009ea:	bf00      	nop
 80009ec:	200000ec 	.word	0x200000ec
 80009f0:	08005e6c 	.word	0x08005e6c
 80009f4:	08005e70 	.word	0x08005e70
 80009f8:	20000138 	.word	0x20000138
 80009fc:	200000a4 	.word	0x200000a4
 8000a00:	08005eac 	.word	0x08005eac
 8000a04:	20000090 	.word	0x20000090

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b096      	sub	sp, #88	; 0x58
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2244      	movs	r2, #68	; 0x44
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f004 fbbc 	bl	8005194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a2e:	f001 fd8f 	bl	8002550 <HAL_PWREx_ControlVoltageScaling>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a38:	f000 fa52 	bl	8000ee0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a44:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a46:	2310      	movs	r3, #16
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a52:	2301      	movs	r3, #1
 8000a54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a56:	230a      	movs	r3, #10
 8000a58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 fdc6 	bl	80025fc <HAL_RCC_OscConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a76:	f000 fa33 	bl	8000ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2104      	movs	r1, #4
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 f98e 	bl	8002db4 <HAL_RCC_ClockConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a9e:	f000 fa1f 	bl	8000ee0 <Error_Handler>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3758      	adds	r7, #88	; 0x58
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2224      	movs	r2, #36	; 0x24
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f004 fb6b 	bl	8005194 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_DAC1_Init+0x5c>)
 8000ac0:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_DAC1_Init+0x60>)
 8000ac2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ac4:	4810      	ldr	r0, [pc, #64]	; (8000b08 <MX_DAC1_Init+0x5c>)
 8000ac6:	f000 fe40 	bl	800174a <HAL_DAC_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ad0:	f000 fa06 	bl	8000ee0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000ad8:	2324      	movs	r3, #36	; 0x24
 8000ada:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000adc:	2302      	movs	r3, #2
 8000ade:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2200      	movs	r2, #0
 8000aec:	4619      	mov	r1, r3
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <MX_DAC1_Init+0x5c>)
 8000af0:	f000 ff92 	bl	8001a18 <HAL_DAC_ConfigChannel>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000afa:	f000 f9f1 	bl	8000ee0 <Error_Handler>
  /* USER CODE BEGIN DAC1_Init 2 */
  // sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;

  /* USER CODE END DAC1_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	3728      	adds	r7, #40	; 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000090 	.word	0x20000090
 8000b0c:	40007400 	.word	0x40007400

08000b10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b16:	f107 0310 	add.w	r3, r7, #16
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <MX_TIM2_Init+0x98>)
 8000b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_TIM2_Init+0x98>)
 8000b38:	224f      	movs	r2, #79	; 0x4f
 8000b3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_TIM2_Init+0x98>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_TIM2_Init+0x98>)
 8000b44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_TIM2_Init+0x98>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_TIM2_Init+0x98>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b56:	4814      	ldr	r0, [pc, #80]	; (8000ba8 <MX_TIM2_Init+0x98>)
 8000b58:	f003 f80c 	bl	8003b74 <HAL_TIM_Base_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b62:	f000 f9bd 	bl	8000ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	4619      	mov	r1, r3
 8000b72:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <MX_TIM2_Init+0x98>)
 8000b74:	f003 f9c8 	bl	8003f08 <HAL_TIM_ConfigClockSource>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b7e:	f000 f9af 	bl	8000ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b82:	2320      	movs	r3, #32
 8000b84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <MX_TIM2_Init+0x98>)
 8000b90:	f003 fbe0 	bl	8004354 <HAL_TIMEx_MasterConfigSynchronization>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b9a:	f000 f9a1 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	3720      	adds	r7, #32
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200000ec 	.word	0x200000ec

08000bac <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_TIM17_Init+0x44>)
 8000bb2:	4a10      	ldr	r2, [pc, #64]	; (8000bf4 <MX_TIM17_Init+0x48>)
 8000bb4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_TIM17_Init+0x44>)
 8000bb8:	f240 321f 	movw	r2, #799	; 0x31f
 8000bbc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_TIM17_Init+0x44>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <MX_TIM17_Init+0x44>)
 8000bc6:	2264      	movs	r2, #100	; 0x64
 8000bc8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_TIM17_Init+0x44>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <MX_TIM17_Init+0x44>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_TIM17_Init+0x44>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_TIM17_Init+0x44>)
 8000bde:	f002 ffc9 	bl	8003b74 <HAL_TIM_Base_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000be8:	f000 f97a 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000138 	.word	0x20000138
 8000bf4:	40014800 	.word	0x40014800

08000bf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_USART2_UART_Init+0x58>)
 8000bfe:	4a15      	ldr	r2, [pc, #84]	; (8000c54 <MX_USART2_UART_Init+0x5c>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_USART2_UART_Init+0x58>)
 8000c3c:	f003 fc30 	bl	80044a0 <HAL_UART_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c46:	f000 f94b 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000184 	.word	0x20000184
 8000c54:	40004400 	.word	0x40004400

08000c58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_DMA_Init+0x38>)
 8000c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <MX_DMA_Init+0x38>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6493      	str	r3, [r2, #72]	; 0x48
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_DMA_Init+0x38>)
 8000c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2105      	movs	r1, #5
 8000c7a:	200d      	movs	r0, #13
 8000c7c:	f000 fd2f 	bl	80016de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c80:	200d      	movs	r0, #13
 8000c82:	f000 fd48 	bl	8001716 <HAL_NVIC_EnableIRQ>

}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000

08000c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	4b58      	ldr	r3, [pc, #352]	; (8000e0c <MX_GPIO_Init+0x178>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	4a57      	ldr	r2, [pc, #348]	; (8000e0c <MX_GPIO_Init+0x178>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb6:	4b55      	ldr	r3, [pc, #340]	; (8000e0c <MX_GPIO_Init+0x178>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc2:	4b52      	ldr	r3, [pc, #328]	; (8000e0c <MX_GPIO_Init+0x178>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	4a51      	ldr	r2, [pc, #324]	; (8000e0c <MX_GPIO_Init+0x178>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cce:	4b4f      	ldr	r3, [pc, #316]	; (8000e0c <MX_GPIO_Init+0x178>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b4c      	ldr	r3, [pc, #304]	; (8000e0c <MX_GPIO_Init+0x178>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	4a4b      	ldr	r2, [pc, #300]	; (8000e0c <MX_GPIO_Init+0x178>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce6:	4b49      	ldr	r3, [pc, #292]	; (8000e0c <MX_GPIO_Init+0x178>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b46      	ldr	r3, [pc, #280]	; (8000e0c <MX_GPIO_Init+0x178>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	4a45      	ldr	r2, [pc, #276]	; (8000e0c <MX_GPIO_Init+0x178>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfe:	4b43      	ldr	r3, [pc, #268]	; (8000e0c <MX_GPIO_Init+0x178>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d14:	f001 fbde 	bl	80024d4 <HAL_GPIO_WritePin>
                          |SevenSeg_DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SevenSeg_LATCH_Pin|LED_D4_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2160      	movs	r1, #96	; 0x60
 8000d1c:	483c      	ldr	r0, [pc, #240]	; (8000e10 <MX_GPIO_Init+0x17c>)
 8000d1e:	f001 fbd9 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d28:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4836      	ldr	r0, [pc, #216]	; (8000e14 <MX_GPIO_Init+0x180>)
 8000d3a:	f001 fa21 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_1_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_1_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d56:	f001 fa13 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin LED_D2_Pin LED_D3_Pin SevenSeg_CLK_Pin
                           SevenSeg_DATA_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 8000d5a:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000d5e:	617b      	str	r3, [r7, #20]
                          |SevenSeg_DATA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d76:	f001 fa03 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4820      	ldr	r0, [pc, #128]	; (8000e10 <MX_GPIO_Init+0x17c>)
 8000d90:	f001 f9f6 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000da6:	2303      	movs	r3, #3
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4818      	ldr	r0, [pc, #96]	; (8000e14 <MX_GPIO_Init+0x180>)
 8000db2:	f001 f9e5 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_LATCH_Pin LED_D4_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin|LED_D4_Pin;
 8000db6:	2360      	movs	r3, #96	; 0x60
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4810      	ldr	r0, [pc, #64]	; (8000e10 <MX_GPIO_Init+0x17c>)
 8000dce:	f001 f9d7 	bl	8002180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2006      	movs	r0, #6
 8000dd8:	f000 fc81 	bl	80016de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ddc:	2006      	movs	r0, #6
 8000dde:	f000 fc9a 	bl	8001716 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	2007      	movs	r0, #7
 8000de8:	f000 fc79 	bl	80016de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000dec:	2007      	movs	r0, #7
 8000dee:	f000 fc92 	bl	8001716 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2028      	movs	r0, #40	; 0x28
 8000df8:	f000 fc71 	bl	80016de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dfc:	2028      	movs	r0, #40	; 0x28
 8000dfe:	f000 fc8a 	bl	8001716 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	; 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	48000400 	.word	0x48000400
 8000e14:	48000800 	.word	0x48000800

08000e18 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000e20:	1d39      	adds	r1, r7, #4
 8000e22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e26:	2201      	movs	r2, #1
 8000e28:	4803      	ldr	r0, [pc, #12]	; (8000e38 <__io_putchar+0x20>)
 8000e2a:	f003 fb87 	bl	800453c <HAL_UART_Transmit>

  return ch;
 8000e2e:	687b      	ldr	r3, [r7, #4]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000184 	.word	0x20000184

08000e3c <HAL_DAC_ConvCpltCallbackCh1>:



void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	/* Fill this in when I know what to do if I get here */
// printf("              FINISHED DAC OUT\n\n");
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <change_points_per_cycle>:
	}



void change_points_per_cycle()
	{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
	 *  2.) Change the DMA Call to point to the address of that set
	 *      and the new number of points
	 *
	 *  3.) Re-display the new set on the 7-Seg.  It'll show '10', or '100', or '1000'
	 */
	switch(points_to_use_in_a_cycle)
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <change_points_per_cycle+0x44>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e5c:	d010      	beq.n	8000e80 <change_points_per_cycle+0x30>
 8000e5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e62:	dc11      	bgt.n	8000e88 <change_points_per_cycle+0x38>
 8000e64:	2b0a      	cmp	r3, #10
 8000e66:	d002      	beq.n	8000e6e <change_points_per_cycle+0x1e>
 8000e68:	2b64      	cmp	r3, #100	; 0x64
 8000e6a:	d004      	beq.n	8000e76 <change_points_per_cycle+0x26>
			break;
		case thousand:
			points_to_use_in_a_cycle = ten;
			break;
		}
	}
 8000e6c:	e00c      	b.n	8000e88 <change_points_per_cycle+0x38>
			points_to_use_in_a_cycle = hundred;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <change_points_per_cycle+0x44>)
 8000e70:	2264      	movs	r2, #100	; 0x64
 8000e72:	801a      	strh	r2, [r3, #0]
			break;
 8000e74:	e008      	b.n	8000e88 <change_points_per_cycle+0x38>
			points_to_use_in_a_cycle = thousand;
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <change_points_per_cycle+0x44>)
 8000e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e7c:	801a      	strh	r2, [r3, #0]
			break;
 8000e7e:	e003      	b.n	8000e88 <change_points_per_cycle+0x38>
			points_to_use_in_a_cycle = ten;
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <change_points_per_cycle+0x44>)
 8000e82:	220a      	movs	r2, #10
 8000e84:	801a      	strh	r2, [r3, #0]
			break;
 8000e86:	bf00      	nop
	}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000000 	.word	0x20000000

08000e98 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if (htim == &htim17 ) { MultiFunctionShield__ISRFunc(); }
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d101      	bne.n	8000eac <HAL_TIM_PeriodElapsedCallback+0x14>
 8000ea8:	f7ff fd36 	bl	8000918 <MultiFunctionShield__ISRFunc>
		//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,(uint32_t) sineLookup[sindex++]);
		//HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
	  	// int u = 1;
		// if (sindex >=SINE_WAVE_SAMPLES ) {sindex=0;}
		}
	}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000138 	.word	0x20000138

08000eb8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
	// When the DAC is being used, Button_2 is unavailable.
	// The other two generate GPIO interrupts
	// Don't spend much time in the ISR because there are other interrupts happening
	switch(GPIO_Pin)
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d006      	beq.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x1e>
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d102      	bne.n	8000ed2 <HAL_GPIO_EXTI_Callback+0x1a>
	{
	case Button_1_Pin:
		change_points_per_cycle();
 8000ecc:	f7ff ffc0 	bl	8000e50 <change_points_per_cycle>
		break;
 8000ed0:	e002      	b.n	8000ed8 <HAL_GPIO_EXTI_Callback+0x20>
	case Button_3_Pin:
		// Button_3 changes the Frequency of the DAC, going thru different
		// speeds
		break;
	default:
      __NOP();
 8000ed2:	bf00      	nop
	}
}
 8000ed4:	e000      	b.n	8000ed8 <HAL_GPIO_EXTI_Callback+0x20>
		break;
 8000ed6:	bf00      	nop
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
}
 8000ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <Error_Handler+0x8>
	...

08000eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <HAL_MspInit+0x44>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <HAL_MspInit+0x44>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6613      	str	r3, [r2, #96]	; 0x60
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_MspInit+0x44>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_MspInit+0x44>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_MspInit+0x44>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f14:	6593      	str	r3, [r2, #88]	; 0x58
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_MspInit+0x44>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000

08000f34 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a2f      	ldr	r2, [pc, #188]	; (8001010 <HAL_DAC_MspInit+0xdc>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d158      	bne.n	8001008 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000f56:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <HAL_DAC_MspInit+0xe0>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5a:	4a2e      	ldr	r2, [pc, #184]	; (8001014 <HAL_DAC_MspInit+0xe0>)
 8000f5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f60:	6593      	str	r3, [r2, #88]	; 0x58
 8000f62:	4b2c      	ldr	r3, [pc, #176]	; (8001014 <HAL_DAC_MspInit+0xe0>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4b29      	ldr	r3, [pc, #164]	; (8001014 <HAL_DAC_MspInit+0xe0>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	4a28      	ldr	r2, [pc, #160]	; (8001014 <HAL_DAC_MspInit+0xe0>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7a:	4b26      	ldr	r3, [pc, #152]	; (8001014 <HAL_DAC_MspInit+0xe0>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f86:	2310      	movs	r3, #16
 8000f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	4619      	mov	r1, r3
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9c:	f001 f8f0 	bl	8002180 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HAL_DAC_MspInit+0xe4>)
 8000fa2:	4a1e      	ldr	r2, [pc, #120]	; (800101c <HAL_DAC_MspInit+0xe8>)
 8000fa4:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <HAL_DAC_MspInit+0xe4>)
 8000fa8:	2206      	movs	r2, #6
 8000faa:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <HAL_DAC_MspInit+0xe4>)
 8000fae:	2210      	movs	r2, #16
 8000fb0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb2:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_DAC_MspInit+0xe4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <HAL_DAC_MspInit+0xe4>)
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_DAC_MspInit+0xe4>)
 8000fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc4:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <HAL_DAC_MspInit+0xe4>)
 8000fc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fcc:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_DAC_MspInit+0xe4>)
 8000fd0:	2220      	movs	r2, #32
 8000fd2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_DAC_MspInit+0xe4>)
 8000fd6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000fda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000fdc:	480e      	ldr	r0, [pc, #56]	; (8001018 <HAL_DAC_MspInit+0xe4>)
 8000fde:	f000 fed7 	bl	8001d90 <HAL_DMA_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8000fe8:	f7ff ff7a 	bl	8000ee0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <HAL_DAC_MspInit+0xe4>)
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	4a09      	ldr	r2, [pc, #36]	; (8001018 <HAL_DAC_MspInit+0xe4>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2036      	movs	r0, #54	; 0x36
 8000ffe:	f000 fb6e 	bl	80016de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001002:	2036      	movs	r0, #54	; 0x36
 8001004:	f000 fb87 	bl	8001716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	; 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40007400 	.word	0x40007400
 8001014:	40021000 	.word	0x40021000
 8001018:	200000a4 	.word	0x200000a4
 800101c:	40020030 	.word	0x40020030

08001020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001030:	d114      	bne.n	800105c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <HAL_TIM_Base_MspInit+0x78>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	4a18      	ldr	r2, [pc, #96]	; (8001098 <HAL_TIM_Base_MspInit+0x78>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6593      	str	r3, [r2, #88]	; 0x58
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <HAL_TIM_Base_MspInit+0x78>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	201c      	movs	r0, #28
 8001050:	f000 fb45 	bl	80016de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001054:	201c      	movs	r0, #28
 8001056:	f000 fb5e 	bl	8001716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800105a:	e018      	b.n	800108e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM17)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_TIM_Base_MspInit+0x7c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d113      	bne.n	800108e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <HAL_TIM_Base_MspInit+0x78>)
 8001068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <HAL_TIM_Base_MspInit+0x78>)
 800106c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001070:	6613      	str	r3, [r2, #96]	; 0x60
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_TIM_Base_MspInit+0x78>)
 8001074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	201a      	movs	r0, #26
 8001084:	f000 fb2b 	bl	80016de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001088:	201a      	movs	r0, #26
 800108a:	f000 fb44 	bl	8001716 <HAL_NVIC_EnableIRQ>
}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000
 800109c:	40014800 	.word	0x40014800

080010a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0ac      	sub	sp, #176	; 0xb0
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2288      	movs	r2, #136	; 0x88
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f004 f867 	bl	8005194 <memset>
  if(huart->Instance==USART2)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a21      	ldr	r2, [pc, #132]	; (8001150 <HAL_UART_MspInit+0xb0>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d13b      	bne.n	8001148 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 f88d 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010e8:	f7ff fefa 	bl	8000ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HAL_UART_MspInit+0xb4>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f0:	4a18      	ldr	r2, [pc, #96]	; (8001154 <HAL_UART_MspInit+0xb4>)
 80010f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f6:	6593      	str	r3, [r2, #88]	; 0x58
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_UART_MspInit+0xb4>)
 80010fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <HAL_UART_MspInit+0xb4>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001108:	4a12      	ldr	r2, [pc, #72]	; (8001154 <HAL_UART_MspInit+0xb4>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <HAL_UART_MspInit+0xb4>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800111c:	230c      	movs	r3, #12
 800111e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001134:	2307      	movs	r3, #7
 8001136:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800113e:	4619      	mov	r1, r3
 8001140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001144:	f001 f81c 	bl	8002180 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001148:	bf00      	nop
 800114a:	37b0      	adds	r7, #176	; 0xb0
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40004400 	.word	0x40004400
 8001154:	40021000 	.word	0x40021000

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 f97c 	bl	80014a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f001 f9a7 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}

080011ba <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 80011be:	2002      	movs	r0, #2
 80011c0:	f001 f9a0 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <DMA1_Channel3_IRQHandler+0x10>)
 80011ce:	f000 fef7 	bl	8001fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200000a4 	.word	0x200000a4

080011dc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80011e2:	f002 fd8f 	bl	8003d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000138 	.word	0x20000138

080011f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <TIM2_IRQHandler+0x10>)
 80011f6:	f002 fd85 	bl	8003d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200000ec 	.word	0x200000ec

08001204 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001208:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800120c:	f001 f97a 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <TIM6_DAC_IRQHandler+0x10>)
 800121a:	f000 fb85 	bl	8001928 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000090 	.word	0x20000090

08001228 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	e00a      	b.n	8001250 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800123a:	f3af 8000 	nop.w
 800123e:	4601      	mov	r1, r0
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	60ba      	str	r2, [r7, #8]
 8001246:	b2ca      	uxtb	r2, r1
 8001248:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3301      	adds	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	429a      	cmp	r2, r3
 8001256:	dbf0      	blt.n	800123a <_read+0x12>
  }

  return len;
 8001258:	687b      	ldr	r3, [r7, #4]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	e009      	b.n	8001288 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	60ba      	str	r2, [r7, #8]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fdcb 	bl	8000e18 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3301      	adds	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbf1      	blt.n	8001274 <_write+0x12>
  }
  return len;
 8001290:	687b      	ldr	r3, [r7, #4]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <_close>:

int _close(int file)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c2:	605a      	str	r2, [r3, #4]
  return 0;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <_isatty>:

int _isatty(int file)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800130c:	4a14      	ldr	r2, [pc, #80]	; (8001360 <_sbrk+0x5c>)
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <_sbrk+0x60>)
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <_sbrk+0x64>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <_sbrk+0x68>)
 8001324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	429a      	cmp	r2, r3
 8001332:	d207      	bcs.n	8001344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001334:	f003 ff36 	bl	80051a4 <__errno>
 8001338:	4603      	mov	r3, r0
 800133a:	220c      	movs	r2, #12
 800133c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001342:	e009      	b.n	8001358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <_sbrk+0x64>)
 8001354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20018000 	.word	0x20018000
 8001364:	00000400 	.word	0x00000400
 8001368:	2000020c 	.word	0x2000020c
 800136c:	20000360 	.word	0x20000360

08001370 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <SystemInit+0x20>)
 8001376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <SystemInit+0x20>)
 800137c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001394:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001398:	f7ff ffea 	bl	8001370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800139e:	490d      	ldr	r1, [pc, #52]	; (80013d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a0:	4a0d      	ldr	r2, [pc, #52]	; (80013d8 <LoopForever+0xe>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a4:	e002      	b.n	80013ac <LoopCopyDataInit>

080013a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013aa:	3304      	adds	r3, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b0:	d3f9      	bcc.n	80013a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b4:	4c0a      	ldr	r4, [pc, #40]	; (80013e0 <LoopForever+0x16>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b8:	e001      	b.n	80013be <LoopFillZerobss>

080013ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013bc:	3204      	adds	r2, #4

080013be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c0:	d3fb      	bcc.n	80013ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c2:	f003 fef5 	bl	80051b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013c6:	f7ff fad9 	bl	800097c <main>

080013ca <LoopForever>:

LoopForever:
    b LoopForever
 80013ca:	e7fe      	b.n	80013ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80013d8:	08005f4c 	.word	0x08005f4c
  ldr r2, =_sbss
 80013dc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80013e0:	20000360 	.word	0x20000360

080013e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013e4:	e7fe      	b.n	80013e4 <ADC1_2_IRQHandler>
	...

080013e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_Init+0x3c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <HAL_Init+0x3c>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fe:	2003      	movs	r0, #3
 8001400:	f000 f962 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001404:	200f      	movs	r0, #15
 8001406:	f000 f80f 	bl	8001428 <HAL_InitTick>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	71fb      	strb	r3, [r7, #7]
 8001414:	e001      	b.n	800141a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001416:	f7ff fd69 	bl	8000eec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800141a:	79fb      	ldrb	r3, [r7, #7]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40022000 	.word	0x40022000

08001428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <HAL_InitTick+0x6c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d023      	beq.n	8001484 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <HAL_InitTick+0x70>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <HAL_InitTick+0x6c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	fbb3 f3f1 	udiv	r3, r3, r1
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f96d 	bl	8001732 <HAL_SYSTICK_Config>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10f      	bne.n	800147e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b0f      	cmp	r3, #15
 8001462:	d809      	bhi.n	8001478 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001464:	2200      	movs	r2, #0
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800146c:	f000 f937 	bl	80016de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001470:	4a0a      	ldr	r2, [pc, #40]	; (800149c <HAL_InitTick+0x74>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e007      	b.n	8001488 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
 800147c:	e004      	b.n	8001488 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
 8001482:	e001      	b.n	8001488 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000000c 	.word	0x2000000c
 8001498:	20000004 	.word	0x20000004
 800149c:	20000008 	.word	0x20000008

080014a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x20>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x24>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <HAL_IncTick+0x24>)
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	2000000c 	.word	0x2000000c
 80014c4:	20000210 	.word	0x20000210

080014c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_GetTick+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000210 	.word	0x20000210

080014e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e8:	f7ff ffee 	bl	80014c8 <HAL_GetTick>
 80014ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014f8:	d005      	beq.n	8001506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_Delay+0x44>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001506:	bf00      	nop
 8001508:	f7ff ffde 	bl	80014c8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	429a      	cmp	r2, r3
 8001516:	d8f7      	bhi.n	8001508 <HAL_Delay+0x28>
  {
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2000000c 	.word	0x2000000c

08001528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155a:	4a04      	ldr	r2, [pc, #16]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	60d3      	str	r3, [r2, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db0b      	blt.n	80015b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f003 021f 	and.w	r2, r3, #31
 80015a4:	4907      	ldr	r1, [pc, #28]	; (80015c4 <__NVIC_EnableIRQ+0x38>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	2001      	movs	r0, #1
 80015ae:	fa00 f202 	lsl.w	r2, r0, r2
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	; (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	; (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001694:	d301      	bcc.n	800169a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2301      	movs	r3, #1
 8001698:	e00f      	b.n	80016ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <SysTick_Config+0x40>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a2:	210f      	movs	r1, #15
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016a8:	f7ff ff8e 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <SysTick_Config+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SysTick_Config+0x40>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff29 	bl	8001528 <__NVIC_SetPriorityGrouping>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016f0:	f7ff ff3e 	bl	8001570 <__NVIC_GetPriorityGrouping>
 80016f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	6978      	ldr	r0, [r7, #20]
 80016fc:	f7ff ff8e 	bl	800161c <NVIC_EncodePriority>
 8001700:	4602      	mov	r2, r0
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff5d 	bl	80015c8 <__NVIC_SetPriority>
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff31 	bl	800158c <__NVIC_EnableIRQ>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ffa2 	bl	8001684 <SysTick_Config>
 8001740:	4603      	mov	r3, r0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e014      	b.n	8001786 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	791b      	ldrb	r3, [r3, #4]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d105      	bne.n	8001772 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff fbe1 	bl	8000f34 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2202      	movs	r2, #2
 8001776:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	795b      	ldrb	r3, [r3, #5]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d101      	bne.n	80017ae <HAL_DAC_Start_DMA+0x1e>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e0ab      	b.n	8001906 <HAL_DAC_Start_DMA+0x176>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2201      	movs	r2, #1
 80017b2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2202      	movs	r2, #2
 80017b8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d12f      	bne.n	8001820 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	4a52      	ldr	r2, [pc, #328]	; (8001910 <HAL_DAC_Start_DMA+0x180>)
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a51      	ldr	r2, [pc, #324]	; (8001914 <HAL_DAC_Start_DMA+0x184>)
 80017ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a50      	ldr	r2, [pc, #320]	; (8001918 <HAL_DAC_Start_DMA+0x188>)
 80017d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80017e6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d013      	beq.n	8001816 <HAL_DAC_Start_DMA+0x86>
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d845      	bhi.n	8001880 <HAL_DAC_Start_DMA+0xf0>
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_DAC_Start_DMA+0x72>
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d005      	beq.n	800180c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001800:	e03e      	b.n	8001880 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	3308      	adds	r3, #8
 8001808:	613b      	str	r3, [r7, #16]
        break;
 800180a:	e03c      	b.n	8001886 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	330c      	adds	r3, #12
 8001812:	613b      	str	r3, [r7, #16]
        break;
 8001814:	e037      	b.n	8001886 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	3310      	adds	r3, #16
 800181c:	613b      	str	r3, [r7, #16]
        break;
 800181e:	e032      	b.n	8001886 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4a3d      	ldr	r2, [pc, #244]	; (800191c <HAL_DAC_Start_DMA+0x18c>)
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4a3c      	ldr	r2, [pc, #240]	; (8001920 <HAL_DAC_Start_DMA+0x190>)
 800182e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	4a3b      	ldr	r2, [pc, #236]	; (8001924 <HAL_DAC_Start_DMA+0x194>)
 8001836:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001846:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	2b08      	cmp	r3, #8
 800184c:	d013      	beq.n	8001876 <HAL_DAC_Start_DMA+0xe6>
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	2b08      	cmp	r3, #8
 8001852:	d817      	bhi.n	8001884 <HAL_DAC_Start_DMA+0xf4>
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_DAC_Start_DMA+0xd2>
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	2b04      	cmp	r3, #4
 800185e:	d005      	beq.n	800186c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001860:	e010      	b.n	8001884 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3314      	adds	r3, #20
 8001868:	613b      	str	r3, [r7, #16]
        break;
 800186a:	e00c      	b.n	8001886 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	3318      	adds	r3, #24
 8001872:	613b      	str	r3, [r7, #16]
        break;
 8001874:	e007      	b.n	8001886 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	331c      	adds	r3, #28
 800187c:	613b      	str	r3, [r7, #16]
        break;
 800187e:	e002      	b.n	8001886 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001880:	bf00      	nop
 8001882:	e000      	b.n	8001886 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001884:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d111      	bne.n	80018b0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800189a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6898      	ldr	r0, [r3, #8]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	f000 fb2b 	bl	8001f00 <HAL_DMA_Start_IT>
 80018aa:	4603      	mov	r3, r0
 80018ac:	75fb      	strb	r3, [r7, #23]
 80018ae:	e010      	b.n	80018d2 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80018be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	68d8      	ldr	r0, [r3, #12]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	f000 fb19 	bl	8001f00 <HAL_DMA_Start_IT>
 80018ce:	4603      	mov	r3, r0
 80018d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80018d8:	7dfb      	ldrb	r3, [r7, #23]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10c      	bne.n	80018f8 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6819      	ldr	r1, [r3, #0]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	2201      	movs	r2, #1
 80018ec:	409a      	lsls	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	e005      	b.n	8001904 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	f043 0204 	orr.w	r2, r3, #4
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001904:	7dfb      	ldrb	r3, [r7, #23]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	08001c67 	.word	0x08001c67
 8001914:	08001c89 	.word	0x08001c89
 8001918:	08001ca5 	.word	0x08001ca5
 800191c:	08001d23 	.word	0x08001d23
 8001920:	08001d45 	.word	0x08001d45
 8001924:	08001d61 	.word	0x08001d61

08001928 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800193a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800193e:	d120      	bne.n	8001982 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800194a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800194e:	d118      	bne.n	8001982 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2204      	movs	r2, #4
 8001954:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	f043 0201 	orr.w	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800196a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800197a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f841 	bl	8001a04 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800198c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001990:	d120      	bne.n	80019d4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800199c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019a0:	d118      	bne.n	80019d4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2204      	movs	r2, #4
 80019a6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	f043 0202 	orr.w	r2, r3, #2
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80019cc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f99d 	bl	8001d0e <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	795b      	ldrb	r3, [r3, #5]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_DAC_ConfigChannel+0x1c>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e114      	b.n	8001c5e <HAL_DAC_ConfigChannel+0x246>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2201      	movs	r2, #1
 8001a38:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	f040 8081 	bne.w	8001b4c <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001a4a:	f7ff fd3d 	bl	80014c8 <HAL_GetTick>
 8001a4e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d140      	bne.n	8001ad8 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001a56:	e018      	b.n	8001a8a <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001a58:	f7ff fd36 	bl	80014c8 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d911      	bls.n	8001a8a <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00a      	beq.n	8001a8a <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	f043 0208 	orr.w	r2, r3, #8
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2203      	movs	r2, #3
 8001a84:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e0e9      	b.n	8001c5e <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1df      	bne.n	8001a58 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f7ff fd21 	bl	80014e0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	6992      	ldr	r2, [r2, #24]
 8001aa6:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa8:	e023      	b.n	8001af2 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001aaa:	f7ff fd0d 	bl	80014c8 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d90f      	bls.n	8001ad8 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	da0a      	bge.n	8001ad8 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f043 0208 	orr.w	r2, r3, #8
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e0c2      	b.n	8001c5e <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	dbe3      	blt.n	8001aaa <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f7ff fcfc 	bl	80014e0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	6992      	ldr	r2, [r2, #24]
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	ea02 0103 	and.w	r1, r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	69da      	ldr	r2, [r3, #28]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	409a      	lsls	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	21ff      	movs	r1, #255	; 0xff
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	ea02 0103 	and.w	r1, r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	6a1a      	ldr	r2, [r3, #32]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	409a      	lsls	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d11d      	bne.n	8001b90 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	221f      	movs	r2, #31
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b96:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6819      	ldr	r1, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43da      	mvns	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	400a      	ands	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f003 0310 	and.w	r3, r3, #16
 8001c04:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6819      	ldr	r1, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	22c0      	movs	r2, #192	; 0xc0
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2201      	movs	r2, #1
 8001c54:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3720      	adds	r7, #32
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b084      	sub	sp, #16
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f7ff f8e1 	bl	8000e3c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	711a      	strb	r2, [r3, #4]
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f7ff fea0 	bl	80019dc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f043 0204 	orr.w	r2, r3, #4
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f7ff fe96 	bl	80019f0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	711a      	strb	r2, [r3, #4]
}
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f7ff ffce 	bl	8001cd2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	711a      	strb	r2, [r3, #4]
}
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d50:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f7ff ffc7 	bl	8001ce6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f043 0204 	orr.w	r2, r3, #4
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f7ff ffbd 	bl	8001cfa <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2201      	movs	r2, #1
 8001d84:	711a      	strb	r2, [r3, #4]
}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e098      	b.n	8001ed4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	4b4d      	ldr	r3, [pc, #308]	; (8001ee0 <HAL_DMA_Init+0x150>)
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d80f      	bhi.n	8001dce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b4b      	ldr	r3, [pc, #300]	; (8001ee4 <HAL_DMA_Init+0x154>)
 8001db6:	4413      	add	r3, r2
 8001db8:	4a4b      	ldr	r2, [pc, #300]	; (8001ee8 <HAL_DMA_Init+0x158>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	009a      	lsls	r2, r3, #2
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a48      	ldr	r2, [pc, #288]	; (8001eec <HAL_DMA_Init+0x15c>)
 8001dca:	641a      	str	r2, [r3, #64]	; 0x40
 8001dcc:	e00e      	b.n	8001dec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b46      	ldr	r3, [pc, #280]	; (8001ef0 <HAL_DMA_Init+0x160>)
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a43      	ldr	r2, [pc, #268]	; (8001ee8 <HAL_DMA_Init+0x158>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	009a      	lsls	r2, r3, #2
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a42      	ldr	r2, [pc, #264]	; (8001ef4 <HAL_DMA_Init+0x164>)
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001e10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e46:	d039      	beq.n	8001ebc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	4a27      	ldr	r2, [pc, #156]	; (8001eec <HAL_DMA_Init+0x15c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d11a      	bne.n	8001e88 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e52:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <HAL_DMA_Init+0x168>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f003 031c 	and.w	r3, r3, #28
 8001e5e:	210f      	movs	r1, #15
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	4924      	ldr	r1, [pc, #144]	; (8001ef8 <HAL_DMA_Init+0x168>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e6c:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <HAL_DMA_Init+0x168>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e78:	f003 031c 	and.w	r3, r3, #28
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	491d      	ldr	r1, [pc, #116]	; (8001ef8 <HAL_DMA_Init+0x168>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
 8001e86:	e019      	b.n	8001ebc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e88:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <HAL_DMA_Init+0x16c>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e90:	f003 031c 	and.w	r3, r3, #28
 8001e94:	210f      	movs	r1, #15
 8001e96:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	4917      	ldr	r1, [pc, #92]	; (8001efc <HAL_DMA_Init+0x16c>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001ea2:	4b16      	ldr	r3, [pc, #88]	; (8001efc <HAL_DMA_Init+0x16c>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6859      	ldr	r1, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	f003 031c 	and.w	r3, r3, #28
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	4911      	ldr	r1, [pc, #68]	; (8001efc <HAL_DMA_Init+0x16c>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	40020407 	.word	0x40020407
 8001ee4:	bffdfff8 	.word	0xbffdfff8
 8001ee8:	cccccccd 	.word	0xcccccccd
 8001eec:	40020000 	.word	0x40020000
 8001ef0:	bffdfbf8 	.word	0xbffdfbf8
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	400200a8 	.word	0x400200a8
 8001efc:	400204a8 	.word	0x400204a8

08001f00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_DMA_Start_IT+0x20>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e04b      	b.n	8001fb8 <HAL_DMA_Start_IT+0xb8>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d13a      	bne.n	8001faa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 f8e0 	bl	800211e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 020e 	orr.w	r2, r2, #14
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	e00f      	b.n	8001f98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0204 	bic.w	r2, r2, #4
 8001f86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 020a 	orr.w	r2, r2, #10
 8001f96:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e005      	b.n	8001fb6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fdc:	f003 031c 	and.w	r3, r3, #28
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d026      	beq.n	800203a <HAL_DMA_IRQHandler+0x7a>
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d021      	beq.n	800203a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0320 	and.w	r3, r3, #32
 8002000:	2b00      	cmp	r3, #0
 8002002:	d107      	bne.n	8002014 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0204 	bic.w	r2, r2, #4
 8002012:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002018:	f003 021c 	and.w	r2, r3, #28
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	2104      	movs	r1, #4
 8002022:	fa01 f202 	lsl.w	r2, r1, r2
 8002026:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	2b00      	cmp	r3, #0
 800202e:	d071      	beq.n	8002114 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002038:	e06c      	b.n	8002114 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f003 031c 	and.w	r3, r3, #28
 8002042:	2202      	movs	r2, #2
 8002044:	409a      	lsls	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d02e      	beq.n	80020ac <HAL_DMA_IRQHandler+0xec>
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d029      	beq.n	80020ac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10b      	bne.n	800207e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 020a 	bic.w	r2, r2, #10
 8002074:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f003 021c 	and.w	r2, r3, #28
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	2102      	movs	r1, #2
 800208c:	fa01 f202 	lsl.w	r2, r1, r2
 8002090:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d038      	beq.n	8002114 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80020aa:	e033      	b.n	8002114 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b0:	f003 031c 	and.w	r3, r3, #28
 80020b4:	2208      	movs	r2, #8
 80020b6:	409a      	lsls	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d02a      	beq.n	8002116 <HAL_DMA_IRQHandler+0x156>
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d025      	beq.n	8002116 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 020e 	bic.w	r2, r2, #14
 80020d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f003 021c 	and.w	r2, r3, #28
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	2101      	movs	r1, #1
 80020e8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002114:	bf00      	nop
 8002116:	bf00      	nop
}
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800211e:	b480      	push	{r7}
 8002120:	b085      	sub	sp, #20
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002130:	f003 021c 	and.w	r2, r3, #28
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	2101      	movs	r1, #1
 800213a:	fa01 f202 	lsl.w	r2, r1, r2
 800213e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b10      	cmp	r3, #16
 800214e:	d108      	bne.n	8002162 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002160:	e007      	b.n	8002172 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	60da      	str	r2, [r3, #12]
}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218e:	e17f      	b.n	8002490 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	2101      	movs	r1, #1
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	4013      	ands	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 8171 	beq.w	800248a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d005      	beq.n	80021c0 <HAL_GPIO_Init+0x40>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d130      	bne.n	8002222 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021f6:	2201      	movs	r2, #1
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	091b      	lsrs	r3, r3, #4
 800220c:	f003 0201 	and.w	r2, r3, #1
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b03      	cmp	r3, #3
 800222c:	d118      	bne.n	8002260 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002234:	2201      	movs	r2, #1
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	08db      	lsrs	r3, r3, #3
 800224a:	f003 0201 	and.w	r2, r3, #1
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b03      	cmp	r3, #3
 800226a:	d017      	beq.n	800229c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2203      	movs	r2, #3
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d123      	bne.n	80022f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	08da      	lsrs	r2, r3, #3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3208      	adds	r2, #8
 80022b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	220f      	movs	r2, #15
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	08da      	lsrs	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3208      	adds	r2, #8
 80022ea:	6939      	ldr	r1, [r7, #16]
 80022ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0203 	and.w	r2, r3, #3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80ac 	beq.w	800248a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002332:	4b5f      	ldr	r3, [pc, #380]	; (80024b0 <HAL_GPIO_Init+0x330>)
 8002334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002336:	4a5e      	ldr	r2, [pc, #376]	; (80024b0 <HAL_GPIO_Init+0x330>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6613      	str	r3, [r2, #96]	; 0x60
 800233e:	4b5c      	ldr	r3, [pc, #368]	; (80024b0 <HAL_GPIO_Init+0x330>)
 8002340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800234a:	4a5a      	ldr	r2, [pc, #360]	; (80024b4 <HAL_GPIO_Init+0x334>)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	3302      	adds	r3, #2
 8002352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002356:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	220f      	movs	r2, #15
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002374:	d025      	beq.n	80023c2 <HAL_GPIO_Init+0x242>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4f      	ldr	r2, [pc, #316]	; (80024b8 <HAL_GPIO_Init+0x338>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d01f      	beq.n	80023be <HAL_GPIO_Init+0x23e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4e      	ldr	r2, [pc, #312]	; (80024bc <HAL_GPIO_Init+0x33c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d019      	beq.n	80023ba <HAL_GPIO_Init+0x23a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4d      	ldr	r2, [pc, #308]	; (80024c0 <HAL_GPIO_Init+0x340>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_GPIO_Init+0x236>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4c      	ldr	r2, [pc, #304]	; (80024c4 <HAL_GPIO_Init+0x344>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00d      	beq.n	80023b2 <HAL_GPIO_Init+0x232>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4b      	ldr	r2, [pc, #300]	; (80024c8 <HAL_GPIO_Init+0x348>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0x22e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4a      	ldr	r2, [pc, #296]	; (80024cc <HAL_GPIO_Init+0x34c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_GPIO_Init+0x22a>
 80023a6:	2306      	movs	r3, #6
 80023a8:	e00c      	b.n	80023c4 <HAL_GPIO_Init+0x244>
 80023aa:	2307      	movs	r3, #7
 80023ac:	e00a      	b.n	80023c4 <HAL_GPIO_Init+0x244>
 80023ae:	2305      	movs	r3, #5
 80023b0:	e008      	b.n	80023c4 <HAL_GPIO_Init+0x244>
 80023b2:	2304      	movs	r3, #4
 80023b4:	e006      	b.n	80023c4 <HAL_GPIO_Init+0x244>
 80023b6:	2303      	movs	r3, #3
 80023b8:	e004      	b.n	80023c4 <HAL_GPIO_Init+0x244>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e002      	b.n	80023c4 <HAL_GPIO_Init+0x244>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <HAL_GPIO_Init+0x244>
 80023c2:	2300      	movs	r3, #0
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	f002 0203 	and.w	r2, r2, #3
 80023ca:	0092      	lsls	r2, r2, #2
 80023cc:	4093      	lsls	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023d4:	4937      	ldr	r1, [pc, #220]	; (80024b4 <HAL_GPIO_Init+0x334>)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023e2:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <HAL_GPIO_Init+0x350>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002406:	4a32      	ldr	r2, [pc, #200]	; (80024d0 <HAL_GPIO_Init+0x350>)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800240c:	4b30      	ldr	r3, [pc, #192]	; (80024d0 <HAL_GPIO_Init+0x350>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002430:	4a27      	ldr	r2, [pc, #156]	; (80024d0 <HAL_GPIO_Init+0x350>)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002436:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <HAL_GPIO_Init+0x350>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800245a:	4a1d      	ldr	r2, [pc, #116]	; (80024d0 <HAL_GPIO_Init+0x350>)
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <HAL_GPIO_Init+0x350>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	43db      	mvns	r3, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002484:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <HAL_GPIO_Init+0x350>)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	3301      	adds	r3, #1
 800248e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa22 f303 	lsr.w	r3, r2, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	f47f ae78 	bne.w	8002190 <HAL_GPIO_Init+0x10>
  }
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	371c      	adds	r7, #28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40010000 	.word	0x40010000
 80024b8:	48000400 	.word	0x48000400
 80024bc:	48000800 	.word	0x48000800
 80024c0:	48000c00 	.word	0x48000c00
 80024c4:	48001000 	.word	0x48001000
 80024c8:	48001400 	.word	0x48001400
 80024cc:	48001800 	.word	0x48001800
 80024d0:	40010400 	.word	0x40010400

080024d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]
 80024e0:	4613      	mov	r3, r2
 80024e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024e4:	787b      	ldrb	r3, [r7, #1]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ea:	887a      	ldrh	r2, [r7, #2]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024f0:	e002      	b.n	80024f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024f2:	887a      	ldrh	r2, [r7, #2]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800250e:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d006      	beq.n	8002528 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800251a:	4a05      	ldr	r2, [pc, #20]	; (8002530 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fcc8 	bl	8000eb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40010400 	.word	0x40010400

08002534 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <HAL_PWREx_GetVoltageRange+0x18>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40007000 	.word	0x40007000

08002550 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800255e:	d130      	bne.n	80025c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002560:	4b23      	ldr	r3, [pc, #140]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800256c:	d038      	beq.n	80025e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800256e:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002576:	4a1e      	ldr	r2, [pc, #120]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800257c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800257e:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2232      	movs	r2, #50	; 0x32
 8002584:	fb02 f303 	mul.w	r3, r2, r3
 8002588:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	0c9b      	lsrs	r3, r3, #18
 8002590:	3301      	adds	r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002594:	e002      	b.n	800259c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3b01      	subs	r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800259c:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a8:	d102      	bne.n	80025b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f2      	bne.n	8002596 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025bc:	d110      	bne.n	80025e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e00f      	b.n	80025e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ce:	d007      	beq.n	80025e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025d0:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025d8:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40007000 	.word	0x40007000
 80025f4:	20000004 	.word	0x20000004
 80025f8:	431bde83 	.word	0x431bde83

080025fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e3ca      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260e:	4b97      	ldr	r3, [pc, #604]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002618:	4b94      	ldr	r3, [pc, #592]	; (800286c <HAL_RCC_OscConfig+0x270>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 80e4 	beq.w	80027f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_RCC_OscConfig+0x4a>
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	2b0c      	cmp	r3, #12
 800263a:	f040 808b 	bne.w	8002754 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b01      	cmp	r3, #1
 8002642:	f040 8087 	bne.w	8002754 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002646:	4b89      	ldr	r3, [pc, #548]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_RCC_OscConfig+0x62>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e3a2      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1a      	ldr	r2, [r3, #32]
 8002662:	4b82      	ldr	r3, [pc, #520]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d004      	beq.n	8002678 <HAL_RCC_OscConfig+0x7c>
 800266e:	4b7f      	ldr	r3, [pc, #508]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002676:	e005      	b.n	8002684 <HAL_RCC_OscConfig+0x88>
 8002678:	4b7c      	ldr	r3, [pc, #496]	; (800286c <HAL_RCC_OscConfig+0x270>)
 800267a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002684:	4293      	cmp	r3, r2
 8002686:	d223      	bcs.n	80026d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4618      	mov	r0, r3
 800268e:	f000 fd55 	bl	800313c <RCC_SetFlashLatencyFromMSIRange>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e383      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800269c:	4b73      	ldr	r3, [pc, #460]	; (800286c <HAL_RCC_OscConfig+0x270>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a72      	ldr	r2, [pc, #456]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026a2:	f043 0308 	orr.w	r3, r3, #8
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	4b70      	ldr	r3, [pc, #448]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	496d      	ldr	r1, [pc, #436]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ba:	4b6c      	ldr	r3, [pc, #432]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	4968      	ldr	r1, [pc, #416]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]
 80026ce:	e025      	b.n	800271c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d0:	4b66      	ldr	r3, [pc, #408]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a65      	ldr	r2, [pc, #404]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026d6:	f043 0308 	orr.w	r3, r3, #8
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b63      	ldr	r3, [pc, #396]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4960      	ldr	r1, [pc, #384]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ee:	4b5f      	ldr	r3, [pc, #380]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	495b      	ldr	r1, [pc, #364]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d109      	bne.n	800271c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fd15 	bl	800313c <RCC_SetFlashLatencyFromMSIRange>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e343      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800271c:	f000 fc4a 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b52      	ldr	r3, [pc, #328]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	4950      	ldr	r1, [pc, #320]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
 8002738:	4a4e      	ldr	r2, [pc, #312]	; (8002874 <HAL_RCC_OscConfig+0x278>)
 800273a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800273c:	4b4e      	ldr	r3, [pc, #312]	; (8002878 <HAL_RCC_OscConfig+0x27c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe fe71 	bl	8001428 <HAL_InitTick>
 8002746:	4603      	mov	r3, r0
 8002748:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d052      	beq.n	80027f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	e327      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d032      	beq.n	80027c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800275c:	4b43      	ldr	r3, [pc, #268]	; (800286c <HAL_RCC_OscConfig+0x270>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a42      	ldr	r2, [pc, #264]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002768:	f7fe feae 	bl	80014c8 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002770:	f7fe feaa 	bl	80014c8 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e310      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002782:	4b3a      	ldr	r3, [pc, #232]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800278e:	4b37      	ldr	r3, [pc, #220]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a36      	ldr	r2, [pc, #216]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002794:	f043 0308 	orr.w	r3, r3, #8
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	4b34      	ldr	r3, [pc, #208]	; (800286c <HAL_RCC_OscConfig+0x270>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4931      	ldr	r1, [pc, #196]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ac:	4b2f      	ldr	r3, [pc, #188]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	021b      	lsls	r3, r3, #8
 80027ba:	492c      	ldr	r1, [pc, #176]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	604b      	str	r3, [r1, #4]
 80027c0:	e01a      	b.n	80027f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027c2:	4b2a      	ldr	r3, [pc, #168]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a29      	ldr	r2, [pc, #164]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027ce:	f7fe fe7b 	bl	80014c8 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027d6:	f7fe fe77 	bl	80014c8 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e2dd      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027e8:	4b20      	ldr	r3, [pc, #128]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f0      	bne.n	80027d6 <HAL_RCC_OscConfig+0x1da>
 80027f4:	e000      	b.n	80027f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d074      	beq.n	80028ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b08      	cmp	r3, #8
 8002808:	d005      	beq.n	8002816 <HAL_RCC_OscConfig+0x21a>
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	2b0c      	cmp	r3, #12
 800280e:	d10e      	bne.n	800282e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d10b      	bne.n	800282e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002816:	4b15      	ldr	r3, [pc, #84]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d064      	beq.n	80028ec <HAL_RCC_OscConfig+0x2f0>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d160      	bne.n	80028ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e2ba      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x24a>
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <HAL_RCC_OscConfig+0x270>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0b      	ldr	r2, [pc, #44]	; (800286c <HAL_RCC_OscConfig+0x270>)
 800283e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	e026      	b.n	8002894 <HAL_RCC_OscConfig+0x298>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800284e:	d115      	bne.n	800287c <HAL_RCC_OscConfig+0x280>
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a05      	ldr	r2, [pc, #20]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002856:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_RCC_OscConfig+0x270>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a02      	ldr	r2, [pc, #8]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	e014      	b.n	8002894 <HAL_RCC_OscConfig+0x298>
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000
 8002870:	08005ec0 	.word	0x08005ec0
 8002874:	20000004 	.word	0x20000004
 8002878:	20000008 	.word	0x20000008
 800287c:	4ba0      	ldr	r3, [pc, #640]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a9f      	ldr	r2, [pc, #636]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b9d      	ldr	r3, [pc, #628]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a9c      	ldr	r2, [pc, #624]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 800288e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d013      	beq.n	80028c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fe14 	bl	80014c8 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7fe fe10 	bl	80014c8 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e276      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b6:	4b92      	ldr	r3, [pc, #584]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0x2a8>
 80028c2:	e014      	b.n	80028ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7fe fe00 	bl	80014c8 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028cc:	f7fe fdfc 	bl	80014c8 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e262      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028de:	4b88      	ldr	r3, [pc, #544]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x2d0>
 80028ea:	e000      	b.n	80028ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d060      	beq.n	80029bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d005      	beq.n	800290c <HAL_RCC_OscConfig+0x310>
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d119      	bne.n	800293a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d116      	bne.n	800293a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800290c:	4b7c      	ldr	r3, [pc, #496]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_OscConfig+0x328>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e23f      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002924:	4b76      	ldr	r3, [pc, #472]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	061b      	lsls	r3, r3, #24
 8002932:	4973      	ldr	r1, [pc, #460]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002938:	e040      	b.n	80029bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d023      	beq.n	800298a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002942:	4b6f      	ldr	r3, [pc, #444]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a6e      	ldr	r2, [pc, #440]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7fe fdbb 	bl	80014c8 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002956:	f7fe fdb7 	bl	80014c8 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e21d      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002968:	4b65      	ldr	r3, [pc, #404]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002974:	4b62      	ldr	r3, [pc, #392]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	061b      	lsls	r3, r3, #24
 8002982:	495f      	ldr	r1, [pc, #380]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
 8002988:	e018      	b.n	80029bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298a:	4b5d      	ldr	r3, [pc, #372]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a5c      	ldr	r2, [pc, #368]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002996:	f7fe fd97 	bl	80014c8 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299e:	f7fe fd93 	bl	80014c8 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e1f9      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029b0:	4b53      	ldr	r3, [pc, #332]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f0      	bne.n	800299e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d03c      	beq.n	8002a42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01c      	beq.n	8002a0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d0:	4b4b      	ldr	r3, [pc, #300]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 80029d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d6:	4a4a      	ldr	r2, [pc, #296]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e0:	f7fe fd72 	bl	80014c8 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e8:	f7fe fd6e 	bl	80014c8 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e1d4      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029fa:	4b41      	ldr	r3, [pc, #260]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 80029fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0ef      	beq.n	80029e8 <HAL_RCC_OscConfig+0x3ec>
 8002a08:	e01b      	b.n	8002a42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0a:	4b3d      	ldr	r3, [pc, #244]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a10:	4a3b      	ldr	r2, [pc, #236]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fd55 	bl	80014c8 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a22:	f7fe fd51 	bl	80014c8 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e1b7      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a34:	4b32      	ldr	r3, [pc, #200]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1ef      	bne.n	8002a22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 80a6 	beq.w	8002b9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a50:	2300      	movs	r3, #0
 8002a52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a54:	4b2a      	ldr	r3, [pc, #168]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10d      	bne.n	8002a7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a60:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a64:	4a26      	ldr	r2, [pc, #152]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a6c:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7c:	4b21      	ldr	r3, [pc, #132]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d118      	bne.n	8002aba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a88:	4b1e      	ldr	r3, [pc, #120]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a94:	f7fe fd18 	bl	80014c8 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9c:	f7fe fd14 	bl	80014c8 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e17a      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d108      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4d8>
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ad2:	e029      	b.n	8002b28 <HAL_RCC_OscConfig+0x52c>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	d115      	bne.n	8002b08 <HAL_RCC_OscConfig+0x50c>
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae2:	4a07      	ldr	r2, [pc, #28]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	4a03      	ldr	r2, [pc, #12]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002afc:	e014      	b.n	8002b28 <HAL_RCC_OscConfig+0x52c>
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40007000 	.word	0x40007000
 8002b08:	4b9c      	ldr	r3, [pc, #624]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0e:	4a9b      	ldr	r2, [pc, #620]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b18:	4b98      	ldr	r3, [pc, #608]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1e:	4a97      	ldr	r2, [pc, #604]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002b20:	f023 0304 	bic.w	r3, r3, #4
 8002b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d016      	beq.n	8002b5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7fe fcca 	bl	80014c8 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b38:	f7fe fcc6 	bl	80014c8 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e12a      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4e:	4b8b      	ldr	r3, [pc, #556]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0ed      	beq.n	8002b38 <HAL_RCC_OscConfig+0x53c>
 8002b5c:	e015      	b.n	8002b8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5e:	f7fe fcb3 	bl	80014c8 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b64:	e00a      	b.n	8002b7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b66:	f7fe fcaf 	bl	80014c8 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e113      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b7c:	4b7f      	ldr	r3, [pc, #508]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1ed      	bne.n	8002b66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b8a:	7ffb      	ldrb	r3, [r7, #31]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d105      	bne.n	8002b9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b90:	4b7a      	ldr	r3, [pc, #488]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b94:	4a79      	ldr	r2, [pc, #484]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80fe 	beq.w	8002da2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	f040 80d0 	bne.w	8002d50 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bb0:	4b72      	ldr	r3, [pc, #456]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f003 0203 	and.w	r2, r3, #3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d130      	bne.n	8002c26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d127      	bne.n	8002c26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d11f      	bne.n	8002c26 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bf0:	2a07      	cmp	r2, #7
 8002bf2:	bf14      	ite	ne
 8002bf4:	2201      	movne	r2, #1
 8002bf6:	2200      	moveq	r2, #0
 8002bf8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d113      	bne.n	8002c26 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c08:	085b      	lsrs	r3, r3, #1
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d109      	bne.n	8002c26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d06e      	beq.n	8002d04 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	2b0c      	cmp	r3, #12
 8002c2a:	d069      	beq.n	8002d00 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c2c:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d105      	bne.n	8002c44 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c38:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0ad      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c48:	4b4c      	ldr	r3, [pc, #304]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a4b      	ldr	r2, [pc, #300]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c52:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c54:	f7fe fc38 	bl	80014c8 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5c:	f7fe fc34 	bl	80014c8 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e09a      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6e:	4b43      	ldr	r3, [pc, #268]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c7a:	4b40      	ldr	r3, [pc, #256]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	4b40      	ldr	r3, [pc, #256]	; (8002d80 <HAL_RCC_OscConfig+0x784>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c8a:	3a01      	subs	r2, #1
 8002c8c:	0112      	lsls	r2, r2, #4
 8002c8e:	4311      	orrs	r1, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c94:	0212      	lsls	r2, r2, #8
 8002c96:	4311      	orrs	r1, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c9c:	0852      	lsrs	r2, r2, #1
 8002c9e:	3a01      	subs	r2, #1
 8002ca0:	0552      	lsls	r2, r2, #21
 8002ca2:	4311      	orrs	r1, r2
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ca8:	0852      	lsrs	r2, r2, #1
 8002caa:	3a01      	subs	r2, #1
 8002cac:	0652      	lsls	r2, r2, #25
 8002cae:	4311      	orrs	r1, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cb4:	0912      	lsrs	r2, r2, #4
 8002cb6:	0452      	lsls	r2, r2, #17
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	4930      	ldr	r1, [pc, #192]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cc0:	4b2e      	ldr	r3, [pc, #184]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2d      	ldr	r2, [pc, #180]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ccc:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4a2a      	ldr	r2, [pc, #168]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cd8:	f7fe fbf6 	bl	80014c8 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce0:	f7fe fbf2 	bl	80014c8 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e058      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf2:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cfe:	e050      	b.n	8002da2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e04f      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d04:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d148      	bne.n	8002da2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d10:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a19      	ldr	r2, [pc, #100]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d1c:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4a16      	ldr	r2, [pc, #88]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d28:	f7fe fbce 	bl	80014c8 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d30:	f7fe fbca 	bl	80014c8 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e030      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d42:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x734>
 8002d4e:	e028      	b.n	8002da2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2b0c      	cmp	r3, #12
 8002d54:	d023      	beq.n	8002d9e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d56:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a08      	ldr	r2, [pc, #32]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002d5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d62:	f7fe fbb1 	bl	80014c8 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d68:	e00c      	b.n	8002d84 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6a:	f7fe fbad 	bl	80014c8 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d905      	bls.n	8002d84 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e013      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d84:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_RCC_OscConfig+0x7b0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1ec      	bne.n	8002d6a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_RCC_OscConfig+0x7b0>)
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	4905      	ldr	r1, [pc, #20]	; (8002dac <HAL_RCC_OscConfig+0x7b0>)
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_RCC_OscConfig+0x7b4>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60cb      	str	r3, [r1, #12]
 8002d9c:	e001      	b.n	8002da2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3720      	adds	r7, #32
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000
 8002db0:	feeefffc 	.word	0xfeeefffc

08002db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0e7      	b.n	8002f98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b75      	ldr	r3, [pc, #468]	; (8002fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d910      	bls.n	8002df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b72      	ldr	r3, [pc, #456]	; (8002fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 0207 	bic.w	r2, r3, #7
 8002dde:	4970      	ldr	r1, [pc, #448]	; (8002fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b6e      	ldr	r3, [pc, #440]	; (8002fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0cf      	b.n	8002f98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d010      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	4b66      	ldr	r3, [pc, #408]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d908      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e14:	4b63      	ldr	r3, [pc, #396]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	4960      	ldr	r1, [pc, #384]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d04c      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d107      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e3a:	4b5a      	ldr	r3, [pc, #360]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d121      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e0a6      	b.n	8002f98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d107      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e52:	4b54      	ldr	r3, [pc, #336]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d115      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e09a      	b.n	8002f98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e6a:	4b4e      	ldr	r3, [pc, #312]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e08e      	b.n	8002f98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e7a:	4b4a      	ldr	r3, [pc, #296]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e086      	b.n	8002f98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e8a:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f023 0203 	bic.w	r2, r3, #3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4943      	ldr	r1, [pc, #268]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e9c:	f7fe fb14 	bl	80014c8 <HAL_GetTick>
 8002ea0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea2:	e00a      	b.n	8002eba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea4:	f7fe fb10 	bl	80014c8 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e06e      	b.n	8002f98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 020c 	and.w	r2, r3, #12
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d1eb      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d010      	beq.n	8002efa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d208      	bcs.n	8002efa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee8:	4b2e      	ldr	r3, [pc, #184]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	492b      	ldr	r1, [pc, #172]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002efa:	4b29      	ldr	r3, [pc, #164]	; (8002fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d210      	bcs.n	8002f2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f08:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f023 0207 	bic.w	r2, r3, #7
 8002f10:	4923      	ldr	r1, [pc, #140]	; (8002fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f18:	4b21      	ldr	r3, [pc, #132]	; (8002fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d001      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e036      	b.n	8002f98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f36:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	4918      	ldr	r1, [pc, #96]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d009      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f54:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4910      	ldr	r1, [pc, #64]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f68:	f000 f824 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	091b      	lsrs	r3, r3, #4
 8002f74:	f003 030f 	and.w	r3, r3, #15
 8002f78:	490b      	ldr	r1, [pc, #44]	; (8002fa8 <HAL_RCC_ClockConfig+0x1f4>)
 8002f7a:	5ccb      	ldrb	r3, [r1, r3]
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
 8002f84:	4a09      	ldr	r2, [pc, #36]	; (8002fac <HAL_RCC_ClockConfig+0x1f8>)
 8002f86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_RCC_ClockConfig+0x1fc>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fe fa4b 	bl	8001428 <HAL_InitTick>
 8002f92:	4603      	mov	r3, r0
 8002f94:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f96:	7afb      	ldrb	r3, [r7, #11]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40022000 	.word	0x40022000
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	08005ec0 	.word	0x08005ec0
 8002fac:	20000004 	.word	0x20000004
 8002fb0:	20000008 	.word	0x20000008

08002fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	; 0x24
 8002fb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fc2:	4b3e      	ldr	r3, [pc, #248]	; (80030bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fcc:	4b3b      	ldr	r3, [pc, #236]	; (80030bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d121      	bne.n	8003026 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d11e      	bne.n	8003026 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fe8:	4b34      	ldr	r3, [pc, #208]	; (80030bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d107      	bne.n	8003004 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ff4:	4b31      	ldr	r3, [pc, #196]	; (80030bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	f003 030f 	and.w	r3, r3, #15
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	e005      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003004:	4b2d      	ldr	r3, [pc, #180]	; (80030bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003010:	4a2b      	ldr	r2, [pc, #172]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003018:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10d      	bne.n	800303c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003024:	e00a      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b04      	cmp	r3, #4
 800302a:	d102      	bne.n	8003032 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800302c:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800302e:	61bb      	str	r3, [r7, #24]
 8003030:	e004      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b08      	cmp	r3, #8
 8003036:	d101      	bne.n	800303c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003038:	4b23      	ldr	r3, [pc, #140]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800303a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	2b0c      	cmp	r3, #12
 8003040:	d134      	bne.n	80030ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003042:	4b1e      	ldr	r3, [pc, #120]	; (80030bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d003      	beq.n	800305a <HAL_RCC_GetSysClockFreq+0xa6>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d003      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0xac>
 8003058:	e005      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800305a:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800305c:	617b      	str	r3, [r7, #20]
      break;
 800305e:	e005      	b.n	800306c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003060:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003062:	617b      	str	r3, [r7, #20]
      break;
 8003064:	e002      	b.n	800306c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	617b      	str	r3, [r7, #20]
      break;
 800306a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800306c:	4b13      	ldr	r3, [pc, #76]	; (80030bc <HAL_RCC_GetSysClockFreq+0x108>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	3301      	adds	r3, #1
 8003078:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <HAL_RCC_GetSysClockFreq+0x108>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	fb03 f202 	mul.w	r2, r3, r2
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003090:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	0e5b      	lsrs	r3, r3, #25
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	3301      	adds	r3, #1
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030ac:	69bb      	ldr	r3, [r7, #24]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3724      	adds	r7, #36	; 0x24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40021000 	.word	0x40021000
 80030c0:	08005ed8 	.word	0x08005ed8
 80030c4:	00f42400 	.word	0x00f42400
 80030c8:	007a1200 	.word	0x007a1200

080030cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000004 	.word	0x20000004

080030e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030e8:	f7ff fff0 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	0a1b      	lsrs	r3, r3, #8
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	4904      	ldr	r1, [pc, #16]	; (800310c <HAL_RCC_GetPCLK1Freq+0x28>)
 80030fa:	5ccb      	ldrb	r3, [r1, r3]
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003104:	4618      	mov	r0, r3
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40021000 	.word	0x40021000
 800310c:	08005ed0 	.word	0x08005ed0

08003110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003114:	f7ff ffda 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_RCC_GetPCLK2Freq+0x24>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	0adb      	lsrs	r3, r3, #11
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4904      	ldr	r1, [pc, #16]	; (8003138 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40021000 	.word	0x40021000
 8003138:	08005ed0 	.word	0x08005ed0

0800313c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003148:	4b2a      	ldr	r3, [pc, #168]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003154:	f7ff f9ee 	bl	8002534 <HAL_PWREx_GetVoltageRange>
 8003158:	6178      	str	r0, [r7, #20]
 800315a:	e014      	b.n	8003186 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800315c:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003160:	4a24      	ldr	r2, [pc, #144]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003166:	6593      	str	r3, [r2, #88]	; 0x58
 8003168:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003174:	f7ff f9de 	bl	8002534 <HAL_PWREx_GetVoltageRange>
 8003178:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800317a:	4b1e      	ldr	r3, [pc, #120]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003184:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800318c:	d10b      	bne.n	80031a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b80      	cmp	r3, #128	; 0x80
 8003192:	d919      	bls.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2ba0      	cmp	r3, #160	; 0xa0
 8003198:	d902      	bls.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800319a:	2302      	movs	r3, #2
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	e013      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031a0:	2301      	movs	r3, #1
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	e010      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b80      	cmp	r3, #128	; 0x80
 80031aa:	d902      	bls.n	80031b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031ac:	2303      	movs	r3, #3
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	e00a      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b80      	cmp	r3, #128	; 0x80
 80031b6:	d102      	bne.n	80031be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031b8:	2302      	movs	r3, #2
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	e004      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b70      	cmp	r3, #112	; 0x70
 80031c2:	d101      	bne.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031c4:	2301      	movs	r3, #1
 80031c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f023 0207 	bic.w	r2, r3, #7
 80031d0:	4909      	ldr	r1, [pc, #36]	; (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031d8:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d001      	beq.n	80031ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40022000 	.word	0x40022000

080031fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003204:	2300      	movs	r3, #0
 8003206:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003208:	2300      	movs	r3, #0
 800320a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003214:	2b00      	cmp	r3, #0
 8003216:	d041      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800321c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003220:	d02a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003222:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003226:	d824      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003228:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800322c:	d008      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800322e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003232:	d81e      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800323c:	d010      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800323e:	e018      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003240:	4b86      	ldr	r3, [pc, #536]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4a85      	ldr	r2, [pc, #532]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800324c:	e015      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3304      	adds	r3, #4
 8003252:	2100      	movs	r1, #0
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fabb 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 800325a:	4603      	mov	r3, r0
 800325c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800325e:	e00c      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3320      	adds	r3, #32
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fba6 	bl	80039b8 <RCCEx_PLLSAI2_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003270:	e003      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	74fb      	strb	r3, [r7, #19]
      break;
 8003276:	e000      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003278:	bf00      	nop
    }

    if(ret == HAL_OK)
 800327a:	7cfb      	ldrb	r3, [r7, #19]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10b      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003280:	4b76      	ldr	r3, [pc, #472]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003286:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800328e:	4973      	ldr	r1, [pc, #460]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003296:	e001      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d041      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032b0:	d02a      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032b6:	d824      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032bc:	d008      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032c2:	d81e      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032cc:	d010      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ce:	e018      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032d0:	4b62      	ldr	r3, [pc, #392]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4a61      	ldr	r2, [pc, #388]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032dc:	e015      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fa73 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ee:	e00c      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3320      	adds	r3, #32
 80032f4:	2100      	movs	r1, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fb5e 	bl	80039b8 <RCCEx_PLLSAI2_Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003300:	e003      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	74fb      	strb	r3, [r7, #19]
      break;
 8003306:	e000      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003308:	bf00      	nop
    }

    if(ret == HAL_OK)
 800330a:	7cfb      	ldrb	r3, [r7, #19]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10b      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003310:	4b52      	ldr	r3, [pc, #328]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800331e:	494f      	ldr	r1, [pc, #316]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003326:	e001      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80a0 	beq.w	800347a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800333e:	4b47      	ldr	r3, [pc, #284]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800334e:	2300      	movs	r3, #0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00d      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003354:	4b41      	ldr	r3, [pc, #260]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	4a40      	ldr	r2, [pc, #256]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335e:	6593      	str	r3, [r2, #88]	; 0x58
 8003360:	4b3e      	ldr	r3, [pc, #248]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336c:	2301      	movs	r3, #1
 800336e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003370:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a3a      	ldr	r2, [pc, #232]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800337c:	f7fe f8a4 	bl	80014c8 <HAL_GetTick>
 8003380:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003382:	e009      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003384:	f7fe f8a0 	bl	80014c8 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d902      	bls.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	74fb      	strb	r3, [r7, #19]
        break;
 8003396:	e005      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003398:	4b31      	ldr	r3, [pc, #196]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ef      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033a4:	7cfb      	ldrb	r3, [r7, #19]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d15c      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033aa:	4b2c      	ldr	r3, [pc, #176]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01f      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d019      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033c8:	4b24      	ldr	r3, [pc, #144]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033d4:	4b21      	ldr	r3, [pc, #132]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	4a20      	ldr	r2, [pc, #128]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033e4:	4b1d      	ldr	r3, [pc, #116]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	4a1c      	ldr	r2, [pc, #112]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033f4:	4a19      	ldr	r2, [pc, #100]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d016      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7fe f85f 	bl	80014c8 <HAL_GetTick>
 800340a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340c:	e00b      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fe f85b 	bl	80014c8 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	; 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d902      	bls.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	74fb      	strb	r3, [r7, #19]
            break;
 8003424:	e006      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003426:	4b0d      	ldr	r3, [pc, #52]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0ec      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10c      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800343a:	4b08      	ldr	r3, [pc, #32]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800344a:	4904      	ldr	r1, [pc, #16]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003452:	e009      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003454:	7cfb      	ldrb	r3, [r7, #19]
 8003456:	74bb      	strb	r3, [r7, #18]
 8003458:	e006      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000
 8003460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003464:	7cfb      	ldrb	r3, [r7, #19]
 8003466:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003468:	7c7b      	ldrb	r3, [r7, #17]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346e:	4b9e      	ldr	r3, [pc, #632]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	4a9d      	ldr	r2, [pc, #628]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003478:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003486:	4b98      	ldr	r3, [pc, #608]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f023 0203 	bic.w	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	4994      	ldr	r1, [pc, #592]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034a8:	4b8f      	ldr	r3, [pc, #572]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ae:	f023 020c 	bic.w	r2, r3, #12
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	498c      	ldr	r1, [pc, #560]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034ca:	4b87      	ldr	r3, [pc, #540]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	4983      	ldr	r1, [pc, #524]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034ec:	4b7e      	ldr	r3, [pc, #504]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	497b      	ldr	r1, [pc, #492]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800350e:	4b76      	ldr	r3, [pc, #472]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800351c:	4972      	ldr	r1, [pc, #456]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003530:	4b6d      	ldr	r3, [pc, #436]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	496a      	ldr	r1, [pc, #424]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003552:	4b65      	ldr	r3, [pc, #404]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003560:	4961      	ldr	r1, [pc, #388]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003574:	4b5c      	ldr	r3, [pc, #368]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003582:	4959      	ldr	r1, [pc, #356]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003596:	4b54      	ldr	r3, [pc, #336]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a4:	4950      	ldr	r1, [pc, #320]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035b8:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c6:	4948      	ldr	r1, [pc, #288]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035da:	4b43      	ldr	r3, [pc, #268]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	493f      	ldr	r1, [pc, #252]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d028      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035fc:	4b3a      	ldr	r3, [pc, #232]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003602:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800360a:	4937      	ldr	r1, [pc, #220]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800361a:	d106      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800361c:	4b32      	ldr	r3, [pc, #200]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4a31      	ldr	r2, [pc, #196]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003626:	60d3      	str	r3, [r2, #12]
 8003628:	e011      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800362e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003632:	d10c      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3304      	adds	r3, #4
 8003638:	2101      	movs	r1, #1
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f8c8 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800364a:	7cfb      	ldrb	r3, [r7, #19]
 800364c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d028      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800365a:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003660:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	491f      	ldr	r1, [pc, #124]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003678:	d106      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800367a:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	4a1a      	ldr	r2, [pc, #104]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003684:	60d3      	str	r3, [r2, #12]
 8003686:	e011      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003690:	d10c      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3304      	adds	r3, #4
 8003696:	2101      	movs	r1, #1
 8003698:	4618      	mov	r0, r3
 800369a:	f000 f899 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036a2:	7cfb      	ldrb	r3, [r7, #19]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d02b      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c6:	4908      	ldr	r1, [pc, #32]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036d6:	d109      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a02      	ldr	r2, [pc, #8]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036e2:	60d3      	str	r3, [r2, #12]
 80036e4:	e014      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036f4:	d10c      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3304      	adds	r3, #4
 80036fa:	2101      	movs	r1, #1
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f867 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003706:	7cfb      	ldrb	r3, [r7, #19]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d02f      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800371c:	4b2b      	ldr	r3, [pc, #172]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003722:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800372a:	4928      	ldr	r1, [pc, #160]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800373a:	d10d      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3304      	adds	r3, #4
 8003740:	2102      	movs	r1, #2
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f844 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d014      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003752:	7cfb      	ldrb	r3, [r7, #19]
 8003754:	74bb      	strb	r3, [r7, #18]
 8003756:	e011      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800375c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003760:	d10c      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3320      	adds	r3, #32
 8003766:	2102      	movs	r1, #2
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f925 	bl	80039b8 <RCCEx_PLLSAI2_Config>
 800376e:	4603      	mov	r3, r0
 8003770:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003772:	7cfb      	ldrb	r3, [r7, #19]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003788:	4b10      	ldr	r3, [pc, #64]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003796:	490d      	ldr	r1, [pc, #52]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037aa:	4b08      	ldr	r3, [pc, #32]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ba:	4904      	ldr	r1, [pc, #16]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40021000 	.word	0x40021000

080037d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037de:	4b75      	ldr	r3, [pc, #468]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d018      	beq.n	800381c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037ea:	4b72      	ldr	r3, [pc, #456]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0203 	and.w	r2, r3, #3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d10d      	bne.n	8003816 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
       ||
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003802:	4b6c      	ldr	r3, [pc, #432]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	091b      	lsrs	r3, r3, #4
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
       ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d047      	beq.n	80038a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
 800381a:	e044      	b.n	80038a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d018      	beq.n	8003856 <RCCEx_PLLSAI1_Config+0x86>
 8003824:	2b03      	cmp	r3, #3
 8003826:	d825      	bhi.n	8003874 <RCCEx_PLLSAI1_Config+0xa4>
 8003828:	2b01      	cmp	r3, #1
 800382a:	d002      	beq.n	8003832 <RCCEx_PLLSAI1_Config+0x62>
 800382c:	2b02      	cmp	r3, #2
 800382e:	d009      	beq.n	8003844 <RCCEx_PLLSAI1_Config+0x74>
 8003830:	e020      	b.n	8003874 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003832:	4b60      	ldr	r3, [pc, #384]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d11d      	bne.n	800387a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003842:	e01a      	b.n	800387a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003844:	4b5b      	ldr	r3, [pc, #364]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384c:	2b00      	cmp	r3, #0
 800384e:	d116      	bne.n	800387e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003854:	e013      	b.n	800387e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003856:	4b57      	ldr	r3, [pc, #348]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10f      	bne.n	8003882 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003862:	4b54      	ldr	r3, [pc, #336]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003872:	e006      	b.n	8003882 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
      break;
 8003878:	e004      	b.n	8003884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800387a:	bf00      	nop
 800387c:	e002      	b.n	8003884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003882:	bf00      	nop
    }

    if(status == HAL_OK)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10d      	bne.n	80038a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800388a:	4b4a      	ldr	r3, [pc, #296]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6819      	ldr	r1, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	3b01      	subs	r3, #1
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	430b      	orrs	r3, r1
 80038a0:	4944      	ldr	r1, [pc, #272]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d17d      	bne.n	80039a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038ac:	4b41      	ldr	r3, [pc, #260]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a40      	ldr	r2, [pc, #256]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b8:	f7fd fe06 	bl	80014c8 <HAL_GetTick>
 80038bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038be:	e009      	b.n	80038d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038c0:	f7fd fe02 	bl	80014c8 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d902      	bls.n	80038d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	73fb      	strb	r3, [r7, #15]
        break;
 80038d2:	e005      	b.n	80038e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038d4:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1ef      	bne.n	80038c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d160      	bne.n	80039a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d111      	bne.n	8003910 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038ec:	4b31      	ldr	r3, [pc, #196]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6892      	ldr	r2, [r2, #8]
 80038fc:	0211      	lsls	r1, r2, #8
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	68d2      	ldr	r2, [r2, #12]
 8003902:	0912      	lsrs	r2, r2, #4
 8003904:	0452      	lsls	r2, r2, #17
 8003906:	430a      	orrs	r2, r1
 8003908:	492a      	ldr	r1, [pc, #168]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390a:	4313      	orrs	r3, r2
 800390c:	610b      	str	r3, [r1, #16]
 800390e:	e027      	b.n	8003960 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d112      	bne.n	800393c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003916:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800391e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6892      	ldr	r2, [r2, #8]
 8003926:	0211      	lsls	r1, r2, #8
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6912      	ldr	r2, [r2, #16]
 800392c:	0852      	lsrs	r2, r2, #1
 800392e:	3a01      	subs	r2, #1
 8003930:	0552      	lsls	r2, r2, #21
 8003932:	430a      	orrs	r2, r1
 8003934:	491f      	ldr	r1, [pc, #124]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003936:	4313      	orrs	r3, r2
 8003938:	610b      	str	r3, [r1, #16]
 800393a:	e011      	b.n	8003960 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800393c:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003944:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6892      	ldr	r2, [r2, #8]
 800394c:	0211      	lsls	r1, r2, #8
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6952      	ldr	r2, [r2, #20]
 8003952:	0852      	lsrs	r2, r2, #1
 8003954:	3a01      	subs	r2, #1
 8003956:	0652      	lsls	r2, r2, #25
 8003958:	430a      	orrs	r2, r1
 800395a:	4916      	ldr	r1, [pc, #88]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395c:	4313      	orrs	r3, r2
 800395e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003960:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003966:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800396a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7fd fdac 	bl	80014c8 <HAL_GetTick>
 8003970:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003972:	e009      	b.n	8003988 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003974:	f7fd fda8 	bl	80014c8 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d902      	bls.n	8003988 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	73fb      	strb	r3, [r7, #15]
          break;
 8003986:	e005      	b.n	8003994 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003988:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0ef      	beq.n	8003974 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800399a:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	4904      	ldr	r1, [pc, #16]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40021000 	.word	0x40021000

080039b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039c6:	4b6a      	ldr	r3, [pc, #424]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d018      	beq.n	8003a04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039d2:	4b67      	ldr	r3, [pc, #412]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0203 	and.w	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d10d      	bne.n	80039fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
       ||
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039ea:	4b61      	ldr	r3, [pc, #388]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
       ||
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d047      	beq.n	8003a8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	73fb      	strb	r3, [r7, #15]
 8003a02:	e044      	b.n	8003a8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d018      	beq.n	8003a3e <RCCEx_PLLSAI2_Config+0x86>
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d825      	bhi.n	8003a5c <RCCEx_PLLSAI2_Config+0xa4>
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d002      	beq.n	8003a1a <RCCEx_PLLSAI2_Config+0x62>
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d009      	beq.n	8003a2c <RCCEx_PLLSAI2_Config+0x74>
 8003a18:	e020      	b.n	8003a5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a1a:	4b55      	ldr	r3, [pc, #340]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d11d      	bne.n	8003a62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a2a:	e01a      	b.n	8003a62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a2c:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d116      	bne.n	8003a66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a3c:	e013      	b.n	8003a66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a3e:	4b4c      	ldr	r3, [pc, #304]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10f      	bne.n	8003a6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a4a:	4b49      	ldr	r3, [pc, #292]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a5a:	e006      	b.n	8003a6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a60:	e004      	b.n	8003a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a62:	bf00      	nop
 8003a64:	e002      	b.n	8003a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a66:	bf00      	nop
 8003a68:	e000      	b.n	8003a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10d      	bne.n	8003a8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a72:	4b3f      	ldr	r3, [pc, #252]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6819      	ldr	r1, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	430b      	orrs	r3, r1
 8003a88:	4939      	ldr	r1, [pc, #228]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d167      	bne.n	8003b64 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a94:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a35      	ldr	r2, [pc, #212]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa0:	f7fd fd12 	bl	80014c8 <HAL_GetTick>
 8003aa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aa6:	e009      	b.n	8003abc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aa8:	f7fd fd0e 	bl	80014c8 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d902      	bls.n	8003abc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	73fb      	strb	r3, [r7, #15]
        break;
 8003aba:	e005      	b.n	8003ac8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003abc:	4b2c      	ldr	r3, [pc, #176]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1ef      	bne.n	8003aa8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d14a      	bne.n	8003b64 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d111      	bne.n	8003af8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ad4:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6892      	ldr	r2, [r2, #8]
 8003ae4:	0211      	lsls	r1, r2, #8
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68d2      	ldr	r2, [r2, #12]
 8003aea:	0912      	lsrs	r2, r2, #4
 8003aec:	0452      	lsls	r2, r2, #17
 8003aee:	430a      	orrs	r2, r1
 8003af0:	491f      	ldr	r1, [pc, #124]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	614b      	str	r3, [r1, #20]
 8003af6:	e011      	b.n	8003b1c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003af8:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6892      	ldr	r2, [r2, #8]
 8003b08:	0211      	lsls	r1, r2, #8
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6912      	ldr	r2, [r2, #16]
 8003b0e:	0852      	lsrs	r2, r2, #1
 8003b10:	3a01      	subs	r2, #1
 8003b12:	0652      	lsls	r2, r2, #25
 8003b14:	430a      	orrs	r2, r1
 8003b16:	4916      	ldr	r1, [pc, #88]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b1c:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b28:	f7fd fcce 	bl	80014c8 <HAL_GetTick>
 8003b2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b2e:	e009      	b.n	8003b44 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b30:	f7fd fcca 	bl	80014c8 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d902      	bls.n	8003b44 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	73fb      	strb	r3, [r7, #15]
          break;
 8003b42:	e005      	b.n	8003b50 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b44:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0ef      	beq.n	8003b30 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	4904      	ldr	r1, [pc, #16]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000

08003b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e049      	b.n	8003c1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fd fa40 	bl	8001020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	f000 fa9a 	bl	80040ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d001      	beq.n	8003c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e04f      	b.n	8003cdc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a23      	ldr	r2, [pc, #140]	; (8003ce8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01d      	beq.n	8003c9a <HAL_TIM_Base_Start_IT+0x76>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c66:	d018      	beq.n	8003c9a <HAL_TIM_Base_Start_IT+0x76>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a1f      	ldr	r2, [pc, #124]	; (8003cec <HAL_TIM_Base_Start_IT+0xc8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d013      	beq.n	8003c9a <HAL_TIM_Base_Start_IT+0x76>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a1e      	ldr	r2, [pc, #120]	; (8003cf0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00e      	beq.n	8003c9a <HAL_TIM_Base_Start_IT+0x76>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a1c      	ldr	r2, [pc, #112]	; (8003cf4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d009      	beq.n	8003c9a <HAL_TIM_Base_Start_IT+0x76>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1b      	ldr	r2, [pc, #108]	; (8003cf8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_TIM_Base_Start_IT+0x76>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <HAL_TIM_Base_Start_IT+0xd8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d115      	bne.n	8003cc6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	4b17      	ldr	r3, [pc, #92]	; (8003d00 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b06      	cmp	r3, #6
 8003caa:	d015      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0xb4>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb2:	d011      	beq.n	8003cd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc4:	e008      	b.n	8003cd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0201 	orr.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e000      	b.n	8003cda <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	40012c00 	.word	0x40012c00
 8003cec:	40000400 	.word	0x40000400
 8003cf0:	40000800 	.word	0x40000800
 8003cf4:	40000c00 	.word	0x40000c00
 8003cf8:	40013400 	.word	0x40013400
 8003cfc:	40014000 	.word	0x40014000
 8003d00:	00010007 	.word	0x00010007

08003d04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d020      	beq.n	8003d68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01b      	beq.n	8003d68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0202 	mvn.w	r2, #2
 8003d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f9ad 	bl	80040ae <HAL_TIM_IC_CaptureCallback>
 8003d54:	e005      	b.n	8003d62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f99f 	bl	800409a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f9b0 	bl	80040c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d020      	beq.n	8003db4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d01b      	beq.n	8003db4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f06f 0204 	mvn.w	r2, #4
 8003d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f987 	bl	80040ae <HAL_TIM_IC_CaptureCallback>
 8003da0:	e005      	b.n	8003dae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f979 	bl	800409a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f98a 	bl	80040c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d020      	beq.n	8003e00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d01b      	beq.n	8003e00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f06f 0208 	mvn.w	r2, #8
 8003dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2204      	movs	r2, #4
 8003dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f961 	bl	80040ae <HAL_TIM_IC_CaptureCallback>
 8003dec:	e005      	b.n	8003dfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f953 	bl	800409a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f964 	bl	80040c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d020      	beq.n	8003e4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01b      	beq.n	8003e4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0210 	mvn.w	r2, #16
 8003e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2208      	movs	r2, #8
 8003e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f93b 	bl	80040ae <HAL_TIM_IC_CaptureCallback>
 8003e38:	e005      	b.n	8003e46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f92d 	bl	800409a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f93e 	bl	80040c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00c      	beq.n	8003e70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d007      	beq.n	8003e70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0201 	mvn.w	r2, #1
 8003e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fd f814 	bl	8000e98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00c      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d007      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 faf2 	bl	8004478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00c      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d007      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 faea 	bl	800448c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00c      	beq.n	8003edc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d007      	beq.n	8003edc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f8fd 	bl	80040d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00c      	beq.n	8003f00 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d007      	beq.n	8003f00 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0220 	mvn.w	r2, #32
 8003ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fab2 	bl	8004464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_TIM_ConfigClockSource+0x1c>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e0b6      	b.n	8004092 <HAL_TIM_ConfigClockSource+0x18a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f60:	d03e      	beq.n	8003fe0 <HAL_TIM_ConfigClockSource+0xd8>
 8003f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f66:	f200 8087 	bhi.w	8004078 <HAL_TIM_ConfigClockSource+0x170>
 8003f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f6e:	f000 8086 	beq.w	800407e <HAL_TIM_ConfigClockSource+0x176>
 8003f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f76:	d87f      	bhi.n	8004078 <HAL_TIM_ConfigClockSource+0x170>
 8003f78:	2b70      	cmp	r3, #112	; 0x70
 8003f7a:	d01a      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0xaa>
 8003f7c:	2b70      	cmp	r3, #112	; 0x70
 8003f7e:	d87b      	bhi.n	8004078 <HAL_TIM_ConfigClockSource+0x170>
 8003f80:	2b60      	cmp	r3, #96	; 0x60
 8003f82:	d050      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0x11e>
 8003f84:	2b60      	cmp	r3, #96	; 0x60
 8003f86:	d877      	bhi.n	8004078 <HAL_TIM_ConfigClockSource+0x170>
 8003f88:	2b50      	cmp	r3, #80	; 0x50
 8003f8a:	d03c      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0xfe>
 8003f8c:	2b50      	cmp	r3, #80	; 0x50
 8003f8e:	d873      	bhi.n	8004078 <HAL_TIM_ConfigClockSource+0x170>
 8003f90:	2b40      	cmp	r3, #64	; 0x40
 8003f92:	d058      	beq.n	8004046 <HAL_TIM_ConfigClockSource+0x13e>
 8003f94:	2b40      	cmp	r3, #64	; 0x40
 8003f96:	d86f      	bhi.n	8004078 <HAL_TIM_ConfigClockSource+0x170>
 8003f98:	2b30      	cmp	r3, #48	; 0x30
 8003f9a:	d064      	beq.n	8004066 <HAL_TIM_ConfigClockSource+0x15e>
 8003f9c:	2b30      	cmp	r3, #48	; 0x30
 8003f9e:	d86b      	bhi.n	8004078 <HAL_TIM_ConfigClockSource+0x170>
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d060      	beq.n	8004066 <HAL_TIM_ConfigClockSource+0x15e>
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	d867      	bhi.n	8004078 <HAL_TIM_ConfigClockSource+0x170>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d05c      	beq.n	8004066 <HAL_TIM_ConfigClockSource+0x15e>
 8003fac:	2b10      	cmp	r3, #16
 8003fae:	d05a      	beq.n	8004066 <HAL_TIM_ConfigClockSource+0x15e>
 8003fb0:	e062      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fc2:	f000 f9a7 	bl	8004314 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	609a      	str	r2, [r3, #8]
      break;
 8003fde:	e04f      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ff0:	f000 f990 	bl	8004314 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004002:	609a      	str	r2, [r3, #8]
      break;
 8004004:	e03c      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004012:	461a      	mov	r2, r3
 8004014:	f000 f904 	bl	8004220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2150      	movs	r1, #80	; 0x50
 800401e:	4618      	mov	r0, r3
 8004020:	f000 f95d 	bl	80042de <TIM_ITRx_SetConfig>
      break;
 8004024:	e02c      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004032:	461a      	mov	r2, r3
 8004034:	f000 f923 	bl	800427e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2160      	movs	r1, #96	; 0x60
 800403e:	4618      	mov	r0, r3
 8004040:	f000 f94d 	bl	80042de <TIM_ITRx_SetConfig>
      break;
 8004044:	e01c      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004052:	461a      	mov	r2, r3
 8004054:	f000 f8e4 	bl	8004220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2140      	movs	r1, #64	; 0x40
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f93d 	bl	80042de <TIM_ITRx_SetConfig>
      break;
 8004064:	e00c      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4619      	mov	r1, r3
 8004070:	4610      	mov	r0, r2
 8004072:	f000 f934 	bl	80042de <TIM_ITRx_SetConfig>
      break;
 8004076:	e003      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	73fb      	strb	r3, [r7, #15]
      break;
 800407c:	e000      	b.n	8004080 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800407e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004090:	7bfb      	ldrb	r3, [r7, #15]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
	...

080040ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a40      	ldr	r2, [pc, #256]	; (8004200 <TIM_Base_SetConfig+0x114>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d013      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410a:	d00f      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a3d      	ldr	r2, [pc, #244]	; (8004204 <TIM_Base_SetConfig+0x118>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00b      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a3c      	ldr	r2, [pc, #240]	; (8004208 <TIM_Base_SetConfig+0x11c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d007      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a3b      	ldr	r2, [pc, #236]	; (800420c <TIM_Base_SetConfig+0x120>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d003      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a3a      	ldr	r2, [pc, #232]	; (8004210 <TIM_Base_SetConfig+0x124>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d108      	bne.n	800413e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a2f      	ldr	r2, [pc, #188]	; (8004200 <TIM_Base_SetConfig+0x114>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d01f      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414c:	d01b      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2c      	ldr	r2, [pc, #176]	; (8004204 <TIM_Base_SetConfig+0x118>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d017      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2b      	ldr	r2, [pc, #172]	; (8004208 <TIM_Base_SetConfig+0x11c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d013      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a2a      	ldr	r2, [pc, #168]	; (800420c <TIM_Base_SetConfig+0x120>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00f      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a29      	ldr	r2, [pc, #164]	; (8004210 <TIM_Base_SetConfig+0x124>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00b      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a28      	ldr	r2, [pc, #160]	; (8004214 <TIM_Base_SetConfig+0x128>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d007      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a27      	ldr	r2, [pc, #156]	; (8004218 <TIM_Base_SetConfig+0x12c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d003      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a26      	ldr	r2, [pc, #152]	; (800421c <TIM_Base_SetConfig+0x130>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d108      	bne.n	8004198 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a10      	ldr	r2, [pc, #64]	; (8004200 <TIM_Base_SetConfig+0x114>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00f      	beq.n	80041e4 <TIM_Base_SetConfig+0xf8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a12      	ldr	r2, [pc, #72]	; (8004210 <TIM_Base_SetConfig+0x124>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00b      	beq.n	80041e4 <TIM_Base_SetConfig+0xf8>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a11      	ldr	r2, [pc, #68]	; (8004214 <TIM_Base_SetConfig+0x128>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d007      	beq.n	80041e4 <TIM_Base_SetConfig+0xf8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a10      	ldr	r2, [pc, #64]	; (8004218 <TIM_Base_SetConfig+0x12c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d003      	beq.n	80041e4 <TIM_Base_SetConfig+0xf8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a0f      	ldr	r2, [pc, #60]	; (800421c <TIM_Base_SetConfig+0x130>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d103      	bne.n	80041ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	615a      	str	r2, [r3, #20]
}
 80041f2:	bf00      	nop
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40012c00 	.word	0x40012c00
 8004204:	40000400 	.word	0x40000400
 8004208:	40000800 	.word	0x40000800
 800420c:	40000c00 	.word	0x40000c00
 8004210:	40013400 	.word	0x40013400
 8004214:	40014000 	.word	0x40014000
 8004218:	40014400 	.word	0x40014400
 800421c:	40014800 	.word	0x40014800

08004220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	f023 0201 	bic.w	r2, r3, #1
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800424a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f023 030a 	bic.w	r3, r3, #10
 800425c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	621a      	str	r2, [r3, #32]
}
 8004272:	bf00      	nop
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800427e:	b480      	push	{r7}
 8004280:	b087      	sub	sp, #28
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f023 0210 	bic.w	r2, r3, #16
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	031b      	lsls	r3, r3, #12
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042de:	b480      	push	{r7}
 80042e0:	b085      	sub	sp, #20
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f043 0307 	orr.w	r3, r3, #7
 8004300:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	609a      	str	r2, [r3, #8]
}
 8004308:	bf00      	nop
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800432e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	021a      	lsls	r2, r3, #8
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	431a      	orrs	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4313      	orrs	r3, r2
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	609a      	str	r2, [r3, #8]
}
 8004348:	bf00      	nop
 800434a:	371c      	adds	r7, #28
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004368:	2302      	movs	r3, #2
 800436a:	e068      	b.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a2e      	ldr	r2, [pc, #184]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d004      	beq.n	80043a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a2d      	ldr	r2, [pc, #180]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d108      	bne.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a1e      	ldr	r2, [pc, #120]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d01d      	beq.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043de:	d018      	beq.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1b      	ldr	r2, [pc, #108]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d013      	beq.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1a      	ldr	r2, [pc, #104]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00e      	beq.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a18      	ldr	r2, [pc, #96]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d009      	beq.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a13      	ldr	r2, [pc, #76]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d004      	beq.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a14      	ldr	r2, [pc, #80]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d10c      	bne.n	800442c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004418:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	4313      	orrs	r3, r2
 8004422:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40012c00 	.word	0x40012c00
 8004450:	40013400 	.word	0x40013400
 8004454:	40000400 	.word	0x40000400
 8004458:	40000800 	.word	0x40000800
 800445c:	40000c00 	.word	0x40000c00
 8004460:	40014000 	.word	0x40014000

08004464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e040      	b.n	8004534 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fc fdec 	bl	80010a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2224      	movs	r2, #36	; 0x24
 80044cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fb6a 	bl	8004bc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f8af 	bl	8004650 <UART_SetConfig>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e01b      	b.n	8004534 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800450a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800451a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fbe9 	bl	8004d04 <UART_CheckIdleState>
 8004532:	4603      	mov	r3, r0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	; 0x28
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	4613      	mov	r3, r2
 800454a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004550:	2b20      	cmp	r3, #32
 8004552:	d178      	bne.n	8004646 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_UART_Transmit+0x24>
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e071      	b.n	8004648 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2221      	movs	r2, #33	; 0x21
 8004570:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004572:	f7fc ffa9 	bl	80014c8 <HAL_GetTick>
 8004576:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	88fa      	ldrh	r2, [r7, #6]
 800457c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	88fa      	ldrh	r2, [r7, #6]
 8004584:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004590:	d108      	bne.n	80045a4 <HAL_UART_Transmit+0x68>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d104      	bne.n	80045a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	e003      	b.n	80045ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045ac:	e030      	b.n	8004610 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2200      	movs	r2, #0
 80045b6:	2180      	movs	r1, #128	; 0x80
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fc4b 	bl	8004e54 <UART_WaitOnFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d004      	beq.n	80045ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2220      	movs	r2, #32
 80045c8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e03c      	b.n	8004648 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10b      	bne.n	80045ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	881a      	ldrh	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045e0:	b292      	uxth	r2, r2
 80045e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	3302      	adds	r3, #2
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	e008      	b.n	80045fe <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	781a      	ldrb	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	b292      	uxth	r2, r2
 80045f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	3301      	adds	r3, #1
 80045fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1c8      	bne.n	80045ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	2200      	movs	r2, #0
 8004624:	2140      	movs	r1, #64	; 0x40
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 fc14 	bl	8004e54 <UART_WaitOnFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d004      	beq.n	800463c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2220      	movs	r2, #32
 8004636:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e005      	b.n	8004648 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	e000      	b.n	8004648 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004646:	2302      	movs	r3, #2
  }
}
 8004648:	4618      	mov	r0, r3
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004654:	b08a      	sub	sp, #40	; 0x28
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	431a      	orrs	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	431a      	orrs	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	4313      	orrs	r3, r2
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	4ba4      	ldr	r3, [pc, #656]	; (8004910 <UART_SetConfig+0x2c0>)
 8004680:	4013      	ands	r3, r2
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004688:	430b      	orrs	r3, r1
 800468a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a99      	ldr	r2, [pc, #612]	; (8004914 <UART_SetConfig+0x2c4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d004      	beq.n	80046bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b8:	4313      	orrs	r3, r2
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046cc:	430a      	orrs	r2, r1
 80046ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a90      	ldr	r2, [pc, #576]	; (8004918 <UART_SetConfig+0x2c8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d126      	bne.n	8004728 <UART_SetConfig+0xd8>
 80046da:	4b90      	ldr	r3, [pc, #576]	; (800491c <UART_SetConfig+0x2cc>)
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d81b      	bhi.n	8004720 <UART_SetConfig+0xd0>
 80046e8:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <UART_SetConfig+0xa0>)
 80046ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ee:	bf00      	nop
 80046f0:	08004701 	.word	0x08004701
 80046f4:	08004711 	.word	0x08004711
 80046f8:	08004709 	.word	0x08004709
 80046fc:	08004719 	.word	0x08004719
 8004700:	2301      	movs	r3, #1
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004706:	e116      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004708:	2302      	movs	r3, #2
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470e:	e112      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004710:	2304      	movs	r3, #4
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004716:	e10e      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004718:	2308      	movs	r3, #8
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471e:	e10a      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004720:	2310      	movs	r3, #16
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004726:	e106      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a7c      	ldr	r2, [pc, #496]	; (8004920 <UART_SetConfig+0x2d0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d138      	bne.n	80047a4 <UART_SetConfig+0x154>
 8004732:	4b7a      	ldr	r3, [pc, #488]	; (800491c <UART_SetConfig+0x2cc>)
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004738:	f003 030c 	and.w	r3, r3, #12
 800473c:	2b0c      	cmp	r3, #12
 800473e:	d82d      	bhi.n	800479c <UART_SetConfig+0x14c>
 8004740:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <UART_SetConfig+0xf8>)
 8004742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004746:	bf00      	nop
 8004748:	0800477d 	.word	0x0800477d
 800474c:	0800479d 	.word	0x0800479d
 8004750:	0800479d 	.word	0x0800479d
 8004754:	0800479d 	.word	0x0800479d
 8004758:	0800478d 	.word	0x0800478d
 800475c:	0800479d 	.word	0x0800479d
 8004760:	0800479d 	.word	0x0800479d
 8004764:	0800479d 	.word	0x0800479d
 8004768:	08004785 	.word	0x08004785
 800476c:	0800479d 	.word	0x0800479d
 8004770:	0800479d 	.word	0x0800479d
 8004774:	0800479d 	.word	0x0800479d
 8004778:	08004795 	.word	0x08004795
 800477c:	2300      	movs	r3, #0
 800477e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004782:	e0d8      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004784:	2302      	movs	r3, #2
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478a:	e0d4      	b.n	8004936 <UART_SetConfig+0x2e6>
 800478c:	2304      	movs	r3, #4
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004792:	e0d0      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004794:	2308      	movs	r3, #8
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479a:	e0cc      	b.n	8004936 <UART_SetConfig+0x2e6>
 800479c:	2310      	movs	r3, #16
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a2:	e0c8      	b.n	8004936 <UART_SetConfig+0x2e6>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a5e      	ldr	r2, [pc, #376]	; (8004924 <UART_SetConfig+0x2d4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d125      	bne.n	80047fa <UART_SetConfig+0x1aa>
 80047ae:	4b5b      	ldr	r3, [pc, #364]	; (800491c <UART_SetConfig+0x2cc>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047b8:	2b30      	cmp	r3, #48	; 0x30
 80047ba:	d016      	beq.n	80047ea <UART_SetConfig+0x19a>
 80047bc:	2b30      	cmp	r3, #48	; 0x30
 80047be:	d818      	bhi.n	80047f2 <UART_SetConfig+0x1a2>
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d00a      	beq.n	80047da <UART_SetConfig+0x18a>
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d814      	bhi.n	80047f2 <UART_SetConfig+0x1a2>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <UART_SetConfig+0x182>
 80047cc:	2b10      	cmp	r3, #16
 80047ce:	d008      	beq.n	80047e2 <UART_SetConfig+0x192>
 80047d0:	e00f      	b.n	80047f2 <UART_SetConfig+0x1a2>
 80047d2:	2300      	movs	r3, #0
 80047d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d8:	e0ad      	b.n	8004936 <UART_SetConfig+0x2e6>
 80047da:	2302      	movs	r3, #2
 80047dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e0:	e0a9      	b.n	8004936 <UART_SetConfig+0x2e6>
 80047e2:	2304      	movs	r3, #4
 80047e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e8:	e0a5      	b.n	8004936 <UART_SetConfig+0x2e6>
 80047ea:	2308      	movs	r3, #8
 80047ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f0:	e0a1      	b.n	8004936 <UART_SetConfig+0x2e6>
 80047f2:	2310      	movs	r3, #16
 80047f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f8:	e09d      	b.n	8004936 <UART_SetConfig+0x2e6>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a4a      	ldr	r2, [pc, #296]	; (8004928 <UART_SetConfig+0x2d8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d125      	bne.n	8004850 <UART_SetConfig+0x200>
 8004804:	4b45      	ldr	r3, [pc, #276]	; (800491c <UART_SetConfig+0x2cc>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800480e:	2bc0      	cmp	r3, #192	; 0xc0
 8004810:	d016      	beq.n	8004840 <UART_SetConfig+0x1f0>
 8004812:	2bc0      	cmp	r3, #192	; 0xc0
 8004814:	d818      	bhi.n	8004848 <UART_SetConfig+0x1f8>
 8004816:	2b80      	cmp	r3, #128	; 0x80
 8004818:	d00a      	beq.n	8004830 <UART_SetConfig+0x1e0>
 800481a:	2b80      	cmp	r3, #128	; 0x80
 800481c:	d814      	bhi.n	8004848 <UART_SetConfig+0x1f8>
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <UART_SetConfig+0x1d8>
 8004822:	2b40      	cmp	r3, #64	; 0x40
 8004824:	d008      	beq.n	8004838 <UART_SetConfig+0x1e8>
 8004826:	e00f      	b.n	8004848 <UART_SetConfig+0x1f8>
 8004828:	2300      	movs	r3, #0
 800482a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800482e:	e082      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004830:	2302      	movs	r3, #2
 8004832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004836:	e07e      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004838:	2304      	movs	r3, #4
 800483a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483e:	e07a      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004840:	2308      	movs	r3, #8
 8004842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004846:	e076      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004848:	2310      	movs	r3, #16
 800484a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484e:	e072      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a35      	ldr	r2, [pc, #212]	; (800492c <UART_SetConfig+0x2dc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d12a      	bne.n	80048b0 <UART_SetConfig+0x260>
 800485a:	4b30      	ldr	r3, [pc, #192]	; (800491c <UART_SetConfig+0x2cc>)
 800485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004868:	d01a      	beq.n	80048a0 <UART_SetConfig+0x250>
 800486a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800486e:	d81b      	bhi.n	80048a8 <UART_SetConfig+0x258>
 8004870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004874:	d00c      	beq.n	8004890 <UART_SetConfig+0x240>
 8004876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800487a:	d815      	bhi.n	80048a8 <UART_SetConfig+0x258>
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <UART_SetConfig+0x238>
 8004880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004884:	d008      	beq.n	8004898 <UART_SetConfig+0x248>
 8004886:	e00f      	b.n	80048a8 <UART_SetConfig+0x258>
 8004888:	2300      	movs	r3, #0
 800488a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488e:	e052      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004890:	2302      	movs	r3, #2
 8004892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004896:	e04e      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004898:	2304      	movs	r3, #4
 800489a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489e:	e04a      	b.n	8004936 <UART_SetConfig+0x2e6>
 80048a0:	2308      	movs	r3, #8
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a6:	e046      	b.n	8004936 <UART_SetConfig+0x2e6>
 80048a8:	2310      	movs	r3, #16
 80048aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ae:	e042      	b.n	8004936 <UART_SetConfig+0x2e6>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a17      	ldr	r2, [pc, #92]	; (8004914 <UART_SetConfig+0x2c4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d13a      	bne.n	8004930 <UART_SetConfig+0x2e0>
 80048ba:	4b18      	ldr	r3, [pc, #96]	; (800491c <UART_SetConfig+0x2cc>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048c8:	d01a      	beq.n	8004900 <UART_SetConfig+0x2b0>
 80048ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048ce:	d81b      	bhi.n	8004908 <UART_SetConfig+0x2b8>
 80048d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d4:	d00c      	beq.n	80048f0 <UART_SetConfig+0x2a0>
 80048d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048da:	d815      	bhi.n	8004908 <UART_SetConfig+0x2b8>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <UART_SetConfig+0x298>
 80048e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e4:	d008      	beq.n	80048f8 <UART_SetConfig+0x2a8>
 80048e6:	e00f      	b.n	8004908 <UART_SetConfig+0x2b8>
 80048e8:	2300      	movs	r3, #0
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ee:	e022      	b.n	8004936 <UART_SetConfig+0x2e6>
 80048f0:	2302      	movs	r3, #2
 80048f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f6:	e01e      	b.n	8004936 <UART_SetConfig+0x2e6>
 80048f8:	2304      	movs	r3, #4
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fe:	e01a      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004900:	2308      	movs	r3, #8
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004906:	e016      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004908:	2310      	movs	r3, #16
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490e:	e012      	b.n	8004936 <UART_SetConfig+0x2e6>
 8004910:	efff69f3 	.word	0xefff69f3
 8004914:	40008000 	.word	0x40008000
 8004918:	40013800 	.word	0x40013800
 800491c:	40021000 	.word	0x40021000
 8004920:	40004400 	.word	0x40004400
 8004924:	40004800 	.word	0x40004800
 8004928:	40004c00 	.word	0x40004c00
 800492c:	40005000 	.word	0x40005000
 8004930:	2310      	movs	r3, #16
 8004932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a9f      	ldr	r2, [pc, #636]	; (8004bb8 <UART_SetConfig+0x568>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d17a      	bne.n	8004a36 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004944:	2b08      	cmp	r3, #8
 8004946:	d824      	bhi.n	8004992 <UART_SetConfig+0x342>
 8004948:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <UART_SetConfig+0x300>)
 800494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494e:	bf00      	nop
 8004950:	08004975 	.word	0x08004975
 8004954:	08004993 	.word	0x08004993
 8004958:	0800497d 	.word	0x0800497d
 800495c:	08004993 	.word	0x08004993
 8004960:	08004983 	.word	0x08004983
 8004964:	08004993 	.word	0x08004993
 8004968:	08004993 	.word	0x08004993
 800496c:	08004993 	.word	0x08004993
 8004970:	0800498b 	.word	0x0800498b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004974:	f7fe fbb6 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 8004978:	61f8      	str	r0, [r7, #28]
        break;
 800497a:	e010      	b.n	800499e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800497c:	4b8f      	ldr	r3, [pc, #572]	; (8004bbc <UART_SetConfig+0x56c>)
 800497e:	61fb      	str	r3, [r7, #28]
        break;
 8004980:	e00d      	b.n	800499e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004982:	f7fe fb17 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8004986:	61f8      	str	r0, [r7, #28]
        break;
 8004988:	e009      	b.n	800499e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800498a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800498e:	61fb      	str	r3, [r7, #28]
        break;
 8004990:	e005      	b.n	800499e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800499c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80fb 	beq.w	8004b9c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	4413      	add	r3, r2
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d305      	bcc.n	80049c2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d903      	bls.n	80049ca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049c8:	e0e8      	b.n	8004b9c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	2200      	movs	r2, #0
 80049ce:	461c      	mov	r4, r3
 80049d0:	4615      	mov	r5, r2
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	022b      	lsls	r3, r5, #8
 80049dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80049e0:	0222      	lsls	r2, r4, #8
 80049e2:	68f9      	ldr	r1, [r7, #12]
 80049e4:	6849      	ldr	r1, [r1, #4]
 80049e6:	0849      	lsrs	r1, r1, #1
 80049e8:	2000      	movs	r0, #0
 80049ea:	4688      	mov	r8, r1
 80049ec:	4681      	mov	r9, r0
 80049ee:	eb12 0a08 	adds.w	sl, r2, r8
 80049f2:	eb43 0b09 	adc.w	fp, r3, r9
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	603b      	str	r3, [r7, #0]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a04:	4650      	mov	r0, sl
 8004a06:	4659      	mov	r1, fp
 8004a08:	f7fb fc32 	bl	8000270 <__aeabi_uldivmod>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4613      	mov	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a1a:	d308      	bcc.n	8004a2e <UART_SetConfig+0x3de>
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a22:	d204      	bcs.n	8004a2e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	60da      	str	r2, [r3, #12]
 8004a2c:	e0b6      	b.n	8004b9c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a34:	e0b2      	b.n	8004b9c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a3e:	d15e      	bne.n	8004afe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d828      	bhi.n	8004a9a <UART_SetConfig+0x44a>
 8004a48:	a201      	add	r2, pc, #4	; (adr r2, 8004a50 <UART_SetConfig+0x400>)
 8004a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4e:	bf00      	nop
 8004a50:	08004a75 	.word	0x08004a75
 8004a54:	08004a7d 	.word	0x08004a7d
 8004a58:	08004a85 	.word	0x08004a85
 8004a5c:	08004a9b 	.word	0x08004a9b
 8004a60:	08004a8b 	.word	0x08004a8b
 8004a64:	08004a9b 	.word	0x08004a9b
 8004a68:	08004a9b 	.word	0x08004a9b
 8004a6c:	08004a9b 	.word	0x08004a9b
 8004a70:	08004a93 	.word	0x08004a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a74:	f7fe fb36 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 8004a78:	61f8      	str	r0, [r7, #28]
        break;
 8004a7a:	e014      	b.n	8004aa6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a7c:	f7fe fb48 	bl	8003110 <HAL_RCC_GetPCLK2Freq>
 8004a80:	61f8      	str	r0, [r7, #28]
        break;
 8004a82:	e010      	b.n	8004aa6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a84:	4b4d      	ldr	r3, [pc, #308]	; (8004bbc <UART_SetConfig+0x56c>)
 8004a86:	61fb      	str	r3, [r7, #28]
        break;
 8004a88:	e00d      	b.n	8004aa6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a8a:	f7fe fa93 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8004a8e:	61f8      	str	r0, [r7, #28]
        break;
 8004a90:	e009      	b.n	8004aa6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a96:	61fb      	str	r3, [r7, #28]
        break;
 8004a98:	e005      	b.n	8004aa6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004aa4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d077      	beq.n	8004b9c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	005a      	lsls	r2, r3, #1
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	441a      	add	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b0f      	cmp	r3, #15
 8004ac6:	d916      	bls.n	8004af6 <UART_SetConfig+0x4a6>
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ace:	d212      	bcs.n	8004af6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f023 030f 	bic.w	r3, r3, #15
 8004ad8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	085b      	lsrs	r3, r3, #1
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	8afb      	ldrh	r3, [r7, #22]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	8afa      	ldrh	r2, [r7, #22]
 8004af2:	60da      	str	r2, [r3, #12]
 8004af4:	e052      	b.n	8004b9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004afc:	e04e      	b.n	8004b9c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004afe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d827      	bhi.n	8004b56 <UART_SetConfig+0x506>
 8004b06:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <UART_SetConfig+0x4bc>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b39 	.word	0x08004b39
 8004b14:	08004b41 	.word	0x08004b41
 8004b18:	08004b57 	.word	0x08004b57
 8004b1c:	08004b47 	.word	0x08004b47
 8004b20:	08004b57 	.word	0x08004b57
 8004b24:	08004b57 	.word	0x08004b57
 8004b28:	08004b57 	.word	0x08004b57
 8004b2c:	08004b4f 	.word	0x08004b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b30:	f7fe fad8 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 8004b34:	61f8      	str	r0, [r7, #28]
        break;
 8004b36:	e014      	b.n	8004b62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b38:	f7fe faea 	bl	8003110 <HAL_RCC_GetPCLK2Freq>
 8004b3c:	61f8      	str	r0, [r7, #28]
        break;
 8004b3e:	e010      	b.n	8004b62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b40:	4b1e      	ldr	r3, [pc, #120]	; (8004bbc <UART_SetConfig+0x56c>)
 8004b42:	61fb      	str	r3, [r7, #28]
        break;
 8004b44:	e00d      	b.n	8004b62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b46:	f7fe fa35 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8004b4a:	61f8      	str	r0, [r7, #28]
        break;
 8004b4c:	e009      	b.n	8004b62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b52:	61fb      	str	r3, [r7, #28]
        break;
 8004b54:	e005      	b.n	8004b62 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b60:	bf00      	nop
    }

    if (pclk != 0U)
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d019      	beq.n	8004b9c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	085a      	lsrs	r2, r3, #1
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	441a      	add	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2b0f      	cmp	r3, #15
 8004b80:	d909      	bls.n	8004b96 <UART_SetConfig+0x546>
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b88:	d205      	bcs.n	8004b96 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	60da      	str	r2, [r3, #12]
 8004b94:	e002      	b.n	8004b9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004ba8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3728      	adds	r7, #40	; 0x28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40008000 	.word	0x40008000
 8004bbc:	00f42400 	.word	0x00f42400

08004bc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d01a      	beq.n	8004cd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cbe:	d10a      	bne.n	8004cd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
  }
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b098      	sub	sp, #96	; 0x60
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d14:	f7fc fbd8 	bl	80014c8 <HAL_GetTick>
 8004d18:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d12e      	bne.n	8004d86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d30:	2200      	movs	r2, #0
 8004d32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f88c 	bl	8004e54 <UART_WaitOnFlagUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d021      	beq.n	8004d86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d56:	653b      	str	r3, [r7, #80]	; 0x50
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d60:	647b      	str	r3, [r7, #68]	; 0x44
 8004d62:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d68:	e841 2300 	strex	r3, r2, [r1]
 8004d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e6      	bne.n	8004d42 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e062      	b.n	8004e4c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d149      	bne.n	8004e28 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f856 	bl	8004e54 <UART_WaitOnFlagUntilTimeout>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d03c      	beq.n	8004e28 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	e853 3f00 	ldrex	r3, [r3]
 8004dba:	623b      	str	r3, [r7, #32]
   return(result);
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8004dce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dd4:	e841 2300 	strex	r3, r2, [r1]
 8004dd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1e6      	bne.n	8004dae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3308      	adds	r3, #8
 8004de6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	60fb      	str	r3, [r7, #12]
   return(result);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0301 	bic.w	r3, r3, #1
 8004df6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e00:	61fa      	str	r2, [r7, #28]
 8004e02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	69b9      	ldr	r1, [r7, #24]
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e5      	bne.n	8004de0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e011      	b.n	8004e4c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3758      	adds	r7, #88	; 0x58
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	603b      	str	r3, [r7, #0]
 8004e60:	4613      	mov	r3, r2
 8004e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e64:	e049      	b.n	8004efa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e6c:	d045      	beq.n	8004efa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6e:	f7fc fb2b 	bl	80014c8 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e048      	b.n	8004f1a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d031      	beq.n	8004efa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d110      	bne.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2208      	movs	r2, #8
 8004eaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f838 	bl	8004f22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2208      	movs	r2, #8
 8004eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e029      	b.n	8004f1a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed4:	d111      	bne.n	8004efa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ede:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f81e 	bl	8004f22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e00f      	b.n	8004f1a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69da      	ldr	r2, [r3, #28]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4013      	ands	r3, r2
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	bf0c      	ite	eq
 8004f0a:	2301      	moveq	r3, #1
 8004f0c:	2300      	movne	r3, #0
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d0a6      	beq.n	8004e66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b095      	sub	sp, #84	; 0x54
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f32:	e853 3f00 	ldrex	r3, [r3]
 8004f36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	461a      	mov	r2, r3
 8004f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f48:	643b      	str	r3, [r7, #64]	; 0x40
 8004f4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e6      	bne.n	8004f2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3308      	adds	r3, #8
 8004f62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3308      	adds	r3, #8
 8004f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e5      	bne.n	8004f5c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d118      	bne.n	8004fca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	e853 3f00 	ldrex	r3, [r3]
 8004fa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f023 0310 	bic.w	r3, r3, #16
 8004fac:	647b      	str	r3, [r7, #68]	; 0x44
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fb6:	61bb      	str	r3, [r7, #24]
 8004fb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fba:	6979      	ldr	r1, [r7, #20]
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	e841 2300 	strex	r3, r2, [r1]
 8004fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1e6      	bne.n	8004f98 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004fde:	bf00      	nop
 8004fe0:	3754      	adds	r7, #84	; 0x54
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
	...

08004fec <std>:
 8004fec:	2300      	movs	r3, #0
 8004fee:	b510      	push	{r4, lr}
 8004ff0:	4604      	mov	r4, r0
 8004ff2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ffa:	6083      	str	r3, [r0, #8]
 8004ffc:	8181      	strh	r1, [r0, #12]
 8004ffe:	6643      	str	r3, [r0, #100]	; 0x64
 8005000:	81c2      	strh	r2, [r0, #14]
 8005002:	6183      	str	r3, [r0, #24]
 8005004:	4619      	mov	r1, r3
 8005006:	2208      	movs	r2, #8
 8005008:	305c      	adds	r0, #92	; 0x5c
 800500a:	f000 f8c3 	bl	8005194 <memset>
 800500e:	4b0d      	ldr	r3, [pc, #52]	; (8005044 <std+0x58>)
 8005010:	6263      	str	r3, [r4, #36]	; 0x24
 8005012:	4b0d      	ldr	r3, [pc, #52]	; (8005048 <std+0x5c>)
 8005014:	62a3      	str	r3, [r4, #40]	; 0x28
 8005016:	4b0d      	ldr	r3, [pc, #52]	; (800504c <std+0x60>)
 8005018:	62e3      	str	r3, [r4, #44]	; 0x2c
 800501a:	4b0d      	ldr	r3, [pc, #52]	; (8005050 <std+0x64>)
 800501c:	6323      	str	r3, [r4, #48]	; 0x30
 800501e:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <std+0x68>)
 8005020:	6224      	str	r4, [r4, #32]
 8005022:	429c      	cmp	r4, r3
 8005024:	d006      	beq.n	8005034 <std+0x48>
 8005026:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800502a:	4294      	cmp	r4, r2
 800502c:	d002      	beq.n	8005034 <std+0x48>
 800502e:	33d0      	adds	r3, #208	; 0xd0
 8005030:	429c      	cmp	r4, r3
 8005032:	d105      	bne.n	8005040 <std+0x54>
 8005034:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800503c:	f000 b8dc 	b.w	80051f8 <__retarget_lock_init_recursive>
 8005040:	bd10      	pop	{r4, pc}
 8005042:	bf00      	nop
 8005044:	08005a59 	.word	0x08005a59
 8005048:	08005a7b 	.word	0x08005a7b
 800504c:	08005ab3 	.word	0x08005ab3
 8005050:	08005ad7 	.word	0x08005ad7
 8005054:	20000214 	.word	0x20000214

08005058 <stdio_exit_handler>:
 8005058:	4a02      	ldr	r2, [pc, #8]	; (8005064 <stdio_exit_handler+0xc>)
 800505a:	4903      	ldr	r1, [pc, #12]	; (8005068 <stdio_exit_handler+0x10>)
 800505c:	4803      	ldr	r0, [pc, #12]	; (800506c <stdio_exit_handler+0x14>)
 800505e:	f000 b869 	b.w	8005134 <_fwalk_sglue>
 8005062:	bf00      	nop
 8005064:	20000010 	.word	0x20000010
 8005068:	080059f1 	.word	0x080059f1
 800506c:	2000001c 	.word	0x2000001c

08005070 <cleanup_stdio>:
 8005070:	6841      	ldr	r1, [r0, #4]
 8005072:	4b0c      	ldr	r3, [pc, #48]	; (80050a4 <cleanup_stdio+0x34>)
 8005074:	4299      	cmp	r1, r3
 8005076:	b510      	push	{r4, lr}
 8005078:	4604      	mov	r4, r0
 800507a:	d001      	beq.n	8005080 <cleanup_stdio+0x10>
 800507c:	f000 fcb8 	bl	80059f0 <_fflush_r>
 8005080:	68a1      	ldr	r1, [r4, #8]
 8005082:	4b09      	ldr	r3, [pc, #36]	; (80050a8 <cleanup_stdio+0x38>)
 8005084:	4299      	cmp	r1, r3
 8005086:	d002      	beq.n	800508e <cleanup_stdio+0x1e>
 8005088:	4620      	mov	r0, r4
 800508a:	f000 fcb1 	bl	80059f0 <_fflush_r>
 800508e:	68e1      	ldr	r1, [r4, #12]
 8005090:	4b06      	ldr	r3, [pc, #24]	; (80050ac <cleanup_stdio+0x3c>)
 8005092:	4299      	cmp	r1, r3
 8005094:	d004      	beq.n	80050a0 <cleanup_stdio+0x30>
 8005096:	4620      	mov	r0, r4
 8005098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800509c:	f000 bca8 	b.w	80059f0 <_fflush_r>
 80050a0:	bd10      	pop	{r4, pc}
 80050a2:	bf00      	nop
 80050a4:	20000214 	.word	0x20000214
 80050a8:	2000027c 	.word	0x2000027c
 80050ac:	200002e4 	.word	0x200002e4

080050b0 <global_stdio_init.part.0>:
 80050b0:	b510      	push	{r4, lr}
 80050b2:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <global_stdio_init.part.0+0x30>)
 80050b4:	4c0b      	ldr	r4, [pc, #44]	; (80050e4 <global_stdio_init.part.0+0x34>)
 80050b6:	4a0c      	ldr	r2, [pc, #48]	; (80050e8 <global_stdio_init.part.0+0x38>)
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	4620      	mov	r0, r4
 80050bc:	2200      	movs	r2, #0
 80050be:	2104      	movs	r1, #4
 80050c0:	f7ff ff94 	bl	8004fec <std>
 80050c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80050c8:	2201      	movs	r2, #1
 80050ca:	2109      	movs	r1, #9
 80050cc:	f7ff ff8e 	bl	8004fec <std>
 80050d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80050d4:	2202      	movs	r2, #2
 80050d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050da:	2112      	movs	r1, #18
 80050dc:	f7ff bf86 	b.w	8004fec <std>
 80050e0:	2000034c 	.word	0x2000034c
 80050e4:	20000214 	.word	0x20000214
 80050e8:	08005059 	.word	0x08005059

080050ec <__sfp_lock_acquire>:
 80050ec:	4801      	ldr	r0, [pc, #4]	; (80050f4 <__sfp_lock_acquire+0x8>)
 80050ee:	f000 b884 	b.w	80051fa <__retarget_lock_acquire_recursive>
 80050f2:	bf00      	nop
 80050f4:	20000351 	.word	0x20000351

080050f8 <__sfp_lock_release>:
 80050f8:	4801      	ldr	r0, [pc, #4]	; (8005100 <__sfp_lock_release+0x8>)
 80050fa:	f000 b87f 	b.w	80051fc <__retarget_lock_release_recursive>
 80050fe:	bf00      	nop
 8005100:	20000351 	.word	0x20000351

08005104 <__sinit>:
 8005104:	b510      	push	{r4, lr}
 8005106:	4604      	mov	r4, r0
 8005108:	f7ff fff0 	bl	80050ec <__sfp_lock_acquire>
 800510c:	6a23      	ldr	r3, [r4, #32]
 800510e:	b11b      	cbz	r3, 8005118 <__sinit+0x14>
 8005110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005114:	f7ff bff0 	b.w	80050f8 <__sfp_lock_release>
 8005118:	4b04      	ldr	r3, [pc, #16]	; (800512c <__sinit+0x28>)
 800511a:	6223      	str	r3, [r4, #32]
 800511c:	4b04      	ldr	r3, [pc, #16]	; (8005130 <__sinit+0x2c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1f5      	bne.n	8005110 <__sinit+0xc>
 8005124:	f7ff ffc4 	bl	80050b0 <global_stdio_init.part.0>
 8005128:	e7f2      	b.n	8005110 <__sinit+0xc>
 800512a:	bf00      	nop
 800512c:	08005071 	.word	0x08005071
 8005130:	2000034c 	.word	0x2000034c

08005134 <_fwalk_sglue>:
 8005134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005138:	4607      	mov	r7, r0
 800513a:	4688      	mov	r8, r1
 800513c:	4614      	mov	r4, r2
 800513e:	2600      	movs	r6, #0
 8005140:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005144:	f1b9 0901 	subs.w	r9, r9, #1
 8005148:	d505      	bpl.n	8005156 <_fwalk_sglue+0x22>
 800514a:	6824      	ldr	r4, [r4, #0]
 800514c:	2c00      	cmp	r4, #0
 800514e:	d1f7      	bne.n	8005140 <_fwalk_sglue+0xc>
 8005150:	4630      	mov	r0, r6
 8005152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005156:	89ab      	ldrh	r3, [r5, #12]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d907      	bls.n	800516c <_fwalk_sglue+0x38>
 800515c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005160:	3301      	adds	r3, #1
 8005162:	d003      	beq.n	800516c <_fwalk_sglue+0x38>
 8005164:	4629      	mov	r1, r5
 8005166:	4638      	mov	r0, r7
 8005168:	47c0      	blx	r8
 800516a:	4306      	orrs	r6, r0
 800516c:	3568      	adds	r5, #104	; 0x68
 800516e:	e7e9      	b.n	8005144 <_fwalk_sglue+0x10>

08005170 <iprintf>:
 8005170:	b40f      	push	{r0, r1, r2, r3}
 8005172:	b507      	push	{r0, r1, r2, lr}
 8005174:	4906      	ldr	r1, [pc, #24]	; (8005190 <iprintf+0x20>)
 8005176:	ab04      	add	r3, sp, #16
 8005178:	6808      	ldr	r0, [r1, #0]
 800517a:	f853 2b04 	ldr.w	r2, [r3], #4
 800517e:	6881      	ldr	r1, [r0, #8]
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	f000 f865 	bl	8005250 <_vfiprintf_r>
 8005186:	b003      	add	sp, #12
 8005188:	f85d eb04 	ldr.w	lr, [sp], #4
 800518c:	b004      	add	sp, #16
 800518e:	4770      	bx	lr
 8005190:	20000068 	.word	0x20000068

08005194 <memset>:
 8005194:	4402      	add	r2, r0
 8005196:	4603      	mov	r3, r0
 8005198:	4293      	cmp	r3, r2
 800519a:	d100      	bne.n	800519e <memset+0xa>
 800519c:	4770      	bx	lr
 800519e:	f803 1b01 	strb.w	r1, [r3], #1
 80051a2:	e7f9      	b.n	8005198 <memset+0x4>

080051a4 <__errno>:
 80051a4:	4b01      	ldr	r3, [pc, #4]	; (80051ac <__errno+0x8>)
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	20000068 	.word	0x20000068

080051b0 <__libc_init_array>:
 80051b0:	b570      	push	{r4, r5, r6, lr}
 80051b2:	4d0d      	ldr	r5, [pc, #52]	; (80051e8 <__libc_init_array+0x38>)
 80051b4:	4c0d      	ldr	r4, [pc, #52]	; (80051ec <__libc_init_array+0x3c>)
 80051b6:	1b64      	subs	r4, r4, r5
 80051b8:	10a4      	asrs	r4, r4, #2
 80051ba:	2600      	movs	r6, #0
 80051bc:	42a6      	cmp	r6, r4
 80051be:	d109      	bne.n	80051d4 <__libc_init_array+0x24>
 80051c0:	4d0b      	ldr	r5, [pc, #44]	; (80051f0 <__libc_init_array+0x40>)
 80051c2:	4c0c      	ldr	r4, [pc, #48]	; (80051f4 <__libc_init_array+0x44>)
 80051c4:	f000 fe46 	bl	8005e54 <_init>
 80051c8:	1b64      	subs	r4, r4, r5
 80051ca:	10a4      	asrs	r4, r4, #2
 80051cc:	2600      	movs	r6, #0
 80051ce:	42a6      	cmp	r6, r4
 80051d0:	d105      	bne.n	80051de <__libc_init_array+0x2e>
 80051d2:	bd70      	pop	{r4, r5, r6, pc}
 80051d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d8:	4798      	blx	r3
 80051da:	3601      	adds	r6, #1
 80051dc:	e7ee      	b.n	80051bc <__libc_init_array+0xc>
 80051de:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e2:	4798      	blx	r3
 80051e4:	3601      	adds	r6, #1
 80051e6:	e7f2      	b.n	80051ce <__libc_init_array+0x1e>
 80051e8:	08005f44 	.word	0x08005f44
 80051ec:	08005f44 	.word	0x08005f44
 80051f0:	08005f44 	.word	0x08005f44
 80051f4:	08005f48 	.word	0x08005f48

080051f8 <__retarget_lock_init_recursive>:
 80051f8:	4770      	bx	lr

080051fa <__retarget_lock_acquire_recursive>:
 80051fa:	4770      	bx	lr

080051fc <__retarget_lock_release_recursive>:
 80051fc:	4770      	bx	lr

080051fe <__sfputc_r>:
 80051fe:	6893      	ldr	r3, [r2, #8]
 8005200:	3b01      	subs	r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	b410      	push	{r4}
 8005206:	6093      	str	r3, [r2, #8]
 8005208:	da08      	bge.n	800521c <__sfputc_r+0x1e>
 800520a:	6994      	ldr	r4, [r2, #24]
 800520c:	42a3      	cmp	r3, r4
 800520e:	db01      	blt.n	8005214 <__sfputc_r+0x16>
 8005210:	290a      	cmp	r1, #10
 8005212:	d103      	bne.n	800521c <__sfputc_r+0x1e>
 8005214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005218:	f000 bc61 	b.w	8005ade <__swbuf_r>
 800521c:	6813      	ldr	r3, [r2, #0]
 800521e:	1c58      	adds	r0, r3, #1
 8005220:	6010      	str	r0, [r2, #0]
 8005222:	7019      	strb	r1, [r3, #0]
 8005224:	4608      	mov	r0, r1
 8005226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800522a:	4770      	bx	lr

0800522c <__sfputs_r>:
 800522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522e:	4606      	mov	r6, r0
 8005230:	460f      	mov	r7, r1
 8005232:	4614      	mov	r4, r2
 8005234:	18d5      	adds	r5, r2, r3
 8005236:	42ac      	cmp	r4, r5
 8005238:	d101      	bne.n	800523e <__sfputs_r+0x12>
 800523a:	2000      	movs	r0, #0
 800523c:	e007      	b.n	800524e <__sfputs_r+0x22>
 800523e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005242:	463a      	mov	r2, r7
 8005244:	4630      	mov	r0, r6
 8005246:	f7ff ffda 	bl	80051fe <__sfputc_r>
 800524a:	1c43      	adds	r3, r0, #1
 800524c:	d1f3      	bne.n	8005236 <__sfputs_r+0xa>
 800524e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005250 <_vfiprintf_r>:
 8005250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005254:	460d      	mov	r5, r1
 8005256:	b09d      	sub	sp, #116	; 0x74
 8005258:	4614      	mov	r4, r2
 800525a:	4698      	mov	r8, r3
 800525c:	4606      	mov	r6, r0
 800525e:	b118      	cbz	r0, 8005268 <_vfiprintf_r+0x18>
 8005260:	6a03      	ldr	r3, [r0, #32]
 8005262:	b90b      	cbnz	r3, 8005268 <_vfiprintf_r+0x18>
 8005264:	f7ff ff4e 	bl	8005104 <__sinit>
 8005268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800526a:	07d9      	lsls	r1, r3, #31
 800526c:	d405      	bmi.n	800527a <_vfiprintf_r+0x2a>
 800526e:	89ab      	ldrh	r3, [r5, #12]
 8005270:	059a      	lsls	r2, r3, #22
 8005272:	d402      	bmi.n	800527a <_vfiprintf_r+0x2a>
 8005274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005276:	f7ff ffc0 	bl	80051fa <__retarget_lock_acquire_recursive>
 800527a:	89ab      	ldrh	r3, [r5, #12]
 800527c:	071b      	lsls	r3, r3, #28
 800527e:	d501      	bpl.n	8005284 <_vfiprintf_r+0x34>
 8005280:	692b      	ldr	r3, [r5, #16]
 8005282:	b99b      	cbnz	r3, 80052ac <_vfiprintf_r+0x5c>
 8005284:	4629      	mov	r1, r5
 8005286:	4630      	mov	r0, r6
 8005288:	f000 fc66 	bl	8005b58 <__swsetup_r>
 800528c:	b170      	cbz	r0, 80052ac <_vfiprintf_r+0x5c>
 800528e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005290:	07dc      	lsls	r4, r3, #31
 8005292:	d504      	bpl.n	800529e <_vfiprintf_r+0x4e>
 8005294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005298:	b01d      	add	sp, #116	; 0x74
 800529a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529e:	89ab      	ldrh	r3, [r5, #12]
 80052a0:	0598      	lsls	r0, r3, #22
 80052a2:	d4f7      	bmi.n	8005294 <_vfiprintf_r+0x44>
 80052a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052a6:	f7ff ffa9 	bl	80051fc <__retarget_lock_release_recursive>
 80052aa:	e7f3      	b.n	8005294 <_vfiprintf_r+0x44>
 80052ac:	2300      	movs	r3, #0
 80052ae:	9309      	str	r3, [sp, #36]	; 0x24
 80052b0:	2320      	movs	r3, #32
 80052b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80052ba:	2330      	movs	r3, #48	; 0x30
 80052bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005470 <_vfiprintf_r+0x220>
 80052c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052c4:	f04f 0901 	mov.w	r9, #1
 80052c8:	4623      	mov	r3, r4
 80052ca:	469a      	mov	sl, r3
 80052cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052d0:	b10a      	cbz	r2, 80052d6 <_vfiprintf_r+0x86>
 80052d2:	2a25      	cmp	r2, #37	; 0x25
 80052d4:	d1f9      	bne.n	80052ca <_vfiprintf_r+0x7a>
 80052d6:	ebba 0b04 	subs.w	fp, sl, r4
 80052da:	d00b      	beq.n	80052f4 <_vfiprintf_r+0xa4>
 80052dc:	465b      	mov	r3, fp
 80052de:	4622      	mov	r2, r4
 80052e0:	4629      	mov	r1, r5
 80052e2:	4630      	mov	r0, r6
 80052e4:	f7ff ffa2 	bl	800522c <__sfputs_r>
 80052e8:	3001      	adds	r0, #1
 80052ea:	f000 80a9 	beq.w	8005440 <_vfiprintf_r+0x1f0>
 80052ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052f0:	445a      	add	r2, fp
 80052f2:	9209      	str	r2, [sp, #36]	; 0x24
 80052f4:	f89a 3000 	ldrb.w	r3, [sl]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 80a1 	beq.w	8005440 <_vfiprintf_r+0x1f0>
 80052fe:	2300      	movs	r3, #0
 8005300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005308:	f10a 0a01 	add.w	sl, sl, #1
 800530c:	9304      	str	r3, [sp, #16]
 800530e:	9307      	str	r3, [sp, #28]
 8005310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005314:	931a      	str	r3, [sp, #104]	; 0x68
 8005316:	4654      	mov	r4, sl
 8005318:	2205      	movs	r2, #5
 800531a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800531e:	4854      	ldr	r0, [pc, #336]	; (8005470 <_vfiprintf_r+0x220>)
 8005320:	f7fa ff56 	bl	80001d0 <memchr>
 8005324:	9a04      	ldr	r2, [sp, #16]
 8005326:	b9d8      	cbnz	r0, 8005360 <_vfiprintf_r+0x110>
 8005328:	06d1      	lsls	r1, r2, #27
 800532a:	bf44      	itt	mi
 800532c:	2320      	movmi	r3, #32
 800532e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005332:	0713      	lsls	r3, r2, #28
 8005334:	bf44      	itt	mi
 8005336:	232b      	movmi	r3, #43	; 0x2b
 8005338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800533c:	f89a 3000 	ldrb.w	r3, [sl]
 8005340:	2b2a      	cmp	r3, #42	; 0x2a
 8005342:	d015      	beq.n	8005370 <_vfiprintf_r+0x120>
 8005344:	9a07      	ldr	r2, [sp, #28]
 8005346:	4654      	mov	r4, sl
 8005348:	2000      	movs	r0, #0
 800534a:	f04f 0c0a 	mov.w	ip, #10
 800534e:	4621      	mov	r1, r4
 8005350:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005354:	3b30      	subs	r3, #48	; 0x30
 8005356:	2b09      	cmp	r3, #9
 8005358:	d94d      	bls.n	80053f6 <_vfiprintf_r+0x1a6>
 800535a:	b1b0      	cbz	r0, 800538a <_vfiprintf_r+0x13a>
 800535c:	9207      	str	r2, [sp, #28]
 800535e:	e014      	b.n	800538a <_vfiprintf_r+0x13a>
 8005360:	eba0 0308 	sub.w	r3, r0, r8
 8005364:	fa09 f303 	lsl.w	r3, r9, r3
 8005368:	4313      	orrs	r3, r2
 800536a:	9304      	str	r3, [sp, #16]
 800536c:	46a2      	mov	sl, r4
 800536e:	e7d2      	b.n	8005316 <_vfiprintf_r+0xc6>
 8005370:	9b03      	ldr	r3, [sp, #12]
 8005372:	1d19      	adds	r1, r3, #4
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	9103      	str	r1, [sp, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	bfbb      	ittet	lt
 800537c:	425b      	neglt	r3, r3
 800537e:	f042 0202 	orrlt.w	r2, r2, #2
 8005382:	9307      	strge	r3, [sp, #28]
 8005384:	9307      	strlt	r3, [sp, #28]
 8005386:	bfb8      	it	lt
 8005388:	9204      	strlt	r2, [sp, #16]
 800538a:	7823      	ldrb	r3, [r4, #0]
 800538c:	2b2e      	cmp	r3, #46	; 0x2e
 800538e:	d10c      	bne.n	80053aa <_vfiprintf_r+0x15a>
 8005390:	7863      	ldrb	r3, [r4, #1]
 8005392:	2b2a      	cmp	r3, #42	; 0x2a
 8005394:	d134      	bne.n	8005400 <_vfiprintf_r+0x1b0>
 8005396:	9b03      	ldr	r3, [sp, #12]
 8005398:	1d1a      	adds	r2, r3, #4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	9203      	str	r2, [sp, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	bfb8      	it	lt
 80053a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80053a6:	3402      	adds	r4, #2
 80053a8:	9305      	str	r3, [sp, #20]
 80053aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005480 <_vfiprintf_r+0x230>
 80053ae:	7821      	ldrb	r1, [r4, #0]
 80053b0:	2203      	movs	r2, #3
 80053b2:	4650      	mov	r0, sl
 80053b4:	f7fa ff0c 	bl	80001d0 <memchr>
 80053b8:	b138      	cbz	r0, 80053ca <_vfiprintf_r+0x17a>
 80053ba:	9b04      	ldr	r3, [sp, #16]
 80053bc:	eba0 000a 	sub.w	r0, r0, sl
 80053c0:	2240      	movs	r2, #64	; 0x40
 80053c2:	4082      	lsls	r2, r0
 80053c4:	4313      	orrs	r3, r2
 80053c6:	3401      	adds	r4, #1
 80053c8:	9304      	str	r3, [sp, #16]
 80053ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ce:	4829      	ldr	r0, [pc, #164]	; (8005474 <_vfiprintf_r+0x224>)
 80053d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053d4:	2206      	movs	r2, #6
 80053d6:	f7fa fefb 	bl	80001d0 <memchr>
 80053da:	2800      	cmp	r0, #0
 80053dc:	d03f      	beq.n	800545e <_vfiprintf_r+0x20e>
 80053de:	4b26      	ldr	r3, [pc, #152]	; (8005478 <_vfiprintf_r+0x228>)
 80053e0:	bb1b      	cbnz	r3, 800542a <_vfiprintf_r+0x1da>
 80053e2:	9b03      	ldr	r3, [sp, #12]
 80053e4:	3307      	adds	r3, #7
 80053e6:	f023 0307 	bic.w	r3, r3, #7
 80053ea:	3308      	adds	r3, #8
 80053ec:	9303      	str	r3, [sp, #12]
 80053ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f0:	443b      	add	r3, r7
 80053f2:	9309      	str	r3, [sp, #36]	; 0x24
 80053f4:	e768      	b.n	80052c8 <_vfiprintf_r+0x78>
 80053f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80053fa:	460c      	mov	r4, r1
 80053fc:	2001      	movs	r0, #1
 80053fe:	e7a6      	b.n	800534e <_vfiprintf_r+0xfe>
 8005400:	2300      	movs	r3, #0
 8005402:	3401      	adds	r4, #1
 8005404:	9305      	str	r3, [sp, #20]
 8005406:	4619      	mov	r1, r3
 8005408:	f04f 0c0a 	mov.w	ip, #10
 800540c:	4620      	mov	r0, r4
 800540e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005412:	3a30      	subs	r2, #48	; 0x30
 8005414:	2a09      	cmp	r2, #9
 8005416:	d903      	bls.n	8005420 <_vfiprintf_r+0x1d0>
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0c6      	beq.n	80053aa <_vfiprintf_r+0x15a>
 800541c:	9105      	str	r1, [sp, #20]
 800541e:	e7c4      	b.n	80053aa <_vfiprintf_r+0x15a>
 8005420:	fb0c 2101 	mla	r1, ip, r1, r2
 8005424:	4604      	mov	r4, r0
 8005426:	2301      	movs	r3, #1
 8005428:	e7f0      	b.n	800540c <_vfiprintf_r+0x1bc>
 800542a:	ab03      	add	r3, sp, #12
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	462a      	mov	r2, r5
 8005430:	4b12      	ldr	r3, [pc, #72]	; (800547c <_vfiprintf_r+0x22c>)
 8005432:	a904      	add	r1, sp, #16
 8005434:	4630      	mov	r0, r6
 8005436:	f3af 8000 	nop.w
 800543a:	4607      	mov	r7, r0
 800543c:	1c78      	adds	r0, r7, #1
 800543e:	d1d6      	bne.n	80053ee <_vfiprintf_r+0x19e>
 8005440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005442:	07d9      	lsls	r1, r3, #31
 8005444:	d405      	bmi.n	8005452 <_vfiprintf_r+0x202>
 8005446:	89ab      	ldrh	r3, [r5, #12]
 8005448:	059a      	lsls	r2, r3, #22
 800544a:	d402      	bmi.n	8005452 <_vfiprintf_r+0x202>
 800544c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800544e:	f7ff fed5 	bl	80051fc <__retarget_lock_release_recursive>
 8005452:	89ab      	ldrh	r3, [r5, #12]
 8005454:	065b      	lsls	r3, r3, #25
 8005456:	f53f af1d 	bmi.w	8005294 <_vfiprintf_r+0x44>
 800545a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800545c:	e71c      	b.n	8005298 <_vfiprintf_r+0x48>
 800545e:	ab03      	add	r3, sp, #12
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	462a      	mov	r2, r5
 8005464:	4b05      	ldr	r3, [pc, #20]	; (800547c <_vfiprintf_r+0x22c>)
 8005466:	a904      	add	r1, sp, #16
 8005468:	4630      	mov	r0, r6
 800546a:	f000 f919 	bl	80056a0 <_printf_i>
 800546e:	e7e4      	b.n	800543a <_vfiprintf_r+0x1ea>
 8005470:	08005f08 	.word	0x08005f08
 8005474:	08005f12 	.word	0x08005f12
 8005478:	00000000 	.word	0x00000000
 800547c:	0800522d 	.word	0x0800522d
 8005480:	08005f0e 	.word	0x08005f0e

08005484 <sbrk_aligned>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	4e0e      	ldr	r6, [pc, #56]	; (80054c0 <sbrk_aligned+0x3c>)
 8005488:	460c      	mov	r4, r1
 800548a:	6831      	ldr	r1, [r6, #0]
 800548c:	4605      	mov	r5, r0
 800548e:	b911      	cbnz	r1, 8005496 <sbrk_aligned+0x12>
 8005490:	f000 fc72 	bl	8005d78 <_sbrk_r>
 8005494:	6030      	str	r0, [r6, #0]
 8005496:	4621      	mov	r1, r4
 8005498:	4628      	mov	r0, r5
 800549a:	f000 fc6d 	bl	8005d78 <_sbrk_r>
 800549e:	1c43      	adds	r3, r0, #1
 80054a0:	d00a      	beq.n	80054b8 <sbrk_aligned+0x34>
 80054a2:	1cc4      	adds	r4, r0, #3
 80054a4:	f024 0403 	bic.w	r4, r4, #3
 80054a8:	42a0      	cmp	r0, r4
 80054aa:	d007      	beq.n	80054bc <sbrk_aligned+0x38>
 80054ac:	1a21      	subs	r1, r4, r0
 80054ae:	4628      	mov	r0, r5
 80054b0:	f000 fc62 	bl	8005d78 <_sbrk_r>
 80054b4:	3001      	adds	r0, #1
 80054b6:	d101      	bne.n	80054bc <sbrk_aligned+0x38>
 80054b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80054bc:	4620      	mov	r0, r4
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	20000358 	.word	0x20000358

080054c4 <_malloc_r>:
 80054c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054c8:	1ccd      	adds	r5, r1, #3
 80054ca:	f025 0503 	bic.w	r5, r5, #3
 80054ce:	3508      	adds	r5, #8
 80054d0:	2d0c      	cmp	r5, #12
 80054d2:	bf38      	it	cc
 80054d4:	250c      	movcc	r5, #12
 80054d6:	2d00      	cmp	r5, #0
 80054d8:	4607      	mov	r7, r0
 80054da:	db01      	blt.n	80054e0 <_malloc_r+0x1c>
 80054dc:	42a9      	cmp	r1, r5
 80054de:	d905      	bls.n	80054ec <_malloc_r+0x28>
 80054e0:	230c      	movs	r3, #12
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	2600      	movs	r6, #0
 80054e6:	4630      	mov	r0, r6
 80054e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80055c0 <_malloc_r+0xfc>
 80054f0:	f000 faa6 	bl	8005a40 <__malloc_lock>
 80054f4:	f8d8 3000 	ldr.w	r3, [r8]
 80054f8:	461c      	mov	r4, r3
 80054fa:	bb5c      	cbnz	r4, 8005554 <_malloc_r+0x90>
 80054fc:	4629      	mov	r1, r5
 80054fe:	4638      	mov	r0, r7
 8005500:	f7ff ffc0 	bl	8005484 <sbrk_aligned>
 8005504:	1c43      	adds	r3, r0, #1
 8005506:	4604      	mov	r4, r0
 8005508:	d155      	bne.n	80055b6 <_malloc_r+0xf2>
 800550a:	f8d8 4000 	ldr.w	r4, [r8]
 800550e:	4626      	mov	r6, r4
 8005510:	2e00      	cmp	r6, #0
 8005512:	d145      	bne.n	80055a0 <_malloc_r+0xdc>
 8005514:	2c00      	cmp	r4, #0
 8005516:	d048      	beq.n	80055aa <_malloc_r+0xe6>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	4631      	mov	r1, r6
 800551c:	4638      	mov	r0, r7
 800551e:	eb04 0903 	add.w	r9, r4, r3
 8005522:	f000 fc29 	bl	8005d78 <_sbrk_r>
 8005526:	4581      	cmp	r9, r0
 8005528:	d13f      	bne.n	80055aa <_malloc_r+0xe6>
 800552a:	6821      	ldr	r1, [r4, #0]
 800552c:	1a6d      	subs	r5, r5, r1
 800552e:	4629      	mov	r1, r5
 8005530:	4638      	mov	r0, r7
 8005532:	f7ff ffa7 	bl	8005484 <sbrk_aligned>
 8005536:	3001      	adds	r0, #1
 8005538:	d037      	beq.n	80055aa <_malloc_r+0xe6>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	442b      	add	r3, r5
 800553e:	6023      	str	r3, [r4, #0]
 8005540:	f8d8 3000 	ldr.w	r3, [r8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d038      	beq.n	80055ba <_malloc_r+0xf6>
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	42a2      	cmp	r2, r4
 800554c:	d12b      	bne.n	80055a6 <_malloc_r+0xe2>
 800554e:	2200      	movs	r2, #0
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	e00f      	b.n	8005574 <_malloc_r+0xb0>
 8005554:	6822      	ldr	r2, [r4, #0]
 8005556:	1b52      	subs	r2, r2, r5
 8005558:	d41f      	bmi.n	800559a <_malloc_r+0xd6>
 800555a:	2a0b      	cmp	r2, #11
 800555c:	d917      	bls.n	800558e <_malloc_r+0xca>
 800555e:	1961      	adds	r1, r4, r5
 8005560:	42a3      	cmp	r3, r4
 8005562:	6025      	str	r5, [r4, #0]
 8005564:	bf18      	it	ne
 8005566:	6059      	strne	r1, [r3, #4]
 8005568:	6863      	ldr	r3, [r4, #4]
 800556a:	bf08      	it	eq
 800556c:	f8c8 1000 	streq.w	r1, [r8]
 8005570:	5162      	str	r2, [r4, r5]
 8005572:	604b      	str	r3, [r1, #4]
 8005574:	4638      	mov	r0, r7
 8005576:	f104 060b 	add.w	r6, r4, #11
 800557a:	f000 fa67 	bl	8005a4c <__malloc_unlock>
 800557e:	f026 0607 	bic.w	r6, r6, #7
 8005582:	1d23      	adds	r3, r4, #4
 8005584:	1af2      	subs	r2, r6, r3
 8005586:	d0ae      	beq.n	80054e6 <_malloc_r+0x22>
 8005588:	1b9b      	subs	r3, r3, r6
 800558a:	50a3      	str	r3, [r4, r2]
 800558c:	e7ab      	b.n	80054e6 <_malloc_r+0x22>
 800558e:	42a3      	cmp	r3, r4
 8005590:	6862      	ldr	r2, [r4, #4]
 8005592:	d1dd      	bne.n	8005550 <_malloc_r+0x8c>
 8005594:	f8c8 2000 	str.w	r2, [r8]
 8005598:	e7ec      	b.n	8005574 <_malloc_r+0xb0>
 800559a:	4623      	mov	r3, r4
 800559c:	6864      	ldr	r4, [r4, #4]
 800559e:	e7ac      	b.n	80054fa <_malloc_r+0x36>
 80055a0:	4634      	mov	r4, r6
 80055a2:	6876      	ldr	r6, [r6, #4]
 80055a4:	e7b4      	b.n	8005510 <_malloc_r+0x4c>
 80055a6:	4613      	mov	r3, r2
 80055a8:	e7cc      	b.n	8005544 <_malloc_r+0x80>
 80055aa:	230c      	movs	r3, #12
 80055ac:	603b      	str	r3, [r7, #0]
 80055ae:	4638      	mov	r0, r7
 80055b0:	f000 fa4c 	bl	8005a4c <__malloc_unlock>
 80055b4:	e797      	b.n	80054e6 <_malloc_r+0x22>
 80055b6:	6025      	str	r5, [r4, #0]
 80055b8:	e7dc      	b.n	8005574 <_malloc_r+0xb0>
 80055ba:	605b      	str	r3, [r3, #4]
 80055bc:	deff      	udf	#255	; 0xff
 80055be:	bf00      	nop
 80055c0:	20000354 	.word	0x20000354

080055c4 <_printf_common>:
 80055c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c8:	4616      	mov	r6, r2
 80055ca:	4699      	mov	r9, r3
 80055cc:	688a      	ldr	r2, [r1, #8]
 80055ce:	690b      	ldr	r3, [r1, #16]
 80055d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055d4:	4293      	cmp	r3, r2
 80055d6:	bfb8      	it	lt
 80055d8:	4613      	movlt	r3, r2
 80055da:	6033      	str	r3, [r6, #0]
 80055dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055e0:	4607      	mov	r7, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	b10a      	cbz	r2, 80055ea <_printf_common+0x26>
 80055e6:	3301      	adds	r3, #1
 80055e8:	6033      	str	r3, [r6, #0]
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	0699      	lsls	r1, r3, #26
 80055ee:	bf42      	ittt	mi
 80055f0:	6833      	ldrmi	r3, [r6, #0]
 80055f2:	3302      	addmi	r3, #2
 80055f4:	6033      	strmi	r3, [r6, #0]
 80055f6:	6825      	ldr	r5, [r4, #0]
 80055f8:	f015 0506 	ands.w	r5, r5, #6
 80055fc:	d106      	bne.n	800560c <_printf_common+0x48>
 80055fe:	f104 0a19 	add.w	sl, r4, #25
 8005602:	68e3      	ldr	r3, [r4, #12]
 8005604:	6832      	ldr	r2, [r6, #0]
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	42ab      	cmp	r3, r5
 800560a:	dc26      	bgt.n	800565a <_printf_common+0x96>
 800560c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005610:	1e13      	subs	r3, r2, #0
 8005612:	6822      	ldr	r2, [r4, #0]
 8005614:	bf18      	it	ne
 8005616:	2301      	movne	r3, #1
 8005618:	0692      	lsls	r2, r2, #26
 800561a:	d42b      	bmi.n	8005674 <_printf_common+0xb0>
 800561c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005620:	4649      	mov	r1, r9
 8005622:	4638      	mov	r0, r7
 8005624:	47c0      	blx	r8
 8005626:	3001      	adds	r0, #1
 8005628:	d01e      	beq.n	8005668 <_printf_common+0xa4>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	6922      	ldr	r2, [r4, #16]
 800562e:	f003 0306 	and.w	r3, r3, #6
 8005632:	2b04      	cmp	r3, #4
 8005634:	bf02      	ittt	eq
 8005636:	68e5      	ldreq	r5, [r4, #12]
 8005638:	6833      	ldreq	r3, [r6, #0]
 800563a:	1aed      	subeq	r5, r5, r3
 800563c:	68a3      	ldr	r3, [r4, #8]
 800563e:	bf0c      	ite	eq
 8005640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005644:	2500      	movne	r5, #0
 8005646:	4293      	cmp	r3, r2
 8005648:	bfc4      	itt	gt
 800564a:	1a9b      	subgt	r3, r3, r2
 800564c:	18ed      	addgt	r5, r5, r3
 800564e:	2600      	movs	r6, #0
 8005650:	341a      	adds	r4, #26
 8005652:	42b5      	cmp	r5, r6
 8005654:	d11a      	bne.n	800568c <_printf_common+0xc8>
 8005656:	2000      	movs	r0, #0
 8005658:	e008      	b.n	800566c <_printf_common+0xa8>
 800565a:	2301      	movs	r3, #1
 800565c:	4652      	mov	r2, sl
 800565e:	4649      	mov	r1, r9
 8005660:	4638      	mov	r0, r7
 8005662:	47c0      	blx	r8
 8005664:	3001      	adds	r0, #1
 8005666:	d103      	bne.n	8005670 <_printf_common+0xac>
 8005668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800566c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005670:	3501      	adds	r5, #1
 8005672:	e7c6      	b.n	8005602 <_printf_common+0x3e>
 8005674:	18e1      	adds	r1, r4, r3
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	2030      	movs	r0, #48	; 0x30
 800567a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800567e:	4422      	add	r2, r4
 8005680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005688:	3302      	adds	r3, #2
 800568a:	e7c7      	b.n	800561c <_printf_common+0x58>
 800568c:	2301      	movs	r3, #1
 800568e:	4622      	mov	r2, r4
 8005690:	4649      	mov	r1, r9
 8005692:	4638      	mov	r0, r7
 8005694:	47c0      	blx	r8
 8005696:	3001      	adds	r0, #1
 8005698:	d0e6      	beq.n	8005668 <_printf_common+0xa4>
 800569a:	3601      	adds	r6, #1
 800569c:	e7d9      	b.n	8005652 <_printf_common+0x8e>
	...

080056a0 <_printf_i>:
 80056a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056a4:	7e0f      	ldrb	r7, [r1, #24]
 80056a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056a8:	2f78      	cmp	r7, #120	; 0x78
 80056aa:	4691      	mov	r9, r2
 80056ac:	4680      	mov	r8, r0
 80056ae:	460c      	mov	r4, r1
 80056b0:	469a      	mov	sl, r3
 80056b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056b6:	d807      	bhi.n	80056c8 <_printf_i+0x28>
 80056b8:	2f62      	cmp	r7, #98	; 0x62
 80056ba:	d80a      	bhi.n	80056d2 <_printf_i+0x32>
 80056bc:	2f00      	cmp	r7, #0
 80056be:	f000 80d4 	beq.w	800586a <_printf_i+0x1ca>
 80056c2:	2f58      	cmp	r7, #88	; 0x58
 80056c4:	f000 80c0 	beq.w	8005848 <_printf_i+0x1a8>
 80056c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056d0:	e03a      	b.n	8005748 <_printf_i+0xa8>
 80056d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056d6:	2b15      	cmp	r3, #21
 80056d8:	d8f6      	bhi.n	80056c8 <_printf_i+0x28>
 80056da:	a101      	add	r1, pc, #4	; (adr r1, 80056e0 <_printf_i+0x40>)
 80056dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056e0:	08005739 	.word	0x08005739
 80056e4:	0800574d 	.word	0x0800574d
 80056e8:	080056c9 	.word	0x080056c9
 80056ec:	080056c9 	.word	0x080056c9
 80056f0:	080056c9 	.word	0x080056c9
 80056f4:	080056c9 	.word	0x080056c9
 80056f8:	0800574d 	.word	0x0800574d
 80056fc:	080056c9 	.word	0x080056c9
 8005700:	080056c9 	.word	0x080056c9
 8005704:	080056c9 	.word	0x080056c9
 8005708:	080056c9 	.word	0x080056c9
 800570c:	08005851 	.word	0x08005851
 8005710:	08005779 	.word	0x08005779
 8005714:	0800580b 	.word	0x0800580b
 8005718:	080056c9 	.word	0x080056c9
 800571c:	080056c9 	.word	0x080056c9
 8005720:	08005873 	.word	0x08005873
 8005724:	080056c9 	.word	0x080056c9
 8005728:	08005779 	.word	0x08005779
 800572c:	080056c9 	.word	0x080056c9
 8005730:	080056c9 	.word	0x080056c9
 8005734:	08005813 	.word	0x08005813
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	1d1a      	adds	r2, r3, #4
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	602a      	str	r2, [r5, #0]
 8005740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005748:	2301      	movs	r3, #1
 800574a:	e09f      	b.n	800588c <_printf_i+0x1ec>
 800574c:	6820      	ldr	r0, [r4, #0]
 800574e:	682b      	ldr	r3, [r5, #0]
 8005750:	0607      	lsls	r7, r0, #24
 8005752:	f103 0104 	add.w	r1, r3, #4
 8005756:	6029      	str	r1, [r5, #0]
 8005758:	d501      	bpl.n	800575e <_printf_i+0xbe>
 800575a:	681e      	ldr	r6, [r3, #0]
 800575c:	e003      	b.n	8005766 <_printf_i+0xc6>
 800575e:	0646      	lsls	r6, r0, #25
 8005760:	d5fb      	bpl.n	800575a <_printf_i+0xba>
 8005762:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005766:	2e00      	cmp	r6, #0
 8005768:	da03      	bge.n	8005772 <_printf_i+0xd2>
 800576a:	232d      	movs	r3, #45	; 0x2d
 800576c:	4276      	negs	r6, r6
 800576e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005772:	485a      	ldr	r0, [pc, #360]	; (80058dc <_printf_i+0x23c>)
 8005774:	230a      	movs	r3, #10
 8005776:	e012      	b.n	800579e <_printf_i+0xfe>
 8005778:	682b      	ldr	r3, [r5, #0]
 800577a:	6820      	ldr	r0, [r4, #0]
 800577c:	1d19      	adds	r1, r3, #4
 800577e:	6029      	str	r1, [r5, #0]
 8005780:	0605      	lsls	r5, r0, #24
 8005782:	d501      	bpl.n	8005788 <_printf_i+0xe8>
 8005784:	681e      	ldr	r6, [r3, #0]
 8005786:	e002      	b.n	800578e <_printf_i+0xee>
 8005788:	0641      	lsls	r1, r0, #25
 800578a:	d5fb      	bpl.n	8005784 <_printf_i+0xe4>
 800578c:	881e      	ldrh	r6, [r3, #0]
 800578e:	4853      	ldr	r0, [pc, #332]	; (80058dc <_printf_i+0x23c>)
 8005790:	2f6f      	cmp	r7, #111	; 0x6f
 8005792:	bf0c      	ite	eq
 8005794:	2308      	moveq	r3, #8
 8005796:	230a      	movne	r3, #10
 8005798:	2100      	movs	r1, #0
 800579a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800579e:	6865      	ldr	r5, [r4, #4]
 80057a0:	60a5      	str	r5, [r4, #8]
 80057a2:	2d00      	cmp	r5, #0
 80057a4:	bfa2      	ittt	ge
 80057a6:	6821      	ldrge	r1, [r4, #0]
 80057a8:	f021 0104 	bicge.w	r1, r1, #4
 80057ac:	6021      	strge	r1, [r4, #0]
 80057ae:	b90e      	cbnz	r6, 80057b4 <_printf_i+0x114>
 80057b0:	2d00      	cmp	r5, #0
 80057b2:	d04b      	beq.n	800584c <_printf_i+0x1ac>
 80057b4:	4615      	mov	r5, r2
 80057b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80057ba:	fb03 6711 	mls	r7, r3, r1, r6
 80057be:	5dc7      	ldrb	r7, [r0, r7]
 80057c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057c4:	4637      	mov	r7, r6
 80057c6:	42bb      	cmp	r3, r7
 80057c8:	460e      	mov	r6, r1
 80057ca:	d9f4      	bls.n	80057b6 <_printf_i+0x116>
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d10b      	bne.n	80057e8 <_printf_i+0x148>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	07de      	lsls	r6, r3, #31
 80057d4:	d508      	bpl.n	80057e8 <_printf_i+0x148>
 80057d6:	6923      	ldr	r3, [r4, #16]
 80057d8:	6861      	ldr	r1, [r4, #4]
 80057da:	4299      	cmp	r1, r3
 80057dc:	bfde      	ittt	le
 80057de:	2330      	movle	r3, #48	; 0x30
 80057e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057e4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80057e8:	1b52      	subs	r2, r2, r5
 80057ea:	6122      	str	r2, [r4, #16]
 80057ec:	f8cd a000 	str.w	sl, [sp]
 80057f0:	464b      	mov	r3, r9
 80057f2:	aa03      	add	r2, sp, #12
 80057f4:	4621      	mov	r1, r4
 80057f6:	4640      	mov	r0, r8
 80057f8:	f7ff fee4 	bl	80055c4 <_printf_common>
 80057fc:	3001      	adds	r0, #1
 80057fe:	d14a      	bne.n	8005896 <_printf_i+0x1f6>
 8005800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005804:	b004      	add	sp, #16
 8005806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	f043 0320 	orr.w	r3, r3, #32
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	4833      	ldr	r0, [pc, #204]	; (80058e0 <_printf_i+0x240>)
 8005814:	2778      	movs	r7, #120	; 0x78
 8005816:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	6829      	ldr	r1, [r5, #0]
 800581e:	061f      	lsls	r7, r3, #24
 8005820:	f851 6b04 	ldr.w	r6, [r1], #4
 8005824:	d402      	bmi.n	800582c <_printf_i+0x18c>
 8005826:	065f      	lsls	r7, r3, #25
 8005828:	bf48      	it	mi
 800582a:	b2b6      	uxthmi	r6, r6
 800582c:	07df      	lsls	r7, r3, #31
 800582e:	bf48      	it	mi
 8005830:	f043 0320 	orrmi.w	r3, r3, #32
 8005834:	6029      	str	r1, [r5, #0]
 8005836:	bf48      	it	mi
 8005838:	6023      	strmi	r3, [r4, #0]
 800583a:	b91e      	cbnz	r6, 8005844 <_printf_i+0x1a4>
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	f023 0320 	bic.w	r3, r3, #32
 8005842:	6023      	str	r3, [r4, #0]
 8005844:	2310      	movs	r3, #16
 8005846:	e7a7      	b.n	8005798 <_printf_i+0xf8>
 8005848:	4824      	ldr	r0, [pc, #144]	; (80058dc <_printf_i+0x23c>)
 800584a:	e7e4      	b.n	8005816 <_printf_i+0x176>
 800584c:	4615      	mov	r5, r2
 800584e:	e7bd      	b.n	80057cc <_printf_i+0x12c>
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	6826      	ldr	r6, [r4, #0]
 8005854:	6961      	ldr	r1, [r4, #20]
 8005856:	1d18      	adds	r0, r3, #4
 8005858:	6028      	str	r0, [r5, #0]
 800585a:	0635      	lsls	r5, r6, #24
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	d501      	bpl.n	8005864 <_printf_i+0x1c4>
 8005860:	6019      	str	r1, [r3, #0]
 8005862:	e002      	b.n	800586a <_printf_i+0x1ca>
 8005864:	0670      	lsls	r0, r6, #25
 8005866:	d5fb      	bpl.n	8005860 <_printf_i+0x1c0>
 8005868:	8019      	strh	r1, [r3, #0]
 800586a:	2300      	movs	r3, #0
 800586c:	6123      	str	r3, [r4, #16]
 800586e:	4615      	mov	r5, r2
 8005870:	e7bc      	b.n	80057ec <_printf_i+0x14c>
 8005872:	682b      	ldr	r3, [r5, #0]
 8005874:	1d1a      	adds	r2, r3, #4
 8005876:	602a      	str	r2, [r5, #0]
 8005878:	681d      	ldr	r5, [r3, #0]
 800587a:	6862      	ldr	r2, [r4, #4]
 800587c:	2100      	movs	r1, #0
 800587e:	4628      	mov	r0, r5
 8005880:	f7fa fca6 	bl	80001d0 <memchr>
 8005884:	b108      	cbz	r0, 800588a <_printf_i+0x1ea>
 8005886:	1b40      	subs	r0, r0, r5
 8005888:	6060      	str	r0, [r4, #4]
 800588a:	6863      	ldr	r3, [r4, #4]
 800588c:	6123      	str	r3, [r4, #16]
 800588e:	2300      	movs	r3, #0
 8005890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005894:	e7aa      	b.n	80057ec <_printf_i+0x14c>
 8005896:	6923      	ldr	r3, [r4, #16]
 8005898:	462a      	mov	r2, r5
 800589a:	4649      	mov	r1, r9
 800589c:	4640      	mov	r0, r8
 800589e:	47d0      	blx	sl
 80058a0:	3001      	adds	r0, #1
 80058a2:	d0ad      	beq.n	8005800 <_printf_i+0x160>
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	079b      	lsls	r3, r3, #30
 80058a8:	d413      	bmi.n	80058d2 <_printf_i+0x232>
 80058aa:	68e0      	ldr	r0, [r4, #12]
 80058ac:	9b03      	ldr	r3, [sp, #12]
 80058ae:	4298      	cmp	r0, r3
 80058b0:	bfb8      	it	lt
 80058b2:	4618      	movlt	r0, r3
 80058b4:	e7a6      	b.n	8005804 <_printf_i+0x164>
 80058b6:	2301      	movs	r3, #1
 80058b8:	4632      	mov	r2, r6
 80058ba:	4649      	mov	r1, r9
 80058bc:	4640      	mov	r0, r8
 80058be:	47d0      	blx	sl
 80058c0:	3001      	adds	r0, #1
 80058c2:	d09d      	beq.n	8005800 <_printf_i+0x160>
 80058c4:	3501      	adds	r5, #1
 80058c6:	68e3      	ldr	r3, [r4, #12]
 80058c8:	9903      	ldr	r1, [sp, #12]
 80058ca:	1a5b      	subs	r3, r3, r1
 80058cc:	42ab      	cmp	r3, r5
 80058ce:	dcf2      	bgt.n	80058b6 <_printf_i+0x216>
 80058d0:	e7eb      	b.n	80058aa <_printf_i+0x20a>
 80058d2:	2500      	movs	r5, #0
 80058d4:	f104 0619 	add.w	r6, r4, #25
 80058d8:	e7f5      	b.n	80058c6 <_printf_i+0x226>
 80058da:	bf00      	nop
 80058dc:	08005f19 	.word	0x08005f19
 80058e0:	08005f2a 	.word	0x08005f2a

080058e4 <__sflush_r>:
 80058e4:	898a      	ldrh	r2, [r1, #12]
 80058e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ea:	4605      	mov	r5, r0
 80058ec:	0710      	lsls	r0, r2, #28
 80058ee:	460c      	mov	r4, r1
 80058f0:	d458      	bmi.n	80059a4 <__sflush_r+0xc0>
 80058f2:	684b      	ldr	r3, [r1, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	dc05      	bgt.n	8005904 <__sflush_r+0x20>
 80058f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	dc02      	bgt.n	8005904 <__sflush_r+0x20>
 80058fe:	2000      	movs	r0, #0
 8005900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005906:	2e00      	cmp	r6, #0
 8005908:	d0f9      	beq.n	80058fe <__sflush_r+0x1a>
 800590a:	2300      	movs	r3, #0
 800590c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005910:	682f      	ldr	r7, [r5, #0]
 8005912:	6a21      	ldr	r1, [r4, #32]
 8005914:	602b      	str	r3, [r5, #0]
 8005916:	d032      	beq.n	800597e <__sflush_r+0x9a>
 8005918:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800591a:	89a3      	ldrh	r3, [r4, #12]
 800591c:	075a      	lsls	r2, r3, #29
 800591e:	d505      	bpl.n	800592c <__sflush_r+0x48>
 8005920:	6863      	ldr	r3, [r4, #4]
 8005922:	1ac0      	subs	r0, r0, r3
 8005924:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005926:	b10b      	cbz	r3, 800592c <__sflush_r+0x48>
 8005928:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800592a:	1ac0      	subs	r0, r0, r3
 800592c:	2300      	movs	r3, #0
 800592e:	4602      	mov	r2, r0
 8005930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005932:	6a21      	ldr	r1, [r4, #32]
 8005934:	4628      	mov	r0, r5
 8005936:	47b0      	blx	r6
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	89a3      	ldrh	r3, [r4, #12]
 800593c:	d106      	bne.n	800594c <__sflush_r+0x68>
 800593e:	6829      	ldr	r1, [r5, #0]
 8005940:	291d      	cmp	r1, #29
 8005942:	d82b      	bhi.n	800599c <__sflush_r+0xb8>
 8005944:	4a29      	ldr	r2, [pc, #164]	; (80059ec <__sflush_r+0x108>)
 8005946:	410a      	asrs	r2, r1
 8005948:	07d6      	lsls	r6, r2, #31
 800594a:	d427      	bmi.n	800599c <__sflush_r+0xb8>
 800594c:	2200      	movs	r2, #0
 800594e:	6062      	str	r2, [r4, #4]
 8005950:	04d9      	lsls	r1, r3, #19
 8005952:	6922      	ldr	r2, [r4, #16]
 8005954:	6022      	str	r2, [r4, #0]
 8005956:	d504      	bpl.n	8005962 <__sflush_r+0x7e>
 8005958:	1c42      	adds	r2, r0, #1
 800595a:	d101      	bne.n	8005960 <__sflush_r+0x7c>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	b903      	cbnz	r3, 8005962 <__sflush_r+0x7e>
 8005960:	6560      	str	r0, [r4, #84]	; 0x54
 8005962:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005964:	602f      	str	r7, [r5, #0]
 8005966:	2900      	cmp	r1, #0
 8005968:	d0c9      	beq.n	80058fe <__sflush_r+0x1a>
 800596a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800596e:	4299      	cmp	r1, r3
 8005970:	d002      	beq.n	8005978 <__sflush_r+0x94>
 8005972:	4628      	mov	r0, r5
 8005974:	f000 fa22 	bl	8005dbc <_free_r>
 8005978:	2000      	movs	r0, #0
 800597a:	6360      	str	r0, [r4, #52]	; 0x34
 800597c:	e7c0      	b.n	8005900 <__sflush_r+0x1c>
 800597e:	2301      	movs	r3, #1
 8005980:	4628      	mov	r0, r5
 8005982:	47b0      	blx	r6
 8005984:	1c41      	adds	r1, r0, #1
 8005986:	d1c8      	bne.n	800591a <__sflush_r+0x36>
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0c5      	beq.n	800591a <__sflush_r+0x36>
 800598e:	2b1d      	cmp	r3, #29
 8005990:	d001      	beq.n	8005996 <__sflush_r+0xb2>
 8005992:	2b16      	cmp	r3, #22
 8005994:	d101      	bne.n	800599a <__sflush_r+0xb6>
 8005996:	602f      	str	r7, [r5, #0]
 8005998:	e7b1      	b.n	80058fe <__sflush_r+0x1a>
 800599a:	89a3      	ldrh	r3, [r4, #12]
 800599c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059a0:	81a3      	strh	r3, [r4, #12]
 80059a2:	e7ad      	b.n	8005900 <__sflush_r+0x1c>
 80059a4:	690f      	ldr	r7, [r1, #16]
 80059a6:	2f00      	cmp	r7, #0
 80059a8:	d0a9      	beq.n	80058fe <__sflush_r+0x1a>
 80059aa:	0793      	lsls	r3, r2, #30
 80059ac:	680e      	ldr	r6, [r1, #0]
 80059ae:	bf08      	it	eq
 80059b0:	694b      	ldreq	r3, [r1, #20]
 80059b2:	600f      	str	r7, [r1, #0]
 80059b4:	bf18      	it	ne
 80059b6:	2300      	movne	r3, #0
 80059b8:	eba6 0807 	sub.w	r8, r6, r7
 80059bc:	608b      	str	r3, [r1, #8]
 80059be:	f1b8 0f00 	cmp.w	r8, #0
 80059c2:	dd9c      	ble.n	80058fe <__sflush_r+0x1a>
 80059c4:	6a21      	ldr	r1, [r4, #32]
 80059c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059c8:	4643      	mov	r3, r8
 80059ca:	463a      	mov	r2, r7
 80059cc:	4628      	mov	r0, r5
 80059ce:	47b0      	blx	r6
 80059d0:	2800      	cmp	r0, #0
 80059d2:	dc06      	bgt.n	80059e2 <__sflush_r+0xfe>
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059da:	81a3      	strh	r3, [r4, #12]
 80059dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059e0:	e78e      	b.n	8005900 <__sflush_r+0x1c>
 80059e2:	4407      	add	r7, r0
 80059e4:	eba8 0800 	sub.w	r8, r8, r0
 80059e8:	e7e9      	b.n	80059be <__sflush_r+0xda>
 80059ea:	bf00      	nop
 80059ec:	dfbffffe 	.word	0xdfbffffe

080059f0 <_fflush_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	690b      	ldr	r3, [r1, #16]
 80059f4:	4605      	mov	r5, r0
 80059f6:	460c      	mov	r4, r1
 80059f8:	b913      	cbnz	r3, 8005a00 <_fflush_r+0x10>
 80059fa:	2500      	movs	r5, #0
 80059fc:	4628      	mov	r0, r5
 80059fe:	bd38      	pop	{r3, r4, r5, pc}
 8005a00:	b118      	cbz	r0, 8005a0a <_fflush_r+0x1a>
 8005a02:	6a03      	ldr	r3, [r0, #32]
 8005a04:	b90b      	cbnz	r3, 8005a0a <_fflush_r+0x1a>
 8005a06:	f7ff fb7d 	bl	8005104 <__sinit>
 8005a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0f3      	beq.n	80059fa <_fflush_r+0xa>
 8005a12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a14:	07d0      	lsls	r0, r2, #31
 8005a16:	d404      	bmi.n	8005a22 <_fflush_r+0x32>
 8005a18:	0599      	lsls	r1, r3, #22
 8005a1a:	d402      	bmi.n	8005a22 <_fflush_r+0x32>
 8005a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a1e:	f7ff fbec 	bl	80051fa <__retarget_lock_acquire_recursive>
 8005a22:	4628      	mov	r0, r5
 8005a24:	4621      	mov	r1, r4
 8005a26:	f7ff ff5d 	bl	80058e4 <__sflush_r>
 8005a2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a2c:	07da      	lsls	r2, r3, #31
 8005a2e:	4605      	mov	r5, r0
 8005a30:	d4e4      	bmi.n	80059fc <_fflush_r+0xc>
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	059b      	lsls	r3, r3, #22
 8005a36:	d4e1      	bmi.n	80059fc <_fflush_r+0xc>
 8005a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a3a:	f7ff fbdf 	bl	80051fc <__retarget_lock_release_recursive>
 8005a3e:	e7dd      	b.n	80059fc <_fflush_r+0xc>

08005a40 <__malloc_lock>:
 8005a40:	4801      	ldr	r0, [pc, #4]	; (8005a48 <__malloc_lock+0x8>)
 8005a42:	f7ff bbda 	b.w	80051fa <__retarget_lock_acquire_recursive>
 8005a46:	bf00      	nop
 8005a48:	20000350 	.word	0x20000350

08005a4c <__malloc_unlock>:
 8005a4c:	4801      	ldr	r0, [pc, #4]	; (8005a54 <__malloc_unlock+0x8>)
 8005a4e:	f7ff bbd5 	b.w	80051fc <__retarget_lock_release_recursive>
 8005a52:	bf00      	nop
 8005a54:	20000350 	.word	0x20000350

08005a58 <__sread>:
 8005a58:	b510      	push	{r4, lr}
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a60:	f000 f978 	bl	8005d54 <_read_r>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	bfab      	itete	ge
 8005a68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a6c:	181b      	addge	r3, r3, r0
 8005a6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a72:	bfac      	ite	ge
 8005a74:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a76:	81a3      	strhlt	r3, [r4, #12]
 8005a78:	bd10      	pop	{r4, pc}

08005a7a <__swrite>:
 8005a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a7e:	461f      	mov	r7, r3
 8005a80:	898b      	ldrh	r3, [r1, #12]
 8005a82:	05db      	lsls	r3, r3, #23
 8005a84:	4605      	mov	r5, r0
 8005a86:	460c      	mov	r4, r1
 8005a88:	4616      	mov	r6, r2
 8005a8a:	d505      	bpl.n	8005a98 <__swrite+0x1e>
 8005a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a90:	2302      	movs	r3, #2
 8005a92:	2200      	movs	r2, #0
 8005a94:	f000 f94c 	bl	8005d30 <_lseek_r>
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aa2:	81a3      	strh	r3, [r4, #12]
 8005aa4:	4632      	mov	r2, r6
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005aae:	f000 b973 	b.w	8005d98 <_write_r>

08005ab2 <__sseek>:
 8005ab2:	b510      	push	{r4, lr}
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aba:	f000 f939 	bl	8005d30 <_lseek_r>
 8005abe:	1c43      	adds	r3, r0, #1
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	bf15      	itete	ne
 8005ac4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005aca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ace:	81a3      	strheq	r3, [r4, #12]
 8005ad0:	bf18      	it	ne
 8005ad2:	81a3      	strhne	r3, [r4, #12]
 8005ad4:	bd10      	pop	{r4, pc}

08005ad6 <__sclose>:
 8005ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ada:	f000 b8f7 	b.w	8005ccc <_close_r>

08005ade <__swbuf_r>:
 8005ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae0:	460e      	mov	r6, r1
 8005ae2:	4614      	mov	r4, r2
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	b118      	cbz	r0, 8005af0 <__swbuf_r+0x12>
 8005ae8:	6a03      	ldr	r3, [r0, #32]
 8005aea:	b90b      	cbnz	r3, 8005af0 <__swbuf_r+0x12>
 8005aec:	f7ff fb0a 	bl	8005104 <__sinit>
 8005af0:	69a3      	ldr	r3, [r4, #24]
 8005af2:	60a3      	str	r3, [r4, #8]
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	071a      	lsls	r2, r3, #28
 8005af8:	d525      	bpl.n	8005b46 <__swbuf_r+0x68>
 8005afa:	6923      	ldr	r3, [r4, #16]
 8005afc:	b31b      	cbz	r3, 8005b46 <__swbuf_r+0x68>
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	6922      	ldr	r2, [r4, #16]
 8005b02:	1a98      	subs	r0, r3, r2
 8005b04:	6963      	ldr	r3, [r4, #20]
 8005b06:	b2f6      	uxtb	r6, r6
 8005b08:	4283      	cmp	r3, r0
 8005b0a:	4637      	mov	r7, r6
 8005b0c:	dc04      	bgt.n	8005b18 <__swbuf_r+0x3a>
 8005b0e:	4621      	mov	r1, r4
 8005b10:	4628      	mov	r0, r5
 8005b12:	f7ff ff6d 	bl	80059f0 <_fflush_r>
 8005b16:	b9e0      	cbnz	r0, 8005b52 <__swbuf_r+0x74>
 8005b18:	68a3      	ldr	r3, [r4, #8]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	60a3      	str	r3, [r4, #8]
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	6022      	str	r2, [r4, #0]
 8005b24:	701e      	strb	r6, [r3, #0]
 8005b26:	6962      	ldr	r2, [r4, #20]
 8005b28:	1c43      	adds	r3, r0, #1
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d004      	beq.n	8005b38 <__swbuf_r+0x5a>
 8005b2e:	89a3      	ldrh	r3, [r4, #12]
 8005b30:	07db      	lsls	r3, r3, #31
 8005b32:	d506      	bpl.n	8005b42 <__swbuf_r+0x64>
 8005b34:	2e0a      	cmp	r6, #10
 8005b36:	d104      	bne.n	8005b42 <__swbuf_r+0x64>
 8005b38:	4621      	mov	r1, r4
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	f7ff ff58 	bl	80059f0 <_fflush_r>
 8005b40:	b938      	cbnz	r0, 8005b52 <__swbuf_r+0x74>
 8005b42:	4638      	mov	r0, r7
 8005b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b46:	4621      	mov	r1, r4
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f000 f805 	bl	8005b58 <__swsetup_r>
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	d0d5      	beq.n	8005afe <__swbuf_r+0x20>
 8005b52:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005b56:	e7f4      	b.n	8005b42 <__swbuf_r+0x64>

08005b58 <__swsetup_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4b2a      	ldr	r3, [pc, #168]	; (8005c04 <__swsetup_r+0xac>)
 8005b5c:	4605      	mov	r5, r0
 8005b5e:	6818      	ldr	r0, [r3, #0]
 8005b60:	460c      	mov	r4, r1
 8005b62:	b118      	cbz	r0, 8005b6c <__swsetup_r+0x14>
 8005b64:	6a03      	ldr	r3, [r0, #32]
 8005b66:	b90b      	cbnz	r3, 8005b6c <__swsetup_r+0x14>
 8005b68:	f7ff facc 	bl	8005104 <__sinit>
 8005b6c:	89a3      	ldrh	r3, [r4, #12]
 8005b6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b72:	0718      	lsls	r0, r3, #28
 8005b74:	d422      	bmi.n	8005bbc <__swsetup_r+0x64>
 8005b76:	06d9      	lsls	r1, r3, #27
 8005b78:	d407      	bmi.n	8005b8a <__swsetup_r+0x32>
 8005b7a:	2309      	movs	r3, #9
 8005b7c:	602b      	str	r3, [r5, #0]
 8005b7e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b82:	81a3      	strh	r3, [r4, #12]
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b88:	e034      	b.n	8005bf4 <__swsetup_r+0x9c>
 8005b8a:	0758      	lsls	r0, r3, #29
 8005b8c:	d512      	bpl.n	8005bb4 <__swsetup_r+0x5c>
 8005b8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b90:	b141      	cbz	r1, 8005ba4 <__swsetup_r+0x4c>
 8005b92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b96:	4299      	cmp	r1, r3
 8005b98:	d002      	beq.n	8005ba0 <__swsetup_r+0x48>
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	f000 f90e 	bl	8005dbc <_free_r>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	6363      	str	r3, [r4, #52]	; 0x34
 8005ba4:	89a3      	ldrh	r3, [r4, #12]
 8005ba6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005baa:	81a3      	strh	r3, [r4, #12]
 8005bac:	2300      	movs	r3, #0
 8005bae:	6063      	str	r3, [r4, #4]
 8005bb0:	6923      	ldr	r3, [r4, #16]
 8005bb2:	6023      	str	r3, [r4, #0]
 8005bb4:	89a3      	ldrh	r3, [r4, #12]
 8005bb6:	f043 0308 	orr.w	r3, r3, #8
 8005bba:	81a3      	strh	r3, [r4, #12]
 8005bbc:	6923      	ldr	r3, [r4, #16]
 8005bbe:	b94b      	cbnz	r3, 8005bd4 <__swsetup_r+0x7c>
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bca:	d003      	beq.n	8005bd4 <__swsetup_r+0x7c>
 8005bcc:	4621      	mov	r1, r4
 8005bce:	4628      	mov	r0, r5
 8005bd0:	f000 f840 	bl	8005c54 <__smakebuf_r>
 8005bd4:	89a0      	ldrh	r0, [r4, #12]
 8005bd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bda:	f010 0301 	ands.w	r3, r0, #1
 8005bde:	d00a      	beq.n	8005bf6 <__swsetup_r+0x9e>
 8005be0:	2300      	movs	r3, #0
 8005be2:	60a3      	str	r3, [r4, #8]
 8005be4:	6963      	ldr	r3, [r4, #20]
 8005be6:	425b      	negs	r3, r3
 8005be8:	61a3      	str	r3, [r4, #24]
 8005bea:	6923      	ldr	r3, [r4, #16]
 8005bec:	b943      	cbnz	r3, 8005c00 <__swsetup_r+0xa8>
 8005bee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005bf2:	d1c4      	bne.n	8005b7e <__swsetup_r+0x26>
 8005bf4:	bd38      	pop	{r3, r4, r5, pc}
 8005bf6:	0781      	lsls	r1, r0, #30
 8005bf8:	bf58      	it	pl
 8005bfa:	6963      	ldrpl	r3, [r4, #20]
 8005bfc:	60a3      	str	r3, [r4, #8]
 8005bfe:	e7f4      	b.n	8005bea <__swsetup_r+0x92>
 8005c00:	2000      	movs	r0, #0
 8005c02:	e7f7      	b.n	8005bf4 <__swsetup_r+0x9c>
 8005c04:	20000068 	.word	0x20000068

08005c08 <__swhatbuf_r>:
 8005c08:	b570      	push	{r4, r5, r6, lr}
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c10:	2900      	cmp	r1, #0
 8005c12:	b096      	sub	sp, #88	; 0x58
 8005c14:	4615      	mov	r5, r2
 8005c16:	461e      	mov	r6, r3
 8005c18:	da0d      	bge.n	8005c36 <__swhatbuf_r+0x2e>
 8005c1a:	89a3      	ldrh	r3, [r4, #12]
 8005c1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c20:	f04f 0100 	mov.w	r1, #0
 8005c24:	bf0c      	ite	eq
 8005c26:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005c2a:	2340      	movne	r3, #64	; 0x40
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	6031      	str	r1, [r6, #0]
 8005c30:	602b      	str	r3, [r5, #0]
 8005c32:	b016      	add	sp, #88	; 0x58
 8005c34:	bd70      	pop	{r4, r5, r6, pc}
 8005c36:	466a      	mov	r2, sp
 8005c38:	f000 f858 	bl	8005cec <_fstat_r>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	dbec      	blt.n	8005c1a <__swhatbuf_r+0x12>
 8005c40:	9901      	ldr	r1, [sp, #4]
 8005c42:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005c46:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005c4a:	4259      	negs	r1, r3
 8005c4c:	4159      	adcs	r1, r3
 8005c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c52:	e7eb      	b.n	8005c2c <__swhatbuf_r+0x24>

08005c54 <__smakebuf_r>:
 8005c54:	898b      	ldrh	r3, [r1, #12]
 8005c56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c58:	079d      	lsls	r5, r3, #30
 8005c5a:	4606      	mov	r6, r0
 8005c5c:	460c      	mov	r4, r1
 8005c5e:	d507      	bpl.n	8005c70 <__smakebuf_r+0x1c>
 8005c60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	6123      	str	r3, [r4, #16]
 8005c68:	2301      	movs	r3, #1
 8005c6a:	6163      	str	r3, [r4, #20]
 8005c6c:	b002      	add	sp, #8
 8005c6e:	bd70      	pop	{r4, r5, r6, pc}
 8005c70:	ab01      	add	r3, sp, #4
 8005c72:	466a      	mov	r2, sp
 8005c74:	f7ff ffc8 	bl	8005c08 <__swhatbuf_r>
 8005c78:	9900      	ldr	r1, [sp, #0]
 8005c7a:	4605      	mov	r5, r0
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f7ff fc21 	bl	80054c4 <_malloc_r>
 8005c82:	b948      	cbnz	r0, 8005c98 <__smakebuf_r+0x44>
 8005c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c88:	059a      	lsls	r2, r3, #22
 8005c8a:	d4ef      	bmi.n	8005c6c <__smakebuf_r+0x18>
 8005c8c:	f023 0303 	bic.w	r3, r3, #3
 8005c90:	f043 0302 	orr.w	r3, r3, #2
 8005c94:	81a3      	strh	r3, [r4, #12]
 8005c96:	e7e3      	b.n	8005c60 <__smakebuf_r+0xc>
 8005c98:	89a3      	ldrh	r3, [r4, #12]
 8005c9a:	6020      	str	r0, [r4, #0]
 8005c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca0:	81a3      	strh	r3, [r4, #12]
 8005ca2:	9b00      	ldr	r3, [sp, #0]
 8005ca4:	6163      	str	r3, [r4, #20]
 8005ca6:	9b01      	ldr	r3, [sp, #4]
 8005ca8:	6120      	str	r0, [r4, #16]
 8005caa:	b15b      	cbz	r3, 8005cc4 <__smakebuf_r+0x70>
 8005cac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	f000 f82d 	bl	8005d10 <_isatty_r>
 8005cb6:	b128      	cbz	r0, 8005cc4 <__smakebuf_r+0x70>
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	f023 0303 	bic.w	r3, r3, #3
 8005cbe:	f043 0301 	orr.w	r3, r3, #1
 8005cc2:	81a3      	strh	r3, [r4, #12]
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	431d      	orrs	r5, r3
 8005cc8:	81a5      	strh	r5, [r4, #12]
 8005cca:	e7cf      	b.n	8005c6c <__smakebuf_r+0x18>

08005ccc <_close_r>:
 8005ccc:	b538      	push	{r3, r4, r5, lr}
 8005cce:	4d06      	ldr	r5, [pc, #24]	; (8005ce8 <_close_r+0x1c>)
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	4608      	mov	r0, r1
 8005cd6:	602b      	str	r3, [r5, #0]
 8005cd8:	f7fb fadf 	bl	800129a <_close>
 8005cdc:	1c43      	adds	r3, r0, #1
 8005cde:	d102      	bne.n	8005ce6 <_close_r+0x1a>
 8005ce0:	682b      	ldr	r3, [r5, #0]
 8005ce2:	b103      	cbz	r3, 8005ce6 <_close_r+0x1a>
 8005ce4:	6023      	str	r3, [r4, #0]
 8005ce6:	bd38      	pop	{r3, r4, r5, pc}
 8005ce8:	2000035c 	.word	0x2000035c

08005cec <_fstat_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	4d07      	ldr	r5, [pc, #28]	; (8005d0c <_fstat_r+0x20>)
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	4608      	mov	r0, r1
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	602b      	str	r3, [r5, #0]
 8005cfa:	f7fb fada 	bl	80012b2 <_fstat>
 8005cfe:	1c43      	adds	r3, r0, #1
 8005d00:	d102      	bne.n	8005d08 <_fstat_r+0x1c>
 8005d02:	682b      	ldr	r3, [r5, #0]
 8005d04:	b103      	cbz	r3, 8005d08 <_fstat_r+0x1c>
 8005d06:	6023      	str	r3, [r4, #0]
 8005d08:	bd38      	pop	{r3, r4, r5, pc}
 8005d0a:	bf00      	nop
 8005d0c:	2000035c 	.word	0x2000035c

08005d10 <_isatty_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	4d06      	ldr	r5, [pc, #24]	; (8005d2c <_isatty_r+0x1c>)
 8005d14:	2300      	movs	r3, #0
 8005d16:	4604      	mov	r4, r0
 8005d18:	4608      	mov	r0, r1
 8005d1a:	602b      	str	r3, [r5, #0]
 8005d1c:	f7fb fad9 	bl	80012d2 <_isatty>
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	d102      	bne.n	8005d2a <_isatty_r+0x1a>
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	b103      	cbz	r3, 8005d2a <_isatty_r+0x1a>
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
 8005d2c:	2000035c 	.word	0x2000035c

08005d30 <_lseek_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4d07      	ldr	r5, [pc, #28]	; (8005d50 <_lseek_r+0x20>)
 8005d34:	4604      	mov	r4, r0
 8005d36:	4608      	mov	r0, r1
 8005d38:	4611      	mov	r1, r2
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	602a      	str	r2, [r5, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f7fb fad2 	bl	80012e8 <_lseek>
 8005d44:	1c43      	adds	r3, r0, #1
 8005d46:	d102      	bne.n	8005d4e <_lseek_r+0x1e>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	b103      	cbz	r3, 8005d4e <_lseek_r+0x1e>
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	bd38      	pop	{r3, r4, r5, pc}
 8005d50:	2000035c 	.word	0x2000035c

08005d54 <_read_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4d07      	ldr	r5, [pc, #28]	; (8005d74 <_read_r+0x20>)
 8005d58:	4604      	mov	r4, r0
 8005d5a:	4608      	mov	r0, r1
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	2200      	movs	r2, #0
 8005d60:	602a      	str	r2, [r5, #0]
 8005d62:	461a      	mov	r2, r3
 8005d64:	f7fb fa60 	bl	8001228 <_read>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	d102      	bne.n	8005d72 <_read_r+0x1e>
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	b103      	cbz	r3, 8005d72 <_read_r+0x1e>
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	bd38      	pop	{r3, r4, r5, pc}
 8005d74:	2000035c 	.word	0x2000035c

08005d78 <_sbrk_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4d06      	ldr	r5, [pc, #24]	; (8005d94 <_sbrk_r+0x1c>)
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	4604      	mov	r4, r0
 8005d80:	4608      	mov	r0, r1
 8005d82:	602b      	str	r3, [r5, #0]
 8005d84:	f7fb fabe 	bl	8001304 <_sbrk>
 8005d88:	1c43      	adds	r3, r0, #1
 8005d8a:	d102      	bne.n	8005d92 <_sbrk_r+0x1a>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	b103      	cbz	r3, 8005d92 <_sbrk_r+0x1a>
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	2000035c 	.word	0x2000035c

08005d98 <_write_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4d07      	ldr	r5, [pc, #28]	; (8005db8 <_write_r+0x20>)
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	4608      	mov	r0, r1
 8005da0:	4611      	mov	r1, r2
 8005da2:	2200      	movs	r2, #0
 8005da4:	602a      	str	r2, [r5, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	f7fb fa5b 	bl	8001262 <_write>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d102      	bne.n	8005db6 <_write_r+0x1e>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	b103      	cbz	r3, 8005db6 <_write_r+0x1e>
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
 8005db8:	2000035c 	.word	0x2000035c

08005dbc <_free_r>:
 8005dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dbe:	2900      	cmp	r1, #0
 8005dc0:	d044      	beq.n	8005e4c <_free_r+0x90>
 8005dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dc6:	9001      	str	r0, [sp, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f1a1 0404 	sub.w	r4, r1, #4
 8005dce:	bfb8      	it	lt
 8005dd0:	18e4      	addlt	r4, r4, r3
 8005dd2:	f7ff fe35 	bl	8005a40 <__malloc_lock>
 8005dd6:	4a1e      	ldr	r2, [pc, #120]	; (8005e50 <_free_r+0x94>)
 8005dd8:	9801      	ldr	r0, [sp, #4]
 8005dda:	6813      	ldr	r3, [r2, #0]
 8005ddc:	b933      	cbnz	r3, 8005dec <_free_r+0x30>
 8005dde:	6063      	str	r3, [r4, #4]
 8005de0:	6014      	str	r4, [r2, #0]
 8005de2:	b003      	add	sp, #12
 8005de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005de8:	f7ff be30 	b.w	8005a4c <__malloc_unlock>
 8005dec:	42a3      	cmp	r3, r4
 8005dee:	d908      	bls.n	8005e02 <_free_r+0x46>
 8005df0:	6825      	ldr	r5, [r4, #0]
 8005df2:	1961      	adds	r1, r4, r5
 8005df4:	428b      	cmp	r3, r1
 8005df6:	bf01      	itttt	eq
 8005df8:	6819      	ldreq	r1, [r3, #0]
 8005dfa:	685b      	ldreq	r3, [r3, #4]
 8005dfc:	1949      	addeq	r1, r1, r5
 8005dfe:	6021      	streq	r1, [r4, #0]
 8005e00:	e7ed      	b.n	8005dde <_free_r+0x22>
 8005e02:	461a      	mov	r2, r3
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	b10b      	cbz	r3, 8005e0c <_free_r+0x50>
 8005e08:	42a3      	cmp	r3, r4
 8005e0a:	d9fa      	bls.n	8005e02 <_free_r+0x46>
 8005e0c:	6811      	ldr	r1, [r2, #0]
 8005e0e:	1855      	adds	r5, r2, r1
 8005e10:	42a5      	cmp	r5, r4
 8005e12:	d10b      	bne.n	8005e2c <_free_r+0x70>
 8005e14:	6824      	ldr	r4, [r4, #0]
 8005e16:	4421      	add	r1, r4
 8005e18:	1854      	adds	r4, r2, r1
 8005e1a:	42a3      	cmp	r3, r4
 8005e1c:	6011      	str	r1, [r2, #0]
 8005e1e:	d1e0      	bne.n	8005de2 <_free_r+0x26>
 8005e20:	681c      	ldr	r4, [r3, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	6053      	str	r3, [r2, #4]
 8005e26:	440c      	add	r4, r1
 8005e28:	6014      	str	r4, [r2, #0]
 8005e2a:	e7da      	b.n	8005de2 <_free_r+0x26>
 8005e2c:	d902      	bls.n	8005e34 <_free_r+0x78>
 8005e2e:	230c      	movs	r3, #12
 8005e30:	6003      	str	r3, [r0, #0]
 8005e32:	e7d6      	b.n	8005de2 <_free_r+0x26>
 8005e34:	6825      	ldr	r5, [r4, #0]
 8005e36:	1961      	adds	r1, r4, r5
 8005e38:	428b      	cmp	r3, r1
 8005e3a:	bf04      	itt	eq
 8005e3c:	6819      	ldreq	r1, [r3, #0]
 8005e3e:	685b      	ldreq	r3, [r3, #4]
 8005e40:	6063      	str	r3, [r4, #4]
 8005e42:	bf04      	itt	eq
 8005e44:	1949      	addeq	r1, r1, r5
 8005e46:	6021      	streq	r1, [r4, #0]
 8005e48:	6054      	str	r4, [r2, #4]
 8005e4a:	e7ca      	b.n	8005de2 <_free_r+0x26>
 8005e4c:	b003      	add	sp, #12
 8005e4e:	bd30      	pop	{r4, r5, pc}
 8005e50:	20000354 	.word	0x20000354

08005e54 <_init>:
 8005e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e56:	bf00      	nop
 8005e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5a:	bc08      	pop	{r3}
 8005e5c:	469e      	mov	lr, r3
 8005e5e:	4770      	bx	lr

08005e60 <_fini>:
 8005e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e62:	bf00      	nop
 8005e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e66:	bc08      	pop	{r3}
 8005e68:	469e      	mov	lr, r3
 8005e6a:	4770      	bx	lr
