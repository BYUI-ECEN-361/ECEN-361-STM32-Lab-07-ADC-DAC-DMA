
ECEN-361-STM32-Lab-08-Sampling-Solution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005740  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000087c  080058d0  080058d0  000158d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800614c  0800614c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800614c  0800614c  0001614c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006154  08006154  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006154  08006154  00016154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006158  08006158  00016158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800615c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000068  080061c4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  080061c4  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f1b  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000291a  00000000  00000000  00032ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  00035910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d54  00000000  00000000  00036a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000283b0  00000000  00000000  00037794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014586  00000000  00000000  0005fb44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f60d8  00000000  00000000  000740ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f58  00000000  00000000  0016a1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0016f0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058b8 	.word	0x080058b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080058b8 	.word	0x080058b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fcad 	bl	8000ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f831 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f94f 	bl	800081c <MX_GPIO_Init>
  MX_DMA_Init();
 800057e:	f000 f92f 	bl	80007e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f8fd 	bl	8000780 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000586:	f000 f87b 	bl	8000680 <MX_DAC1_Init>
  MX_TIM2_Init();
 800058a:	f000 f8ab 	bl	80006e4 <MX_TIM2_Init>


  // HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1);


  HAL_TIM_Base_Start_IT(&htim2);
 800058e:	480d      	ldr	r0, [pc, #52]	; (80005c4 <main+0x58>)
 8000590:	f003 f876 	bl	8003680 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,1);

  printf("\033\143"); printf("Welcome to ECEN-361 SineWave Generator\n\r");
 8000594:	480c      	ldr	r0, [pc, #48]	; (80005c8 <main+0x5c>)
 8000596:	f004 fb19 	bl	8004bcc <iprintf>
 800059a:	480c      	ldr	r0, [pc, #48]	; (80005cc <main+0x60>)
 800059c:	f004 fb16 	bl	8004bcc <iprintf>

  /* Setup the DMA */

  if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80005a0:	480b      	ldr	r0, [pc, #44]	; (80005d0 <main+0x64>)
 80005a2:	f001 f8fd 	bl	80017a0 <HAL_DMA_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d000      	beq.n	80005ae <main+0x42>
 	  {while(1);}
 80005ac:	e7fe      	b.n	80005ac <main+0x40>

   // HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_1000_pts, sizeof(sineLookupTable_1000_pts),DAC_ALIGN_12B_R);
   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_1000_pts, 1000,DAC_ALIGN_12B_R);
 80005ae:	2300      	movs	r3, #0
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b6:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <main+0x68>)
 80005b8:	2100      	movs	r1, #0
 80005ba:	4807      	ldr	r0, [pc, #28]	; (80005d8 <main+0x6c>)
 80005bc:	f000 fdf0 	bl	80011a0 <HAL_DAC_Start_DMA>
   // HAL_DMA_Start_IT(&hdma_dac_ch1, (uint32_t) &sineLookupTable_100_pts, (uint32_t) &hdac1, sizeof(sineLookupTable_100_pts));
   //HAL_DMA_PollForTransfer(&hdma_memtomem_dma1_channel1, );

  while (1)
 80005c0:	e7fe      	b.n	80005c0 <main+0x54>
 80005c2:	bf00      	nop
 80005c4:	200000e0 	.word	0x200000e0
 80005c8:	080058d0 	.word	0x080058d0
 80005cc:	080058d4 	.word	0x080058d4
 80005d0:	20000098 	.word	0x20000098
 80005d4:	08005900 	.word	0x08005900
 80005d8:	20000084 	.word	0x20000084

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b096      	sub	sp, #88	; 0x58
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2244      	movs	r2, #68	; 0x44
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f004 fb43 	bl	8004c76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000602:	f001 fca1 	bl	8001f48 <HAL_PWREx_ControlVoltageScaling>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800060c:	f000 f996 	bl	800093c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	2302      	movs	r3, #2
 8000612:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000618:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061a:	2310      	movs	r3, #16
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000622:	2302      	movs	r3, #2
 8000624:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800062a:	230a      	movs	r3, #10
 800062c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800062e:	2307      	movs	r3, #7
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fcd8 	bl	8001ff4 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800064a:	f000 f977 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2303      	movs	r3, #3
 8000654:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	2104      	movs	r1, #4
 8000666:	4618      	mov	r0, r3
 8000668:	f002 f8a0 	bl	80027ac <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000672:	f000 f963 	bl	800093c <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3758      	adds	r7, #88	; 0x58
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2224      	movs	r2, #36	; 0x24
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f004 faf2 	bl	8004c76 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_DAC1_Init+0x5c>)
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_DAC1_Init+0x60>)
 8000696:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000698:	4810      	ldr	r0, [pc, #64]	; (80006dc <MX_DAC1_Init+0x5c>)
 800069a:	f000 fd5f 	bl	800115c <HAL_DAC_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80006a4:	f000 f94a 	bl	800093c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80006ac:	2324      	movs	r3, #36	; 0x24
 80006ae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80006b0:	2302      	movs	r3, #2
 80006b2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	; (80006dc <MX_DAC1_Init+0x5c>)
 80006c4:	f000 feb0 	bl	8001428 <HAL_DAC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80006ce:	f000 f935 	bl	800093c <Error_Handler>
  /* USER CODE BEGIN DAC1_Init 2 */
  // sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;

  /* USER CODE END DAC1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	3728      	adds	r7, #40	; 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000084 	.word	0x20000084
 80006e0:	40007400 	.word	0x40007400

080006e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_TIM2_Init+0x98>)
 8000704:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000708:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_TIM2_Init+0x98>)
 800070c:	224f      	movs	r2, #79	; 0x4f
 800070e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_TIM2_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_TIM2_Init+0x98>)
 8000718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800071c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_TIM2_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_TIM2_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800072a:	4814      	ldr	r0, [pc, #80]	; (800077c <MX_TIM2_Init+0x98>)
 800072c:	f002 ff50 	bl	80035d0 <HAL_TIM_Base_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000736:	f000 f901 	bl	800093c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_TIM2_Init+0x98>)
 8000748:	f003 f90c 	bl	8003964 <HAL_TIM_ConfigClockSource>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000752:	f000 f8f3 	bl	800093c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000756:	2320      	movs	r3, #32
 8000758:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_TIM2_Init+0x98>)
 8000764:	f003 fb24 	bl	8003db0 <HAL_TIMEx_MasterConfigSynchronization>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800076e:	f000 f8e5 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	3720      	adds	r7, #32
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000e0 	.word	0x200000e0

08000780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 8000786:	4a15      	ldr	r2, [pc, #84]	; (80007dc <MX_USART2_UART_Init+0x5c>)
 8000788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007c4:	f003 fb9a 	bl	8003efc <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ce:	f000 f8b5 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000012c 	.word	0x2000012c
 80007dc:	40004400 	.word	0x40004400

080007e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_DMA_Init+0x38>)
 80007e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ea:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <MX_DMA_Init+0x38>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6493      	str	r3, [r2, #72]	; 0x48
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_DMA_Init+0x38>)
 80007f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	200d      	movs	r0, #13
 8000804:	f000 fc80 	bl	8001108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000808:	200d      	movs	r0, #13
 800080a:	f000 fc99 	bl	8001140 <HAL_NVIC_EnableIRQ>

}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40021000 	.word	0x40021000

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <MX_GPIO_Init+0xcc>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a2c      	ldr	r2, [pc, #176]	; (80008e8 <MX_GPIO_Init+0xcc>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <MX_GPIO_Init+0xcc>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <MX_GPIO_Init+0xcc>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a26      	ldr	r2, [pc, #152]	; (80008e8 <MX_GPIO_Init+0xcc>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <MX_GPIO_Init+0xcc>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <MX_GPIO_Init+0xcc>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a20      	ldr	r2, [pc, #128]	; (80008e8 <MX_GPIO_Init+0xcc>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <MX_GPIO_Init+0xcc>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_GPIO_Init+0xcc>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a1a      	ldr	r2, [pc, #104]	; (80008e8 <MX_GPIO_Init+0xcc>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_GPIO_Init+0xcc>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000898:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800089c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4810      	ldr	r0, [pc, #64]	; (80008ec <MX_GPIO_Init+0xd0>)
 80008aa:	f001 f971 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80008c0:	2303      	movs	r3, #3
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4808      	ldr	r0, [pc, #32]	; (80008ec <MX_GPIO_Init+0xd0>)
 80008cc:	f001 f960 	bl	8001b90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	2028      	movs	r0, #40	; 0x28
 80008d6:	f000 fc17 	bl	8001108 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008da:	2028      	movs	r0, #40	; 0x28
 80008dc:	f000 fc30 	bl	8001140 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	; 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40021000 	.word	0x40021000
 80008ec:	48000800 	.word	0x48000800

080008f0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80008f8:	1d39      	adds	r1, r7, #4
 80008fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008fe:	2201      	movs	r2, #1
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <__io_putchar+0x20>)
 8000902:	f003 fb49 	bl	8003f98 <HAL_UART_Transmit>

  return ch;
 8000906:	687b      	ldr	r3, [r7, #4]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000012c 	.word	0x2000012c

08000914 <HAL_DAC_ConvCpltCallbackCh1>:



void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	/* Fill this in when I know what to do if I get here */
// printf("              FINISHED DAC OUT\n\n");
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <HAL_TIM_PeriodElapsedCallback>:


// Callback: timer has rolled over

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
		//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,(uint32_t) sineLookup[sindex++]);
		//HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
	  	  // int u = 1;
		// if (sindex >=SINE_WAVE_SAMPLES ) {sindex=0;}
		// }
	}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_MspInit+0x44>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000952:	4a0e      	ldr	r2, [pc, #56]	; (800098c <HAL_MspInit+0x44>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6613      	str	r3, [r2, #96]	; 0x60
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_MspInit+0x44>)
 800095c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_MspInit+0x44>)
 8000968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_MspInit+0x44>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	6593      	str	r3, [r2, #88]	; 0x58
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_MspInit+0x44>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a2f      	ldr	r2, [pc, #188]	; (8000a6c <HAL_DAC_MspInit+0xdc>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d158      	bne.n	8000a64 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80009b2:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <HAL_DAC_MspInit+0xe0>)
 80009b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b6:	4a2e      	ldr	r2, [pc, #184]	; (8000a70 <HAL_DAC_MspInit+0xe0>)
 80009b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80009bc:	6593      	str	r3, [r2, #88]	; 0x58
 80009be:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <HAL_DAC_MspInit+0xe0>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <HAL_DAC_MspInit+0xe0>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a28      	ldr	r2, [pc, #160]	; (8000a70 <HAL_DAC_MspInit+0xe0>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <HAL_DAC_MspInit+0xe0>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009e2:	2310      	movs	r3, #16
 80009e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e6:	2303      	movs	r3, #3
 80009e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f8:	f001 f8ca 	bl	8001b90 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <HAL_DAC_MspInit+0xe4>)
 80009fe:	4a1e      	ldr	r2, [pc, #120]	; (8000a78 <HAL_DAC_MspInit+0xe8>)
 8000a00:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <HAL_DAC_MspInit+0xe4>)
 8000a04:	2206      	movs	r2, #6
 8000a06:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <HAL_DAC_MspInit+0xe4>)
 8000a0a:	2210      	movs	r2, #16
 8000a0c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_DAC_MspInit+0xe4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_DAC_MspInit+0xe4>)
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <HAL_DAC_MspInit+0xe4>)
 8000a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a20:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_DAC_MspInit+0xe4>)
 8000a24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a28:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000a2a:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_DAC_MspInit+0xe4>)
 8000a2c:	2220      	movs	r2, #32
 8000a2e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <HAL_DAC_MspInit+0xe4>)
 8000a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000a38:	480e      	ldr	r0, [pc, #56]	; (8000a74 <HAL_DAC_MspInit+0xe4>)
 8000a3a:	f000 feb1 	bl	80017a0 <HAL_DMA_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8000a44:	f7ff ff7a 	bl	800093c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <HAL_DAC_MspInit+0xe4>)
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	4a09      	ldr	r2, [pc, #36]	; (8000a74 <HAL_DAC_MspInit+0xe4>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2036      	movs	r0, #54	; 0x36
 8000a5a:	f000 fb55 	bl	8001108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a5e:	2036      	movs	r0, #54	; 0x36
 8000a60:	f000 fb6e 	bl	8001140 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	; 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40007400 	.word	0x40007400
 8000a70:	40021000 	.word	0x40021000
 8000a74:	20000098 	.word	0x20000098
 8000a78:	40020030 	.word	0x40020030

08000a7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a8c:	d113      	bne.n	8000ab6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <HAL_TIM_Base_MspInit+0x44>)
 8000a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a92:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <HAL_TIM_Base_MspInit+0x44>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_TIM_Base_MspInit+0x44>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	201c      	movs	r0, #28
 8000aac:	f000 fb2c 	bl	8001108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ab0:	201c      	movs	r0, #28
 8000ab2:	f000 fb45 	bl	8001140 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b0ac      	sub	sp, #176	; 0xb0
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2288      	movs	r2, #136	; 0x88
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f004 f8c6 	bl	8004c76 <memset>
  if(huart->Instance==USART2)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a21      	ldr	r2, [pc, #132]	; (8000b74 <HAL_UART_MspInit+0xb0>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d13b      	bne.n	8000b6c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000af4:	2302      	movs	r3, #2
 8000af6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4618      	mov	r0, r3
 8000b02:	f002 f8a9 	bl	8002c58 <HAL_RCCEx_PeriphCLKConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b0c:	f7ff ff16 	bl	800093c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_UART_MspInit+0xb4>)
 8000b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b14:	4a18      	ldr	r2, [pc, #96]	; (8000b78 <HAL_UART_MspInit+0xb4>)
 8000b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <HAL_UART_MspInit+0xb4>)
 8000b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_UART_MspInit+0xb4>)
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2c:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <HAL_UART_MspInit+0xb4>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_UART_MspInit+0xb4>)
 8000b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b40:	230c      	movs	r3, #12
 8000b42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b58:	2307      	movs	r3, #7
 8000b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b62:	4619      	mov	r1, r3
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f001 f812 	bl	8001b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b6c:	bf00      	nop
 8000b6e:	37b0      	adds	r7, #176	; 0xb0
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40004400 	.word	0x40004400
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08e      	sub	sp, #56	; 0x38
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b8a:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <HAL_InitTick+0xe0>)
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8e:	4a33      	ldr	r2, [pc, #204]	; (8000c5c <HAL_InitTick+0xe0>)
 8000b90:	f043 0310 	orr.w	r3, r3, #16
 8000b94:	6593      	str	r3, [r2, #88]	; 0x58
 8000b96:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <HAL_InitTick+0xe0>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	f003 0310 	and.w	r3, r3, #16
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ba2:	f107 0210 	add.w	r2, r7, #16
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 ffc1 	bl	8002b34 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bb2:	6a3b      	ldr	r3, [r7, #32]
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d103      	bne.n	8000bc4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bbc:	f001 ff8e 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8000bc0:	6378      	str	r0, [r7, #52]	; 0x34
 8000bc2:	e004      	b.n	8000bce <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bc4:	f001 ff8a 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bd0:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <HAL_InitTick+0xe4>)
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	0c9b      	lsrs	r3, r3, #18
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bdc:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <HAL_InitTick+0xe8>)
 8000bde:	4a22      	ldr	r2, [pc, #136]	; (8000c68 <HAL_InitTick+0xec>)
 8000be0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000be2:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <HAL_InitTick+0xe8>)
 8000be4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000be8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bea:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <HAL_InitTick+0xe8>)
 8000bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_InitTick+0xe8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <HAL_InitTick+0xe8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_InitTick+0xe8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c02:	4818      	ldr	r0, [pc, #96]	; (8000c64 <HAL_InitTick+0xe8>)
 8000c04:	f002 fce4 	bl	80035d0 <HAL_TIM_Base_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d11b      	bne.n	8000c4e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c16:	4813      	ldr	r0, [pc, #76]	; (8000c64 <HAL_InitTick+0xe8>)
 8000c18:	f002 fd32 	bl	8003680 <HAL_TIM_Base_Start_IT>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d111      	bne.n	8000c4e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c2a:	2036      	movs	r0, #54	; 0x36
 8000c2c:	f000 fa88 	bl	8001140 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b0f      	cmp	r3, #15
 8000c34:	d808      	bhi.n	8000c48 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c36:	2200      	movs	r2, #0
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	2036      	movs	r0, #54	; 0x36
 8000c3c:	f000 fa64 	bl	8001108 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_InitTick+0xf0>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e002      	b.n	8000c4e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3738      	adds	r7, #56	; 0x38
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	431bde83 	.word	0x431bde83
 8000c64:	200001b4 	.word	0x200001b4
 8000c68:	40001000 	.word	0x40001000
 8000c6c:	20000004 	.word	0x20000004

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 f928 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <DMA1_Channel3_IRQHandler+0x10>)
 8000cca:	f000 fe81 	bl	80019d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000098 	.word	0x20000098

08000cd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <TIM2_IRQHandler+0x10>)
 8000cde:	f002 fd3f 	bl	8003760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000e0 	.word	0x200000e0

08000cec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cf0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cf4:	f001 f8f6 	bl	8001ee4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <TIM6_DAC_IRQHandler+0x10>)
 8000d02:	f000 fb19 	bl	8001338 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000084 	.word	0x20000084

08000d10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	e00a      	b.n	8000d38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d22:	f3af 8000 	nop.w
 8000d26:	4601      	mov	r1, r0
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	60ba      	str	r2, [r7, #8]
 8000d2e:	b2ca      	uxtb	r2, r1
 8000d30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3301      	adds	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	dbf0      	blt.n	8000d22 <_read+0x12>
  }

  return len;
 8000d40:	687b      	ldr	r3, [r7, #4]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	60f8      	str	r0, [r7, #12]
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	e009      	b.n	8000d70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	60ba      	str	r2, [r7, #8]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fdc3 	bl	80008f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	dbf1      	blt.n	8000d5c <_write+0x12>
  }
  return len;
 8000d78:	687b      	ldr	r3, [r7, #4]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_close>:

int _close(int file)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000daa:	605a      	str	r2, [r3, #4]
  return 0;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <_isatty>:

int _isatty(int file)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dc2:	2301      	movs	r3, #1
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
	...

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f003 ff7a 	bl	8004d14 <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20018000 	.word	0x20018000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	20000200 	.word	0x20000200
 8000e54:	20000358 	.word	0x20000358

08000e58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <SystemInit+0x20>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <SystemInit+0x20>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e80:	f7ff ffea 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e84:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e86:	490d      	ldr	r1, [pc, #52]	; (8000ebc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <LoopForever+0xe>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ec8 <LoopForever+0x16>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eaa:	f003 ff39 	bl	8004d20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eae:	f7ff fb5d 	bl	800056c <main>

08000eb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000eb2:	e7fe      	b.n	8000eb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000eb4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ebc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ec0:	0800615c 	.word	0x0800615c
  ldr r2, =_sbss
 8000ec4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ec8:	20000354 	.word	0x20000354

08000ecc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC1_2_IRQHandler>
	...

08000ed0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <HAL_Init+0x3c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <HAL_Init+0x3c>)
 8000ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	f000 f903 	bl	80010f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eec:	200f      	movs	r0, #15
 8000eee:	f7ff fe45 	bl	8000b7c <HAL_InitTick>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d002      	beq.n	8000efe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	71fb      	strb	r3, [r7, #7]
 8000efc:	e001      	b.n	8000f02 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000efe:	f7ff fd23 	bl	8000948 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f02:	79fb      	ldrb	r3, [r7, #7]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40022000 	.word	0x40022000

08000f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000204 	.word	0x20000204

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000204 	.word	0x20000204

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff ffee 	bl	8000f38 <HAL_GetTick>
 8000f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f76:	bf00      	nop
 8000f78:	f7ff ffde 	bl	8000f38 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	2b00      	cmp	r3, #0
 800100c:	db0b      	blt.n	8001026 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 021f 	and.w	r2, r3, #31
 8001014:	4907      	ldr	r1, [pc, #28]	; (8001034 <__NVIC_EnableIRQ+0x38>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	2001      	movs	r0, #1
 800101e:	fa00 f202 	lsl.w	r2, r0, r2
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000e100 	.word	0xe000e100

08001038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	db0a      	blt.n	8001062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	490c      	ldr	r1, [pc, #48]	; (8001084 <__NVIC_SetPriority+0x4c>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	440b      	add	r3, r1
 800105c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001060:	e00a      	b.n	8001078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4908      	ldr	r1, [pc, #32]	; (8001088 <__NVIC_SetPriority+0x50>)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	3b04      	subs	r3, #4
 8001070:	0112      	lsls	r2, r2, #4
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	440b      	add	r3, r1
 8001076:	761a      	strb	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000e100 	.word	0xe000e100
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f1c3 0307 	rsb	r3, r3, #7
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	bf28      	it	cs
 80010aa:	2304      	movcs	r3, #4
 80010ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3304      	adds	r3, #4
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d902      	bls.n	80010bc <NVIC_EncodePriority+0x30>
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3b03      	subs	r3, #3
 80010ba:	e000      	b.n	80010be <NVIC_EncodePriority+0x32>
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	43d9      	mvns	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	4313      	orrs	r3, r2
         );
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ff4c 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800111a:	f7ff ff61 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 800111e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	6978      	ldr	r0, [r7, #20]
 8001126:	f7ff ffb1 	bl	800108c <NVIC_EncodePriority>
 800112a:	4602      	mov	r2, r0
 800112c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff80 	bl	8001038 <__NVIC_SetPriority>
}
 8001138:	bf00      	nop
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff54 	bl	8000ffc <__NVIC_EnableIRQ>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e014      	b.n	8001198 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	791b      	ldrb	r3, [r3, #4]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d105      	bne.n	8001184 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff fc06 	bl	8000990 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2202      	movs	r2, #2
 8001188:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2201      	movs	r2, #1
 8001194:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	795b      	ldrb	r3, [r3, #5]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d101      	bne.n	80011be <HAL_DAC_Start_DMA+0x1e>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e0ab      	b.n	8001316 <HAL_DAC_Start_DMA+0x176>
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2201      	movs	r2, #1
 80011c2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2202      	movs	r2, #2
 80011c8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d12f      	bne.n	8001230 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	4a52      	ldr	r2, [pc, #328]	; (8001320 <HAL_DAC_Start_DMA+0x180>)
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	4a51      	ldr	r2, [pc, #324]	; (8001324 <HAL_DAC_Start_DMA+0x184>)
 80011de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	4a50      	ldr	r2, [pc, #320]	; (8001328 <HAL_DAC_Start_DMA+0x188>)
 80011e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011f6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d013      	beq.n	8001226 <HAL_DAC_Start_DMA+0x86>
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	2b08      	cmp	r3, #8
 8001202:	d845      	bhi.n	8001290 <HAL_DAC_Start_DMA+0xf0>
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_DAC_Start_DMA+0x72>
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	2b04      	cmp	r3, #4
 800120e:	d005      	beq.n	800121c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001210:	e03e      	b.n	8001290 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	3308      	adds	r3, #8
 8001218:	613b      	str	r3, [r7, #16]
        break;
 800121a:	e03c      	b.n	8001296 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	330c      	adds	r3, #12
 8001222:	613b      	str	r3, [r7, #16]
        break;
 8001224:	e037      	b.n	8001296 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	3310      	adds	r3, #16
 800122c:	613b      	str	r3, [r7, #16]
        break;
 800122e:	e032      	b.n	8001296 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	4a3d      	ldr	r2, [pc, #244]	; (800132c <HAL_DAC_Start_DMA+0x18c>)
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	4a3c      	ldr	r2, [pc, #240]	; (8001330 <HAL_DAC_Start_DMA+0x190>)
 800123e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	4a3b      	ldr	r2, [pc, #236]	; (8001334 <HAL_DAC_Start_DMA+0x194>)
 8001246:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001256:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	2b08      	cmp	r3, #8
 800125c:	d013      	beq.n	8001286 <HAL_DAC_Start_DMA+0xe6>
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	2b08      	cmp	r3, #8
 8001262:	d817      	bhi.n	8001294 <HAL_DAC_Start_DMA+0xf4>
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_DAC_Start_DMA+0xd2>
 800126a:	6a3b      	ldr	r3, [r7, #32]
 800126c:	2b04      	cmp	r3, #4
 800126e:	d005      	beq.n	800127c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001270:	e010      	b.n	8001294 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	3314      	adds	r3, #20
 8001278:	613b      	str	r3, [r7, #16]
        break;
 800127a:	e00c      	b.n	8001296 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	3318      	adds	r3, #24
 8001282:	613b      	str	r3, [r7, #16]
        break;
 8001284:	e007      	b.n	8001296 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	331c      	adds	r3, #28
 800128c:	613b      	str	r3, [r7, #16]
        break;
 800128e:	e002      	b.n	8001296 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001290:	bf00      	nop
 8001292:	e000      	b.n	8001296 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001294:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d111      	bne.n	80012c0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6898      	ldr	r0, [r3, #8]
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	f000 fb2b 	bl	8001910 <HAL_DMA_Start_IT>
 80012ba:	4603      	mov	r3, r0
 80012bc:	75fb      	strb	r3, [r7, #23]
 80012be:	e010      	b.n	80012e2 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80012ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	68d8      	ldr	r0, [r3, #12]
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	f000 fb19 	bl	8001910 <HAL_DMA_Start_IT>
 80012de:	4603      	mov	r3, r0
 80012e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10c      	bne.n	8001308 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6819      	ldr	r1, [r3, #0]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	2201      	movs	r2, #1
 80012fc:	409a      	lsls	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e005      	b.n	8001314 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	f043 0204 	orr.w	r2, r3, #4
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001314:	7dfb      	ldrb	r3, [r7, #23]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	08001677 	.word	0x08001677
 8001324:	08001699 	.word	0x08001699
 8001328:	080016b5 	.word	0x080016b5
 800132c:	08001733 	.word	0x08001733
 8001330:	08001755 	.word	0x08001755
 8001334:	08001771 	.word	0x08001771

08001338 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800134a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800134e:	d120      	bne.n	8001392 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001356:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800135a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800135e:	d118      	bne.n	8001392 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2204      	movs	r2, #4
 8001364:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800137a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800138a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 f841 	bl	8001414 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800139c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013a0:	d120      	bne.n	80013e4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013b0:	d118      	bne.n	80013e4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2204      	movs	r2, #4
 80013b6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	f043 0202 	orr.w	r2, r3, #2
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80013cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80013dc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f99d 	bl	800171e <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	795b      	ldrb	r3, [r3, #5]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d101      	bne.n	8001444 <HAL_DAC_ConfigChannel+0x1c>
 8001440:	2302      	movs	r3, #2
 8001442:	e114      	b.n	800166e <HAL_DAC_ConfigChannel+0x246>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2201      	movs	r2, #1
 8001448:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2202      	movs	r2, #2
 800144e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b04      	cmp	r3, #4
 8001456:	f040 8081 	bne.w	800155c <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800145a:	f7ff fd6d 	bl	8000f38 <HAL_GetTick>
 800145e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d140      	bne.n	80014e8 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001466:	e018      	b.n	800149a <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001468:	f7ff fd66 	bl	8000f38 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b01      	cmp	r3, #1
 8001474:	d911      	bls.n	800149a <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00a      	beq.n	800149a <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	f043 0208 	orr.w	r2, r3, #8
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2203      	movs	r2, #3
 8001494:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e0e9      	b.n	800166e <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1df      	bne.n	8001468 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f7ff fd51 	bl	8000f50 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	6992      	ldr	r2, [r2, #24]
 80014b6:	641a      	str	r2, [r3, #64]	; 0x40
 80014b8:	e023      	b.n	8001502 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80014ba:	f7ff fd3d 	bl	8000f38 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d90f      	bls.n	80014e8 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	da0a      	bge.n	80014e8 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	f043 0208 	orr.w	r2, r3, #8
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2203      	movs	r2, #3
 80014e2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e0c2      	b.n	800166e <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	dbe3      	blt.n	80014ba <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80014f2:	2001      	movs	r0, #1
 80014f4:	f7ff fd2c 	bl	8000f50 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	6992      	ldr	r2, [r2, #24]
 8001500:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	ea02 0103 	and.w	r1, r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	69da      	ldr	r2, [r3, #28]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	409a      	lsls	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f003 0310 	and.w	r3, r3, #16
 800153c:	21ff      	movs	r1, #255	; 0xff
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	ea02 0103 	and.w	r1, r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	6a1a      	ldr	r2, [r3, #32]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0310 	and.w	r3, r3, #16
 8001552:	409a      	lsls	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d11d      	bne.n	80015a0 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0310 	and.w	r3, r3, #16
 8001572:	221f      	movs	r2, #31
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f003 0310 	and.w	r3, r3, #16
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	2207      	movs	r2, #7
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	431a      	orrs	r2, r3
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6819      	ldr	r1, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43da      	mvns	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	400a      	ands	r2, r1
 8001604:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f003 0310 	and.w	r3, r3, #16
 8001614:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6819      	ldr	r1, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	22c0      	movs	r2, #192	; 0xc0
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	400a      	ands	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2201      	movs	r2, #1
 8001664:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3720      	adds	r7, #32
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7ff f945 	bl	8000914 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2201      	movs	r2, #1
 800168e:	711a      	strb	r2, [r3, #4]
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f7ff fea0 	bl	80013ec <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80016ac:	bf00      	nop
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	f043 0204 	orr.w	r2, r3, #4
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f7ff fe96 	bl	8001400 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2201      	movs	r2, #1
 80016d8:	711a      	strb	r2, [r3, #4]
}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b084      	sub	sp, #16
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7ff ffce 	bl	80016e2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2201      	movs	r2, #1
 800174a:	711a      	strb	r2, [r3, #4]
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f7ff ffc7 	bl	80016f6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001768:	bf00      	nop
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	f043 0204 	orr.w	r2, r3, #4
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f7ff ffbd 	bl	800170a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2201      	movs	r2, #1
 8001794:	711a      	strb	r2, [r3, #4]
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e098      	b.n	80018e4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b4d      	ldr	r3, [pc, #308]	; (80018f0 <HAL_DMA_Init+0x150>)
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d80f      	bhi.n	80017de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b4b      	ldr	r3, [pc, #300]	; (80018f4 <HAL_DMA_Init+0x154>)
 80017c6:	4413      	add	r3, r2
 80017c8:	4a4b      	ldr	r2, [pc, #300]	; (80018f8 <HAL_DMA_Init+0x158>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	091b      	lsrs	r3, r3, #4
 80017d0:	009a      	lsls	r2, r3, #2
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a48      	ldr	r2, [pc, #288]	; (80018fc <HAL_DMA_Init+0x15c>)
 80017da:	641a      	str	r2, [r3, #64]	; 0x40
 80017dc:	e00e      	b.n	80017fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b46      	ldr	r3, [pc, #280]	; (8001900 <HAL_DMA_Init+0x160>)
 80017e6:	4413      	add	r3, r2
 80017e8:	4a43      	ldr	r2, [pc, #268]	; (80018f8 <HAL_DMA_Init+0x158>)
 80017ea:	fba2 2303 	umull	r2, r3, r2, r3
 80017ee:	091b      	lsrs	r3, r3, #4
 80017f0:	009a      	lsls	r2, r3, #2
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a42      	ldr	r2, [pc, #264]	; (8001904 <HAL_DMA_Init+0x164>)
 80017fa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2202      	movs	r2, #2
 8001800:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001816:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001820:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800182c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	4313      	orrs	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001856:	d039      	beq.n	80018cc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	4a27      	ldr	r2, [pc, #156]	; (80018fc <HAL_DMA_Init+0x15c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d11a      	bne.n	8001898 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001862:	4b29      	ldr	r3, [pc, #164]	; (8001908 <HAL_DMA_Init+0x168>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f003 031c 	and.w	r3, r3, #28
 800186e:	210f      	movs	r1, #15
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	4924      	ldr	r1, [pc, #144]	; (8001908 <HAL_DMA_Init+0x168>)
 8001878:	4013      	ands	r3, r2
 800187a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800187c:	4b22      	ldr	r3, [pc, #136]	; (8001908 <HAL_DMA_Init+0x168>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6859      	ldr	r1, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001888:	f003 031c 	and.w	r3, r3, #28
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	491d      	ldr	r1, [pc, #116]	; (8001908 <HAL_DMA_Init+0x168>)
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]
 8001896:	e019      	b.n	80018cc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001898:	4b1c      	ldr	r3, [pc, #112]	; (800190c <HAL_DMA_Init+0x16c>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a0:	f003 031c 	and.w	r3, r3, #28
 80018a4:	210f      	movs	r1, #15
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	4917      	ldr	r1, [pc, #92]	; (800190c <HAL_DMA_Init+0x16c>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <HAL_DMA_Init+0x16c>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6859      	ldr	r1, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f003 031c 	and.w	r3, r3, #28
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	4911      	ldr	r1, [pc, #68]	; (800190c <HAL_DMA_Init+0x16c>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40020407 	.word	0x40020407
 80018f4:	bffdfff8 	.word	0xbffdfff8
 80018f8:	cccccccd 	.word	0xcccccccd
 80018fc:	40020000 	.word	0x40020000
 8001900:	bffdfbf8 	.word	0xbffdfbf8
 8001904:	40020400 	.word	0x40020400
 8001908:	400200a8 	.word	0x400200a8
 800190c:	400204a8 	.word	0x400204a8

08001910 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_DMA_Start_IT+0x20>
 800192c:	2302      	movs	r3, #2
 800192e:	e04b      	b.n	80019c8 <HAL_DMA_Start_IT+0xb8>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d13a      	bne.n	80019ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0201 	bic.w	r2, r2, #1
 8001960:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	68b9      	ldr	r1, [r7, #8]
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 f8e0 	bl	8001b2e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	2b00      	cmp	r3, #0
 8001974:	d008      	beq.n	8001988 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 020e 	orr.w	r2, r2, #14
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	e00f      	b.n	80019a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0204 	bic.w	r2, r2, #4
 8001996:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 020a 	orr.w	r2, r2, #10
 80019a6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	e005      	b.n	80019c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80019c2:	2302      	movs	r3, #2
 80019c4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ec:	f003 031c 	and.w	r3, r3, #28
 80019f0:	2204      	movs	r2, #4
 80019f2:	409a      	lsls	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d026      	beq.n	8001a4a <HAL_DMA_IRQHandler+0x7a>
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d021      	beq.n	8001a4a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0320 	and.w	r3, r3, #32
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d107      	bne.n	8001a24 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0204 	bic.w	r2, r2, #4
 8001a22:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	f003 021c 	and.w	r2, r3, #28
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	2104      	movs	r1, #4
 8001a32:	fa01 f202 	lsl.w	r2, r1, r2
 8001a36:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d071      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a48:	e06c      	b.n	8001b24 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f003 031c 	and.w	r3, r3, #28
 8001a52:	2202      	movs	r2, #2
 8001a54:	409a      	lsls	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d02e      	beq.n	8001abc <HAL_DMA_IRQHandler+0xec>
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d029      	beq.n	8001abc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0320 	and.w	r3, r3, #32
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10b      	bne.n	8001a8e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 020a 	bic.w	r2, r2, #10
 8001a84:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f003 021c 	and.w	r2, r3, #28
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	2102      	movs	r1, #2
 8001a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d038      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001aba:	e033      	b.n	8001b24 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac0:	f003 031c 	and.w	r3, r3, #28
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d02a      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x156>
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d025      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 020e 	bic.w	r2, r2, #14
 8001ae8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f003 021c 	and.w	r2, r3, #28
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	2101      	movs	r1, #1
 8001af8:	fa01 f202 	lsl.w	r2, r1, r2
 8001afc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d004      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
}
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b085      	sub	sp, #20
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	f003 021c 	and.w	r2, r3, #28
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	2101      	movs	r1, #1
 8001b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b10      	cmp	r3, #16
 8001b5e:	d108      	bne.n	8001b72 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b70:	e007      	b.n	8001b82 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	60da      	str	r2, [r3, #12]
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9e:	e17f      	b.n	8001ea0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 8171 	beq.w	8001e9a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d005      	beq.n	8001bd0 <HAL_GPIO_Init+0x40>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d130      	bne.n	8001c32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c06:	2201      	movs	r2, #1
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	f003 0201 	and.w	r2, r3, #1
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d118      	bne.n	8001c70 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c44:	2201      	movs	r2, #1
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	08db      	lsrs	r3, r3, #3
 8001c5a:	f003 0201 	and.w	r2, r3, #1
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d017      	beq.n	8001cac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d123      	bne.n	8001d00 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	08da      	lsrs	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3208      	adds	r2, #8
 8001cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	220f      	movs	r2, #15
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	6939      	ldr	r1, [r7, #16]
 8001cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0203 	and.w	r2, r3, #3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80ac 	beq.w	8001e9a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d42:	4b5f      	ldr	r3, [pc, #380]	; (8001ec0 <HAL_GPIO_Init+0x330>)
 8001d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d46:	4a5e      	ldr	r2, [pc, #376]	; (8001ec0 <HAL_GPIO_Init+0x330>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d4e:	4b5c      	ldr	r3, [pc, #368]	; (8001ec0 <HAL_GPIO_Init+0x330>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d5a:	4a5a      	ldr	r2, [pc, #360]	; (8001ec4 <HAL_GPIO_Init+0x334>)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	3302      	adds	r3, #2
 8001d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	220f      	movs	r2, #15
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d84:	d025      	beq.n	8001dd2 <HAL_GPIO_Init+0x242>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4f      	ldr	r2, [pc, #316]	; (8001ec8 <HAL_GPIO_Init+0x338>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d01f      	beq.n	8001dce <HAL_GPIO_Init+0x23e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4e      	ldr	r2, [pc, #312]	; (8001ecc <HAL_GPIO_Init+0x33c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d019      	beq.n	8001dca <HAL_GPIO_Init+0x23a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4d      	ldr	r2, [pc, #308]	; (8001ed0 <HAL_GPIO_Init+0x340>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d013      	beq.n	8001dc6 <HAL_GPIO_Init+0x236>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4c      	ldr	r2, [pc, #304]	; (8001ed4 <HAL_GPIO_Init+0x344>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00d      	beq.n	8001dc2 <HAL_GPIO_Init+0x232>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4b      	ldr	r2, [pc, #300]	; (8001ed8 <HAL_GPIO_Init+0x348>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d007      	beq.n	8001dbe <HAL_GPIO_Init+0x22e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4a      	ldr	r2, [pc, #296]	; (8001edc <HAL_GPIO_Init+0x34c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d101      	bne.n	8001dba <HAL_GPIO_Init+0x22a>
 8001db6:	2306      	movs	r3, #6
 8001db8:	e00c      	b.n	8001dd4 <HAL_GPIO_Init+0x244>
 8001dba:	2307      	movs	r3, #7
 8001dbc:	e00a      	b.n	8001dd4 <HAL_GPIO_Init+0x244>
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	e008      	b.n	8001dd4 <HAL_GPIO_Init+0x244>
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x244>
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e004      	b.n	8001dd4 <HAL_GPIO_Init+0x244>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e002      	b.n	8001dd4 <HAL_GPIO_Init+0x244>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_GPIO_Init+0x244>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	f002 0203 	and.w	r2, r2, #3
 8001dda:	0092      	lsls	r2, r2, #2
 8001ddc:	4093      	lsls	r3, r2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001de4:	4937      	ldr	r1, [pc, #220]	; (8001ec4 <HAL_GPIO_Init+0x334>)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	089b      	lsrs	r3, r3, #2
 8001dea:	3302      	adds	r3, #2
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001df2:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <HAL_GPIO_Init+0x350>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e16:	4a32      	ldr	r2, [pc, #200]	; (8001ee0 <HAL_GPIO_Init+0x350>)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e1c:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <HAL_GPIO_Init+0x350>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e40:	4a27      	ldr	r2, [pc, #156]	; (8001ee0 <HAL_GPIO_Init+0x350>)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <HAL_GPIO_Init+0x350>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ee0 <HAL_GPIO_Init+0x350>)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_GPIO_Init+0x350>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e94:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <HAL_GPIO_Init+0x350>)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f47f ae78 	bne.w	8001ba0 <HAL_GPIO_Init+0x10>
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	371c      	adds	r7, #28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	48000400 	.word	0x48000400
 8001ecc:	48000800 	.word	0x48000800
 8001ed0:	48000c00 	.word	0x48000c00
 8001ed4:	48001000 	.word	0x48001000
 8001ed8:	48001400 	.word	0x48001400
 8001edc:	48001800 	.word	0x48001800
 8001ee0:	40010400 	.word	0x40010400

08001ee4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ef0:	695a      	ldr	r2, [r3, #20]
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d006      	beq.n	8001f08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 f806 	bl	8001f14 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40010400 	.word	0x40010400

08001f14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40007000 	.word	0x40007000

08001f48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f56:	d130      	bne.n	8001fba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f58:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f64:	d038      	beq.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f6e:	4a1e      	ldr	r2, [pc, #120]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f76:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2232      	movs	r2, #50	; 0x32
 8001f7c:	fb02 f303 	mul.w	r3, r2, r3
 8001f80:	4a1b      	ldr	r2, [pc, #108]	; (8001ff0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	0c9b      	lsrs	r3, r3, #18
 8001f88:	3301      	adds	r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f8c:	e002      	b.n	8001f94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa0:	d102      	bne.n	8001fa8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f2      	bne.n	8001f8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb4:	d110      	bne.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e00f      	b.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc6:	d007      	beq.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fd0:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	431bde83 	.word	0x431bde83

08001ff4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e3ca      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002006:	4b97      	ldr	r3, [pc, #604]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002010:	4b94      	ldr	r3, [pc, #592]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 80e4 	beq.w	80021f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <HAL_RCC_OscConfig+0x4a>
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	2b0c      	cmp	r3, #12
 8002032:	f040 808b 	bne.w	800214c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b01      	cmp	r3, #1
 800203a:	f040 8087 	bne.w	800214c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800203e:	4b89      	ldr	r3, [pc, #548]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <HAL_RCC_OscConfig+0x62>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e3a2      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1a      	ldr	r2, [r3, #32]
 800205a:	4b82      	ldr	r3, [pc, #520]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d004      	beq.n	8002070 <HAL_RCC_OscConfig+0x7c>
 8002066:	4b7f      	ldr	r3, [pc, #508]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800206e:	e005      	b.n	800207c <HAL_RCC_OscConfig+0x88>
 8002070:	4b7c      	ldr	r3, [pc, #496]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 8002072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800207c:	4293      	cmp	r3, r2
 800207e:	d223      	bcs.n	80020c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4618      	mov	r0, r3
 8002086:	f000 fd87 	bl	8002b98 <RCC_SetFlashLatencyFromMSIRange>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e383      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002094:	4b73      	ldr	r3, [pc, #460]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a72      	ldr	r2, [pc, #456]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 800209a:	f043 0308 	orr.w	r3, r3, #8
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	4b70      	ldr	r3, [pc, #448]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	496d      	ldr	r1, [pc, #436]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020b2:	4b6c      	ldr	r3, [pc, #432]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	4968      	ldr	r1, [pc, #416]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
 80020c6:	e025      	b.n	8002114 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020c8:	4b66      	ldr	r3, [pc, #408]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a65      	ldr	r2, [pc, #404]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 80020ce:	f043 0308 	orr.w	r3, r3, #8
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b63      	ldr	r3, [pc, #396]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	4960      	ldr	r1, [pc, #384]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e6:	4b5f      	ldr	r3, [pc, #380]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	495b      	ldr	r1, [pc, #364]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d109      	bne.n	8002114 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4618      	mov	r0, r3
 8002106:	f000 fd47 	bl	8002b98 <RCC_SetFlashLatencyFromMSIRange>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e343      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002114:	f000 fc4a 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8002118:	4602      	mov	r2, r0
 800211a:	4b52      	ldr	r3, [pc, #328]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	4950      	ldr	r1, [pc, #320]	; (8002268 <HAL_RCC_OscConfig+0x274>)
 8002126:	5ccb      	ldrb	r3, [r1, r3]
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
 8002130:	4a4e      	ldr	r2, [pc, #312]	; (800226c <HAL_RCC_OscConfig+0x278>)
 8002132:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002134:	4b4e      	ldr	r3, [pc, #312]	; (8002270 <HAL_RCC_OscConfig+0x27c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe fd1f 	bl	8000b7c <HAL_InitTick>
 800213e:	4603      	mov	r3, r0
 8002140:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d052      	beq.n	80021ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	e327      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d032      	beq.n	80021ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002154:	4b43      	ldr	r3, [pc, #268]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a42      	ldr	r2, [pc, #264]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002160:	f7fe feea 	bl	8000f38 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002168:	f7fe fee6 	bl	8000f38 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e310      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800217a:	4b3a      	ldr	r3, [pc, #232]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002186:	4b37      	ldr	r3, [pc, #220]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a36      	ldr	r2, [pc, #216]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 800218c:	f043 0308 	orr.w	r3, r3, #8
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b34      	ldr	r3, [pc, #208]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4931      	ldr	r1, [pc, #196]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a4:	4b2f      	ldr	r3, [pc, #188]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	492c      	ldr	r1, [pc, #176]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]
 80021b8:	e01a      	b.n	80021f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021ba:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a29      	ldr	r2, [pc, #164]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021c6:	f7fe feb7 	bl	8000f38 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021ce:	f7fe feb3 	bl	8000f38 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e2dd      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021e0:	4b20      	ldr	r3, [pc, #128]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f0      	bne.n	80021ce <HAL_RCC_OscConfig+0x1da>
 80021ec:	e000      	b.n	80021f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d074      	beq.n	80022e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d005      	beq.n	800220e <HAL_RCC_OscConfig+0x21a>
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	2b0c      	cmp	r3, #12
 8002206:	d10e      	bne.n	8002226 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d10b      	bne.n	8002226 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d064      	beq.n	80022e4 <HAL_RCC_OscConfig+0x2f0>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d160      	bne.n	80022e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e2ba      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222e:	d106      	bne.n	800223e <HAL_RCC_OscConfig+0x24a>
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0b      	ldr	r2, [pc, #44]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 8002236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	e026      	b.n	800228c <HAL_RCC_OscConfig+0x298>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002246:	d115      	bne.n	8002274 <HAL_RCC_OscConfig+0x280>
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a05      	ldr	r2, [pc, #20]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 800224e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a02      	ldr	r2, [pc, #8]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 800225a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	e014      	b.n	800228c <HAL_RCC_OscConfig+0x298>
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	080060d0 	.word	0x080060d0
 800226c:	20000000 	.word	0x20000000
 8002270:	20000004 	.word	0x20000004
 8002274:	4ba0      	ldr	r3, [pc, #640]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a9f      	ldr	r2, [pc, #636]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 800227a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	4b9d      	ldr	r3, [pc, #628]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a9c      	ldr	r2, [pc, #624]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d013      	beq.n	80022bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7fe fe50 	bl	8000f38 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7fe fe4c 	bl	8000f38 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e276      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ae:	4b92      	ldr	r3, [pc, #584]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x2a8>
 80022ba:	e014      	b.n	80022e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7fe fe3c 	bl	8000f38 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7fe fe38 	bl	8000f38 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e262      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022d6:	4b88      	ldr	r3, [pc, #544]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x2d0>
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d060      	beq.n	80023b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_OscConfig+0x310>
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2b0c      	cmp	r3, #12
 80022fc:	d119      	bne.n	8002332 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d116      	bne.n	8002332 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002304:	4b7c      	ldr	r3, [pc, #496]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_OscConfig+0x328>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e23f      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231c:	4b76      	ldr	r3, [pc, #472]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	061b      	lsls	r3, r3, #24
 800232a:	4973      	ldr	r1, [pc, #460]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002330:	e040      	b.n	80023b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d023      	beq.n	8002382 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800233a:	4b6f      	ldr	r3, [pc, #444]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a6e      	ldr	r2, [pc, #440]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7fe fdf7 	bl	8000f38 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234e:	f7fe fdf3 	bl	8000f38 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e21d      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002360:	4b65      	ldr	r3, [pc, #404]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236c:	4b62      	ldr	r3, [pc, #392]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	061b      	lsls	r3, r3, #24
 800237a:	495f      	ldr	r1, [pc, #380]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
 8002380:	e018      	b.n	80023b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002382:	4b5d      	ldr	r3, [pc, #372]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a5c      	ldr	r2, [pc, #368]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238e:	f7fe fdd3 	bl	8000f38 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002396:	f7fe fdcf 	bl	8000f38 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e1f9      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023a8:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f0      	bne.n	8002396 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d03c      	beq.n	800243a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d01c      	beq.n	8002402 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c8:	4b4b      	ldr	r3, [pc, #300]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 80023ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ce:	4a4a      	ldr	r2, [pc, #296]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d8:	f7fe fdae 	bl	8000f38 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e0:	f7fe fdaa 	bl	8000f38 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e1d4      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023f2:	4b41      	ldr	r3, [pc, #260]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 80023f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0ef      	beq.n	80023e0 <HAL_RCC_OscConfig+0x3ec>
 8002400:	e01b      	b.n	800243a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002402:	4b3d      	ldr	r3, [pc, #244]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002408:	4a3b      	ldr	r2, [pc, #236]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 800240a:	f023 0301 	bic.w	r3, r3, #1
 800240e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002412:	f7fe fd91 	bl	8000f38 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241a:	f7fe fd8d 	bl	8000f38 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e1b7      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800242c:	4b32      	ldr	r3, [pc, #200]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 800242e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1ef      	bne.n	800241a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 80a6 	beq.w	8002594 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002448:	2300      	movs	r3, #0
 800244a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800244c:	4b2a      	ldr	r3, [pc, #168]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 800244e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10d      	bne.n	8002474 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002458:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 800245a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245c:	4a26      	ldr	r2, [pc, #152]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 800245e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002462:	6593      	str	r3, [r2, #88]	; 0x58
 8002464:	4b24      	ldr	r3, [pc, #144]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002470:	2301      	movs	r3, #1
 8002472:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002474:	4b21      	ldr	r3, [pc, #132]	; (80024fc <HAL_RCC_OscConfig+0x508>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d118      	bne.n	80024b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002480:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <HAL_RCC_OscConfig+0x508>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1d      	ldr	r2, [pc, #116]	; (80024fc <HAL_RCC_OscConfig+0x508>)
 8002486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248c:	f7fe fd54 	bl	8000f38 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002494:	f7fe fd50 	bl	8000f38 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e17a      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a6:	4b15      	ldr	r3, [pc, #84]	; (80024fc <HAL_RCC_OscConfig+0x508>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d108      	bne.n	80024cc <HAL_RCC_OscConfig+0x4d8>
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c0:	4a0d      	ldr	r2, [pc, #52]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ca:	e029      	b.n	8002520 <HAL_RCC_OscConfig+0x52c>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d115      	bne.n	8002500 <HAL_RCC_OscConfig+0x50c>
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ea:	4a03      	ldr	r2, [pc, #12]	; (80024f8 <HAL_RCC_OscConfig+0x504>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024f4:	e014      	b.n	8002520 <HAL_RCC_OscConfig+0x52c>
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40007000 	.word	0x40007000
 8002500:	4b9c      	ldr	r3, [pc, #624]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 8002502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002506:	4a9b      	ldr	r2, [pc, #620]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002510:	4b98      	ldr	r3, [pc, #608]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 8002512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002516:	4a97      	ldr	r2, [pc, #604]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 8002518:	f023 0304 	bic.w	r3, r3, #4
 800251c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d016      	beq.n	8002556 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002528:	f7fe fd06 	bl	8000f38 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252e:	e00a      	b.n	8002546 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002530:	f7fe fd02 	bl	8000f38 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f241 3288 	movw	r2, #5000	; 0x1388
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e12a      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002546:	4b8b      	ldr	r3, [pc, #556]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ed      	beq.n	8002530 <HAL_RCC_OscConfig+0x53c>
 8002554:	e015      	b.n	8002582 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002556:	f7fe fcef 	bl	8000f38 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255e:	f7fe fceb 	bl	8000f38 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	; 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e113      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002574:	4b7f      	ldr	r3, [pc, #508]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1ed      	bne.n	800255e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002582:	7ffb      	ldrb	r3, [r7, #31]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002588:	4b7a      	ldr	r3, [pc, #488]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	4a79      	ldr	r2, [pc, #484]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 800258e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002592:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80fe 	beq.w	800279a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	f040 80d0 	bne.w	8002748 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025a8:	4b72      	ldr	r3, [pc, #456]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f003 0203 	and.w	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d130      	bne.n	800261e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	3b01      	subs	r3, #1
 80025c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d127      	bne.n	800261e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d11f      	bne.n	800261e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025e8:	2a07      	cmp	r2, #7
 80025ea:	bf14      	ite	ne
 80025ec:	2201      	movne	r2, #1
 80025ee:	2200      	moveq	r2, #0
 80025f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d113      	bne.n	800261e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002600:	085b      	lsrs	r3, r3, #1
 8002602:	3b01      	subs	r3, #1
 8002604:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002606:	429a      	cmp	r2, r3
 8002608:	d109      	bne.n	800261e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	085b      	lsrs	r3, r3, #1
 8002616:	3b01      	subs	r3, #1
 8002618:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d06e      	beq.n	80026fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b0c      	cmp	r3, #12
 8002622:	d069      	beq.n	80026f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002624:	4b53      	ldr	r3, [pc, #332]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d105      	bne.n	800263c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002630:	4b50      	ldr	r3, [pc, #320]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0ad      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002640:	4b4c      	ldr	r3, [pc, #304]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a4b      	ldr	r2, [pc, #300]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 8002646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800264a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800264c:	f7fe fc74 	bl	8000f38 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe fc70 	bl	8000f38 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e09a      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002666:	4b43      	ldr	r3, [pc, #268]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002672:	4b40      	ldr	r3, [pc, #256]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	4b40      	ldr	r3, [pc, #256]	; (8002778 <HAL_RCC_OscConfig+0x784>)
 8002678:	4013      	ands	r3, r2
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002682:	3a01      	subs	r2, #1
 8002684:	0112      	lsls	r2, r2, #4
 8002686:	4311      	orrs	r1, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800268c:	0212      	lsls	r2, r2, #8
 800268e:	4311      	orrs	r1, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002694:	0852      	lsrs	r2, r2, #1
 8002696:	3a01      	subs	r2, #1
 8002698:	0552      	lsls	r2, r2, #21
 800269a:	4311      	orrs	r1, r2
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026a0:	0852      	lsrs	r2, r2, #1
 80026a2:	3a01      	subs	r2, #1
 80026a4:	0652      	lsls	r2, r2, #25
 80026a6:	4311      	orrs	r1, r2
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026ac:	0912      	lsrs	r2, r2, #4
 80026ae:	0452      	lsls	r2, r2, #17
 80026b0:	430a      	orrs	r2, r1
 80026b2:	4930      	ldr	r1, [pc, #192]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026b8:	4b2e      	ldr	r3, [pc, #184]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a2d      	ldr	r2, [pc, #180]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 80026be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026c4:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4a2a      	ldr	r2, [pc, #168]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 80026ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026d0:	f7fe fc32 	bl	8000f38 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d8:	f7fe fc2e 	bl	8000f38 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e058      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ea:	4b22      	ldr	r3, [pc, #136]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026f6:	e050      	b.n	800279a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e04f      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fc:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d148      	bne.n	800279a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002708:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a19      	ldr	r2, [pc, #100]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 800270e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002712:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002714:	4b17      	ldr	r3, [pc, #92]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a16      	ldr	r2, [pc, #88]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 800271a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800271e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002720:	f7fe fc0a 	bl	8000f38 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe fc06 	bl	8000f38 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e030      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x734>
 8002746:	e028      	b.n	800279a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b0c      	cmp	r3, #12
 800274c:	d023      	beq.n	8002796 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a08      	ldr	r2, [pc, #32]	; (8002774 <HAL_RCC_OscConfig+0x780>)
 8002754:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275a:	f7fe fbed 	bl	8000f38 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002760:	e00c      	b.n	800277c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002762:	f7fe fbe9 	bl	8000f38 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d905      	bls.n	800277c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e013      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
 8002774:	40021000 	.word	0x40021000
 8002778:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800277c:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_RCC_OscConfig+0x7b0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1ec      	bne.n	8002762 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_RCC_OscConfig+0x7b0>)
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	4905      	ldr	r1, [pc, #20]	; (80027a4 <HAL_RCC_OscConfig+0x7b0>)
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_RCC_OscConfig+0x7b4>)
 8002790:	4013      	ands	r3, r2
 8002792:	60cb      	str	r3, [r1, #12]
 8002794:	e001      	b.n	800279a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3720      	adds	r7, #32
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	feeefffc 	.word	0xfeeefffc

080027ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0e7      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c0:	4b75      	ldr	r3, [pc, #468]	; (8002998 <HAL_RCC_ClockConfig+0x1ec>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d910      	bls.n	80027f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b72      	ldr	r3, [pc, #456]	; (8002998 <HAL_RCC_ClockConfig+0x1ec>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 0207 	bic.w	r2, r3, #7
 80027d6:	4970      	ldr	r1, [pc, #448]	; (8002998 <HAL_RCC_ClockConfig+0x1ec>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b6e      	ldr	r3, [pc, #440]	; (8002998 <HAL_RCC_ClockConfig+0x1ec>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0cf      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d010      	beq.n	800281e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	4b66      	ldr	r3, [pc, #408]	; (800299c <HAL_RCC_ClockConfig+0x1f0>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002808:	429a      	cmp	r2, r3
 800280a:	d908      	bls.n	800281e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800280c:	4b63      	ldr	r3, [pc, #396]	; (800299c <HAL_RCC_ClockConfig+0x1f0>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	4960      	ldr	r1, [pc, #384]	; (800299c <HAL_RCC_ClockConfig+0x1f0>)
 800281a:	4313      	orrs	r3, r2
 800281c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d04c      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002832:	4b5a      	ldr	r3, [pc, #360]	; (800299c <HAL_RCC_ClockConfig+0x1f0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d121      	bne.n	8002882 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0a6      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d107      	bne.n	800285a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800284a:	4b54      	ldr	r3, [pc, #336]	; (800299c <HAL_RCC_ClockConfig+0x1f0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d115      	bne.n	8002882 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e09a      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d107      	bne.n	8002872 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002862:	4b4e      	ldr	r3, [pc, #312]	; (800299c <HAL_RCC_ClockConfig+0x1f0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e08e      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002872:	4b4a      	ldr	r3, [pc, #296]	; (800299c <HAL_RCC_ClockConfig+0x1f0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e086      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002882:	4b46      	ldr	r3, [pc, #280]	; (800299c <HAL_RCC_ClockConfig+0x1f0>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f023 0203 	bic.w	r2, r3, #3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	4943      	ldr	r1, [pc, #268]	; (800299c <HAL_RCC_ClockConfig+0x1f0>)
 8002890:	4313      	orrs	r3, r2
 8002892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002894:	f7fe fb50 	bl	8000f38 <HAL_GetTick>
 8002898:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800289c:	f7fe fb4c 	bl	8000f38 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e06e      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	4b3a      	ldr	r3, [pc, #232]	; (800299c <HAL_RCC_ClockConfig+0x1f0>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 020c 	and.w	r2, r3, #12
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d1eb      	bne.n	800289c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d010      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	4b31      	ldr	r3, [pc, #196]	; (800299c <HAL_RCC_ClockConfig+0x1f0>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028dc:	429a      	cmp	r2, r3
 80028de:	d208      	bcs.n	80028f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e0:	4b2e      	ldr	r3, [pc, #184]	; (800299c <HAL_RCC_ClockConfig+0x1f0>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	492b      	ldr	r1, [pc, #172]	; (800299c <HAL_RCC_ClockConfig+0x1f0>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028f2:	4b29      	ldr	r3, [pc, #164]	; (8002998 <HAL_RCC_ClockConfig+0x1ec>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d210      	bcs.n	8002922 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002900:	4b25      	ldr	r3, [pc, #148]	; (8002998 <HAL_RCC_ClockConfig+0x1ec>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f023 0207 	bic.w	r2, r3, #7
 8002908:	4923      	ldr	r1, [pc, #140]	; (8002998 <HAL_RCC_ClockConfig+0x1ec>)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	4313      	orrs	r3, r2
 800290e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002910:	4b21      	ldr	r3, [pc, #132]	; (8002998 <HAL_RCC_ClockConfig+0x1ec>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d001      	beq.n	8002922 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e036      	b.n	8002990 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	d008      	beq.n	8002940 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800292e:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_RCC_ClockConfig+0x1f0>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	4918      	ldr	r1, [pc, #96]	; (800299c <HAL_RCC_ClockConfig+0x1f0>)
 800293c:	4313      	orrs	r3, r2
 800293e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d009      	beq.n	8002960 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800294c:	4b13      	ldr	r3, [pc, #76]	; (800299c <HAL_RCC_ClockConfig+0x1f0>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4910      	ldr	r1, [pc, #64]	; (800299c <HAL_RCC_ClockConfig+0x1f0>)
 800295c:	4313      	orrs	r3, r2
 800295e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002960:	f000 f824 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8002964:	4602      	mov	r2, r0
 8002966:	4b0d      	ldr	r3, [pc, #52]	; (800299c <HAL_RCC_ClockConfig+0x1f0>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	490b      	ldr	r1, [pc, #44]	; (80029a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
 800297c:	4a09      	ldr	r2, [pc, #36]	; (80029a4 <HAL_RCC_ClockConfig+0x1f8>)
 800297e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_RCC_ClockConfig+0x1fc>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe f8f9 	bl	8000b7c <HAL_InitTick>
 800298a:	4603      	mov	r3, r0
 800298c:	72fb      	strb	r3, [r7, #11]

  return status;
 800298e:	7afb      	ldrb	r3, [r7, #11]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40022000 	.word	0x40022000
 800299c:	40021000 	.word	0x40021000
 80029a0:	080060d0 	.word	0x080060d0
 80029a4:	20000000 	.word	0x20000000
 80029a8:	20000004 	.word	0x20000004

080029ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	; 0x24
 80029b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ba:	4b3e      	ldr	r3, [pc, #248]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029c4:	4b3b      	ldr	r3, [pc, #236]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x34>
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d121      	bne.n	8002a1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d11e      	bne.n	8002a1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029e0:	4b34      	ldr	r3, [pc, #208]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029ec:	4b31      	ldr	r3, [pc, #196]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f2:	0a1b      	lsrs	r3, r3, #8
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	e005      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029fc:	4b2d      	ldr	r3, [pc, #180]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a08:	4a2b      	ldr	r2, [pc, #172]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10d      	bne.n	8002a34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d102      	bne.n	8002a2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a24:	4b25      	ldr	r3, [pc, #148]	; (8002abc <HAL_RCC_GetSysClockFreq+0x110>)
 8002a26:	61bb      	str	r3, [r7, #24]
 8002a28:	e004      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a30:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	2b0c      	cmp	r3, #12
 8002a38:	d134      	bne.n	8002aa4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d003      	beq.n	8002a52 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d003      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0xac>
 8002a50:	e005      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <HAL_RCC_GetSysClockFreq+0x110>)
 8002a54:	617b      	str	r3, [r7, #20]
      break;
 8002a56:	e005      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a5a:	617b      	str	r3, [r7, #20]
      break;
 8002a5c:	e002      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	617b      	str	r3, [r7, #20]
      break;
 8002a62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a64:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	3301      	adds	r3, #1
 8002a70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	0a1b      	lsrs	r3, r3, #8
 8002a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	fb03 f202 	mul.w	r2, r3, r2
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	0e5b      	lsrs	r3, r3, #25
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	3301      	adds	r3, #1
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002aa4:	69bb      	ldr	r3, [r7, #24]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3724      	adds	r7, #36	; 0x24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	080060e8 	.word	0x080060e8
 8002abc:	00f42400 	.word	0x00f42400
 8002ac0:	007a1200 	.word	0x007a1200

08002ac4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000000 	.word	0x20000000

08002adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ae0:	f7ff fff0 	bl	8002ac4 <HAL_RCC_GetHCLKFreq>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	0a1b      	lsrs	r3, r3, #8
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	4904      	ldr	r1, [pc, #16]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002af2:	5ccb      	ldrb	r3, [r1, r3]
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40021000 	.word	0x40021000
 8002b04:	080060e0 	.word	0x080060e0

08002b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b0c:	f7ff ffda 	bl	8002ac4 <HAL_RCC_GetHCLKFreq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	0adb      	lsrs	r3, r3, #11
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4904      	ldr	r1, [pc, #16]	; (8002b30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	080060e0 	.word	0x080060e0

08002b34 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	220f      	movs	r2, #15
 8002b42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <HAL_RCC_GetClockConfig+0x5c>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0203 	and.w	r2, r3, #3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <HAL_RCC_GetClockConfig+0x5c>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <HAL_RCC_GetClockConfig+0x5c>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_RCC_GetClockConfig+0x5c>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	08db      	lsrs	r3, r3, #3
 8002b6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <HAL_RCC_GetClockConfig+0x60>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0207 	and.w	r2, r3, #7
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	601a      	str	r2, [r3, #0]
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40022000 	.word	0x40022000

08002b98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ba4:	4b2a      	ldr	r3, [pc, #168]	; (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bb0:	f7ff f9bc 	bl	8001f2c <HAL_PWREx_GetVoltageRange>
 8002bb4:	6178      	str	r0, [r7, #20]
 8002bb6:	e014      	b.n	8002be2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bb8:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbc:	4a24      	ldr	r2, [pc, #144]	; (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	6593      	str	r3, [r2, #88]	; 0x58
 8002bc4:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bd0:	f7ff f9ac 	bl	8001f2c <HAL_PWREx_GetVoltageRange>
 8002bd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	; (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	4a1d      	ldr	r2, [pc, #116]	; (8002c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be8:	d10b      	bne.n	8002c02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b80      	cmp	r3, #128	; 0x80
 8002bee:	d919      	bls.n	8002c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2ba0      	cmp	r3, #160	; 0xa0
 8002bf4:	d902      	bls.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	e013      	b.n	8002c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	e010      	b.n	8002c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b80      	cmp	r3, #128	; 0x80
 8002c06:	d902      	bls.n	8002c0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c08:	2303      	movs	r3, #3
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	e00a      	b.n	8002c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b80      	cmp	r3, #128	; 0x80
 8002c12:	d102      	bne.n	8002c1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c14:	2302      	movs	r3, #2
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	e004      	b.n	8002c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b70      	cmp	r3, #112	; 0x70
 8002c1e:	d101      	bne.n	8002c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c20:	2301      	movs	r3, #1
 8002c22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f023 0207 	bic.w	r2, r3, #7
 8002c2c:	4909      	ldr	r1, [pc, #36]	; (8002c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c34:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d001      	beq.n	8002c46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40022000 	.word	0x40022000

08002c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c60:	2300      	movs	r3, #0
 8002c62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c64:	2300      	movs	r3, #0
 8002c66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d041      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c7c:	d02a      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c82:	d824      	bhi.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c88:	d008      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c8e:	d81e      	bhi.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c98:	d010      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c9a:	e018      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c9c:	4b86      	ldr	r3, [pc, #536]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4a85      	ldr	r2, [pc, #532]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ca8:	e015      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3304      	adds	r3, #4
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fabb 	bl	800322c <RCCEx_PLLSAI1_Config>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cba:	e00c      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3320      	adds	r3, #32
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fba6 	bl	8003414 <RCCEx_PLLSAI2_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ccc:	e003      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	74fb      	strb	r3, [r7, #19]
      break;
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002cd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cd6:	7cfb      	ldrb	r3, [r7, #19]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10b      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cdc:	4b76      	ldr	r3, [pc, #472]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cea:	4973      	ldr	r1, [pc, #460]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cf2:	e001      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d041      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d0c:	d02a      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d12:	d824      	bhi.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d18:	d008      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d1e:	d81e      	bhi.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00a      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d28:	d010      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d2a:	e018      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d2c:	4b62      	ldr	r3, [pc, #392]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4a61      	ldr	r2, [pc, #388]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d36:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d38:	e015      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 fa73 	bl	800322c <RCCEx_PLLSAI1_Config>
 8002d46:	4603      	mov	r3, r0
 8002d48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d4a:	e00c      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3320      	adds	r3, #32
 8002d50:	2100      	movs	r1, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fb5e 	bl	8003414 <RCCEx_PLLSAI2_Config>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d5c:	e003      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	74fb      	strb	r3, [r7, #19]
      break;
 8002d62:	e000      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d66:	7cfb      	ldrb	r3, [r7, #19]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10b      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d6c:	4b52      	ldr	r3, [pc, #328]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d7a:	494f      	ldr	r1, [pc, #316]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d82:	e001      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d84:	7cfb      	ldrb	r3, [r7, #19]
 8002d86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a0 	beq.w	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d9a:	4b47      	ldr	r3, [pc, #284]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002daa:	2300      	movs	r3, #0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00d      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db0:	4b41      	ldr	r3, [pc, #260]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db4:	4a40      	ldr	r2, [pc, #256]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dba:	6593      	str	r3, [r2, #88]	; 0x58
 8002dbc:	4b3e      	ldr	r3, [pc, #248]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dcc:	4b3b      	ldr	r3, [pc, #236]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a3a      	ldr	r2, [pc, #232]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dd8:	f7fe f8ae 	bl	8000f38 <HAL_GetTick>
 8002ddc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dde:	e009      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de0:	f7fe f8aa 	bl	8000f38 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d902      	bls.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	74fb      	strb	r3, [r7, #19]
        break;
 8002df2:	e005      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002df4:	4b31      	ldr	r3, [pc, #196]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0ef      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d15c      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e06:	4b2c      	ldr	r3, [pc, #176]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01f      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d019      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e24:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e30:	4b21      	ldr	r3, [pc, #132]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e36:	4a20      	ldr	r2, [pc, #128]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e40:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e46:	4a1c      	ldr	r2, [pc, #112]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e50:	4a19      	ldr	r2, [pc, #100]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d016      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7fe f869 	bl	8000f38 <HAL_GetTick>
 8002e66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e68:	e00b      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fe f865 	bl	8000f38 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d902      	bls.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	74fb      	strb	r3, [r7, #19]
            break;
 8002e80:	e006      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0ec      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e96:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea6:	4904      	ldr	r1, [pc, #16]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002eae:	e009      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	74bb      	strb	r3, [r7, #18]
 8002eb4:	e006      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec0:	7cfb      	ldrb	r3, [r7, #19]
 8002ec2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec4:	7c7b      	ldrb	r3, [r7, #17]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d105      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eca:	4b9e      	ldr	r3, [pc, #632]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	4a9d      	ldr	r2, [pc, #628]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ee2:	4b98      	ldr	r3, [pc, #608]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	f023 0203 	bic.w	r2, r3, #3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	4994      	ldr	r1, [pc, #592]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f04:	4b8f      	ldr	r3, [pc, #572]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0a:	f023 020c 	bic.w	r2, r3, #12
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f12:	498c      	ldr	r1, [pc, #560]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f26:	4b87      	ldr	r3, [pc, #540]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	4983      	ldr	r1, [pc, #524]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f48:	4b7e      	ldr	r3, [pc, #504]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	497b      	ldr	r1, [pc, #492]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f6a:	4b76      	ldr	r3, [pc, #472]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f78:	4972      	ldr	r1, [pc, #456]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f8c:	4b6d      	ldr	r3, [pc, #436]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9a:	496a      	ldr	r1, [pc, #424]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fae:	4b65      	ldr	r3, [pc, #404]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbc:	4961      	ldr	r1, [pc, #388]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fd0:	4b5c      	ldr	r3, [pc, #368]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fde:	4959      	ldr	r1, [pc, #356]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ff2:	4b54      	ldr	r3, [pc, #336]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003000:	4950      	ldr	r1, [pc, #320]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003014:	4b4b      	ldr	r3, [pc, #300]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003022:	4948      	ldr	r1, [pc, #288]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003036:	4b43      	ldr	r3, [pc, #268]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	493f      	ldr	r1, [pc, #252]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d028      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003058:	4b3a      	ldr	r3, [pc, #232]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003066:	4937      	ldr	r1, [pc, #220]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003072:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003076:	d106      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003078:	4b32      	ldr	r3, [pc, #200]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4a31      	ldr	r2, [pc, #196]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003082:	60d3      	str	r3, [r2, #12]
 8003084:	e011      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800308a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800308e:	d10c      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	2101      	movs	r1, #1
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f8c8 	bl	800322c <RCCEx_PLLSAI1_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80030a6:	7cfb      	ldrb	r3, [r7, #19]
 80030a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d028      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030b6:	4b23      	ldr	r3, [pc, #140]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c4:	491f      	ldr	r1, [pc, #124]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030d4:	d106      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d6:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	4a1a      	ldr	r2, [pc, #104]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030e0:	60d3      	str	r3, [r2, #12]
 80030e2:	e011      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030ec:	d10c      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3304      	adds	r3, #4
 80030f2:	2101      	movs	r1, #1
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 f899 	bl	800322c <RCCEx_PLLSAI1_Config>
 80030fa:	4603      	mov	r3, r0
 80030fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030fe:	7cfb      	ldrb	r3, [r7, #19]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003104:	7cfb      	ldrb	r3, [r7, #19]
 8003106:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d02b      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003122:	4908      	ldr	r1, [pc, #32]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003132:	d109      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003134:	4b03      	ldr	r3, [pc, #12]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4a02      	ldr	r2, [pc, #8]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800313e:	60d3      	str	r3, [r2, #12]
 8003140:	e014      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003142:	bf00      	nop
 8003144:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003150:	d10c      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3304      	adds	r3, #4
 8003156:	2101      	movs	r1, #1
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f867 	bl	800322c <RCCEx_PLLSAI1_Config>
 800315e:	4603      	mov	r3, r0
 8003160:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003162:	7cfb      	ldrb	r3, [r7, #19]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d02f      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003178:	4b2b      	ldr	r3, [pc, #172]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003186:	4928      	ldr	r1, [pc, #160]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003196:	d10d      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3304      	adds	r3, #4
 800319c:	2102      	movs	r1, #2
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 f844 	bl	800322c <RCCEx_PLLSAI1_Config>
 80031a4:	4603      	mov	r3, r0
 80031a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031a8:	7cfb      	ldrb	r3, [r7, #19]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d014      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031ae:	7cfb      	ldrb	r3, [r7, #19]
 80031b0:	74bb      	strb	r3, [r7, #18]
 80031b2:	e011      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3320      	adds	r3, #32
 80031c2:	2102      	movs	r1, #2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 f925 	bl	8003414 <RCCEx_PLLSAI2_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ce:	7cfb      	ldrb	r3, [r7, #19]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031e4:	4b10      	ldr	r3, [pc, #64]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031f2:	490d      	ldr	r1, [pc, #52]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003206:	4b08      	ldr	r3, [pc, #32]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003216:	4904      	ldr	r1, [pc, #16]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800321e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40021000 	.word	0x40021000

0800322c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800323a:	4b75      	ldr	r3, [pc, #468]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d018      	beq.n	8003278 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003246:	4b72      	ldr	r3, [pc, #456]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f003 0203 	and.w	r2, r3, #3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d10d      	bne.n	8003272 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
       ||
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800325e:	4b6c      	ldr	r3, [pc, #432]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	091b      	lsrs	r3, r3, #4
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
       ||
 800326e:	429a      	cmp	r2, r3
 8003270:	d047      	beq.n	8003302 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
 8003276:	e044      	b.n	8003302 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b03      	cmp	r3, #3
 800327e:	d018      	beq.n	80032b2 <RCCEx_PLLSAI1_Config+0x86>
 8003280:	2b03      	cmp	r3, #3
 8003282:	d825      	bhi.n	80032d0 <RCCEx_PLLSAI1_Config+0xa4>
 8003284:	2b01      	cmp	r3, #1
 8003286:	d002      	beq.n	800328e <RCCEx_PLLSAI1_Config+0x62>
 8003288:	2b02      	cmp	r3, #2
 800328a:	d009      	beq.n	80032a0 <RCCEx_PLLSAI1_Config+0x74>
 800328c:	e020      	b.n	80032d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800328e:	4b60      	ldr	r3, [pc, #384]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d11d      	bne.n	80032d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800329e:	e01a      	b.n	80032d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032a0:	4b5b      	ldr	r3, [pc, #364]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d116      	bne.n	80032da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032b0:	e013      	b.n	80032da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032b2:	4b57      	ldr	r3, [pc, #348]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10f      	bne.n	80032de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032be:	4b54      	ldr	r3, [pc, #336]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032ce:	e006      	b.n	80032de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
      break;
 80032d4:	e004      	b.n	80032e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032d6:	bf00      	nop
 80032d8:	e002      	b.n	80032e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032da:	bf00      	nop
 80032dc:	e000      	b.n	80032e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032de:	bf00      	nop
    }

    if(status == HAL_OK)
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10d      	bne.n	8003302 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032e6:	4b4a      	ldr	r3, [pc, #296]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6819      	ldr	r1, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	430b      	orrs	r3, r1
 80032fc:	4944      	ldr	r1, [pc, #272]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d17d      	bne.n	8003404 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003308:	4b41      	ldr	r3, [pc, #260]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a40      	ldr	r2, [pc, #256]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 800330e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003314:	f7fd fe10 	bl	8000f38 <HAL_GetTick>
 8003318:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800331a:	e009      	b.n	8003330 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800331c:	f7fd fe0c 	bl	8000f38 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d902      	bls.n	8003330 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	73fb      	strb	r3, [r7, #15]
        break;
 800332e:	e005      	b.n	800333c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003330:	4b37      	ldr	r3, [pc, #220]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1ef      	bne.n	800331c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d160      	bne.n	8003404 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d111      	bne.n	800336c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003348:	4b31      	ldr	r3, [pc, #196]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6892      	ldr	r2, [r2, #8]
 8003358:	0211      	lsls	r1, r2, #8
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68d2      	ldr	r2, [r2, #12]
 800335e:	0912      	lsrs	r2, r2, #4
 8003360:	0452      	lsls	r2, r2, #17
 8003362:	430a      	orrs	r2, r1
 8003364:	492a      	ldr	r1, [pc, #168]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003366:	4313      	orrs	r3, r2
 8003368:	610b      	str	r3, [r1, #16]
 800336a:	e027      	b.n	80033bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d112      	bne.n	8003398 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003372:	4b27      	ldr	r3, [pc, #156]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800337a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6892      	ldr	r2, [r2, #8]
 8003382:	0211      	lsls	r1, r2, #8
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6912      	ldr	r2, [r2, #16]
 8003388:	0852      	lsrs	r2, r2, #1
 800338a:	3a01      	subs	r2, #1
 800338c:	0552      	lsls	r2, r2, #21
 800338e:	430a      	orrs	r2, r1
 8003390:	491f      	ldr	r1, [pc, #124]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003392:	4313      	orrs	r3, r2
 8003394:	610b      	str	r3, [r1, #16]
 8003396:	e011      	b.n	80033bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003398:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6892      	ldr	r2, [r2, #8]
 80033a8:	0211      	lsls	r1, r2, #8
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6952      	ldr	r2, [r2, #20]
 80033ae:	0852      	lsrs	r2, r2, #1
 80033b0:	3a01      	subs	r2, #1
 80033b2:	0652      	lsls	r2, r2, #25
 80033b4:	430a      	orrs	r2, r1
 80033b6:	4916      	ldr	r1, [pc, #88]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80033bc:	4b14      	ldr	r3, [pc, #80]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a13      	ldr	r2, [pc, #76]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7fd fdb6 	bl	8000f38 <HAL_GetTick>
 80033cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033ce:	e009      	b.n	80033e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033d0:	f7fd fdb2 	bl	8000f38 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d902      	bls.n	80033e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	73fb      	strb	r3, [r7, #15]
          break;
 80033e2:	e005      	b.n	80033f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033e4:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0ef      	beq.n	80033d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	4904      	ldr	r1, [pc, #16]	; (8003410 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003400:	4313      	orrs	r3, r2
 8003402:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003404:	7bfb      	ldrb	r3, [r7, #15]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000

08003414 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003422:	4b6a      	ldr	r3, [pc, #424]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d018      	beq.n	8003460 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800342e:	4b67      	ldr	r3, [pc, #412]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0203 	and.w	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d10d      	bne.n	800345a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
       ||
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003446:	4b61      	ldr	r3, [pc, #388]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
       ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d047      	beq.n	80034ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
 800345e:	e044      	b.n	80034ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b03      	cmp	r3, #3
 8003466:	d018      	beq.n	800349a <RCCEx_PLLSAI2_Config+0x86>
 8003468:	2b03      	cmp	r3, #3
 800346a:	d825      	bhi.n	80034b8 <RCCEx_PLLSAI2_Config+0xa4>
 800346c:	2b01      	cmp	r3, #1
 800346e:	d002      	beq.n	8003476 <RCCEx_PLLSAI2_Config+0x62>
 8003470:	2b02      	cmp	r3, #2
 8003472:	d009      	beq.n	8003488 <RCCEx_PLLSAI2_Config+0x74>
 8003474:	e020      	b.n	80034b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003476:	4b55      	ldr	r3, [pc, #340]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d11d      	bne.n	80034be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003486:	e01a      	b.n	80034be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003488:	4b50      	ldr	r3, [pc, #320]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003490:	2b00      	cmp	r3, #0
 8003492:	d116      	bne.n	80034c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003498:	e013      	b.n	80034c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800349a:	4b4c      	ldr	r3, [pc, #304]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10f      	bne.n	80034c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034a6:	4b49      	ldr	r3, [pc, #292]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034b6:	e006      	b.n	80034c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
      break;
 80034bc:	e004      	b.n	80034c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034be:	bf00      	nop
 80034c0:	e002      	b.n	80034c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10d      	bne.n	80034ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034ce:	4b3f      	ldr	r3, [pc, #252]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	430b      	orrs	r3, r1
 80034e4:	4939      	ldr	r1, [pc, #228]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d167      	bne.n	80035c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034f0:	4b36      	ldr	r3, [pc, #216]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a35      	ldr	r2, [pc, #212]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034fc:	f7fd fd1c 	bl	8000f38 <HAL_GetTick>
 8003500:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003502:	e009      	b.n	8003518 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003504:	f7fd fd18 	bl	8000f38 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d902      	bls.n	8003518 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	73fb      	strb	r3, [r7, #15]
        break;
 8003516:	e005      	b.n	8003524 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003518:	4b2c      	ldr	r3, [pc, #176]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1ef      	bne.n	8003504 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d14a      	bne.n	80035c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d111      	bne.n	8003554 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003530:	4b26      	ldr	r3, [pc, #152]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6892      	ldr	r2, [r2, #8]
 8003540:	0211      	lsls	r1, r2, #8
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68d2      	ldr	r2, [r2, #12]
 8003546:	0912      	lsrs	r2, r2, #4
 8003548:	0452      	lsls	r2, r2, #17
 800354a:	430a      	orrs	r2, r1
 800354c:	491f      	ldr	r1, [pc, #124]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800354e:	4313      	orrs	r3, r2
 8003550:	614b      	str	r3, [r1, #20]
 8003552:	e011      	b.n	8003578 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003554:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800355c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6892      	ldr	r2, [r2, #8]
 8003564:	0211      	lsls	r1, r2, #8
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6912      	ldr	r2, [r2, #16]
 800356a:	0852      	lsrs	r2, r2, #1
 800356c:	3a01      	subs	r2, #1
 800356e:	0652      	lsls	r2, r2, #25
 8003570:	430a      	orrs	r2, r1
 8003572:	4916      	ldr	r1, [pc, #88]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003574:	4313      	orrs	r3, r2
 8003576:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003578:	4b14      	ldr	r3, [pc, #80]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a13      	ldr	r2, [pc, #76]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800357e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003582:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fd fcd8 	bl	8000f38 <HAL_GetTick>
 8003588:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800358a:	e009      	b.n	80035a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800358c:	f7fd fcd4 	bl	8000f38 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d902      	bls.n	80035a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	73fb      	strb	r3, [r7, #15]
          break;
 800359e:	e005      	b.n	80035ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035a0:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0ef      	beq.n	800358c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	4904      	ldr	r1, [pc, #16]	; (80035cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000

080035d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e049      	b.n	8003676 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fd fa40 	bl	8000a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3304      	adds	r3, #4
 800360c:	4619      	mov	r1, r3
 800360e:	4610      	mov	r0, r2
 8003610:	f000 fa9a 	bl	8003b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b01      	cmp	r3, #1
 8003692:	d001      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e04f      	b.n	8003738 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a23      	ldr	r2, [pc, #140]	; (8003744 <HAL_TIM_Base_Start_IT+0xc4>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01d      	beq.n	80036f6 <HAL_TIM_Base_Start_IT+0x76>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c2:	d018      	beq.n	80036f6 <HAL_TIM_Base_Start_IT+0x76>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <HAL_TIM_Base_Start_IT+0xc8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_TIM_Base_Start_IT+0x76>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1e      	ldr	r2, [pc, #120]	; (800374c <HAL_TIM_Base_Start_IT+0xcc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00e      	beq.n	80036f6 <HAL_TIM_Base_Start_IT+0x76>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a1c      	ldr	r2, [pc, #112]	; (8003750 <HAL_TIM_Base_Start_IT+0xd0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d009      	beq.n	80036f6 <HAL_TIM_Base_Start_IT+0x76>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1b      	ldr	r2, [pc, #108]	; (8003754 <HAL_TIM_Base_Start_IT+0xd4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d004      	beq.n	80036f6 <HAL_TIM_Base_Start_IT+0x76>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a19      	ldr	r2, [pc, #100]	; (8003758 <HAL_TIM_Base_Start_IT+0xd8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d115      	bne.n	8003722 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	4b17      	ldr	r3, [pc, #92]	; (800375c <HAL_TIM_Base_Start_IT+0xdc>)
 80036fe:	4013      	ands	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b06      	cmp	r3, #6
 8003706:	d015      	beq.n	8003734 <HAL_TIM_Base_Start_IT+0xb4>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370e:	d011      	beq.n	8003734 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003720:	e008      	b.n	8003734 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0201 	orr.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	e000      	b.n	8003736 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003734:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	40012c00 	.word	0x40012c00
 8003748:	40000400 	.word	0x40000400
 800374c:	40000800 	.word	0x40000800
 8003750:	40000c00 	.word	0x40000c00
 8003754:	40013400 	.word	0x40013400
 8003758:	40014000 	.word	0x40014000
 800375c:	00010007 	.word	0x00010007

08003760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d020      	beq.n	80037c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01b      	beq.n	80037c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0202 	mvn.w	r2, #2
 8003794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f9ad 	bl	8003b0a <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f99f 	bl	8003af6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f9b0 	bl	8003b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d020      	beq.n	8003810 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01b      	beq.n	8003810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0204 	mvn.w	r2, #4
 80037e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2202      	movs	r2, #2
 80037e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f987 	bl	8003b0a <HAL_TIM_IC_CaptureCallback>
 80037fc:	e005      	b.n	800380a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f979 	bl	8003af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f98a 	bl	8003b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d020      	beq.n	800385c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01b      	beq.n	800385c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0208 	mvn.w	r2, #8
 800382c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2204      	movs	r2, #4
 8003832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f961 	bl	8003b0a <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f953 	bl	8003af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f964 	bl	8003b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	2b00      	cmp	r3, #0
 8003864:	d020      	beq.n	80038a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01b      	beq.n	80038a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0210 	mvn.w	r2, #16
 8003878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2208      	movs	r2, #8
 800387e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f93b 	bl	8003b0a <HAL_TIM_IC_CaptureCallback>
 8003894:	e005      	b.n	80038a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f92d 	bl	8003af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f93e 	bl	8003b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00c      	beq.n	80038cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d007      	beq.n	80038cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0201 	mvn.w	r2, #1
 80038c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd f82e 	bl	8000928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00c      	beq.n	80038f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d007      	beq.n	80038f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 faf2 	bl	8003ed4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00c      	beq.n	8003914 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003900:	2b00      	cmp	r3, #0
 8003902:	d007      	beq.n	8003914 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800390c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 faea 	bl	8003ee8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00c      	beq.n	8003938 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	d007      	beq.n	8003938 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f8fd 	bl	8003b32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00c      	beq.n	800395c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d007      	beq.n	800395c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0220 	mvn.w	r2, #32
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fab2 	bl	8003ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800395c:	bf00      	nop
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_TIM_ConfigClockSource+0x1c>
 800397c:	2302      	movs	r3, #2
 800397e:	e0b6      	b.n	8003aee <HAL_TIM_ConfigClockSource+0x18a>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039bc:	d03e      	beq.n	8003a3c <HAL_TIM_ConfigClockSource+0xd8>
 80039be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c2:	f200 8087 	bhi.w	8003ad4 <HAL_TIM_ConfigClockSource+0x170>
 80039c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ca:	f000 8086 	beq.w	8003ada <HAL_TIM_ConfigClockSource+0x176>
 80039ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d2:	d87f      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x170>
 80039d4:	2b70      	cmp	r3, #112	; 0x70
 80039d6:	d01a      	beq.n	8003a0e <HAL_TIM_ConfigClockSource+0xaa>
 80039d8:	2b70      	cmp	r3, #112	; 0x70
 80039da:	d87b      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x170>
 80039dc:	2b60      	cmp	r3, #96	; 0x60
 80039de:	d050      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0x11e>
 80039e0:	2b60      	cmp	r3, #96	; 0x60
 80039e2:	d877      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x170>
 80039e4:	2b50      	cmp	r3, #80	; 0x50
 80039e6:	d03c      	beq.n	8003a62 <HAL_TIM_ConfigClockSource+0xfe>
 80039e8:	2b50      	cmp	r3, #80	; 0x50
 80039ea:	d873      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x170>
 80039ec:	2b40      	cmp	r3, #64	; 0x40
 80039ee:	d058      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x13e>
 80039f0:	2b40      	cmp	r3, #64	; 0x40
 80039f2:	d86f      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x170>
 80039f4:	2b30      	cmp	r3, #48	; 0x30
 80039f6:	d064      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x15e>
 80039f8:	2b30      	cmp	r3, #48	; 0x30
 80039fa:	d86b      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x170>
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d060      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x15e>
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d867      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x170>
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d05c      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x15e>
 8003a08:	2b10      	cmp	r3, #16
 8003a0a:	d05a      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x15e>
 8003a0c:	e062      	b.n	8003ad4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a1e:	f000 f9a7 	bl	8003d70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	609a      	str	r2, [r3, #8]
      break;
 8003a3a:	e04f      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a4c:	f000 f990 	bl	8003d70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a5e:	609a      	str	r2, [r3, #8]
      break;
 8003a60:	e03c      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f000 f904 	bl	8003c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2150      	movs	r1, #80	; 0x50
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f95d 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003a80:	e02c      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f000 f923 	bl	8003cda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2160      	movs	r1, #96	; 0x60
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f94d 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003aa0:	e01c      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f000 f8e4 	bl	8003c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2140      	movs	r1, #64	; 0x40
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 f93d 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003ac0:	e00c      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4619      	mov	r1, r3
 8003acc:	4610      	mov	r0, r2
 8003ace:	f000 f934 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003ad2:	e003      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad8:	e000      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a40      	ldr	r2, [pc, #256]	; (8003c5c <TIM_Base_SetConfig+0x114>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d013      	beq.n	8003b88 <TIM_Base_SetConfig+0x40>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b66:	d00f      	beq.n	8003b88 <TIM_Base_SetConfig+0x40>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a3d      	ldr	r2, [pc, #244]	; (8003c60 <TIM_Base_SetConfig+0x118>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00b      	beq.n	8003b88 <TIM_Base_SetConfig+0x40>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a3c      	ldr	r2, [pc, #240]	; (8003c64 <TIM_Base_SetConfig+0x11c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d007      	beq.n	8003b88 <TIM_Base_SetConfig+0x40>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a3b      	ldr	r2, [pc, #236]	; (8003c68 <TIM_Base_SetConfig+0x120>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d003      	beq.n	8003b88 <TIM_Base_SetConfig+0x40>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a3a      	ldr	r2, [pc, #232]	; (8003c6c <TIM_Base_SetConfig+0x124>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d108      	bne.n	8003b9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a2f      	ldr	r2, [pc, #188]	; (8003c5c <TIM_Base_SetConfig+0x114>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d01f      	beq.n	8003be2 <TIM_Base_SetConfig+0x9a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba8:	d01b      	beq.n	8003be2 <TIM_Base_SetConfig+0x9a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a2c      	ldr	r2, [pc, #176]	; (8003c60 <TIM_Base_SetConfig+0x118>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d017      	beq.n	8003be2 <TIM_Base_SetConfig+0x9a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a2b      	ldr	r2, [pc, #172]	; (8003c64 <TIM_Base_SetConfig+0x11c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d013      	beq.n	8003be2 <TIM_Base_SetConfig+0x9a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a2a      	ldr	r2, [pc, #168]	; (8003c68 <TIM_Base_SetConfig+0x120>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00f      	beq.n	8003be2 <TIM_Base_SetConfig+0x9a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a29      	ldr	r2, [pc, #164]	; (8003c6c <TIM_Base_SetConfig+0x124>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00b      	beq.n	8003be2 <TIM_Base_SetConfig+0x9a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a28      	ldr	r2, [pc, #160]	; (8003c70 <TIM_Base_SetConfig+0x128>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d007      	beq.n	8003be2 <TIM_Base_SetConfig+0x9a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a27      	ldr	r2, [pc, #156]	; (8003c74 <TIM_Base_SetConfig+0x12c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d003      	beq.n	8003be2 <TIM_Base_SetConfig+0x9a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a26      	ldr	r2, [pc, #152]	; (8003c78 <TIM_Base_SetConfig+0x130>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d108      	bne.n	8003bf4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a10      	ldr	r2, [pc, #64]	; (8003c5c <TIM_Base_SetConfig+0x114>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00f      	beq.n	8003c40 <TIM_Base_SetConfig+0xf8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a12      	ldr	r2, [pc, #72]	; (8003c6c <TIM_Base_SetConfig+0x124>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00b      	beq.n	8003c40 <TIM_Base_SetConfig+0xf8>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a11      	ldr	r2, [pc, #68]	; (8003c70 <TIM_Base_SetConfig+0x128>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d007      	beq.n	8003c40 <TIM_Base_SetConfig+0xf8>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a10      	ldr	r2, [pc, #64]	; (8003c74 <TIM_Base_SetConfig+0x12c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d003      	beq.n	8003c40 <TIM_Base_SetConfig+0xf8>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a0f      	ldr	r2, [pc, #60]	; (8003c78 <TIM_Base_SetConfig+0x130>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d103      	bne.n	8003c48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	615a      	str	r2, [r3, #20]
}
 8003c4e:	bf00      	nop
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40012c00 	.word	0x40012c00
 8003c60:	40000400 	.word	0x40000400
 8003c64:	40000800 	.word	0x40000800
 8003c68:	40000c00 	.word	0x40000c00
 8003c6c:	40013400 	.word	0x40013400
 8003c70:	40014000 	.word	0x40014000
 8003c74:	40014400 	.word	0x40014400
 8003c78:	40014800 	.word	0x40014800

08003c7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f023 0201 	bic.w	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f023 030a 	bic.w	r3, r3, #10
 8003cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	621a      	str	r2, [r3, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b087      	sub	sp, #28
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f023 0210 	bic.w	r2, r3, #16
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	031b      	lsls	r3, r3, #12
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f043 0307 	orr.w	r3, r3, #7
 8003d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	021a      	lsls	r2, r3, #8
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	609a      	str	r2, [r3, #8]
}
 8003da4:	bf00      	nop
 8003da6:	371c      	adds	r7, #28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e068      	b.n	8003e9a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a2e      	ldr	r2, [pc, #184]	; (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d004      	beq.n	8003dfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a2d      	ldr	r2, [pc, #180]	; (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d108      	bne.n	8003e0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1e      	ldr	r2, [pc, #120]	; (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d01d      	beq.n	8003e6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3a:	d018      	beq.n	8003e6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1b      	ldr	r2, [pc, #108]	; (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a1a      	ldr	r2, [pc, #104]	; (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00e      	beq.n	8003e6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a18      	ldr	r2, [pc, #96]	; (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d009      	beq.n	8003e6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a13      	ldr	r2, [pc, #76]	; (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d004      	beq.n	8003e6e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a14      	ldr	r2, [pc, #80]	; (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d10c      	bne.n	8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40012c00 	.word	0x40012c00
 8003eac:	40013400 	.word	0x40013400
 8003eb0:	40000400 	.word	0x40000400
 8003eb4:	40000800 	.word	0x40000800
 8003eb8:	40000c00 	.word	0x40000c00
 8003ebc:	40014000 	.word	0x40014000

08003ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e040      	b.n	8003f90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fc fdd0 	bl	8000ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2224      	movs	r2, #36	; 0x24
 8003f28:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fb6a 	bl	800461c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f8af 	bl	80040ac <UART_SetConfig>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e01b      	b.n	8003f90 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fbe9 	bl	8004760 <UART_CheckIdleState>
 8003f8e:	4603      	mov	r3, r0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	; 0x28
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d178      	bne.n	80040a2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_UART_Transmit+0x24>
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e071      	b.n	80040a4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2221      	movs	r2, #33	; 0x21
 8003fcc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fce:	f7fc ffb3 	bl	8000f38 <HAL_GetTick>
 8003fd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	88fa      	ldrh	r2, [r7, #6]
 8003fd8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	88fa      	ldrh	r2, [r7, #6]
 8003fe0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fec:	d108      	bne.n	8004000 <HAL_UART_Transmit+0x68>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d104      	bne.n	8004000 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	e003      	b.n	8004008 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004004:	2300      	movs	r3, #0
 8004006:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004008:	e030      	b.n	800406c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2200      	movs	r2, #0
 8004012:	2180      	movs	r1, #128	; 0x80
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 fc4b 	bl	80048b0 <UART_WaitOnFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d004      	beq.n	800402a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e03c      	b.n	80040a4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10b      	bne.n	8004048 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	881a      	ldrh	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800403c:	b292      	uxth	r2, r2
 800403e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	3302      	adds	r3, #2
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	e008      	b.n	800405a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	781a      	ldrb	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	b292      	uxth	r2, r2
 8004052:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	3301      	adds	r3, #1
 8004058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004060:	b29b      	uxth	r3, r3
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004072:	b29b      	uxth	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1c8      	bne.n	800400a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2200      	movs	r2, #0
 8004080:	2140      	movs	r1, #64	; 0x40
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 fc14 	bl	80048b0 <UART_WaitOnFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d004      	beq.n	8004098 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e005      	b.n	80040a4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2220      	movs	r2, #32
 800409c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	e000      	b.n	80040a4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80040a2:	2302      	movs	r3, #2
  }
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3720      	adds	r7, #32
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040b0:	b08a      	sub	sp, #40	; 0x28
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4ba4      	ldr	r3, [pc, #656]	; (800436c <UART_SetConfig+0x2c0>)
 80040dc:	4013      	ands	r3, r2
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a99      	ldr	r2, [pc, #612]	; (8004370 <UART_SetConfig+0x2c4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d004      	beq.n	8004118 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004114:	4313      	orrs	r3, r2
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004128:	430a      	orrs	r2, r1
 800412a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a90      	ldr	r2, [pc, #576]	; (8004374 <UART_SetConfig+0x2c8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d126      	bne.n	8004184 <UART_SetConfig+0xd8>
 8004136:	4b90      	ldr	r3, [pc, #576]	; (8004378 <UART_SetConfig+0x2cc>)
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413c:	f003 0303 	and.w	r3, r3, #3
 8004140:	2b03      	cmp	r3, #3
 8004142:	d81b      	bhi.n	800417c <UART_SetConfig+0xd0>
 8004144:	a201      	add	r2, pc, #4	; (adr r2, 800414c <UART_SetConfig+0xa0>)
 8004146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414a:	bf00      	nop
 800414c:	0800415d 	.word	0x0800415d
 8004150:	0800416d 	.word	0x0800416d
 8004154:	08004165 	.word	0x08004165
 8004158:	08004175 	.word	0x08004175
 800415c:	2301      	movs	r3, #1
 800415e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004162:	e116      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004164:	2302      	movs	r3, #2
 8004166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800416a:	e112      	b.n	8004392 <UART_SetConfig+0x2e6>
 800416c:	2304      	movs	r3, #4
 800416e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004172:	e10e      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004174:	2308      	movs	r3, #8
 8004176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800417a:	e10a      	b.n	8004392 <UART_SetConfig+0x2e6>
 800417c:	2310      	movs	r3, #16
 800417e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004182:	e106      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a7c      	ldr	r2, [pc, #496]	; (800437c <UART_SetConfig+0x2d0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d138      	bne.n	8004200 <UART_SetConfig+0x154>
 800418e:	4b7a      	ldr	r3, [pc, #488]	; (8004378 <UART_SetConfig+0x2cc>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004194:	f003 030c 	and.w	r3, r3, #12
 8004198:	2b0c      	cmp	r3, #12
 800419a:	d82d      	bhi.n	80041f8 <UART_SetConfig+0x14c>
 800419c:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <UART_SetConfig+0xf8>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	080041d9 	.word	0x080041d9
 80041a8:	080041f9 	.word	0x080041f9
 80041ac:	080041f9 	.word	0x080041f9
 80041b0:	080041f9 	.word	0x080041f9
 80041b4:	080041e9 	.word	0x080041e9
 80041b8:	080041f9 	.word	0x080041f9
 80041bc:	080041f9 	.word	0x080041f9
 80041c0:	080041f9 	.word	0x080041f9
 80041c4:	080041e1 	.word	0x080041e1
 80041c8:	080041f9 	.word	0x080041f9
 80041cc:	080041f9 	.word	0x080041f9
 80041d0:	080041f9 	.word	0x080041f9
 80041d4:	080041f1 	.word	0x080041f1
 80041d8:	2300      	movs	r3, #0
 80041da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041de:	e0d8      	b.n	8004392 <UART_SetConfig+0x2e6>
 80041e0:	2302      	movs	r3, #2
 80041e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e6:	e0d4      	b.n	8004392 <UART_SetConfig+0x2e6>
 80041e8:	2304      	movs	r3, #4
 80041ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ee:	e0d0      	b.n	8004392 <UART_SetConfig+0x2e6>
 80041f0:	2308      	movs	r3, #8
 80041f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f6:	e0cc      	b.n	8004392 <UART_SetConfig+0x2e6>
 80041f8:	2310      	movs	r3, #16
 80041fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041fe:	e0c8      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a5e      	ldr	r2, [pc, #376]	; (8004380 <UART_SetConfig+0x2d4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d125      	bne.n	8004256 <UART_SetConfig+0x1aa>
 800420a:	4b5b      	ldr	r3, [pc, #364]	; (8004378 <UART_SetConfig+0x2cc>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004214:	2b30      	cmp	r3, #48	; 0x30
 8004216:	d016      	beq.n	8004246 <UART_SetConfig+0x19a>
 8004218:	2b30      	cmp	r3, #48	; 0x30
 800421a:	d818      	bhi.n	800424e <UART_SetConfig+0x1a2>
 800421c:	2b20      	cmp	r3, #32
 800421e:	d00a      	beq.n	8004236 <UART_SetConfig+0x18a>
 8004220:	2b20      	cmp	r3, #32
 8004222:	d814      	bhi.n	800424e <UART_SetConfig+0x1a2>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <UART_SetConfig+0x182>
 8004228:	2b10      	cmp	r3, #16
 800422a:	d008      	beq.n	800423e <UART_SetConfig+0x192>
 800422c:	e00f      	b.n	800424e <UART_SetConfig+0x1a2>
 800422e:	2300      	movs	r3, #0
 8004230:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004234:	e0ad      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004236:	2302      	movs	r3, #2
 8004238:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800423c:	e0a9      	b.n	8004392 <UART_SetConfig+0x2e6>
 800423e:	2304      	movs	r3, #4
 8004240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004244:	e0a5      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004246:	2308      	movs	r3, #8
 8004248:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424c:	e0a1      	b.n	8004392 <UART_SetConfig+0x2e6>
 800424e:	2310      	movs	r3, #16
 8004250:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004254:	e09d      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a4a      	ldr	r2, [pc, #296]	; (8004384 <UART_SetConfig+0x2d8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d125      	bne.n	80042ac <UART_SetConfig+0x200>
 8004260:	4b45      	ldr	r3, [pc, #276]	; (8004378 <UART_SetConfig+0x2cc>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800426a:	2bc0      	cmp	r3, #192	; 0xc0
 800426c:	d016      	beq.n	800429c <UART_SetConfig+0x1f0>
 800426e:	2bc0      	cmp	r3, #192	; 0xc0
 8004270:	d818      	bhi.n	80042a4 <UART_SetConfig+0x1f8>
 8004272:	2b80      	cmp	r3, #128	; 0x80
 8004274:	d00a      	beq.n	800428c <UART_SetConfig+0x1e0>
 8004276:	2b80      	cmp	r3, #128	; 0x80
 8004278:	d814      	bhi.n	80042a4 <UART_SetConfig+0x1f8>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <UART_SetConfig+0x1d8>
 800427e:	2b40      	cmp	r3, #64	; 0x40
 8004280:	d008      	beq.n	8004294 <UART_SetConfig+0x1e8>
 8004282:	e00f      	b.n	80042a4 <UART_SetConfig+0x1f8>
 8004284:	2300      	movs	r3, #0
 8004286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428a:	e082      	b.n	8004392 <UART_SetConfig+0x2e6>
 800428c:	2302      	movs	r3, #2
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004292:	e07e      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004294:	2304      	movs	r3, #4
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429a:	e07a      	b.n	8004392 <UART_SetConfig+0x2e6>
 800429c:	2308      	movs	r3, #8
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a2:	e076      	b.n	8004392 <UART_SetConfig+0x2e6>
 80042a4:	2310      	movs	r3, #16
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042aa:	e072      	b.n	8004392 <UART_SetConfig+0x2e6>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a35      	ldr	r2, [pc, #212]	; (8004388 <UART_SetConfig+0x2dc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d12a      	bne.n	800430c <UART_SetConfig+0x260>
 80042b6:	4b30      	ldr	r3, [pc, #192]	; (8004378 <UART_SetConfig+0x2cc>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042c4:	d01a      	beq.n	80042fc <UART_SetConfig+0x250>
 80042c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ca:	d81b      	bhi.n	8004304 <UART_SetConfig+0x258>
 80042cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d0:	d00c      	beq.n	80042ec <UART_SetConfig+0x240>
 80042d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d6:	d815      	bhi.n	8004304 <UART_SetConfig+0x258>
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <UART_SetConfig+0x238>
 80042dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e0:	d008      	beq.n	80042f4 <UART_SetConfig+0x248>
 80042e2:	e00f      	b.n	8004304 <UART_SetConfig+0x258>
 80042e4:	2300      	movs	r3, #0
 80042e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ea:	e052      	b.n	8004392 <UART_SetConfig+0x2e6>
 80042ec:	2302      	movs	r3, #2
 80042ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f2:	e04e      	b.n	8004392 <UART_SetConfig+0x2e6>
 80042f4:	2304      	movs	r3, #4
 80042f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fa:	e04a      	b.n	8004392 <UART_SetConfig+0x2e6>
 80042fc:	2308      	movs	r3, #8
 80042fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004302:	e046      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004304:	2310      	movs	r3, #16
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430a:	e042      	b.n	8004392 <UART_SetConfig+0x2e6>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a17      	ldr	r2, [pc, #92]	; (8004370 <UART_SetConfig+0x2c4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d13a      	bne.n	800438c <UART_SetConfig+0x2e0>
 8004316:	4b18      	ldr	r3, [pc, #96]	; (8004378 <UART_SetConfig+0x2cc>)
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004320:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004324:	d01a      	beq.n	800435c <UART_SetConfig+0x2b0>
 8004326:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800432a:	d81b      	bhi.n	8004364 <UART_SetConfig+0x2b8>
 800432c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004330:	d00c      	beq.n	800434c <UART_SetConfig+0x2a0>
 8004332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004336:	d815      	bhi.n	8004364 <UART_SetConfig+0x2b8>
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <UART_SetConfig+0x298>
 800433c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004340:	d008      	beq.n	8004354 <UART_SetConfig+0x2a8>
 8004342:	e00f      	b.n	8004364 <UART_SetConfig+0x2b8>
 8004344:	2300      	movs	r3, #0
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434a:	e022      	b.n	8004392 <UART_SetConfig+0x2e6>
 800434c:	2302      	movs	r3, #2
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004352:	e01e      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004354:	2304      	movs	r3, #4
 8004356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435a:	e01a      	b.n	8004392 <UART_SetConfig+0x2e6>
 800435c:	2308      	movs	r3, #8
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004362:	e016      	b.n	8004392 <UART_SetConfig+0x2e6>
 8004364:	2310      	movs	r3, #16
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436a:	e012      	b.n	8004392 <UART_SetConfig+0x2e6>
 800436c:	efff69f3 	.word	0xefff69f3
 8004370:	40008000 	.word	0x40008000
 8004374:	40013800 	.word	0x40013800
 8004378:	40021000 	.word	0x40021000
 800437c:	40004400 	.word	0x40004400
 8004380:	40004800 	.word	0x40004800
 8004384:	40004c00 	.word	0x40004c00
 8004388:	40005000 	.word	0x40005000
 800438c:	2310      	movs	r3, #16
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a9f      	ldr	r2, [pc, #636]	; (8004614 <UART_SetConfig+0x568>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d17a      	bne.n	8004492 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800439c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d824      	bhi.n	80043ee <UART_SetConfig+0x342>
 80043a4:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <UART_SetConfig+0x300>)
 80043a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043aa:	bf00      	nop
 80043ac:	080043d1 	.word	0x080043d1
 80043b0:	080043ef 	.word	0x080043ef
 80043b4:	080043d9 	.word	0x080043d9
 80043b8:	080043ef 	.word	0x080043ef
 80043bc:	080043df 	.word	0x080043df
 80043c0:	080043ef 	.word	0x080043ef
 80043c4:	080043ef 	.word	0x080043ef
 80043c8:	080043ef 	.word	0x080043ef
 80043cc:	080043e7 	.word	0x080043e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d0:	f7fe fb84 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 80043d4:	61f8      	str	r0, [r7, #28]
        break;
 80043d6:	e010      	b.n	80043fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043d8:	4b8f      	ldr	r3, [pc, #572]	; (8004618 <UART_SetConfig+0x56c>)
 80043da:	61fb      	str	r3, [r7, #28]
        break;
 80043dc:	e00d      	b.n	80043fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043de:	f7fe fae5 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 80043e2:	61f8      	str	r0, [r7, #28]
        break;
 80043e4:	e009      	b.n	80043fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ea:	61fb      	str	r3, [r7, #28]
        break;
 80043ec:	e005      	b.n	80043fa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 80fb 	beq.w	80045f8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	4413      	add	r3, r2
 800440c:	69fa      	ldr	r2, [r7, #28]
 800440e:	429a      	cmp	r2, r3
 8004410:	d305      	bcc.n	800441e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004418:	69fa      	ldr	r2, [r7, #28]
 800441a:	429a      	cmp	r2, r3
 800441c:	d903      	bls.n	8004426 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004424:	e0e8      	b.n	80045f8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	2200      	movs	r2, #0
 800442a:	461c      	mov	r4, r3
 800442c:	4615      	mov	r5, r2
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	022b      	lsls	r3, r5, #8
 8004438:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800443c:	0222      	lsls	r2, r4, #8
 800443e:	68f9      	ldr	r1, [r7, #12]
 8004440:	6849      	ldr	r1, [r1, #4]
 8004442:	0849      	lsrs	r1, r1, #1
 8004444:	2000      	movs	r0, #0
 8004446:	4688      	mov	r8, r1
 8004448:	4681      	mov	r9, r0
 800444a:	eb12 0a08 	adds.w	sl, r2, r8
 800444e:	eb43 0b09 	adc.w	fp, r3, r9
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	603b      	str	r3, [r7, #0]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004460:	4650      	mov	r0, sl
 8004462:	4659      	mov	r1, fp
 8004464:	f7fb ff04 	bl	8000270 <__aeabi_uldivmod>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4613      	mov	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004476:	d308      	bcc.n	800448a <UART_SetConfig+0x3de>
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800447e:	d204      	bcs.n	800448a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	60da      	str	r2, [r3, #12]
 8004488:	e0b6      	b.n	80045f8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004490:	e0b2      	b.n	80045f8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800449a:	d15e      	bne.n	800455a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800449c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d828      	bhi.n	80044f6 <UART_SetConfig+0x44a>
 80044a4:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <UART_SetConfig+0x400>)
 80044a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044aa:	bf00      	nop
 80044ac:	080044d1 	.word	0x080044d1
 80044b0:	080044d9 	.word	0x080044d9
 80044b4:	080044e1 	.word	0x080044e1
 80044b8:	080044f7 	.word	0x080044f7
 80044bc:	080044e7 	.word	0x080044e7
 80044c0:	080044f7 	.word	0x080044f7
 80044c4:	080044f7 	.word	0x080044f7
 80044c8:	080044f7 	.word	0x080044f7
 80044cc:	080044ef 	.word	0x080044ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d0:	f7fe fb04 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 80044d4:	61f8      	str	r0, [r7, #28]
        break;
 80044d6:	e014      	b.n	8004502 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d8:	f7fe fb16 	bl	8002b08 <HAL_RCC_GetPCLK2Freq>
 80044dc:	61f8      	str	r0, [r7, #28]
        break;
 80044de:	e010      	b.n	8004502 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e0:	4b4d      	ldr	r3, [pc, #308]	; (8004618 <UART_SetConfig+0x56c>)
 80044e2:	61fb      	str	r3, [r7, #28]
        break;
 80044e4:	e00d      	b.n	8004502 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e6:	f7fe fa61 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 80044ea:	61f8      	str	r0, [r7, #28]
        break;
 80044ec:	e009      	b.n	8004502 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f2:	61fb      	str	r3, [r7, #28]
        break;
 80044f4:	e005      	b.n	8004502 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004500:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d077      	beq.n	80045f8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	005a      	lsls	r2, r3, #1
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	085b      	lsrs	r3, r3, #1
 8004512:	441a      	add	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b0f      	cmp	r3, #15
 8004522:	d916      	bls.n	8004552 <UART_SetConfig+0x4a6>
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452a:	d212      	bcs.n	8004552 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	b29b      	uxth	r3, r3
 8004530:	f023 030f 	bic.w	r3, r3, #15
 8004534:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	085b      	lsrs	r3, r3, #1
 800453a:	b29b      	uxth	r3, r3
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	b29a      	uxth	r2, r3
 8004542:	8afb      	ldrh	r3, [r7, #22]
 8004544:	4313      	orrs	r3, r2
 8004546:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	8afa      	ldrh	r2, [r7, #22]
 800454e:	60da      	str	r2, [r3, #12]
 8004550:	e052      	b.n	80045f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004558:	e04e      	b.n	80045f8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800455a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800455e:	2b08      	cmp	r3, #8
 8004560:	d827      	bhi.n	80045b2 <UART_SetConfig+0x506>
 8004562:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <UART_SetConfig+0x4bc>)
 8004564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004568:	0800458d 	.word	0x0800458d
 800456c:	08004595 	.word	0x08004595
 8004570:	0800459d 	.word	0x0800459d
 8004574:	080045b3 	.word	0x080045b3
 8004578:	080045a3 	.word	0x080045a3
 800457c:	080045b3 	.word	0x080045b3
 8004580:	080045b3 	.word	0x080045b3
 8004584:	080045b3 	.word	0x080045b3
 8004588:	080045ab 	.word	0x080045ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800458c:	f7fe faa6 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8004590:	61f8      	str	r0, [r7, #28]
        break;
 8004592:	e014      	b.n	80045be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004594:	f7fe fab8 	bl	8002b08 <HAL_RCC_GetPCLK2Freq>
 8004598:	61f8      	str	r0, [r7, #28]
        break;
 800459a:	e010      	b.n	80045be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800459c:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <UART_SetConfig+0x56c>)
 800459e:	61fb      	str	r3, [r7, #28]
        break;
 80045a0:	e00d      	b.n	80045be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045a2:	f7fe fa03 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 80045a6:	61f8      	str	r0, [r7, #28]
        break;
 80045a8:	e009      	b.n	80045be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ae:	61fb      	str	r3, [r7, #28]
        break;
 80045b0:	e005      	b.n	80045be <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045bc:	bf00      	nop
    }

    if (pclk != 0U)
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d019      	beq.n	80045f8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	085a      	lsrs	r2, r3, #1
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	441a      	add	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b0f      	cmp	r3, #15
 80045dc:	d909      	bls.n	80045f2 <UART_SetConfig+0x546>
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e4:	d205      	bcs.n	80045f2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60da      	str	r2, [r3, #12]
 80045f0:	e002      	b.n	80045f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004604:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004608:	4618      	mov	r0, r3
 800460a:	3728      	adds	r7, #40	; 0x28
 800460c:	46bd      	mov	sp, r7
 800460e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004612:	bf00      	nop
 8004614:	40008000 	.word	0x40008000
 8004618:	00f42400 	.word	0x00f42400

0800461c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01a      	beq.n	8004732 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800471a:	d10a      	bne.n	8004732 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	605a      	str	r2, [r3, #4]
  }
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b098      	sub	sp, #96	; 0x60
 8004764:	af02      	add	r7, sp, #8
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004770:	f7fc fbe2 	bl	8000f38 <HAL_GetTick>
 8004774:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b08      	cmp	r3, #8
 8004782:	d12e      	bne.n	80047e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004784:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800478c:	2200      	movs	r2, #0
 800478e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f88c 	bl	80048b0 <UART_WaitOnFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d021      	beq.n	80047e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a6:	e853 3f00 	ldrex	r3, [r3]
 80047aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047b2:	653b      	str	r3, [r7, #80]	; 0x50
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047bc:	647b      	str	r3, [r7, #68]	; 0x44
 80047be:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047c4:	e841 2300 	strex	r3, r2, [r1]
 80047c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e6      	bne.n	800479e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2220      	movs	r2, #32
 80047d4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e062      	b.n	80048a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d149      	bne.n	8004884 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f8:	2200      	movs	r2, #0
 80047fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f856 	bl	80048b0 <UART_WaitOnFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d03c      	beq.n	8004884 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	e853 3f00 	ldrex	r3, [r3]
 8004816:	623b      	str	r3, [r7, #32]
   return(result);
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800481e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	461a      	mov	r2, r3
 8004826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004828:	633b      	str	r3, [r7, #48]	; 0x30
 800482a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800482e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004830:	e841 2300 	strex	r3, r2, [r1]
 8004834:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1e6      	bne.n	800480a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3308      	adds	r3, #8
 8004842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	60fb      	str	r3, [r7, #12]
   return(result);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0301 	bic.w	r3, r3, #1
 8004852:	64bb      	str	r3, [r7, #72]	; 0x48
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3308      	adds	r3, #8
 800485a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800485c:	61fa      	str	r2, [r7, #28]
 800485e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	69b9      	ldr	r1, [r7, #24]
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	617b      	str	r3, [r7, #20]
   return(result);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e5      	bne.n	800483c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e011      	b.n	80048a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3758      	adds	r7, #88	; 0x58
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048c0:	e049      	b.n	8004956 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c8:	d045      	beq.n	8004956 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ca:	f7fc fb35 	bl	8000f38 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d302      	bcc.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e048      	b.n	8004976 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d031      	beq.n	8004956 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d110      	bne.n	8004922 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2208      	movs	r2, #8
 8004906:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 f838 	bl	800497e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2208      	movs	r2, #8
 8004912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e029      	b.n	8004976 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004930:	d111      	bne.n	8004956 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800493a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f81e 	bl	800497e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2220      	movs	r2, #32
 8004946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e00f      	b.n	8004976 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69da      	ldr	r2, [r3, #28]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4013      	ands	r3, r2
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	429a      	cmp	r2, r3
 8004964:	bf0c      	ite	eq
 8004966:	2301      	moveq	r3, #1
 8004968:	2300      	movne	r3, #0
 800496a:	b2db      	uxtb	r3, r3
 800496c:	461a      	mov	r2, r3
 800496e:	79fb      	ldrb	r3, [r7, #7]
 8004970:	429a      	cmp	r2, r3
 8004972:	d0a6      	beq.n	80048c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800497e:	b480      	push	{r7}
 8004980:	b095      	sub	sp, #84	; 0x54
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498e:	e853 3f00 	ldrex	r3, [r3]
 8004992:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004996:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800499a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a4:	643b      	str	r3, [r7, #64]	; 0x40
 80049a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e6      	bne.n	8004986 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3308      	adds	r3, #8
 80049be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f023 0301 	bic.w	r3, r3, #1
 80049ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3308      	adds	r3, #8
 80049d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e5      	bne.n	80049b8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d118      	bne.n	8004a26 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f023 0310 	bic.w	r3, r3, #16
 8004a08:	647b      	str	r3, [r7, #68]	; 0x44
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a12:	61bb      	str	r3, [r7, #24]
 8004a14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a16:	6979      	ldr	r1, [r7, #20]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	e841 2300 	strex	r3, r2, [r1]
 8004a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1e6      	bne.n	80049f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a3a:	bf00      	nop
 8004a3c:	3754      	adds	r7, #84	; 0x54
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <std>:
 8004a48:	2300      	movs	r3, #0
 8004a4a:	b510      	push	{r4, lr}
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a56:	6083      	str	r3, [r0, #8]
 8004a58:	8181      	strh	r1, [r0, #12]
 8004a5a:	6643      	str	r3, [r0, #100]	; 0x64
 8004a5c:	81c2      	strh	r2, [r0, #14]
 8004a5e:	6183      	str	r3, [r0, #24]
 8004a60:	4619      	mov	r1, r3
 8004a62:	2208      	movs	r2, #8
 8004a64:	305c      	adds	r0, #92	; 0x5c
 8004a66:	f000 f906 	bl	8004c76 <memset>
 8004a6a:	4b0d      	ldr	r3, [pc, #52]	; (8004aa0 <std+0x58>)
 8004a6c:	6263      	str	r3, [r4, #36]	; 0x24
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <std+0x5c>)
 8004a70:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a72:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <std+0x60>)
 8004a74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a76:	4b0d      	ldr	r3, [pc, #52]	; (8004aac <std+0x64>)
 8004a78:	6323      	str	r3, [r4, #48]	; 0x30
 8004a7a:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <std+0x68>)
 8004a7c:	6224      	str	r4, [r4, #32]
 8004a7e:	429c      	cmp	r4, r3
 8004a80:	d006      	beq.n	8004a90 <std+0x48>
 8004a82:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004a86:	4294      	cmp	r4, r2
 8004a88:	d002      	beq.n	8004a90 <std+0x48>
 8004a8a:	33d0      	adds	r3, #208	; 0xd0
 8004a8c:	429c      	cmp	r4, r3
 8004a8e:	d105      	bne.n	8004a9c <std+0x54>
 8004a90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a98:	f000 b966 	b.w	8004d68 <__retarget_lock_init_recursive>
 8004a9c:	bd10      	pop	{r4, pc}
 8004a9e:	bf00      	nop
 8004aa0:	08004bf1 	.word	0x08004bf1
 8004aa4:	08004c13 	.word	0x08004c13
 8004aa8:	08004c4b 	.word	0x08004c4b
 8004aac:	08004c6f 	.word	0x08004c6f
 8004ab0:	20000208 	.word	0x20000208

08004ab4 <stdio_exit_handler>:
 8004ab4:	4a02      	ldr	r2, [pc, #8]	; (8004ac0 <stdio_exit_handler+0xc>)
 8004ab6:	4903      	ldr	r1, [pc, #12]	; (8004ac4 <stdio_exit_handler+0x10>)
 8004ab8:	4803      	ldr	r0, [pc, #12]	; (8004ac8 <stdio_exit_handler+0x14>)
 8004aba:	f000 b869 	b.w	8004b90 <_fwalk_sglue>
 8004abe:	bf00      	nop
 8004ac0:	2000000c 	.word	0x2000000c
 8004ac4:	08005615 	.word	0x08005615
 8004ac8:	20000018 	.word	0x20000018

08004acc <cleanup_stdio>:
 8004acc:	6841      	ldr	r1, [r0, #4]
 8004ace:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <cleanup_stdio+0x34>)
 8004ad0:	4299      	cmp	r1, r3
 8004ad2:	b510      	push	{r4, lr}
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	d001      	beq.n	8004adc <cleanup_stdio+0x10>
 8004ad8:	f000 fd9c 	bl	8005614 <_fflush_r>
 8004adc:	68a1      	ldr	r1, [r4, #8]
 8004ade:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <cleanup_stdio+0x38>)
 8004ae0:	4299      	cmp	r1, r3
 8004ae2:	d002      	beq.n	8004aea <cleanup_stdio+0x1e>
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f000 fd95 	bl	8005614 <_fflush_r>
 8004aea:	68e1      	ldr	r1, [r4, #12]
 8004aec:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <cleanup_stdio+0x3c>)
 8004aee:	4299      	cmp	r1, r3
 8004af0:	d004      	beq.n	8004afc <cleanup_stdio+0x30>
 8004af2:	4620      	mov	r0, r4
 8004af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004af8:	f000 bd8c 	b.w	8005614 <_fflush_r>
 8004afc:	bd10      	pop	{r4, pc}
 8004afe:	bf00      	nop
 8004b00:	20000208 	.word	0x20000208
 8004b04:	20000270 	.word	0x20000270
 8004b08:	200002d8 	.word	0x200002d8

08004b0c <global_stdio_init.part.0>:
 8004b0c:	b510      	push	{r4, lr}
 8004b0e:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <global_stdio_init.part.0+0x30>)
 8004b10:	4c0b      	ldr	r4, [pc, #44]	; (8004b40 <global_stdio_init.part.0+0x34>)
 8004b12:	4a0c      	ldr	r2, [pc, #48]	; (8004b44 <global_stdio_init.part.0+0x38>)
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	4620      	mov	r0, r4
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2104      	movs	r1, #4
 8004b1c:	f7ff ff94 	bl	8004a48 <std>
 8004b20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004b24:	2201      	movs	r2, #1
 8004b26:	2109      	movs	r1, #9
 8004b28:	f7ff ff8e 	bl	8004a48 <std>
 8004b2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004b30:	2202      	movs	r2, #2
 8004b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b36:	2112      	movs	r1, #18
 8004b38:	f7ff bf86 	b.w	8004a48 <std>
 8004b3c:	20000340 	.word	0x20000340
 8004b40:	20000208 	.word	0x20000208
 8004b44:	08004ab5 	.word	0x08004ab5

08004b48 <__sfp_lock_acquire>:
 8004b48:	4801      	ldr	r0, [pc, #4]	; (8004b50 <__sfp_lock_acquire+0x8>)
 8004b4a:	f000 b90e 	b.w	8004d6a <__retarget_lock_acquire_recursive>
 8004b4e:	bf00      	nop
 8004b50:	20000349 	.word	0x20000349

08004b54 <__sfp_lock_release>:
 8004b54:	4801      	ldr	r0, [pc, #4]	; (8004b5c <__sfp_lock_release+0x8>)
 8004b56:	f000 b909 	b.w	8004d6c <__retarget_lock_release_recursive>
 8004b5a:	bf00      	nop
 8004b5c:	20000349 	.word	0x20000349

08004b60 <__sinit>:
 8004b60:	b510      	push	{r4, lr}
 8004b62:	4604      	mov	r4, r0
 8004b64:	f7ff fff0 	bl	8004b48 <__sfp_lock_acquire>
 8004b68:	6a23      	ldr	r3, [r4, #32]
 8004b6a:	b11b      	cbz	r3, 8004b74 <__sinit+0x14>
 8004b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b70:	f7ff bff0 	b.w	8004b54 <__sfp_lock_release>
 8004b74:	4b04      	ldr	r3, [pc, #16]	; (8004b88 <__sinit+0x28>)
 8004b76:	6223      	str	r3, [r4, #32]
 8004b78:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <__sinit+0x2c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1f5      	bne.n	8004b6c <__sinit+0xc>
 8004b80:	f7ff ffc4 	bl	8004b0c <global_stdio_init.part.0>
 8004b84:	e7f2      	b.n	8004b6c <__sinit+0xc>
 8004b86:	bf00      	nop
 8004b88:	08004acd 	.word	0x08004acd
 8004b8c:	20000340 	.word	0x20000340

08004b90 <_fwalk_sglue>:
 8004b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b94:	4607      	mov	r7, r0
 8004b96:	4688      	mov	r8, r1
 8004b98:	4614      	mov	r4, r2
 8004b9a:	2600      	movs	r6, #0
 8004b9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ba0:	f1b9 0901 	subs.w	r9, r9, #1
 8004ba4:	d505      	bpl.n	8004bb2 <_fwalk_sglue+0x22>
 8004ba6:	6824      	ldr	r4, [r4, #0]
 8004ba8:	2c00      	cmp	r4, #0
 8004baa:	d1f7      	bne.n	8004b9c <_fwalk_sglue+0xc>
 8004bac:	4630      	mov	r0, r6
 8004bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bb2:	89ab      	ldrh	r3, [r5, #12]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d907      	bls.n	8004bc8 <_fwalk_sglue+0x38>
 8004bb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	d003      	beq.n	8004bc8 <_fwalk_sglue+0x38>
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	4638      	mov	r0, r7
 8004bc4:	47c0      	blx	r8
 8004bc6:	4306      	orrs	r6, r0
 8004bc8:	3568      	adds	r5, #104	; 0x68
 8004bca:	e7e9      	b.n	8004ba0 <_fwalk_sglue+0x10>

08004bcc <iprintf>:
 8004bcc:	b40f      	push	{r0, r1, r2, r3}
 8004bce:	b507      	push	{r0, r1, r2, lr}
 8004bd0:	4906      	ldr	r1, [pc, #24]	; (8004bec <iprintf+0x20>)
 8004bd2:	ab04      	add	r3, sp, #16
 8004bd4:	6808      	ldr	r0, [r1, #0]
 8004bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bda:	6881      	ldr	r1, [r0, #8]
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	f000 f9e9 	bl	8004fb4 <_vfiprintf_r>
 8004be2:	b003      	add	sp, #12
 8004be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004be8:	b004      	add	sp, #16
 8004bea:	4770      	bx	lr
 8004bec:	20000064 	.word	0x20000064

08004bf0 <__sread>:
 8004bf0:	b510      	push	{r4, lr}
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bf8:	f000 f868 	bl	8004ccc <_read_r>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	bfab      	itete	ge
 8004c00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c02:	89a3      	ldrhlt	r3, [r4, #12]
 8004c04:	181b      	addge	r3, r3, r0
 8004c06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c0a:	bfac      	ite	ge
 8004c0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c0e:	81a3      	strhlt	r3, [r4, #12]
 8004c10:	bd10      	pop	{r4, pc}

08004c12 <__swrite>:
 8004c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c16:	461f      	mov	r7, r3
 8004c18:	898b      	ldrh	r3, [r1, #12]
 8004c1a:	05db      	lsls	r3, r3, #23
 8004c1c:	4605      	mov	r5, r0
 8004c1e:	460c      	mov	r4, r1
 8004c20:	4616      	mov	r6, r2
 8004c22:	d505      	bpl.n	8004c30 <__swrite+0x1e>
 8004c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c28:	2302      	movs	r3, #2
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f000 f83c 	bl	8004ca8 <_lseek_r>
 8004c30:	89a3      	ldrh	r3, [r4, #12]
 8004c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c3a:	81a3      	strh	r3, [r4, #12]
 8004c3c:	4632      	mov	r2, r6
 8004c3e:	463b      	mov	r3, r7
 8004c40:	4628      	mov	r0, r5
 8004c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c46:	f000 b853 	b.w	8004cf0 <_write_r>

08004c4a <__sseek>:
 8004c4a:	b510      	push	{r4, lr}
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c52:	f000 f829 	bl	8004ca8 <_lseek_r>
 8004c56:	1c43      	adds	r3, r0, #1
 8004c58:	89a3      	ldrh	r3, [r4, #12]
 8004c5a:	bf15      	itete	ne
 8004c5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c66:	81a3      	strheq	r3, [r4, #12]
 8004c68:	bf18      	it	ne
 8004c6a:	81a3      	strhne	r3, [r4, #12]
 8004c6c:	bd10      	pop	{r4, pc}

08004c6e <__sclose>:
 8004c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c72:	f000 b809 	b.w	8004c88 <_close_r>

08004c76 <memset>:
 8004c76:	4402      	add	r2, r0
 8004c78:	4603      	mov	r3, r0
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d100      	bne.n	8004c80 <memset+0xa>
 8004c7e:	4770      	bx	lr
 8004c80:	f803 1b01 	strb.w	r1, [r3], #1
 8004c84:	e7f9      	b.n	8004c7a <memset+0x4>
	...

08004c88 <_close_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	4d06      	ldr	r5, [pc, #24]	; (8004ca4 <_close_r+0x1c>)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	4604      	mov	r4, r0
 8004c90:	4608      	mov	r0, r1
 8004c92:	602b      	str	r3, [r5, #0]
 8004c94:	f7fc f875 	bl	8000d82 <_close>
 8004c98:	1c43      	adds	r3, r0, #1
 8004c9a:	d102      	bne.n	8004ca2 <_close_r+0x1a>
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	b103      	cbz	r3, 8004ca2 <_close_r+0x1a>
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	bd38      	pop	{r3, r4, r5, pc}
 8004ca4:	20000344 	.word	0x20000344

08004ca8 <_lseek_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	4d07      	ldr	r5, [pc, #28]	; (8004cc8 <_lseek_r+0x20>)
 8004cac:	4604      	mov	r4, r0
 8004cae:	4608      	mov	r0, r1
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	602a      	str	r2, [r5, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f7fc f88a 	bl	8000dd0 <_lseek>
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	d102      	bne.n	8004cc6 <_lseek_r+0x1e>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	b103      	cbz	r3, 8004cc6 <_lseek_r+0x1e>
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
 8004cc8:	20000344 	.word	0x20000344

08004ccc <_read_r>:
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	4d07      	ldr	r5, [pc, #28]	; (8004cec <_read_r+0x20>)
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	4608      	mov	r0, r1
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	602a      	str	r2, [r5, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f7fc f818 	bl	8000d10 <_read>
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d102      	bne.n	8004cea <_read_r+0x1e>
 8004ce4:	682b      	ldr	r3, [r5, #0]
 8004ce6:	b103      	cbz	r3, 8004cea <_read_r+0x1e>
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
 8004cec:	20000344 	.word	0x20000344

08004cf0 <_write_r>:
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	4d07      	ldr	r5, [pc, #28]	; (8004d10 <_write_r+0x20>)
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	4608      	mov	r0, r1
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	602a      	str	r2, [r5, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f7fc f823 	bl	8000d4a <_write>
 8004d04:	1c43      	adds	r3, r0, #1
 8004d06:	d102      	bne.n	8004d0e <_write_r+0x1e>
 8004d08:	682b      	ldr	r3, [r5, #0]
 8004d0a:	b103      	cbz	r3, 8004d0e <_write_r+0x1e>
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
 8004d10:	20000344 	.word	0x20000344

08004d14 <__errno>:
 8004d14:	4b01      	ldr	r3, [pc, #4]	; (8004d1c <__errno+0x8>)
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	20000064 	.word	0x20000064

08004d20 <__libc_init_array>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	4d0d      	ldr	r5, [pc, #52]	; (8004d58 <__libc_init_array+0x38>)
 8004d24:	4c0d      	ldr	r4, [pc, #52]	; (8004d5c <__libc_init_array+0x3c>)
 8004d26:	1b64      	subs	r4, r4, r5
 8004d28:	10a4      	asrs	r4, r4, #2
 8004d2a:	2600      	movs	r6, #0
 8004d2c:	42a6      	cmp	r6, r4
 8004d2e:	d109      	bne.n	8004d44 <__libc_init_array+0x24>
 8004d30:	4d0b      	ldr	r5, [pc, #44]	; (8004d60 <__libc_init_array+0x40>)
 8004d32:	4c0c      	ldr	r4, [pc, #48]	; (8004d64 <__libc_init_array+0x44>)
 8004d34:	f000 fdc0 	bl	80058b8 <_init>
 8004d38:	1b64      	subs	r4, r4, r5
 8004d3a:	10a4      	asrs	r4, r4, #2
 8004d3c:	2600      	movs	r6, #0
 8004d3e:	42a6      	cmp	r6, r4
 8004d40:	d105      	bne.n	8004d4e <__libc_init_array+0x2e>
 8004d42:	bd70      	pop	{r4, r5, r6, pc}
 8004d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d48:	4798      	blx	r3
 8004d4a:	3601      	adds	r6, #1
 8004d4c:	e7ee      	b.n	8004d2c <__libc_init_array+0xc>
 8004d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d52:	4798      	blx	r3
 8004d54:	3601      	adds	r6, #1
 8004d56:	e7f2      	b.n	8004d3e <__libc_init_array+0x1e>
 8004d58:	08006154 	.word	0x08006154
 8004d5c:	08006154 	.word	0x08006154
 8004d60:	08006154 	.word	0x08006154
 8004d64:	08006158 	.word	0x08006158

08004d68 <__retarget_lock_init_recursive>:
 8004d68:	4770      	bx	lr

08004d6a <__retarget_lock_acquire_recursive>:
 8004d6a:	4770      	bx	lr

08004d6c <__retarget_lock_release_recursive>:
 8004d6c:	4770      	bx	lr
	...

08004d70 <_free_r>:
 8004d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d72:	2900      	cmp	r1, #0
 8004d74:	d044      	beq.n	8004e00 <_free_r+0x90>
 8004d76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d7a:	9001      	str	r0, [sp, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d82:	bfb8      	it	lt
 8004d84:	18e4      	addlt	r4, r4, r3
 8004d86:	f000 f8df 	bl	8004f48 <__malloc_lock>
 8004d8a:	4a1e      	ldr	r2, [pc, #120]	; (8004e04 <_free_r+0x94>)
 8004d8c:	9801      	ldr	r0, [sp, #4]
 8004d8e:	6813      	ldr	r3, [r2, #0]
 8004d90:	b933      	cbnz	r3, 8004da0 <_free_r+0x30>
 8004d92:	6063      	str	r3, [r4, #4]
 8004d94:	6014      	str	r4, [r2, #0]
 8004d96:	b003      	add	sp, #12
 8004d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d9c:	f000 b8da 	b.w	8004f54 <__malloc_unlock>
 8004da0:	42a3      	cmp	r3, r4
 8004da2:	d908      	bls.n	8004db6 <_free_r+0x46>
 8004da4:	6825      	ldr	r5, [r4, #0]
 8004da6:	1961      	adds	r1, r4, r5
 8004da8:	428b      	cmp	r3, r1
 8004daa:	bf01      	itttt	eq
 8004dac:	6819      	ldreq	r1, [r3, #0]
 8004dae:	685b      	ldreq	r3, [r3, #4]
 8004db0:	1949      	addeq	r1, r1, r5
 8004db2:	6021      	streq	r1, [r4, #0]
 8004db4:	e7ed      	b.n	8004d92 <_free_r+0x22>
 8004db6:	461a      	mov	r2, r3
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	b10b      	cbz	r3, 8004dc0 <_free_r+0x50>
 8004dbc:	42a3      	cmp	r3, r4
 8004dbe:	d9fa      	bls.n	8004db6 <_free_r+0x46>
 8004dc0:	6811      	ldr	r1, [r2, #0]
 8004dc2:	1855      	adds	r5, r2, r1
 8004dc4:	42a5      	cmp	r5, r4
 8004dc6:	d10b      	bne.n	8004de0 <_free_r+0x70>
 8004dc8:	6824      	ldr	r4, [r4, #0]
 8004dca:	4421      	add	r1, r4
 8004dcc:	1854      	adds	r4, r2, r1
 8004dce:	42a3      	cmp	r3, r4
 8004dd0:	6011      	str	r1, [r2, #0]
 8004dd2:	d1e0      	bne.n	8004d96 <_free_r+0x26>
 8004dd4:	681c      	ldr	r4, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	6053      	str	r3, [r2, #4]
 8004dda:	440c      	add	r4, r1
 8004ddc:	6014      	str	r4, [r2, #0]
 8004dde:	e7da      	b.n	8004d96 <_free_r+0x26>
 8004de0:	d902      	bls.n	8004de8 <_free_r+0x78>
 8004de2:	230c      	movs	r3, #12
 8004de4:	6003      	str	r3, [r0, #0]
 8004de6:	e7d6      	b.n	8004d96 <_free_r+0x26>
 8004de8:	6825      	ldr	r5, [r4, #0]
 8004dea:	1961      	adds	r1, r4, r5
 8004dec:	428b      	cmp	r3, r1
 8004dee:	bf04      	itt	eq
 8004df0:	6819      	ldreq	r1, [r3, #0]
 8004df2:	685b      	ldreq	r3, [r3, #4]
 8004df4:	6063      	str	r3, [r4, #4]
 8004df6:	bf04      	itt	eq
 8004df8:	1949      	addeq	r1, r1, r5
 8004dfa:	6021      	streq	r1, [r4, #0]
 8004dfc:	6054      	str	r4, [r2, #4]
 8004dfe:	e7ca      	b.n	8004d96 <_free_r+0x26>
 8004e00:	b003      	add	sp, #12
 8004e02:	bd30      	pop	{r4, r5, pc}
 8004e04:	2000034c 	.word	0x2000034c

08004e08 <sbrk_aligned>:
 8004e08:	b570      	push	{r4, r5, r6, lr}
 8004e0a:	4e0e      	ldr	r6, [pc, #56]	; (8004e44 <sbrk_aligned+0x3c>)
 8004e0c:	460c      	mov	r4, r1
 8004e0e:	6831      	ldr	r1, [r6, #0]
 8004e10:	4605      	mov	r5, r0
 8004e12:	b911      	cbnz	r1, 8004e1a <sbrk_aligned+0x12>
 8004e14:	f000 fcbc 	bl	8005790 <_sbrk_r>
 8004e18:	6030      	str	r0, [r6, #0]
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	f000 fcb7 	bl	8005790 <_sbrk_r>
 8004e22:	1c43      	adds	r3, r0, #1
 8004e24:	d00a      	beq.n	8004e3c <sbrk_aligned+0x34>
 8004e26:	1cc4      	adds	r4, r0, #3
 8004e28:	f024 0403 	bic.w	r4, r4, #3
 8004e2c:	42a0      	cmp	r0, r4
 8004e2e:	d007      	beq.n	8004e40 <sbrk_aligned+0x38>
 8004e30:	1a21      	subs	r1, r4, r0
 8004e32:	4628      	mov	r0, r5
 8004e34:	f000 fcac 	bl	8005790 <_sbrk_r>
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d101      	bne.n	8004e40 <sbrk_aligned+0x38>
 8004e3c:	f04f 34ff 	mov.w	r4, #4294967295
 8004e40:	4620      	mov	r0, r4
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	20000350 	.word	0x20000350

08004e48 <_malloc_r>:
 8004e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e4c:	1ccd      	adds	r5, r1, #3
 8004e4e:	f025 0503 	bic.w	r5, r5, #3
 8004e52:	3508      	adds	r5, #8
 8004e54:	2d0c      	cmp	r5, #12
 8004e56:	bf38      	it	cc
 8004e58:	250c      	movcc	r5, #12
 8004e5a:	2d00      	cmp	r5, #0
 8004e5c:	4607      	mov	r7, r0
 8004e5e:	db01      	blt.n	8004e64 <_malloc_r+0x1c>
 8004e60:	42a9      	cmp	r1, r5
 8004e62:	d905      	bls.n	8004e70 <_malloc_r+0x28>
 8004e64:	230c      	movs	r3, #12
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	2600      	movs	r6, #0
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f44 <_malloc_r+0xfc>
 8004e74:	f000 f868 	bl	8004f48 <__malloc_lock>
 8004e78:	f8d8 3000 	ldr.w	r3, [r8]
 8004e7c:	461c      	mov	r4, r3
 8004e7e:	bb5c      	cbnz	r4, 8004ed8 <_malloc_r+0x90>
 8004e80:	4629      	mov	r1, r5
 8004e82:	4638      	mov	r0, r7
 8004e84:	f7ff ffc0 	bl	8004e08 <sbrk_aligned>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	d155      	bne.n	8004f3a <_malloc_r+0xf2>
 8004e8e:	f8d8 4000 	ldr.w	r4, [r8]
 8004e92:	4626      	mov	r6, r4
 8004e94:	2e00      	cmp	r6, #0
 8004e96:	d145      	bne.n	8004f24 <_malloc_r+0xdc>
 8004e98:	2c00      	cmp	r4, #0
 8004e9a:	d048      	beq.n	8004f2e <_malloc_r+0xe6>
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	4631      	mov	r1, r6
 8004ea0:	4638      	mov	r0, r7
 8004ea2:	eb04 0903 	add.w	r9, r4, r3
 8004ea6:	f000 fc73 	bl	8005790 <_sbrk_r>
 8004eaa:	4581      	cmp	r9, r0
 8004eac:	d13f      	bne.n	8004f2e <_malloc_r+0xe6>
 8004eae:	6821      	ldr	r1, [r4, #0]
 8004eb0:	1a6d      	subs	r5, r5, r1
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	f7ff ffa7 	bl	8004e08 <sbrk_aligned>
 8004eba:	3001      	adds	r0, #1
 8004ebc:	d037      	beq.n	8004f2e <_malloc_r+0xe6>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	442b      	add	r3, r5
 8004ec2:	6023      	str	r3, [r4, #0]
 8004ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d038      	beq.n	8004f3e <_malloc_r+0xf6>
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	42a2      	cmp	r2, r4
 8004ed0:	d12b      	bne.n	8004f2a <_malloc_r+0xe2>
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	e00f      	b.n	8004ef8 <_malloc_r+0xb0>
 8004ed8:	6822      	ldr	r2, [r4, #0]
 8004eda:	1b52      	subs	r2, r2, r5
 8004edc:	d41f      	bmi.n	8004f1e <_malloc_r+0xd6>
 8004ede:	2a0b      	cmp	r2, #11
 8004ee0:	d917      	bls.n	8004f12 <_malloc_r+0xca>
 8004ee2:	1961      	adds	r1, r4, r5
 8004ee4:	42a3      	cmp	r3, r4
 8004ee6:	6025      	str	r5, [r4, #0]
 8004ee8:	bf18      	it	ne
 8004eea:	6059      	strne	r1, [r3, #4]
 8004eec:	6863      	ldr	r3, [r4, #4]
 8004eee:	bf08      	it	eq
 8004ef0:	f8c8 1000 	streq.w	r1, [r8]
 8004ef4:	5162      	str	r2, [r4, r5]
 8004ef6:	604b      	str	r3, [r1, #4]
 8004ef8:	4638      	mov	r0, r7
 8004efa:	f104 060b 	add.w	r6, r4, #11
 8004efe:	f000 f829 	bl	8004f54 <__malloc_unlock>
 8004f02:	f026 0607 	bic.w	r6, r6, #7
 8004f06:	1d23      	adds	r3, r4, #4
 8004f08:	1af2      	subs	r2, r6, r3
 8004f0a:	d0ae      	beq.n	8004e6a <_malloc_r+0x22>
 8004f0c:	1b9b      	subs	r3, r3, r6
 8004f0e:	50a3      	str	r3, [r4, r2]
 8004f10:	e7ab      	b.n	8004e6a <_malloc_r+0x22>
 8004f12:	42a3      	cmp	r3, r4
 8004f14:	6862      	ldr	r2, [r4, #4]
 8004f16:	d1dd      	bne.n	8004ed4 <_malloc_r+0x8c>
 8004f18:	f8c8 2000 	str.w	r2, [r8]
 8004f1c:	e7ec      	b.n	8004ef8 <_malloc_r+0xb0>
 8004f1e:	4623      	mov	r3, r4
 8004f20:	6864      	ldr	r4, [r4, #4]
 8004f22:	e7ac      	b.n	8004e7e <_malloc_r+0x36>
 8004f24:	4634      	mov	r4, r6
 8004f26:	6876      	ldr	r6, [r6, #4]
 8004f28:	e7b4      	b.n	8004e94 <_malloc_r+0x4c>
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	e7cc      	b.n	8004ec8 <_malloc_r+0x80>
 8004f2e:	230c      	movs	r3, #12
 8004f30:	603b      	str	r3, [r7, #0]
 8004f32:	4638      	mov	r0, r7
 8004f34:	f000 f80e 	bl	8004f54 <__malloc_unlock>
 8004f38:	e797      	b.n	8004e6a <_malloc_r+0x22>
 8004f3a:	6025      	str	r5, [r4, #0]
 8004f3c:	e7dc      	b.n	8004ef8 <_malloc_r+0xb0>
 8004f3e:	605b      	str	r3, [r3, #4]
 8004f40:	deff      	udf	#255	; 0xff
 8004f42:	bf00      	nop
 8004f44:	2000034c 	.word	0x2000034c

08004f48 <__malloc_lock>:
 8004f48:	4801      	ldr	r0, [pc, #4]	; (8004f50 <__malloc_lock+0x8>)
 8004f4a:	f7ff bf0e 	b.w	8004d6a <__retarget_lock_acquire_recursive>
 8004f4e:	bf00      	nop
 8004f50:	20000348 	.word	0x20000348

08004f54 <__malloc_unlock>:
 8004f54:	4801      	ldr	r0, [pc, #4]	; (8004f5c <__malloc_unlock+0x8>)
 8004f56:	f7ff bf09 	b.w	8004d6c <__retarget_lock_release_recursive>
 8004f5a:	bf00      	nop
 8004f5c:	20000348 	.word	0x20000348

08004f60 <__sfputc_r>:
 8004f60:	6893      	ldr	r3, [r2, #8]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	b410      	push	{r4}
 8004f68:	6093      	str	r3, [r2, #8]
 8004f6a:	da08      	bge.n	8004f7e <__sfputc_r+0x1e>
 8004f6c:	6994      	ldr	r4, [r2, #24]
 8004f6e:	42a3      	cmp	r3, r4
 8004f70:	db01      	blt.n	8004f76 <__sfputc_r+0x16>
 8004f72:	290a      	cmp	r1, #10
 8004f74:	d103      	bne.n	8004f7e <__sfputc_r+0x1e>
 8004f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f7a:	f000 bb73 	b.w	8005664 <__swbuf_r>
 8004f7e:	6813      	ldr	r3, [r2, #0]
 8004f80:	1c58      	adds	r0, r3, #1
 8004f82:	6010      	str	r0, [r2, #0]
 8004f84:	7019      	strb	r1, [r3, #0]
 8004f86:	4608      	mov	r0, r1
 8004f88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <__sfputs_r>:
 8004f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f90:	4606      	mov	r6, r0
 8004f92:	460f      	mov	r7, r1
 8004f94:	4614      	mov	r4, r2
 8004f96:	18d5      	adds	r5, r2, r3
 8004f98:	42ac      	cmp	r4, r5
 8004f9a:	d101      	bne.n	8004fa0 <__sfputs_r+0x12>
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	e007      	b.n	8004fb0 <__sfputs_r+0x22>
 8004fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa4:	463a      	mov	r2, r7
 8004fa6:	4630      	mov	r0, r6
 8004fa8:	f7ff ffda 	bl	8004f60 <__sfputc_r>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	d1f3      	bne.n	8004f98 <__sfputs_r+0xa>
 8004fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fb4 <_vfiprintf_r>:
 8004fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb8:	460d      	mov	r5, r1
 8004fba:	b09d      	sub	sp, #116	; 0x74
 8004fbc:	4614      	mov	r4, r2
 8004fbe:	4698      	mov	r8, r3
 8004fc0:	4606      	mov	r6, r0
 8004fc2:	b118      	cbz	r0, 8004fcc <_vfiprintf_r+0x18>
 8004fc4:	6a03      	ldr	r3, [r0, #32]
 8004fc6:	b90b      	cbnz	r3, 8004fcc <_vfiprintf_r+0x18>
 8004fc8:	f7ff fdca 	bl	8004b60 <__sinit>
 8004fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fce:	07d9      	lsls	r1, r3, #31
 8004fd0:	d405      	bmi.n	8004fde <_vfiprintf_r+0x2a>
 8004fd2:	89ab      	ldrh	r3, [r5, #12]
 8004fd4:	059a      	lsls	r2, r3, #22
 8004fd6:	d402      	bmi.n	8004fde <_vfiprintf_r+0x2a>
 8004fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fda:	f7ff fec6 	bl	8004d6a <__retarget_lock_acquire_recursive>
 8004fde:	89ab      	ldrh	r3, [r5, #12]
 8004fe0:	071b      	lsls	r3, r3, #28
 8004fe2:	d501      	bpl.n	8004fe8 <_vfiprintf_r+0x34>
 8004fe4:	692b      	ldr	r3, [r5, #16]
 8004fe6:	b99b      	cbnz	r3, 8005010 <_vfiprintf_r+0x5c>
 8004fe8:	4629      	mov	r1, r5
 8004fea:	4630      	mov	r0, r6
 8004fec:	f000 fb78 	bl	80056e0 <__swsetup_r>
 8004ff0:	b170      	cbz	r0, 8005010 <_vfiprintf_r+0x5c>
 8004ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ff4:	07dc      	lsls	r4, r3, #31
 8004ff6:	d504      	bpl.n	8005002 <_vfiprintf_r+0x4e>
 8004ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffc:	b01d      	add	sp, #116	; 0x74
 8004ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005002:	89ab      	ldrh	r3, [r5, #12]
 8005004:	0598      	lsls	r0, r3, #22
 8005006:	d4f7      	bmi.n	8004ff8 <_vfiprintf_r+0x44>
 8005008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800500a:	f7ff feaf 	bl	8004d6c <__retarget_lock_release_recursive>
 800500e:	e7f3      	b.n	8004ff8 <_vfiprintf_r+0x44>
 8005010:	2300      	movs	r3, #0
 8005012:	9309      	str	r3, [sp, #36]	; 0x24
 8005014:	2320      	movs	r3, #32
 8005016:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800501a:	f8cd 800c 	str.w	r8, [sp, #12]
 800501e:	2330      	movs	r3, #48	; 0x30
 8005020:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80051d4 <_vfiprintf_r+0x220>
 8005024:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005028:	f04f 0901 	mov.w	r9, #1
 800502c:	4623      	mov	r3, r4
 800502e:	469a      	mov	sl, r3
 8005030:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005034:	b10a      	cbz	r2, 800503a <_vfiprintf_r+0x86>
 8005036:	2a25      	cmp	r2, #37	; 0x25
 8005038:	d1f9      	bne.n	800502e <_vfiprintf_r+0x7a>
 800503a:	ebba 0b04 	subs.w	fp, sl, r4
 800503e:	d00b      	beq.n	8005058 <_vfiprintf_r+0xa4>
 8005040:	465b      	mov	r3, fp
 8005042:	4622      	mov	r2, r4
 8005044:	4629      	mov	r1, r5
 8005046:	4630      	mov	r0, r6
 8005048:	f7ff ffa1 	bl	8004f8e <__sfputs_r>
 800504c:	3001      	adds	r0, #1
 800504e:	f000 80a9 	beq.w	80051a4 <_vfiprintf_r+0x1f0>
 8005052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005054:	445a      	add	r2, fp
 8005056:	9209      	str	r2, [sp, #36]	; 0x24
 8005058:	f89a 3000 	ldrb.w	r3, [sl]
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80a1 	beq.w	80051a4 <_vfiprintf_r+0x1f0>
 8005062:	2300      	movs	r3, #0
 8005064:	f04f 32ff 	mov.w	r2, #4294967295
 8005068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800506c:	f10a 0a01 	add.w	sl, sl, #1
 8005070:	9304      	str	r3, [sp, #16]
 8005072:	9307      	str	r3, [sp, #28]
 8005074:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005078:	931a      	str	r3, [sp, #104]	; 0x68
 800507a:	4654      	mov	r4, sl
 800507c:	2205      	movs	r2, #5
 800507e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005082:	4854      	ldr	r0, [pc, #336]	; (80051d4 <_vfiprintf_r+0x220>)
 8005084:	f7fb f8a4 	bl	80001d0 <memchr>
 8005088:	9a04      	ldr	r2, [sp, #16]
 800508a:	b9d8      	cbnz	r0, 80050c4 <_vfiprintf_r+0x110>
 800508c:	06d1      	lsls	r1, r2, #27
 800508e:	bf44      	itt	mi
 8005090:	2320      	movmi	r3, #32
 8005092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005096:	0713      	lsls	r3, r2, #28
 8005098:	bf44      	itt	mi
 800509a:	232b      	movmi	r3, #43	; 0x2b
 800509c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050a0:	f89a 3000 	ldrb.w	r3, [sl]
 80050a4:	2b2a      	cmp	r3, #42	; 0x2a
 80050a6:	d015      	beq.n	80050d4 <_vfiprintf_r+0x120>
 80050a8:	9a07      	ldr	r2, [sp, #28]
 80050aa:	4654      	mov	r4, sl
 80050ac:	2000      	movs	r0, #0
 80050ae:	f04f 0c0a 	mov.w	ip, #10
 80050b2:	4621      	mov	r1, r4
 80050b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050b8:	3b30      	subs	r3, #48	; 0x30
 80050ba:	2b09      	cmp	r3, #9
 80050bc:	d94d      	bls.n	800515a <_vfiprintf_r+0x1a6>
 80050be:	b1b0      	cbz	r0, 80050ee <_vfiprintf_r+0x13a>
 80050c0:	9207      	str	r2, [sp, #28]
 80050c2:	e014      	b.n	80050ee <_vfiprintf_r+0x13a>
 80050c4:	eba0 0308 	sub.w	r3, r0, r8
 80050c8:	fa09 f303 	lsl.w	r3, r9, r3
 80050cc:	4313      	orrs	r3, r2
 80050ce:	9304      	str	r3, [sp, #16]
 80050d0:	46a2      	mov	sl, r4
 80050d2:	e7d2      	b.n	800507a <_vfiprintf_r+0xc6>
 80050d4:	9b03      	ldr	r3, [sp, #12]
 80050d6:	1d19      	adds	r1, r3, #4
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	9103      	str	r1, [sp, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	bfbb      	ittet	lt
 80050e0:	425b      	neglt	r3, r3
 80050e2:	f042 0202 	orrlt.w	r2, r2, #2
 80050e6:	9307      	strge	r3, [sp, #28]
 80050e8:	9307      	strlt	r3, [sp, #28]
 80050ea:	bfb8      	it	lt
 80050ec:	9204      	strlt	r2, [sp, #16]
 80050ee:	7823      	ldrb	r3, [r4, #0]
 80050f0:	2b2e      	cmp	r3, #46	; 0x2e
 80050f2:	d10c      	bne.n	800510e <_vfiprintf_r+0x15a>
 80050f4:	7863      	ldrb	r3, [r4, #1]
 80050f6:	2b2a      	cmp	r3, #42	; 0x2a
 80050f8:	d134      	bne.n	8005164 <_vfiprintf_r+0x1b0>
 80050fa:	9b03      	ldr	r3, [sp, #12]
 80050fc:	1d1a      	adds	r2, r3, #4
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	9203      	str	r2, [sp, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	bfb8      	it	lt
 8005106:	f04f 33ff 	movlt.w	r3, #4294967295
 800510a:	3402      	adds	r4, #2
 800510c:	9305      	str	r3, [sp, #20]
 800510e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80051e4 <_vfiprintf_r+0x230>
 8005112:	7821      	ldrb	r1, [r4, #0]
 8005114:	2203      	movs	r2, #3
 8005116:	4650      	mov	r0, sl
 8005118:	f7fb f85a 	bl	80001d0 <memchr>
 800511c:	b138      	cbz	r0, 800512e <_vfiprintf_r+0x17a>
 800511e:	9b04      	ldr	r3, [sp, #16]
 8005120:	eba0 000a 	sub.w	r0, r0, sl
 8005124:	2240      	movs	r2, #64	; 0x40
 8005126:	4082      	lsls	r2, r0
 8005128:	4313      	orrs	r3, r2
 800512a:	3401      	adds	r4, #1
 800512c:	9304      	str	r3, [sp, #16]
 800512e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005132:	4829      	ldr	r0, [pc, #164]	; (80051d8 <_vfiprintf_r+0x224>)
 8005134:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005138:	2206      	movs	r2, #6
 800513a:	f7fb f849 	bl	80001d0 <memchr>
 800513e:	2800      	cmp	r0, #0
 8005140:	d03f      	beq.n	80051c2 <_vfiprintf_r+0x20e>
 8005142:	4b26      	ldr	r3, [pc, #152]	; (80051dc <_vfiprintf_r+0x228>)
 8005144:	bb1b      	cbnz	r3, 800518e <_vfiprintf_r+0x1da>
 8005146:	9b03      	ldr	r3, [sp, #12]
 8005148:	3307      	adds	r3, #7
 800514a:	f023 0307 	bic.w	r3, r3, #7
 800514e:	3308      	adds	r3, #8
 8005150:	9303      	str	r3, [sp, #12]
 8005152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005154:	443b      	add	r3, r7
 8005156:	9309      	str	r3, [sp, #36]	; 0x24
 8005158:	e768      	b.n	800502c <_vfiprintf_r+0x78>
 800515a:	fb0c 3202 	mla	r2, ip, r2, r3
 800515e:	460c      	mov	r4, r1
 8005160:	2001      	movs	r0, #1
 8005162:	e7a6      	b.n	80050b2 <_vfiprintf_r+0xfe>
 8005164:	2300      	movs	r3, #0
 8005166:	3401      	adds	r4, #1
 8005168:	9305      	str	r3, [sp, #20]
 800516a:	4619      	mov	r1, r3
 800516c:	f04f 0c0a 	mov.w	ip, #10
 8005170:	4620      	mov	r0, r4
 8005172:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005176:	3a30      	subs	r2, #48	; 0x30
 8005178:	2a09      	cmp	r2, #9
 800517a:	d903      	bls.n	8005184 <_vfiprintf_r+0x1d0>
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0c6      	beq.n	800510e <_vfiprintf_r+0x15a>
 8005180:	9105      	str	r1, [sp, #20]
 8005182:	e7c4      	b.n	800510e <_vfiprintf_r+0x15a>
 8005184:	fb0c 2101 	mla	r1, ip, r1, r2
 8005188:	4604      	mov	r4, r0
 800518a:	2301      	movs	r3, #1
 800518c:	e7f0      	b.n	8005170 <_vfiprintf_r+0x1bc>
 800518e:	ab03      	add	r3, sp, #12
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	462a      	mov	r2, r5
 8005194:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <_vfiprintf_r+0x22c>)
 8005196:	a904      	add	r1, sp, #16
 8005198:	4630      	mov	r0, r6
 800519a:	f3af 8000 	nop.w
 800519e:	4607      	mov	r7, r0
 80051a0:	1c78      	adds	r0, r7, #1
 80051a2:	d1d6      	bne.n	8005152 <_vfiprintf_r+0x19e>
 80051a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051a6:	07d9      	lsls	r1, r3, #31
 80051a8:	d405      	bmi.n	80051b6 <_vfiprintf_r+0x202>
 80051aa:	89ab      	ldrh	r3, [r5, #12]
 80051ac:	059a      	lsls	r2, r3, #22
 80051ae:	d402      	bmi.n	80051b6 <_vfiprintf_r+0x202>
 80051b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051b2:	f7ff fddb 	bl	8004d6c <__retarget_lock_release_recursive>
 80051b6:	89ab      	ldrh	r3, [r5, #12]
 80051b8:	065b      	lsls	r3, r3, #25
 80051ba:	f53f af1d 	bmi.w	8004ff8 <_vfiprintf_r+0x44>
 80051be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051c0:	e71c      	b.n	8004ffc <_vfiprintf_r+0x48>
 80051c2:	ab03      	add	r3, sp, #12
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	462a      	mov	r2, r5
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <_vfiprintf_r+0x22c>)
 80051ca:	a904      	add	r1, sp, #16
 80051cc:	4630      	mov	r0, r6
 80051ce:	f000 f879 	bl	80052c4 <_printf_i>
 80051d2:	e7e4      	b.n	800519e <_vfiprintf_r+0x1ea>
 80051d4:	08006118 	.word	0x08006118
 80051d8:	08006122 	.word	0x08006122
 80051dc:	00000000 	.word	0x00000000
 80051e0:	08004f8f 	.word	0x08004f8f
 80051e4:	0800611e 	.word	0x0800611e

080051e8 <_printf_common>:
 80051e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ec:	4616      	mov	r6, r2
 80051ee:	4699      	mov	r9, r3
 80051f0:	688a      	ldr	r2, [r1, #8]
 80051f2:	690b      	ldr	r3, [r1, #16]
 80051f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051f8:	4293      	cmp	r3, r2
 80051fa:	bfb8      	it	lt
 80051fc:	4613      	movlt	r3, r2
 80051fe:	6033      	str	r3, [r6, #0]
 8005200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005204:	4607      	mov	r7, r0
 8005206:	460c      	mov	r4, r1
 8005208:	b10a      	cbz	r2, 800520e <_printf_common+0x26>
 800520a:	3301      	adds	r3, #1
 800520c:	6033      	str	r3, [r6, #0]
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	0699      	lsls	r1, r3, #26
 8005212:	bf42      	ittt	mi
 8005214:	6833      	ldrmi	r3, [r6, #0]
 8005216:	3302      	addmi	r3, #2
 8005218:	6033      	strmi	r3, [r6, #0]
 800521a:	6825      	ldr	r5, [r4, #0]
 800521c:	f015 0506 	ands.w	r5, r5, #6
 8005220:	d106      	bne.n	8005230 <_printf_common+0x48>
 8005222:	f104 0a19 	add.w	sl, r4, #25
 8005226:	68e3      	ldr	r3, [r4, #12]
 8005228:	6832      	ldr	r2, [r6, #0]
 800522a:	1a9b      	subs	r3, r3, r2
 800522c:	42ab      	cmp	r3, r5
 800522e:	dc26      	bgt.n	800527e <_printf_common+0x96>
 8005230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005234:	1e13      	subs	r3, r2, #0
 8005236:	6822      	ldr	r2, [r4, #0]
 8005238:	bf18      	it	ne
 800523a:	2301      	movne	r3, #1
 800523c:	0692      	lsls	r2, r2, #26
 800523e:	d42b      	bmi.n	8005298 <_printf_common+0xb0>
 8005240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005244:	4649      	mov	r1, r9
 8005246:	4638      	mov	r0, r7
 8005248:	47c0      	blx	r8
 800524a:	3001      	adds	r0, #1
 800524c:	d01e      	beq.n	800528c <_printf_common+0xa4>
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	6922      	ldr	r2, [r4, #16]
 8005252:	f003 0306 	and.w	r3, r3, #6
 8005256:	2b04      	cmp	r3, #4
 8005258:	bf02      	ittt	eq
 800525a:	68e5      	ldreq	r5, [r4, #12]
 800525c:	6833      	ldreq	r3, [r6, #0]
 800525e:	1aed      	subeq	r5, r5, r3
 8005260:	68a3      	ldr	r3, [r4, #8]
 8005262:	bf0c      	ite	eq
 8005264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005268:	2500      	movne	r5, #0
 800526a:	4293      	cmp	r3, r2
 800526c:	bfc4      	itt	gt
 800526e:	1a9b      	subgt	r3, r3, r2
 8005270:	18ed      	addgt	r5, r5, r3
 8005272:	2600      	movs	r6, #0
 8005274:	341a      	adds	r4, #26
 8005276:	42b5      	cmp	r5, r6
 8005278:	d11a      	bne.n	80052b0 <_printf_common+0xc8>
 800527a:	2000      	movs	r0, #0
 800527c:	e008      	b.n	8005290 <_printf_common+0xa8>
 800527e:	2301      	movs	r3, #1
 8005280:	4652      	mov	r2, sl
 8005282:	4649      	mov	r1, r9
 8005284:	4638      	mov	r0, r7
 8005286:	47c0      	blx	r8
 8005288:	3001      	adds	r0, #1
 800528a:	d103      	bne.n	8005294 <_printf_common+0xac>
 800528c:	f04f 30ff 	mov.w	r0, #4294967295
 8005290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005294:	3501      	adds	r5, #1
 8005296:	e7c6      	b.n	8005226 <_printf_common+0x3e>
 8005298:	18e1      	adds	r1, r4, r3
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	2030      	movs	r0, #48	; 0x30
 800529e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052a2:	4422      	add	r2, r4
 80052a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052ac:	3302      	adds	r3, #2
 80052ae:	e7c7      	b.n	8005240 <_printf_common+0x58>
 80052b0:	2301      	movs	r3, #1
 80052b2:	4622      	mov	r2, r4
 80052b4:	4649      	mov	r1, r9
 80052b6:	4638      	mov	r0, r7
 80052b8:	47c0      	blx	r8
 80052ba:	3001      	adds	r0, #1
 80052bc:	d0e6      	beq.n	800528c <_printf_common+0xa4>
 80052be:	3601      	adds	r6, #1
 80052c0:	e7d9      	b.n	8005276 <_printf_common+0x8e>
	...

080052c4 <_printf_i>:
 80052c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052c8:	7e0f      	ldrb	r7, [r1, #24]
 80052ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052cc:	2f78      	cmp	r7, #120	; 0x78
 80052ce:	4691      	mov	r9, r2
 80052d0:	4680      	mov	r8, r0
 80052d2:	460c      	mov	r4, r1
 80052d4:	469a      	mov	sl, r3
 80052d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052da:	d807      	bhi.n	80052ec <_printf_i+0x28>
 80052dc:	2f62      	cmp	r7, #98	; 0x62
 80052de:	d80a      	bhi.n	80052f6 <_printf_i+0x32>
 80052e0:	2f00      	cmp	r7, #0
 80052e2:	f000 80d4 	beq.w	800548e <_printf_i+0x1ca>
 80052e6:	2f58      	cmp	r7, #88	; 0x58
 80052e8:	f000 80c0 	beq.w	800546c <_printf_i+0x1a8>
 80052ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052f4:	e03a      	b.n	800536c <_printf_i+0xa8>
 80052f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052fa:	2b15      	cmp	r3, #21
 80052fc:	d8f6      	bhi.n	80052ec <_printf_i+0x28>
 80052fe:	a101      	add	r1, pc, #4	; (adr r1, 8005304 <_printf_i+0x40>)
 8005300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005304:	0800535d 	.word	0x0800535d
 8005308:	08005371 	.word	0x08005371
 800530c:	080052ed 	.word	0x080052ed
 8005310:	080052ed 	.word	0x080052ed
 8005314:	080052ed 	.word	0x080052ed
 8005318:	080052ed 	.word	0x080052ed
 800531c:	08005371 	.word	0x08005371
 8005320:	080052ed 	.word	0x080052ed
 8005324:	080052ed 	.word	0x080052ed
 8005328:	080052ed 	.word	0x080052ed
 800532c:	080052ed 	.word	0x080052ed
 8005330:	08005475 	.word	0x08005475
 8005334:	0800539d 	.word	0x0800539d
 8005338:	0800542f 	.word	0x0800542f
 800533c:	080052ed 	.word	0x080052ed
 8005340:	080052ed 	.word	0x080052ed
 8005344:	08005497 	.word	0x08005497
 8005348:	080052ed 	.word	0x080052ed
 800534c:	0800539d 	.word	0x0800539d
 8005350:	080052ed 	.word	0x080052ed
 8005354:	080052ed 	.word	0x080052ed
 8005358:	08005437 	.word	0x08005437
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	1d1a      	adds	r2, r3, #4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	602a      	str	r2, [r5, #0]
 8005364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800536c:	2301      	movs	r3, #1
 800536e:	e09f      	b.n	80054b0 <_printf_i+0x1ec>
 8005370:	6820      	ldr	r0, [r4, #0]
 8005372:	682b      	ldr	r3, [r5, #0]
 8005374:	0607      	lsls	r7, r0, #24
 8005376:	f103 0104 	add.w	r1, r3, #4
 800537a:	6029      	str	r1, [r5, #0]
 800537c:	d501      	bpl.n	8005382 <_printf_i+0xbe>
 800537e:	681e      	ldr	r6, [r3, #0]
 8005380:	e003      	b.n	800538a <_printf_i+0xc6>
 8005382:	0646      	lsls	r6, r0, #25
 8005384:	d5fb      	bpl.n	800537e <_printf_i+0xba>
 8005386:	f9b3 6000 	ldrsh.w	r6, [r3]
 800538a:	2e00      	cmp	r6, #0
 800538c:	da03      	bge.n	8005396 <_printf_i+0xd2>
 800538e:	232d      	movs	r3, #45	; 0x2d
 8005390:	4276      	negs	r6, r6
 8005392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005396:	485a      	ldr	r0, [pc, #360]	; (8005500 <_printf_i+0x23c>)
 8005398:	230a      	movs	r3, #10
 800539a:	e012      	b.n	80053c2 <_printf_i+0xfe>
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	6820      	ldr	r0, [r4, #0]
 80053a0:	1d19      	adds	r1, r3, #4
 80053a2:	6029      	str	r1, [r5, #0]
 80053a4:	0605      	lsls	r5, r0, #24
 80053a6:	d501      	bpl.n	80053ac <_printf_i+0xe8>
 80053a8:	681e      	ldr	r6, [r3, #0]
 80053aa:	e002      	b.n	80053b2 <_printf_i+0xee>
 80053ac:	0641      	lsls	r1, r0, #25
 80053ae:	d5fb      	bpl.n	80053a8 <_printf_i+0xe4>
 80053b0:	881e      	ldrh	r6, [r3, #0]
 80053b2:	4853      	ldr	r0, [pc, #332]	; (8005500 <_printf_i+0x23c>)
 80053b4:	2f6f      	cmp	r7, #111	; 0x6f
 80053b6:	bf0c      	ite	eq
 80053b8:	2308      	moveq	r3, #8
 80053ba:	230a      	movne	r3, #10
 80053bc:	2100      	movs	r1, #0
 80053be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053c2:	6865      	ldr	r5, [r4, #4]
 80053c4:	60a5      	str	r5, [r4, #8]
 80053c6:	2d00      	cmp	r5, #0
 80053c8:	bfa2      	ittt	ge
 80053ca:	6821      	ldrge	r1, [r4, #0]
 80053cc:	f021 0104 	bicge.w	r1, r1, #4
 80053d0:	6021      	strge	r1, [r4, #0]
 80053d2:	b90e      	cbnz	r6, 80053d8 <_printf_i+0x114>
 80053d4:	2d00      	cmp	r5, #0
 80053d6:	d04b      	beq.n	8005470 <_printf_i+0x1ac>
 80053d8:	4615      	mov	r5, r2
 80053da:	fbb6 f1f3 	udiv	r1, r6, r3
 80053de:	fb03 6711 	mls	r7, r3, r1, r6
 80053e2:	5dc7      	ldrb	r7, [r0, r7]
 80053e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053e8:	4637      	mov	r7, r6
 80053ea:	42bb      	cmp	r3, r7
 80053ec:	460e      	mov	r6, r1
 80053ee:	d9f4      	bls.n	80053da <_printf_i+0x116>
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d10b      	bne.n	800540c <_printf_i+0x148>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	07de      	lsls	r6, r3, #31
 80053f8:	d508      	bpl.n	800540c <_printf_i+0x148>
 80053fa:	6923      	ldr	r3, [r4, #16]
 80053fc:	6861      	ldr	r1, [r4, #4]
 80053fe:	4299      	cmp	r1, r3
 8005400:	bfde      	ittt	le
 8005402:	2330      	movle	r3, #48	; 0x30
 8005404:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005408:	f105 35ff 	addle.w	r5, r5, #4294967295
 800540c:	1b52      	subs	r2, r2, r5
 800540e:	6122      	str	r2, [r4, #16]
 8005410:	f8cd a000 	str.w	sl, [sp]
 8005414:	464b      	mov	r3, r9
 8005416:	aa03      	add	r2, sp, #12
 8005418:	4621      	mov	r1, r4
 800541a:	4640      	mov	r0, r8
 800541c:	f7ff fee4 	bl	80051e8 <_printf_common>
 8005420:	3001      	adds	r0, #1
 8005422:	d14a      	bne.n	80054ba <_printf_i+0x1f6>
 8005424:	f04f 30ff 	mov.w	r0, #4294967295
 8005428:	b004      	add	sp, #16
 800542a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	f043 0320 	orr.w	r3, r3, #32
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	4833      	ldr	r0, [pc, #204]	; (8005504 <_printf_i+0x240>)
 8005438:	2778      	movs	r7, #120	; 0x78
 800543a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	6829      	ldr	r1, [r5, #0]
 8005442:	061f      	lsls	r7, r3, #24
 8005444:	f851 6b04 	ldr.w	r6, [r1], #4
 8005448:	d402      	bmi.n	8005450 <_printf_i+0x18c>
 800544a:	065f      	lsls	r7, r3, #25
 800544c:	bf48      	it	mi
 800544e:	b2b6      	uxthmi	r6, r6
 8005450:	07df      	lsls	r7, r3, #31
 8005452:	bf48      	it	mi
 8005454:	f043 0320 	orrmi.w	r3, r3, #32
 8005458:	6029      	str	r1, [r5, #0]
 800545a:	bf48      	it	mi
 800545c:	6023      	strmi	r3, [r4, #0]
 800545e:	b91e      	cbnz	r6, 8005468 <_printf_i+0x1a4>
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	f023 0320 	bic.w	r3, r3, #32
 8005466:	6023      	str	r3, [r4, #0]
 8005468:	2310      	movs	r3, #16
 800546a:	e7a7      	b.n	80053bc <_printf_i+0xf8>
 800546c:	4824      	ldr	r0, [pc, #144]	; (8005500 <_printf_i+0x23c>)
 800546e:	e7e4      	b.n	800543a <_printf_i+0x176>
 8005470:	4615      	mov	r5, r2
 8005472:	e7bd      	b.n	80053f0 <_printf_i+0x12c>
 8005474:	682b      	ldr	r3, [r5, #0]
 8005476:	6826      	ldr	r6, [r4, #0]
 8005478:	6961      	ldr	r1, [r4, #20]
 800547a:	1d18      	adds	r0, r3, #4
 800547c:	6028      	str	r0, [r5, #0]
 800547e:	0635      	lsls	r5, r6, #24
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	d501      	bpl.n	8005488 <_printf_i+0x1c4>
 8005484:	6019      	str	r1, [r3, #0]
 8005486:	e002      	b.n	800548e <_printf_i+0x1ca>
 8005488:	0670      	lsls	r0, r6, #25
 800548a:	d5fb      	bpl.n	8005484 <_printf_i+0x1c0>
 800548c:	8019      	strh	r1, [r3, #0]
 800548e:	2300      	movs	r3, #0
 8005490:	6123      	str	r3, [r4, #16]
 8005492:	4615      	mov	r5, r2
 8005494:	e7bc      	b.n	8005410 <_printf_i+0x14c>
 8005496:	682b      	ldr	r3, [r5, #0]
 8005498:	1d1a      	adds	r2, r3, #4
 800549a:	602a      	str	r2, [r5, #0]
 800549c:	681d      	ldr	r5, [r3, #0]
 800549e:	6862      	ldr	r2, [r4, #4]
 80054a0:	2100      	movs	r1, #0
 80054a2:	4628      	mov	r0, r5
 80054a4:	f7fa fe94 	bl	80001d0 <memchr>
 80054a8:	b108      	cbz	r0, 80054ae <_printf_i+0x1ea>
 80054aa:	1b40      	subs	r0, r0, r5
 80054ac:	6060      	str	r0, [r4, #4]
 80054ae:	6863      	ldr	r3, [r4, #4]
 80054b0:	6123      	str	r3, [r4, #16]
 80054b2:	2300      	movs	r3, #0
 80054b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054b8:	e7aa      	b.n	8005410 <_printf_i+0x14c>
 80054ba:	6923      	ldr	r3, [r4, #16]
 80054bc:	462a      	mov	r2, r5
 80054be:	4649      	mov	r1, r9
 80054c0:	4640      	mov	r0, r8
 80054c2:	47d0      	blx	sl
 80054c4:	3001      	adds	r0, #1
 80054c6:	d0ad      	beq.n	8005424 <_printf_i+0x160>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	079b      	lsls	r3, r3, #30
 80054cc:	d413      	bmi.n	80054f6 <_printf_i+0x232>
 80054ce:	68e0      	ldr	r0, [r4, #12]
 80054d0:	9b03      	ldr	r3, [sp, #12]
 80054d2:	4298      	cmp	r0, r3
 80054d4:	bfb8      	it	lt
 80054d6:	4618      	movlt	r0, r3
 80054d8:	e7a6      	b.n	8005428 <_printf_i+0x164>
 80054da:	2301      	movs	r3, #1
 80054dc:	4632      	mov	r2, r6
 80054de:	4649      	mov	r1, r9
 80054e0:	4640      	mov	r0, r8
 80054e2:	47d0      	blx	sl
 80054e4:	3001      	adds	r0, #1
 80054e6:	d09d      	beq.n	8005424 <_printf_i+0x160>
 80054e8:	3501      	adds	r5, #1
 80054ea:	68e3      	ldr	r3, [r4, #12]
 80054ec:	9903      	ldr	r1, [sp, #12]
 80054ee:	1a5b      	subs	r3, r3, r1
 80054f0:	42ab      	cmp	r3, r5
 80054f2:	dcf2      	bgt.n	80054da <_printf_i+0x216>
 80054f4:	e7eb      	b.n	80054ce <_printf_i+0x20a>
 80054f6:	2500      	movs	r5, #0
 80054f8:	f104 0619 	add.w	r6, r4, #25
 80054fc:	e7f5      	b.n	80054ea <_printf_i+0x226>
 80054fe:	bf00      	nop
 8005500:	08006129 	.word	0x08006129
 8005504:	0800613a 	.word	0x0800613a

08005508 <__sflush_r>:
 8005508:	898a      	ldrh	r2, [r1, #12]
 800550a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800550e:	4605      	mov	r5, r0
 8005510:	0710      	lsls	r0, r2, #28
 8005512:	460c      	mov	r4, r1
 8005514:	d458      	bmi.n	80055c8 <__sflush_r+0xc0>
 8005516:	684b      	ldr	r3, [r1, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	dc05      	bgt.n	8005528 <__sflush_r+0x20>
 800551c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	dc02      	bgt.n	8005528 <__sflush_r+0x20>
 8005522:	2000      	movs	r0, #0
 8005524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800552a:	2e00      	cmp	r6, #0
 800552c:	d0f9      	beq.n	8005522 <__sflush_r+0x1a>
 800552e:	2300      	movs	r3, #0
 8005530:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005534:	682f      	ldr	r7, [r5, #0]
 8005536:	6a21      	ldr	r1, [r4, #32]
 8005538:	602b      	str	r3, [r5, #0]
 800553a:	d032      	beq.n	80055a2 <__sflush_r+0x9a>
 800553c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800553e:	89a3      	ldrh	r3, [r4, #12]
 8005540:	075a      	lsls	r2, r3, #29
 8005542:	d505      	bpl.n	8005550 <__sflush_r+0x48>
 8005544:	6863      	ldr	r3, [r4, #4]
 8005546:	1ac0      	subs	r0, r0, r3
 8005548:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800554a:	b10b      	cbz	r3, 8005550 <__sflush_r+0x48>
 800554c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800554e:	1ac0      	subs	r0, r0, r3
 8005550:	2300      	movs	r3, #0
 8005552:	4602      	mov	r2, r0
 8005554:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005556:	6a21      	ldr	r1, [r4, #32]
 8005558:	4628      	mov	r0, r5
 800555a:	47b0      	blx	r6
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	d106      	bne.n	8005570 <__sflush_r+0x68>
 8005562:	6829      	ldr	r1, [r5, #0]
 8005564:	291d      	cmp	r1, #29
 8005566:	d82b      	bhi.n	80055c0 <__sflush_r+0xb8>
 8005568:	4a29      	ldr	r2, [pc, #164]	; (8005610 <__sflush_r+0x108>)
 800556a:	410a      	asrs	r2, r1
 800556c:	07d6      	lsls	r6, r2, #31
 800556e:	d427      	bmi.n	80055c0 <__sflush_r+0xb8>
 8005570:	2200      	movs	r2, #0
 8005572:	6062      	str	r2, [r4, #4]
 8005574:	04d9      	lsls	r1, r3, #19
 8005576:	6922      	ldr	r2, [r4, #16]
 8005578:	6022      	str	r2, [r4, #0]
 800557a:	d504      	bpl.n	8005586 <__sflush_r+0x7e>
 800557c:	1c42      	adds	r2, r0, #1
 800557e:	d101      	bne.n	8005584 <__sflush_r+0x7c>
 8005580:	682b      	ldr	r3, [r5, #0]
 8005582:	b903      	cbnz	r3, 8005586 <__sflush_r+0x7e>
 8005584:	6560      	str	r0, [r4, #84]	; 0x54
 8005586:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005588:	602f      	str	r7, [r5, #0]
 800558a:	2900      	cmp	r1, #0
 800558c:	d0c9      	beq.n	8005522 <__sflush_r+0x1a>
 800558e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005592:	4299      	cmp	r1, r3
 8005594:	d002      	beq.n	800559c <__sflush_r+0x94>
 8005596:	4628      	mov	r0, r5
 8005598:	f7ff fbea 	bl	8004d70 <_free_r>
 800559c:	2000      	movs	r0, #0
 800559e:	6360      	str	r0, [r4, #52]	; 0x34
 80055a0:	e7c0      	b.n	8005524 <__sflush_r+0x1c>
 80055a2:	2301      	movs	r3, #1
 80055a4:	4628      	mov	r0, r5
 80055a6:	47b0      	blx	r6
 80055a8:	1c41      	adds	r1, r0, #1
 80055aa:	d1c8      	bne.n	800553e <__sflush_r+0x36>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0c5      	beq.n	800553e <__sflush_r+0x36>
 80055b2:	2b1d      	cmp	r3, #29
 80055b4:	d001      	beq.n	80055ba <__sflush_r+0xb2>
 80055b6:	2b16      	cmp	r3, #22
 80055b8:	d101      	bne.n	80055be <__sflush_r+0xb6>
 80055ba:	602f      	str	r7, [r5, #0]
 80055bc:	e7b1      	b.n	8005522 <__sflush_r+0x1a>
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	e7ad      	b.n	8005524 <__sflush_r+0x1c>
 80055c8:	690f      	ldr	r7, [r1, #16]
 80055ca:	2f00      	cmp	r7, #0
 80055cc:	d0a9      	beq.n	8005522 <__sflush_r+0x1a>
 80055ce:	0793      	lsls	r3, r2, #30
 80055d0:	680e      	ldr	r6, [r1, #0]
 80055d2:	bf08      	it	eq
 80055d4:	694b      	ldreq	r3, [r1, #20]
 80055d6:	600f      	str	r7, [r1, #0]
 80055d8:	bf18      	it	ne
 80055da:	2300      	movne	r3, #0
 80055dc:	eba6 0807 	sub.w	r8, r6, r7
 80055e0:	608b      	str	r3, [r1, #8]
 80055e2:	f1b8 0f00 	cmp.w	r8, #0
 80055e6:	dd9c      	ble.n	8005522 <__sflush_r+0x1a>
 80055e8:	6a21      	ldr	r1, [r4, #32]
 80055ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055ec:	4643      	mov	r3, r8
 80055ee:	463a      	mov	r2, r7
 80055f0:	4628      	mov	r0, r5
 80055f2:	47b0      	blx	r6
 80055f4:	2800      	cmp	r0, #0
 80055f6:	dc06      	bgt.n	8005606 <__sflush_r+0xfe>
 80055f8:	89a3      	ldrh	r3, [r4, #12]
 80055fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055fe:	81a3      	strh	r3, [r4, #12]
 8005600:	f04f 30ff 	mov.w	r0, #4294967295
 8005604:	e78e      	b.n	8005524 <__sflush_r+0x1c>
 8005606:	4407      	add	r7, r0
 8005608:	eba8 0800 	sub.w	r8, r8, r0
 800560c:	e7e9      	b.n	80055e2 <__sflush_r+0xda>
 800560e:	bf00      	nop
 8005610:	dfbffffe 	.word	0xdfbffffe

08005614 <_fflush_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	690b      	ldr	r3, [r1, #16]
 8005618:	4605      	mov	r5, r0
 800561a:	460c      	mov	r4, r1
 800561c:	b913      	cbnz	r3, 8005624 <_fflush_r+0x10>
 800561e:	2500      	movs	r5, #0
 8005620:	4628      	mov	r0, r5
 8005622:	bd38      	pop	{r3, r4, r5, pc}
 8005624:	b118      	cbz	r0, 800562e <_fflush_r+0x1a>
 8005626:	6a03      	ldr	r3, [r0, #32]
 8005628:	b90b      	cbnz	r3, 800562e <_fflush_r+0x1a>
 800562a:	f7ff fa99 	bl	8004b60 <__sinit>
 800562e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0f3      	beq.n	800561e <_fflush_r+0xa>
 8005636:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005638:	07d0      	lsls	r0, r2, #31
 800563a:	d404      	bmi.n	8005646 <_fflush_r+0x32>
 800563c:	0599      	lsls	r1, r3, #22
 800563e:	d402      	bmi.n	8005646 <_fflush_r+0x32>
 8005640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005642:	f7ff fb92 	bl	8004d6a <__retarget_lock_acquire_recursive>
 8005646:	4628      	mov	r0, r5
 8005648:	4621      	mov	r1, r4
 800564a:	f7ff ff5d 	bl	8005508 <__sflush_r>
 800564e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005650:	07da      	lsls	r2, r3, #31
 8005652:	4605      	mov	r5, r0
 8005654:	d4e4      	bmi.n	8005620 <_fflush_r+0xc>
 8005656:	89a3      	ldrh	r3, [r4, #12]
 8005658:	059b      	lsls	r3, r3, #22
 800565a:	d4e1      	bmi.n	8005620 <_fflush_r+0xc>
 800565c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800565e:	f7ff fb85 	bl	8004d6c <__retarget_lock_release_recursive>
 8005662:	e7dd      	b.n	8005620 <_fflush_r+0xc>

08005664 <__swbuf_r>:
 8005664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005666:	460e      	mov	r6, r1
 8005668:	4614      	mov	r4, r2
 800566a:	4605      	mov	r5, r0
 800566c:	b118      	cbz	r0, 8005676 <__swbuf_r+0x12>
 800566e:	6a03      	ldr	r3, [r0, #32]
 8005670:	b90b      	cbnz	r3, 8005676 <__swbuf_r+0x12>
 8005672:	f7ff fa75 	bl	8004b60 <__sinit>
 8005676:	69a3      	ldr	r3, [r4, #24]
 8005678:	60a3      	str	r3, [r4, #8]
 800567a:	89a3      	ldrh	r3, [r4, #12]
 800567c:	071a      	lsls	r2, r3, #28
 800567e:	d525      	bpl.n	80056cc <__swbuf_r+0x68>
 8005680:	6923      	ldr	r3, [r4, #16]
 8005682:	b31b      	cbz	r3, 80056cc <__swbuf_r+0x68>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	6922      	ldr	r2, [r4, #16]
 8005688:	1a98      	subs	r0, r3, r2
 800568a:	6963      	ldr	r3, [r4, #20]
 800568c:	b2f6      	uxtb	r6, r6
 800568e:	4283      	cmp	r3, r0
 8005690:	4637      	mov	r7, r6
 8005692:	dc04      	bgt.n	800569e <__swbuf_r+0x3a>
 8005694:	4621      	mov	r1, r4
 8005696:	4628      	mov	r0, r5
 8005698:	f7ff ffbc 	bl	8005614 <_fflush_r>
 800569c:	b9e0      	cbnz	r0, 80056d8 <__swbuf_r+0x74>
 800569e:	68a3      	ldr	r3, [r4, #8]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	60a3      	str	r3, [r4, #8]
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	6022      	str	r2, [r4, #0]
 80056aa:	701e      	strb	r6, [r3, #0]
 80056ac:	6962      	ldr	r2, [r4, #20]
 80056ae:	1c43      	adds	r3, r0, #1
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d004      	beq.n	80056be <__swbuf_r+0x5a>
 80056b4:	89a3      	ldrh	r3, [r4, #12]
 80056b6:	07db      	lsls	r3, r3, #31
 80056b8:	d506      	bpl.n	80056c8 <__swbuf_r+0x64>
 80056ba:	2e0a      	cmp	r6, #10
 80056bc:	d104      	bne.n	80056c8 <__swbuf_r+0x64>
 80056be:	4621      	mov	r1, r4
 80056c0:	4628      	mov	r0, r5
 80056c2:	f7ff ffa7 	bl	8005614 <_fflush_r>
 80056c6:	b938      	cbnz	r0, 80056d8 <__swbuf_r+0x74>
 80056c8:	4638      	mov	r0, r7
 80056ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056cc:	4621      	mov	r1, r4
 80056ce:	4628      	mov	r0, r5
 80056d0:	f000 f806 	bl	80056e0 <__swsetup_r>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	d0d5      	beq.n	8005684 <__swbuf_r+0x20>
 80056d8:	f04f 37ff 	mov.w	r7, #4294967295
 80056dc:	e7f4      	b.n	80056c8 <__swbuf_r+0x64>
	...

080056e0 <__swsetup_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4b2a      	ldr	r3, [pc, #168]	; (800578c <__swsetup_r+0xac>)
 80056e4:	4605      	mov	r5, r0
 80056e6:	6818      	ldr	r0, [r3, #0]
 80056e8:	460c      	mov	r4, r1
 80056ea:	b118      	cbz	r0, 80056f4 <__swsetup_r+0x14>
 80056ec:	6a03      	ldr	r3, [r0, #32]
 80056ee:	b90b      	cbnz	r3, 80056f4 <__swsetup_r+0x14>
 80056f0:	f7ff fa36 	bl	8004b60 <__sinit>
 80056f4:	89a3      	ldrh	r3, [r4, #12]
 80056f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056fa:	0718      	lsls	r0, r3, #28
 80056fc:	d422      	bmi.n	8005744 <__swsetup_r+0x64>
 80056fe:	06d9      	lsls	r1, r3, #27
 8005700:	d407      	bmi.n	8005712 <__swsetup_r+0x32>
 8005702:	2309      	movs	r3, #9
 8005704:	602b      	str	r3, [r5, #0]
 8005706:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800570a:	81a3      	strh	r3, [r4, #12]
 800570c:	f04f 30ff 	mov.w	r0, #4294967295
 8005710:	e034      	b.n	800577c <__swsetup_r+0x9c>
 8005712:	0758      	lsls	r0, r3, #29
 8005714:	d512      	bpl.n	800573c <__swsetup_r+0x5c>
 8005716:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005718:	b141      	cbz	r1, 800572c <__swsetup_r+0x4c>
 800571a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800571e:	4299      	cmp	r1, r3
 8005720:	d002      	beq.n	8005728 <__swsetup_r+0x48>
 8005722:	4628      	mov	r0, r5
 8005724:	f7ff fb24 	bl	8004d70 <_free_r>
 8005728:	2300      	movs	r3, #0
 800572a:	6363      	str	r3, [r4, #52]	; 0x34
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005732:	81a3      	strh	r3, [r4, #12]
 8005734:	2300      	movs	r3, #0
 8005736:	6063      	str	r3, [r4, #4]
 8005738:	6923      	ldr	r3, [r4, #16]
 800573a:	6023      	str	r3, [r4, #0]
 800573c:	89a3      	ldrh	r3, [r4, #12]
 800573e:	f043 0308 	orr.w	r3, r3, #8
 8005742:	81a3      	strh	r3, [r4, #12]
 8005744:	6923      	ldr	r3, [r4, #16]
 8005746:	b94b      	cbnz	r3, 800575c <__swsetup_r+0x7c>
 8005748:	89a3      	ldrh	r3, [r4, #12]
 800574a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800574e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005752:	d003      	beq.n	800575c <__swsetup_r+0x7c>
 8005754:	4621      	mov	r1, r4
 8005756:	4628      	mov	r0, r5
 8005758:	f000 f850 	bl	80057fc <__smakebuf_r>
 800575c:	89a0      	ldrh	r0, [r4, #12]
 800575e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005762:	f010 0301 	ands.w	r3, r0, #1
 8005766:	d00a      	beq.n	800577e <__swsetup_r+0x9e>
 8005768:	2300      	movs	r3, #0
 800576a:	60a3      	str	r3, [r4, #8]
 800576c:	6963      	ldr	r3, [r4, #20]
 800576e:	425b      	negs	r3, r3
 8005770:	61a3      	str	r3, [r4, #24]
 8005772:	6923      	ldr	r3, [r4, #16]
 8005774:	b943      	cbnz	r3, 8005788 <__swsetup_r+0xa8>
 8005776:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800577a:	d1c4      	bne.n	8005706 <__swsetup_r+0x26>
 800577c:	bd38      	pop	{r3, r4, r5, pc}
 800577e:	0781      	lsls	r1, r0, #30
 8005780:	bf58      	it	pl
 8005782:	6963      	ldrpl	r3, [r4, #20]
 8005784:	60a3      	str	r3, [r4, #8]
 8005786:	e7f4      	b.n	8005772 <__swsetup_r+0x92>
 8005788:	2000      	movs	r0, #0
 800578a:	e7f7      	b.n	800577c <__swsetup_r+0x9c>
 800578c:	20000064 	.word	0x20000064

08005790 <_sbrk_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	4d06      	ldr	r5, [pc, #24]	; (80057ac <_sbrk_r+0x1c>)
 8005794:	2300      	movs	r3, #0
 8005796:	4604      	mov	r4, r0
 8005798:	4608      	mov	r0, r1
 800579a:	602b      	str	r3, [r5, #0]
 800579c:	f7fb fb26 	bl	8000dec <_sbrk>
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d102      	bne.n	80057aa <_sbrk_r+0x1a>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	b103      	cbz	r3, 80057aa <_sbrk_r+0x1a>
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	20000344 	.word	0x20000344

080057b0 <__swhatbuf_r>:
 80057b0:	b570      	push	{r4, r5, r6, lr}
 80057b2:	460c      	mov	r4, r1
 80057b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057b8:	2900      	cmp	r1, #0
 80057ba:	b096      	sub	sp, #88	; 0x58
 80057bc:	4615      	mov	r5, r2
 80057be:	461e      	mov	r6, r3
 80057c0:	da0d      	bge.n	80057de <__swhatbuf_r+0x2e>
 80057c2:	89a3      	ldrh	r3, [r4, #12]
 80057c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80057c8:	f04f 0100 	mov.w	r1, #0
 80057cc:	bf0c      	ite	eq
 80057ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80057d2:	2340      	movne	r3, #64	; 0x40
 80057d4:	2000      	movs	r0, #0
 80057d6:	6031      	str	r1, [r6, #0]
 80057d8:	602b      	str	r3, [r5, #0]
 80057da:	b016      	add	sp, #88	; 0x58
 80057dc:	bd70      	pop	{r4, r5, r6, pc}
 80057de:	466a      	mov	r2, sp
 80057e0:	f000 f848 	bl	8005874 <_fstat_r>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	dbec      	blt.n	80057c2 <__swhatbuf_r+0x12>
 80057e8:	9901      	ldr	r1, [sp, #4]
 80057ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80057ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80057f2:	4259      	negs	r1, r3
 80057f4:	4159      	adcs	r1, r3
 80057f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057fa:	e7eb      	b.n	80057d4 <__swhatbuf_r+0x24>

080057fc <__smakebuf_r>:
 80057fc:	898b      	ldrh	r3, [r1, #12]
 80057fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005800:	079d      	lsls	r5, r3, #30
 8005802:	4606      	mov	r6, r0
 8005804:	460c      	mov	r4, r1
 8005806:	d507      	bpl.n	8005818 <__smakebuf_r+0x1c>
 8005808:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	6123      	str	r3, [r4, #16]
 8005810:	2301      	movs	r3, #1
 8005812:	6163      	str	r3, [r4, #20]
 8005814:	b002      	add	sp, #8
 8005816:	bd70      	pop	{r4, r5, r6, pc}
 8005818:	ab01      	add	r3, sp, #4
 800581a:	466a      	mov	r2, sp
 800581c:	f7ff ffc8 	bl	80057b0 <__swhatbuf_r>
 8005820:	9900      	ldr	r1, [sp, #0]
 8005822:	4605      	mov	r5, r0
 8005824:	4630      	mov	r0, r6
 8005826:	f7ff fb0f 	bl	8004e48 <_malloc_r>
 800582a:	b948      	cbnz	r0, 8005840 <__smakebuf_r+0x44>
 800582c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005830:	059a      	lsls	r2, r3, #22
 8005832:	d4ef      	bmi.n	8005814 <__smakebuf_r+0x18>
 8005834:	f023 0303 	bic.w	r3, r3, #3
 8005838:	f043 0302 	orr.w	r3, r3, #2
 800583c:	81a3      	strh	r3, [r4, #12]
 800583e:	e7e3      	b.n	8005808 <__smakebuf_r+0xc>
 8005840:	89a3      	ldrh	r3, [r4, #12]
 8005842:	6020      	str	r0, [r4, #0]
 8005844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005848:	81a3      	strh	r3, [r4, #12]
 800584a:	9b00      	ldr	r3, [sp, #0]
 800584c:	6163      	str	r3, [r4, #20]
 800584e:	9b01      	ldr	r3, [sp, #4]
 8005850:	6120      	str	r0, [r4, #16]
 8005852:	b15b      	cbz	r3, 800586c <__smakebuf_r+0x70>
 8005854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005858:	4630      	mov	r0, r6
 800585a:	f000 f81d 	bl	8005898 <_isatty_r>
 800585e:	b128      	cbz	r0, 800586c <__smakebuf_r+0x70>
 8005860:	89a3      	ldrh	r3, [r4, #12]
 8005862:	f023 0303 	bic.w	r3, r3, #3
 8005866:	f043 0301 	orr.w	r3, r3, #1
 800586a:	81a3      	strh	r3, [r4, #12]
 800586c:	89a3      	ldrh	r3, [r4, #12]
 800586e:	431d      	orrs	r5, r3
 8005870:	81a5      	strh	r5, [r4, #12]
 8005872:	e7cf      	b.n	8005814 <__smakebuf_r+0x18>

08005874 <_fstat_r>:
 8005874:	b538      	push	{r3, r4, r5, lr}
 8005876:	4d07      	ldr	r5, [pc, #28]	; (8005894 <_fstat_r+0x20>)
 8005878:	2300      	movs	r3, #0
 800587a:	4604      	mov	r4, r0
 800587c:	4608      	mov	r0, r1
 800587e:	4611      	mov	r1, r2
 8005880:	602b      	str	r3, [r5, #0]
 8005882:	f7fb fa8a 	bl	8000d9a <_fstat>
 8005886:	1c43      	adds	r3, r0, #1
 8005888:	d102      	bne.n	8005890 <_fstat_r+0x1c>
 800588a:	682b      	ldr	r3, [r5, #0]
 800588c:	b103      	cbz	r3, 8005890 <_fstat_r+0x1c>
 800588e:	6023      	str	r3, [r4, #0]
 8005890:	bd38      	pop	{r3, r4, r5, pc}
 8005892:	bf00      	nop
 8005894:	20000344 	.word	0x20000344

08005898 <_isatty_r>:
 8005898:	b538      	push	{r3, r4, r5, lr}
 800589a:	4d06      	ldr	r5, [pc, #24]	; (80058b4 <_isatty_r+0x1c>)
 800589c:	2300      	movs	r3, #0
 800589e:	4604      	mov	r4, r0
 80058a0:	4608      	mov	r0, r1
 80058a2:	602b      	str	r3, [r5, #0]
 80058a4:	f7fb fa89 	bl	8000dba <_isatty>
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	d102      	bne.n	80058b2 <_isatty_r+0x1a>
 80058ac:	682b      	ldr	r3, [r5, #0]
 80058ae:	b103      	cbz	r3, 80058b2 <_isatty_r+0x1a>
 80058b0:	6023      	str	r3, [r4, #0]
 80058b2:	bd38      	pop	{r3, r4, r5, pc}
 80058b4:	20000344 	.word	0x20000344

080058b8 <_init>:
 80058b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ba:	bf00      	nop
 80058bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058be:	bc08      	pop	{r3}
 80058c0:	469e      	mov	lr, r3
 80058c2:	4770      	bx	lr

080058c4 <_fini>:
 80058c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c6:	bf00      	nop
 80058c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ca:	bc08      	pop	{r3}
 80058cc:	469e      	mov	lr, r3
 80058ce:	4770      	bx	lr
