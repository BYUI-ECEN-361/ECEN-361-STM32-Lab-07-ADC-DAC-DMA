
ECEN-361-STM32-Lab-08-Sampling-Solution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005848  08005848  00015848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005908  08005908  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005910  08005910  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005910  08005910  00015910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005914  08005914  00015914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000068  08005980  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08005980  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012231  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000271f  00000000  00000000  0003230c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  00034a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d34  00000000  00000000  00035b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000281c7  00000000  00000000  00036864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d95  00000000  00000000  0005ea2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6000  00000000  00000000  000727c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ee4  00000000  00000000  001687c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0016d6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005830 	.word	0x08005830

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005830 	.word	0x08005830

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fc2f 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f82f 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f94b 	bl	8000814 <MX_GPIO_Init>
  MX_DMA_Init();
 800057e:	f000 f92b 	bl	80007d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f8f9 	bl	8000778 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000586:	f000 f879 	bl	800067c <MX_DAC1_Init>
  MX_TIM2_Init();
 800058a:	f000 f8a9 	bl	80006e0 <MX_TIM2_Init>


  // HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1);


  HAL_TIM_Base_Start_IT(&htim2);
 800058e:	480c      	ldr	r0, [pc, #48]	; (80005c0 <main+0x54>)
 8000590:	f003 f832 	bl	80035f8 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,1);

  printf("\033\143"); printf("Welcome to ECEN-361 SineWave Generator\n\r");
 8000594:	480b      	ldr	r0, [pc, #44]	; (80005c4 <main+0x58>)
 8000596:	f004 fad5 	bl	8004b44 <iprintf>
 800059a:	480b      	ldr	r0, [pc, #44]	; (80005c8 <main+0x5c>)
 800059c:	f004 fad2 	bl	8004b44 <iprintf>

  /* Setup the DMA */

  if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80005a0:	480a      	ldr	r0, [pc, #40]	; (80005cc <main+0x60>)
 80005a2:	f001 f8eb 	bl	800177c <HAL_DMA_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d000      	beq.n	80005ae <main+0x42>
 	  {while(1);}
 80005ac:	e7fe      	b.n	80005ac <main+0x40>

   // HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_1000_pts, 1000,DAC_ALIGN_12B_R);
	   //HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_100_pts, 100,DAC_ALIGN_12B_R);
	   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sineLookupTable_10_pts, 10,DAC_ALIGN_12B_R);
 80005ae:	2300      	movs	r3, #0
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	230a      	movs	r3, #10
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <main+0x64>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4806      	ldr	r0, [pc, #24]	; (80005d4 <main+0x68>)
 80005ba:	f000 fddf 	bl	800117c <HAL_DAC_Start_DMA>
   // HAL_DMA_Start_IT(&hdma_dac_ch1, (uint32_t) &sineLookupTable_100_pts, (uint32_t) &hdac1, sizeof(sineLookupTable_100_pts));
   //HAL_DMA_PollForTransfer(&hdma_memtomem_dma1_channel1, );

  while (1)
 80005be:	e7fe      	b.n	80005be <main+0x52>
 80005c0:	200000e0 	.word	0x200000e0
 80005c4:	08005848 	.word	0x08005848
 80005c8:	0800584c 	.word	0x0800584c
 80005cc:	20000098 	.word	0x20000098
 80005d0:	08005878 	.word	0x08005878
 80005d4:	20000084 	.word	0x20000084

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b096      	sub	sp, #88	; 0x58
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	2244      	movs	r2, #68	; 0x44
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 fb01 	bl	8004bee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005fe:	f001 fc91 	bl	8001f24 <HAL_PWREx_ControlVoltageScaling>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000608:	f000 f994 	bl	8000934 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060c:	2302      	movs	r3, #2
 800060e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000614:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000616:	2310      	movs	r3, #16
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061e:	2302      	movs	r3, #2
 8000620:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000622:	2301      	movs	r3, #1
 8000624:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000626:	230a      	movs	r3, #10
 8000628:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800062a:	2307      	movs	r3, #7
 800062c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fcc8 	bl	8001fd0 <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000646:	f000 f975 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	230f      	movs	r3, #15
 800064c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2303      	movs	r3, #3
 8000650:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800065e:	463b      	mov	r3, r7
 8000660:	2104      	movs	r1, #4
 8000662:	4618      	mov	r0, r3
 8000664:	f002 f890 	bl	8002788 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800066e:	f000 f961 	bl	8000934 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3758      	adds	r7, #88	; 0x58
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2224      	movs	r2, #36	; 0x24
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f004 fab0 	bl	8004bee <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_DAC1_Init+0x5c>)
 8000690:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_DAC1_Init+0x60>)
 8000692:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000694:	4810      	ldr	r0, [pc, #64]	; (80006d8 <MX_DAC1_Init+0x5c>)
 8000696:	f000 fd4e 	bl	8001136 <HAL_DAC_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80006a0:	f000 f948 	bl	8000934 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80006a8:	2324      	movs	r3, #36	; 0x24
 80006aa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80006ac:	2302      	movs	r3, #2
 80006ae:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <MX_DAC1_Init+0x5c>)
 80006c0:	f000 fea0 	bl	8001404 <HAL_DAC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80006ca:	f000 f933 	bl	8000934 <Error_Handler>
  /* USER CODE BEGIN DAC1_Init 2 */
  // sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;

  /* USER CODE END DAC1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	; 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000084 	.word	0x20000084
 80006dc:	40007400 	.word	0x40007400

080006e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <MX_TIM2_Init+0x94>)
 8000700:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000704:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79		;
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_TIM2_Init+0x94>)
 8000708:	224f      	movs	r2, #79	; 0x4f
 800070a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_TIM2_Init+0x94>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_TIM2_Init+0x94>)
 8000714:	2264      	movs	r2, #100	; 0x64
 8000716:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_TIM2_Init+0x94>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_TIM2_Init+0x94>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000724:	4813      	ldr	r0, [pc, #76]	; (8000774 <MX_TIM2_Init+0x94>)
 8000726:	f002 ff0f 	bl	8003548 <HAL_TIM_Base_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000730:	f000 f900 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000738:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800073a:	f107 0310 	add.w	r3, r7, #16
 800073e:	4619      	mov	r1, r3
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <MX_TIM2_Init+0x94>)
 8000742:	f003 f8cb 	bl	80038dc <HAL_TIM_ConfigClockSource>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800074c:	f000 f8f2 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000750:	2320      	movs	r3, #32
 8000752:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	4619      	mov	r1, r3
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_TIM2_Init+0x94>)
 800075e:	f003 fae3 	bl	8003d28 <HAL_TIMEx_MasterConfigSynchronization>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000768:	f000 f8e4 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200000e0 	.word	0x200000e0

08000778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 800077e:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <MX_USART2_UART_Init+0x5c>)
 8000780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_USART2_UART_Init+0x58>)
 80007bc:	f003 fb5a 	bl	8003e74 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 f8b5 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	2000012c 	.word	0x2000012c
 80007d4:	40004400 	.word	0x40004400

080007d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_DMA_Init+0x38>)
 80007e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007e2:	4a0b      	ldr	r2, [pc, #44]	; (8000810 <MX_DMA_Init+0x38>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6493      	str	r3, [r2, #72]	; 0x48
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_DMA_Init+0x38>)
 80007ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2105      	movs	r1, #5
 80007fa:	200d      	movs	r0, #13
 80007fc:	f000 fc65 	bl	80010ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000800:	200d      	movs	r0, #13
 8000802:	f000 fc7e 	bl	8001102 <HAL_NVIC_EnableIRQ>

}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <MX_GPIO_Init+0xcc>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a2c      	ldr	r2, [pc, #176]	; (80008e0 <MX_GPIO_Init+0xcc>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b2a      	ldr	r3, [pc, #168]	; (80008e0 <MX_GPIO_Init+0xcc>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <MX_GPIO_Init+0xcc>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a26      	ldr	r2, [pc, #152]	; (80008e0 <MX_GPIO_Init+0xcc>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <MX_GPIO_Init+0xcc>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_GPIO_Init+0xcc>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a20      	ldr	r2, [pc, #128]	; (80008e0 <MX_GPIO_Init+0xcc>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <MX_GPIO_Init+0xcc>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_GPIO_Init+0xcc>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4a1a      	ldr	r2, [pc, #104]	; (80008e0 <MX_GPIO_Init+0xcc>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_GPIO_Init+0xcc>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000890:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	4810      	ldr	r0, [pc, #64]	; (80008e4 <MX_GPIO_Init+0xd0>)
 80008a2:	f001 f963 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80008b8:	2303      	movs	r3, #3
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	4808      	ldr	r0, [pc, #32]	; (80008e4 <MX_GPIO_Init+0xd0>)
 80008c4:	f001 f952 	bl	8001b6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2100      	movs	r1, #0
 80008cc:	2028      	movs	r0, #40	; 0x28
 80008ce:	f000 fbfc 	bl	80010ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008d2:	2028      	movs	r0, #40	; 0x28
 80008d4:	f000 fc15 	bl	8001102 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40021000 	.word	0x40021000
 80008e4:	48000800 	.word	0x48000800

080008e8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80008f0:	1d39      	adds	r1, r7, #4
 80008f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f6:	2201      	movs	r2, #1
 80008f8:	4803      	ldr	r0, [pc, #12]	; (8000908 <__io_putchar+0x20>)
 80008fa:	f003 fb09 	bl	8003f10 <HAL_UART_Transmit>

  return ch;
 80008fe:	687b      	ldr	r3, [r7, #4]
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	2000012c 	.word	0x2000012c

0800090c <HAL_DAC_ConvCpltCallbackCh1>:



void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	/* Fill this in when I know what to do if I get here */
// printf("              FINISHED DAC OUT\n\n");
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <HAL_TIM_PeriodElapsedCallback>:


// Callback: timer has rolled over

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
		//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,(uint32_t) sineLookup[sindex++]);
		//HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
	  	// int u = 1;
		// if (sindex >=SINE_WAVE_SAMPLES ) {sindex=0;}
		}
	}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x44>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_MspInit+0x44>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6613      	str	r3, [r2, #96]	; 0x60
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_MspInit+0x44>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_MspInit+0x44>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MspInit+0x44>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	6593      	str	r3, [r2, #88]	; 0x58
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_MspInit+0x44>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a2f      	ldr	r2, [pc, #188]	; (8000a64 <HAL_DAC_MspInit+0xdc>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d158      	bne.n	8000a5c <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80009aa:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <HAL_DAC_MspInit+0xe0>)
 80009ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ae:	4a2e      	ldr	r2, [pc, #184]	; (8000a68 <HAL_DAC_MspInit+0xe0>)
 80009b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80009b4:	6593      	str	r3, [r2, #88]	; 0x58
 80009b6:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <HAL_DAC_MspInit+0xe0>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b29      	ldr	r3, [pc, #164]	; (8000a68 <HAL_DAC_MspInit+0xe0>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a28      	ldr	r2, [pc, #160]	; (8000a68 <HAL_DAC_MspInit+0xe0>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <HAL_DAC_MspInit+0xe0>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009da:	2310      	movs	r3, #16
 80009dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009de:	2303      	movs	r3, #3
 80009e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f0:	f001 f8bc 	bl	8001b6c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <HAL_DAC_MspInit+0xe4>)
 80009f6:	4a1e      	ldr	r2, [pc, #120]	; (8000a70 <HAL_DAC_MspInit+0xe8>)
 80009f8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <HAL_DAC_MspInit+0xe4>)
 80009fc:	2206      	movs	r2, #6
 80009fe:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <HAL_DAC_MspInit+0xe4>)
 8000a02:	2210      	movs	r2, #16
 8000a04:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <HAL_DAC_MspInit+0xe4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_DAC_MspInit+0xe4>)
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <HAL_DAC_MspInit+0xe4>)
 8000a14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a18:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_DAC_MspInit+0xe4>)
 8000a1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a20:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_DAC_MspInit+0xe4>)
 8000a24:	2220      	movs	r2, #32
 8000a26:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <HAL_DAC_MspInit+0xe4>)
 8000a2a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000a2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000a30:	480e      	ldr	r0, [pc, #56]	; (8000a6c <HAL_DAC_MspInit+0xe4>)
 8000a32:	f000 fea3 	bl	800177c <HAL_DMA_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8000a3c:	f7ff ff7a 	bl	8000934 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <HAL_DAC_MspInit+0xe4>)
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <HAL_DAC_MspInit+0xe4>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2036      	movs	r0, #54	; 0x36
 8000a52:	f000 fb3a 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a56:	2036      	movs	r0, #54	; 0x36
 8000a58:	f000 fb53 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40007400 	.word	0x40007400
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	20000098 	.word	0x20000098
 8000a70:	40020030 	.word	0x40020030

08000a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a84:	d113      	bne.n	8000aae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_TIM_Base_MspInit+0x44>)
 8000a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <HAL_TIM_Base_MspInit+0x44>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6593      	str	r3, [r2, #88]	; 0x58
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_TIM_Base_MspInit+0x44>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	201c      	movs	r0, #28
 8000aa4:	f000 fb11 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000aa8:	201c      	movs	r0, #28
 8000aaa:	f000 fb2a 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b0ac      	sub	sp, #176	; 0xb0
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2288      	movs	r2, #136	; 0x88
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 f886 	bl	8004bee <memset>
  if(huart->Instance==USART2)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a21      	ldr	r2, [pc, #132]	; (8000b6c <HAL_UART_MspInit+0xb0>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d13b      	bne.n	8000b64 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4618      	mov	r0, r3
 8000afa:	f002 f869 	bl	8002bd0 <HAL_RCCEx_PeriphCLKConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b04:	f7ff ff16 	bl	8000934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b08:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <HAL_UART_MspInit+0xb4>)
 8000b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0c:	4a18      	ldr	r2, [pc, #96]	; (8000b70 <HAL_UART_MspInit+0xb4>)
 8000b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b12:	6593      	str	r3, [r2, #88]	; 0x58
 8000b14:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <HAL_UART_MspInit+0xb4>)
 8000b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <HAL_UART_MspInit+0xb4>)
 8000b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b24:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <HAL_UART_MspInit+0xb4>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2c:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <HAL_UART_MspInit+0xb4>)
 8000b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b38:	230c      	movs	r3, #12
 8000b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b50:	2307      	movs	r3, #7
 8000b52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b60:	f001 f804 	bl	8001b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	37b0      	adds	r7, #176	; 0xb0
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	40021000 	.word	0x40021000

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f000 f964 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <DMA1_Channel3_IRQHandler+0x10>)
 8000bce:	f000 feed 	bl	80019ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000098 	.word	0x20000098

08000bdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <TIM2_IRQHandler+0x10>)
 8000be2:	f002 fd79 	bl	80036d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000e0 	.word	0x200000e0

08000bf0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bf4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bf8:	f001 f962 	bl	8001ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <TIM6_DAC_IRQHandler+0x10>)
 8000c06:	f000 fb85 	bl	8001314 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000084 	.word	0x20000084

08000c14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	e00a      	b.n	8000c3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c26:	f3af 8000 	nop.w
 8000c2a:	4601      	mov	r1, r0
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	60ba      	str	r2, [r7, #8]
 8000c32:	b2ca      	uxtb	r2, r1
 8000c34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	dbf0      	blt.n	8000c26 <_read+0x12>
  }

  return len;
 8000c44:	687b      	ldr	r3, [r7, #4]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	60f8      	str	r0, [r7, #12]
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	e009      	b.n	8000c74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	60ba      	str	r2, [r7, #8]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fe3d 	bl	80008e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3301      	adds	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	dbf1      	blt.n	8000c60 <_write+0x12>
  }
  return len;
 8000c7c:	687b      	ldr	r3, [r7, #4]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_close>:

int _close(int file)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cae:	605a      	str	r2, [r3, #4]
  return 0;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <_isatty>:

int _isatty(int file)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf8:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <_sbrk+0x5c>)
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <_sbrk+0x60>)
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d102      	bne.n	8000d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <_sbrk+0x64>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <_sbrk+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d207      	bcs.n	8000d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d20:	f003 ffb4 	bl	8004c8c <__errno>
 8000d24:	4603      	mov	r3, r0
 8000d26:	220c      	movs	r2, #12
 8000d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	e009      	b.n	8000d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <_sbrk+0x64>)
 8000d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20018000 	.word	0x20018000
 8000d50:	00000400 	.word	0x00000400
 8000d54:	200001b4 	.word	0x200001b4
 8000d58:	20000308 	.word	0x20000308

08000d5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d84:	f7ff ffea 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d88:	480c      	ldr	r0, [pc, #48]	; (8000dbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d8a:	490d      	ldr	r1, [pc, #52]	; (8000dc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <LoopForever+0xe>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da0:	4c0a      	ldr	r4, [pc, #40]	; (8000dcc <LoopForever+0x16>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dae:	f003 ff73 	bl	8004c98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000db2:	f7ff fbdb 	bl	800056c <main>

08000db6 <LoopForever>:

LoopForever:
    b LoopForever
 8000db6:	e7fe      	b.n	8000db6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000db8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dc4:	08005918 	.word	0x08005918
  ldr r2, =_sbss
 8000dc8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000dcc:	20000308 	.word	0x20000308

08000dd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC1_2_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_Init+0x3c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <HAL_Init+0x3c>)
 8000de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dea:	2003      	movs	r0, #3
 8000dec:	f000 f962 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df0:	200f      	movs	r0, #15
 8000df2:	f000 f80f 	bl	8000e14 <HAL_InitTick>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d002      	beq.n	8000e02 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	e001      	b.n	8000e06 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e02:	f7ff fd9d 	bl	8000940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e06:	79fb      	ldrb	r3, [r7, #7]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40022000 	.word	0x40022000

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_InitTick+0x6c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d023      	beq.n	8000e70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_InitTick+0x70>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_InitTick+0x6c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f96d 	bl	800111e <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10f      	bne.n	8000e6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d809      	bhi.n	8000e64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f000 f937 	bl	80010ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_InitTick+0x74>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e007      	b.n	8000e74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
 8000e68:	e004      	b.n	8000e74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	e001      	b.n	8000e74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	200001b8 	.word	0x200001b8

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200001b8 	.word	0x200001b8

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_Delay+0x44>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008

08000f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db0b      	blt.n	8000fa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 021f 	and.w	r2, r3, #31
 8000f90:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <__NVIC_EnableIRQ+0x38>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	2001      	movs	r0, #1
 8000f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000e100 	.word	0xe000e100

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	; (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
         );
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff8e 	bl	8000fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff29 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff3e 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff8e 	bl	8001008 <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5d 	bl	8000fb4 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff31 	bl	8000f78 <__NVIC_EnableIRQ>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffa2 	bl	8001070 <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e014      	b.n	8001172 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	791b      	ldrb	r3, [r3, #4]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d105      	bne.n	800115e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff fc15 	bl	8000988 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2202      	movs	r2, #2
 8001162:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
 8001188:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	795b      	ldrb	r3, [r3, #5]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_DAC_Start_DMA+0x1e>
 8001196:	2302      	movs	r3, #2
 8001198:	e0ab      	b.n	80012f2 <HAL_DAC_Start_DMA+0x176>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2201      	movs	r2, #1
 800119e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2202      	movs	r2, #2
 80011a4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d12f      	bne.n	800120c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	4a52      	ldr	r2, [pc, #328]	; (80012fc <HAL_DAC_Start_DMA+0x180>)
 80011b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	4a51      	ldr	r2, [pc, #324]	; (8001300 <HAL_DAC_Start_DMA+0x184>)
 80011ba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	4a50      	ldr	r2, [pc, #320]	; (8001304 <HAL_DAC_Start_DMA+0x188>)
 80011c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011d2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d013      	beq.n	8001202 <HAL_DAC_Start_DMA+0x86>
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d845      	bhi.n	800126c <HAL_DAC_Start_DMA+0xf0>
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_DAC_Start_DMA+0x72>
 80011e6:	6a3b      	ldr	r3, [r7, #32]
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d005      	beq.n	80011f8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80011ec:	e03e      	b.n	800126c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	3308      	adds	r3, #8
 80011f4:	613b      	str	r3, [r7, #16]
        break;
 80011f6:	e03c      	b.n	8001272 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	330c      	adds	r3, #12
 80011fe:	613b      	str	r3, [r7, #16]
        break;
 8001200:	e037      	b.n	8001272 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3310      	adds	r3, #16
 8001208:	613b      	str	r3, [r7, #16]
        break;
 800120a:	e032      	b.n	8001272 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	4a3d      	ldr	r2, [pc, #244]	; (8001308 <HAL_DAC_Start_DMA+0x18c>)
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	4a3c      	ldr	r2, [pc, #240]	; (800130c <HAL_DAC_Start_DMA+0x190>)
 800121a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	4a3b      	ldr	r2, [pc, #236]	; (8001310 <HAL_DAC_Start_DMA+0x194>)
 8001222:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001232:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	2b08      	cmp	r3, #8
 8001238:	d013      	beq.n	8001262 <HAL_DAC_Start_DMA+0xe6>
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	2b08      	cmp	r3, #8
 800123e:	d817      	bhi.n	8001270 <HAL_DAC_Start_DMA+0xf4>
 8001240:	6a3b      	ldr	r3, [r7, #32]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_DAC_Start_DMA+0xd2>
 8001246:	6a3b      	ldr	r3, [r7, #32]
 8001248:	2b04      	cmp	r3, #4
 800124a:	d005      	beq.n	8001258 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800124c:	e010      	b.n	8001270 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	3314      	adds	r3, #20
 8001254:	613b      	str	r3, [r7, #16]
        break;
 8001256:	e00c      	b.n	8001272 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3318      	adds	r3, #24
 800125e:	613b      	str	r3, [r7, #16]
        break;
 8001260:	e007      	b.n	8001272 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	331c      	adds	r3, #28
 8001268:	613b      	str	r3, [r7, #16]
        break;
 800126a:	e002      	b.n	8001272 <HAL_DAC_Start_DMA+0xf6>
        break;
 800126c:	bf00      	nop
 800126e:	e000      	b.n	8001272 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001270:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d111      	bne.n	800129c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001286:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6898      	ldr	r0, [r3, #8]
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	f000 fb2b 	bl	80018ec <HAL_DMA_Start_IT>
 8001296:	4603      	mov	r3, r0
 8001298:	75fb      	strb	r3, [r7, #23]
 800129a:	e010      	b.n	80012be <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80012aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	68d8      	ldr	r0, [r3, #12]
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	f000 fb19 	bl	80018ec <HAL_DMA_Start_IT>
 80012ba:	4603      	mov	r3, r0
 80012bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2200      	movs	r2, #0
 80012c2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10c      	bne.n	80012e4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6819      	ldr	r1, [r3, #0]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	2201      	movs	r2, #1
 80012d8:	409a      	lsls	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	e005      	b.n	80012f0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	f043 0204 	orr.w	r2, r3, #4
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	08001653 	.word	0x08001653
 8001300:	08001675 	.word	0x08001675
 8001304:	08001691 	.word	0x08001691
 8001308:	0800170f 	.word	0x0800170f
 800130c:	08001731 	.word	0x08001731
 8001310:	0800174d 	.word	0x0800174d

08001314 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800132a:	d120      	bne.n	800136e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800133a:	d118      	bne.n	800136e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2204      	movs	r2, #4
 8001340:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	f043 0201 	orr.w	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001356:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001366:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 f841 	bl	80013f0 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800137c:	d120      	bne.n	80013c0 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800138c:	d118      	bne.n	80013c0 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2204      	movs	r2, #4
 8001392:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	f043 0202 	orr.w	r2, r3, #2
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80013b8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f99d 	bl	80016fa <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	795b      	ldrb	r3, [r3, #5]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d101      	bne.n	8001420 <HAL_DAC_ConfigChannel+0x1c>
 800141c:	2302      	movs	r3, #2
 800141e:	e114      	b.n	800164a <HAL_DAC_ConfigChannel+0x246>
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2201      	movs	r2, #1
 8001424:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2202      	movs	r2, #2
 800142a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b04      	cmp	r3, #4
 8001432:	f040 8081 	bne.w	8001538 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001436:	f7ff fd3d 	bl	8000eb4 <HAL_GetTick>
 800143a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d140      	bne.n	80014c4 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001442:	e018      	b.n	8001476 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001444:	f7ff fd36 	bl	8000eb4 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b01      	cmp	r3, #1
 8001450:	d911      	bls.n	8001476 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00a      	beq.n	8001476 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	f043 0208 	orr.w	r2, r3, #8
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2203      	movs	r2, #3
 8001470:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e0e9      	b.n	800164a <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1df      	bne.n	8001444 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8001484:	2001      	movs	r0, #1
 8001486:	f7ff fd21 	bl	8000ecc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	6992      	ldr	r2, [r2, #24]
 8001492:	641a      	str	r2, [r3, #64]	; 0x40
 8001494:	e023      	b.n	80014de <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001496:	f7ff fd0d 	bl	8000eb4 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d90f      	bls.n	80014c4 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	da0a      	bge.n	80014c4 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	f043 0208 	orr.w	r2, r3, #8
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2203      	movs	r2, #3
 80014be:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e0c2      	b.n	800164a <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	dbe3      	blt.n	8001496 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80014ce:	2001      	movs	r0, #1
 80014d0:	f7ff fcfc 	bl	8000ecc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	6992      	ldr	r2, [r2, #24]
 80014dc:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	ea02 0103 	and.w	r1, r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	69da      	ldr	r2, [r3, #28]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	409a      	lsls	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f003 0310 	and.w	r3, r3, #16
 8001518:	21ff      	movs	r1, #255	; 0xff
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	ea02 0103 	and.w	r1, r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	6a1a      	ldr	r2, [r3, #32]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	409a      	lsls	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d11d      	bne.n	800157c <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001546:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	221f      	movs	r2, #31
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001582:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	2207      	movs	r2, #7
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	431a      	orrs	r2, r3
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f003 0310 	and.w	r3, r3, #16
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6819      	ldr	r1, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f003 0310 	and.w	r3, r3, #16
 80015d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43da      	mvns	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	400a      	ands	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	f640 72fc 	movw	r2, #4092	; 0xffc
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f003 0310 	and.w	r3, r3, #16
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6819      	ldr	r1, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f003 0310 	and.w	r3, r3, #16
 800162c:	22c0      	movs	r2, #192	; 0xc0
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	400a      	ands	r2, r1
 800163a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2201      	movs	r2, #1
 8001640:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3720      	adds	r7, #32
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f7ff f953 	bl	800090c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2201      	movs	r2, #1
 800166a:	711a      	strb	r2, [r3, #4]
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f7ff fea0 	bl	80013c8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f043 0204 	orr.w	r2, r3, #4
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f7ff fe96 	bl	80013dc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2201      	movs	r2, #1
 80016b4:	711a      	strb	r2, [r3, #4]
}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f7ff ffce 	bl	80016be <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2201      	movs	r2, #1
 8001726:	711a      	strb	r2, [r3, #4]
}
 8001728:	bf00      	nop
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f7ff ffc7 	bl	80016d2 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001758:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	f043 0204 	orr.w	r2, r3, #4
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f7ff ffbd 	bl	80016e6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2201      	movs	r2, #1
 8001770:	711a      	strb	r2, [r3, #4]
}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e098      	b.n	80018c0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	4b4d      	ldr	r3, [pc, #308]	; (80018cc <HAL_DMA_Init+0x150>)
 8001796:	429a      	cmp	r2, r3
 8001798:	d80f      	bhi.n	80017ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	4b4b      	ldr	r3, [pc, #300]	; (80018d0 <HAL_DMA_Init+0x154>)
 80017a2:	4413      	add	r3, r2
 80017a4:	4a4b      	ldr	r2, [pc, #300]	; (80018d4 <HAL_DMA_Init+0x158>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	009a      	lsls	r2, r3, #2
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a48      	ldr	r2, [pc, #288]	; (80018d8 <HAL_DMA_Init+0x15c>)
 80017b6:	641a      	str	r2, [r3, #64]	; 0x40
 80017b8:	e00e      	b.n	80017d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	4b46      	ldr	r3, [pc, #280]	; (80018dc <HAL_DMA_Init+0x160>)
 80017c2:	4413      	add	r3, r2
 80017c4:	4a43      	ldr	r2, [pc, #268]	; (80018d4 <HAL_DMA_Init+0x158>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	091b      	lsrs	r3, r3, #4
 80017cc:	009a      	lsls	r2, r3, #2
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a42      	ldr	r2, [pc, #264]	; (80018e0 <HAL_DMA_Init+0x164>)
 80017d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2202      	movs	r2, #2
 80017dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80017ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	4313      	orrs	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001832:	d039      	beq.n	80018a8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	4a27      	ldr	r2, [pc, #156]	; (80018d8 <HAL_DMA_Init+0x15c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d11a      	bne.n	8001874 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800183e:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <HAL_DMA_Init+0x168>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f003 031c 	and.w	r3, r3, #28
 800184a:	210f      	movs	r1, #15
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	4924      	ldr	r1, [pc, #144]	; (80018e4 <HAL_DMA_Init+0x168>)
 8001854:	4013      	ands	r3, r2
 8001856:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001858:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_DMA_Init+0x168>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6859      	ldr	r1, [r3, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001864:	f003 031c 	and.w	r3, r3, #28
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	491d      	ldr	r1, [pc, #116]	; (80018e4 <HAL_DMA_Init+0x168>)
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
 8001872:	e019      	b.n	80018a8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001874:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <HAL_DMA_Init+0x16c>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	f003 031c 	and.w	r3, r3, #28
 8001880:	210f      	movs	r1, #15
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	4917      	ldr	r1, [pc, #92]	; (80018e8 <HAL_DMA_Init+0x16c>)
 800188a:	4013      	ands	r3, r2
 800188c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_DMA_Init+0x16c>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6859      	ldr	r1, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	f003 031c 	and.w	r3, r3, #28
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	4911      	ldr	r1, [pc, #68]	; (80018e8 <HAL_DMA_Init+0x16c>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	40020407 	.word	0x40020407
 80018d0:	bffdfff8 	.word	0xbffdfff8
 80018d4:	cccccccd 	.word	0xcccccccd
 80018d8:	40020000 	.word	0x40020000
 80018dc:	bffdfbf8 	.word	0xbffdfbf8
 80018e0:	40020400 	.word	0x40020400
 80018e4:	400200a8 	.word	0x400200a8
 80018e8:	400204a8 	.word	0x400204a8

080018ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_DMA_Start_IT+0x20>
 8001908:	2302      	movs	r3, #2
 800190a:	e04b      	b.n	80019a4 <HAL_DMA_Start_IT+0xb8>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b01      	cmp	r3, #1
 800191e:	d13a      	bne.n	8001996 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0201 	bic.w	r2, r2, #1
 800193c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	68b9      	ldr	r1, [r7, #8]
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 f8e0 	bl	8001b0a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	2b00      	cmp	r3, #0
 8001950:	d008      	beq.n	8001964 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 020e 	orr.w	r2, r2, #14
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	e00f      	b.n	8001984 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0204 	bic.w	r2, r2, #4
 8001972:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 020a 	orr.w	r2, r2, #10
 8001982:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	e005      	b.n	80019a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800199e:	2302      	movs	r3, #2
 80019a0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80019a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c8:	f003 031c 	and.w	r3, r3, #28
 80019cc:	2204      	movs	r2, #4
 80019ce:	409a      	lsls	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d026      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x7a>
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d021      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0320 	and.w	r3, r3, #32
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d107      	bne.n	8001a00 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0204 	bic.w	r2, r2, #4
 80019fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a04:	f003 021c 	and.w	r2, r3, #28
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	2104      	movs	r1, #4
 8001a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a12:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d071      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a24:	e06c      	b.n	8001b00 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f003 031c 	and.w	r3, r3, #28
 8001a2e:	2202      	movs	r2, #2
 8001a30:	409a      	lsls	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d02e      	beq.n	8001a98 <HAL_DMA_IRQHandler+0xec>
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d029      	beq.n	8001a98 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10b      	bne.n	8001a6a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 020a 	bic.w	r2, r2, #10
 8001a60:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f003 021c 	and.w	r2, r3, #28
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	2102      	movs	r1, #2
 8001a78:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d038      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a96:	e033      	b.n	8001b00 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	f003 031c 	and.w	r3, r3, #28
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d02a      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x156>
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d025      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 020e 	bic.w	r2, r2, #14
 8001ac4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f003 021c 	and.w	r2, r3, #28
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
}
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1c:	f003 021c 	and.w	r2, r3, #28
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	2101      	movs	r1, #1
 8001b26:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b10      	cmp	r3, #16
 8001b3a:	d108      	bne.n	8001b4e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b4c:	e007      	b.n	8001b5e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	60da      	str	r2, [r3, #12]
}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7a:	e17f      	b.n	8001e7c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2101      	movs	r1, #1
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	fa01 f303 	lsl.w	r3, r1, r3
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 8171 	beq.w	8001e76 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d005      	beq.n	8001bac <HAL_GPIO_Init+0x40>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d130      	bne.n	8001c0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001be2:	2201      	movs	r2, #1
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	091b      	lsrs	r3, r3, #4
 8001bf8:	f003 0201 	and.w	r2, r3, #1
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d118      	bne.n	8001c4c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c20:	2201      	movs	r2, #1
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	08db      	lsrs	r3, r3, #3
 8001c36:	f003 0201 	and.w	r2, r3, #1
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d017      	beq.n	8001c88 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d123      	bne.n	8001cdc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	08da      	lsrs	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3208      	adds	r2, #8
 8001c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3208      	adds	r2, #8
 8001cd6:	6939      	ldr	r1, [r7, #16]
 8001cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80ac 	beq.w	8001e76 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	4b5f      	ldr	r3, [pc, #380]	; (8001e9c <HAL_GPIO_Init+0x330>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d22:	4a5e      	ldr	r2, [pc, #376]	; (8001e9c <HAL_GPIO_Init+0x330>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6613      	str	r3, [r2, #96]	; 0x60
 8001d2a:	4b5c      	ldr	r3, [pc, #368]	; (8001e9c <HAL_GPIO_Init+0x330>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d36:	4a5a      	ldr	r2, [pc, #360]	; (8001ea0 <HAL_GPIO_Init+0x334>)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d60:	d025      	beq.n	8001dae <HAL_GPIO_Init+0x242>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4f      	ldr	r2, [pc, #316]	; (8001ea4 <HAL_GPIO_Init+0x338>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d01f      	beq.n	8001daa <HAL_GPIO_Init+0x23e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4e      	ldr	r2, [pc, #312]	; (8001ea8 <HAL_GPIO_Init+0x33c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d019      	beq.n	8001da6 <HAL_GPIO_Init+0x23a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4d      	ldr	r2, [pc, #308]	; (8001eac <HAL_GPIO_Init+0x340>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d013      	beq.n	8001da2 <HAL_GPIO_Init+0x236>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4c      	ldr	r2, [pc, #304]	; (8001eb0 <HAL_GPIO_Init+0x344>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00d      	beq.n	8001d9e <HAL_GPIO_Init+0x232>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4b      	ldr	r2, [pc, #300]	; (8001eb4 <HAL_GPIO_Init+0x348>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d007      	beq.n	8001d9a <HAL_GPIO_Init+0x22e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4a      	ldr	r2, [pc, #296]	; (8001eb8 <HAL_GPIO_Init+0x34c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d101      	bne.n	8001d96 <HAL_GPIO_Init+0x22a>
 8001d92:	2306      	movs	r3, #6
 8001d94:	e00c      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001d96:	2307      	movs	r3, #7
 8001d98:	e00a      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	e008      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001d9e:	2304      	movs	r3, #4
 8001da0:	e006      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001da2:	2303      	movs	r3, #3
 8001da4:	e004      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e002      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001dae:	2300      	movs	r3, #0
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	f002 0203 	and.w	r2, r2, #3
 8001db6:	0092      	lsls	r2, r2, #2
 8001db8:	4093      	lsls	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dc0:	4937      	ldr	r1, [pc, #220]	; (8001ea0 <HAL_GPIO_Init+0x334>)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	089b      	lsrs	r3, r3, #2
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dce:	4b3b      	ldr	r3, [pc, #236]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001df2:	4a32      	ldr	r2, [pc, #200]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001df8:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e1c:	4a27      	ldr	r2, [pc, #156]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e22:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e46:	4a1d      	ldr	r2, [pc, #116]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e70:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <HAL_GPIO_Init+0x350>)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa22 f303 	lsr.w	r3, r2, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f47f ae78 	bne.w	8001b7c <HAL_GPIO_Init+0x10>
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	371c      	adds	r7, #28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40010000 	.word	0x40010000
 8001ea4:	48000400 	.word	0x48000400
 8001ea8:	48000800 	.word	0x48000800
 8001eac:	48000c00 	.word	0x48000c00
 8001eb0:	48001000 	.word	0x48001000
 8001eb4:	48001400 	.word	0x48001400
 8001eb8:	48001800 	.word	0x48001800
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d006      	beq.n	8001ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ed6:	4a05      	ldr	r2, [pc, #20]	; (8001eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f806 	bl	8001ef0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40007000 	.word	0x40007000

08001f24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f32:	d130      	bne.n	8001f96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f34:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f40:	d038      	beq.n	8001fb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2232      	movs	r2, #50	; 0x32
 8001f58:	fb02 f303 	mul.w	r3, r2, r3
 8001f5c:	4a1b      	ldr	r2, [pc, #108]	; (8001fcc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	0c9b      	lsrs	r3, r3, #18
 8001f64:	3301      	adds	r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f68:	e002      	b.n	8001f70 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7c:	d102      	bne.n	8001f84 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f2      	bne.n	8001f6a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f90:	d110      	bne.n	8001fb4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e00f      	b.n	8001fb6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa2:	d007      	beq.n	8001fb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fac:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fb2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	431bde83 	.word	0x431bde83

08001fd0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e3ca      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fe2:	4b97      	ldr	r3, [pc, #604]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fec:	4b94      	ldr	r3, [pc, #592]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 80e4 	beq.w	80021cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d007      	beq.n	800201a <HAL_RCC_OscConfig+0x4a>
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	2b0c      	cmp	r3, #12
 800200e:	f040 808b 	bne.w	8002128 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2b01      	cmp	r3, #1
 8002016:	f040 8087 	bne.w	8002128 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800201a:	4b89      	ldr	r3, [pc, #548]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d005      	beq.n	8002032 <HAL_RCC_OscConfig+0x62>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e3a2      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1a      	ldr	r2, [r3, #32]
 8002036:	4b82      	ldr	r3, [pc, #520]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d004      	beq.n	800204c <HAL_RCC_OscConfig+0x7c>
 8002042:	4b7f      	ldr	r3, [pc, #508]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800204a:	e005      	b.n	8002058 <HAL_RCC_OscConfig+0x88>
 800204c:	4b7c      	ldr	r3, [pc, #496]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 800204e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002058:	4293      	cmp	r3, r2
 800205a:	d223      	bcs.n	80020a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	4618      	mov	r0, r3
 8002062:	f000 fd55 	bl	8002b10 <RCC_SetFlashLatencyFromMSIRange>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e383      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002070:	4b73      	ldr	r3, [pc, #460]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a72      	ldr	r2, [pc, #456]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002076:	f043 0308 	orr.w	r3, r3, #8
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	4b70      	ldr	r3, [pc, #448]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	496d      	ldr	r1, [pc, #436]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800208e:	4b6c      	ldr	r3, [pc, #432]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	4968      	ldr	r1, [pc, #416]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	604b      	str	r3, [r1, #4]
 80020a2:	e025      	b.n	80020f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020a4:	4b66      	ldr	r3, [pc, #408]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a65      	ldr	r2, [pc, #404]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 80020aa:	f043 0308 	orr.w	r3, r3, #8
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	4b63      	ldr	r3, [pc, #396]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4960      	ldr	r1, [pc, #384]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020c2:	4b5f      	ldr	r3, [pc, #380]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	021b      	lsls	r3, r3, #8
 80020d0:	495b      	ldr	r1, [pc, #364]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d109      	bne.n	80020f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 fd15 	bl	8002b10 <RCC_SetFlashLatencyFromMSIRange>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e343      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020f0:	f000 fc4a 	bl	8002988 <HAL_RCC_GetSysClockFreq>
 80020f4:	4602      	mov	r2, r0
 80020f6:	4b52      	ldr	r3, [pc, #328]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	091b      	lsrs	r3, r3, #4
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	4950      	ldr	r1, [pc, #320]	; (8002244 <HAL_RCC_OscConfig+0x274>)
 8002102:	5ccb      	ldrb	r3, [r1, r3]
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
 800210c:	4a4e      	ldr	r2, [pc, #312]	; (8002248 <HAL_RCC_OscConfig+0x278>)
 800210e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002110:	4b4e      	ldr	r3, [pc, #312]	; (800224c <HAL_RCC_OscConfig+0x27c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fe7d 	bl	8000e14 <HAL_InitTick>
 800211a:	4603      	mov	r3, r0
 800211c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d052      	beq.n	80021ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	e327      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d032      	beq.n	8002196 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002130:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a42      	ldr	r2, [pc, #264]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800213c:	f7fe feba 	bl	8000eb4 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002144:	f7fe feb6 	bl	8000eb4 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e310      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002156:	4b3a      	ldr	r3, [pc, #232]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002162:	4b37      	ldr	r3, [pc, #220]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a36      	ldr	r2, [pc, #216]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002168:	f043 0308 	orr.w	r3, r3, #8
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	4b34      	ldr	r3, [pc, #208]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4931      	ldr	r1, [pc, #196]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 800217c:	4313      	orrs	r3, r2
 800217e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002180:	4b2f      	ldr	r3, [pc, #188]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	492c      	ldr	r1, [pc, #176]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
 8002194:	e01a      	b.n	80021cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002196:	4b2a      	ldr	r3, [pc, #168]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a29      	ldr	r2, [pc, #164]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021a2:	f7fe fe87 	bl	8000eb4 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021aa:	f7fe fe83 	bl	8000eb4 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e2dd      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021bc:	4b20      	ldr	r3, [pc, #128]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f0      	bne.n	80021aa <HAL_RCC_OscConfig+0x1da>
 80021c8:	e000      	b.n	80021cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d074      	beq.n	80022c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d005      	beq.n	80021ea <HAL_RCC_OscConfig+0x21a>
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b0c      	cmp	r3, #12
 80021e2:	d10e      	bne.n	8002202 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d10b      	bne.n	8002202 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d064      	beq.n	80022c0 <HAL_RCC_OscConfig+0x2f0>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d160      	bne.n	80022c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e2ba      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220a:	d106      	bne.n	800221a <HAL_RCC_OscConfig+0x24a>
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	e026      	b.n	8002268 <HAL_RCC_OscConfig+0x298>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002222:	d115      	bne.n	8002250 <HAL_RCC_OscConfig+0x280>
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a05      	ldr	r2, [pc, #20]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 800222a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a02      	ldr	r2, [pc, #8]	; (8002240 <HAL_RCC_OscConfig+0x270>)
 8002236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	e014      	b.n	8002268 <HAL_RCC_OscConfig+0x298>
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	0800588c 	.word	0x0800588c
 8002248:	20000000 	.word	0x20000000
 800224c:	20000004 	.word	0x20000004
 8002250:	4ba0      	ldr	r3, [pc, #640]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a9f      	ldr	r2, [pc, #636]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	4b9d      	ldr	r3, [pc, #628]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a9c      	ldr	r2, [pc, #624]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d013      	beq.n	8002298 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7fe fe20 	bl	8000eb4 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002278:	f7fe fe1c 	bl	8000eb4 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	; 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e276      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228a:	4b92      	ldr	r3, [pc, #584]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x2a8>
 8002296:	e014      	b.n	80022c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7fe fe0c 	bl	8000eb4 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a0:	f7fe fe08 	bl	8000eb4 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e262      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022b2:	4b88      	ldr	r3, [pc, #544]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x2d0>
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d060      	beq.n	8002390 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_OscConfig+0x310>
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2b0c      	cmp	r3, #12
 80022d8:	d119      	bne.n	800230e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d116      	bne.n	800230e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022e0:	4b7c      	ldr	r3, [pc, #496]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_OscConfig+0x328>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e23f      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f8:	4b76      	ldr	r3, [pc, #472]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	061b      	lsls	r3, r3, #24
 8002306:	4973      	ldr	r1, [pc, #460]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800230c:	e040      	b.n	8002390 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d023      	beq.n	800235e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002316:	4b6f      	ldr	r3, [pc, #444]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a6e      	ldr	r2, [pc, #440]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 800231c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7fe fdc7 	bl	8000eb4 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232a:	f7fe fdc3 	bl	8000eb4 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e21d      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800233c:	4b65      	ldr	r3, [pc, #404]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002348:	4b62      	ldr	r3, [pc, #392]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	061b      	lsls	r3, r3, #24
 8002356:	495f      	ldr	r1, [pc, #380]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
 800235c:	e018      	b.n	8002390 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235e:	4b5d      	ldr	r3, [pc, #372]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a5c      	ldr	r2, [pc, #368]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7fe fda3 	bl	8000eb4 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002372:	f7fe fd9f 	bl	8000eb4 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e1f9      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002384:	4b53      	ldr	r3, [pc, #332]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d03c      	beq.n	8002416 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01c      	beq.n	80023de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a4:	4b4b      	ldr	r3, [pc, #300]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 80023a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023aa:	4a4a      	ldr	r2, [pc, #296]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b4:	f7fe fd7e 	bl	8000eb4 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023bc:	f7fe fd7a 	bl	8000eb4 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e1d4      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023ce:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 80023d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ef      	beq.n	80023bc <HAL_RCC_OscConfig+0x3ec>
 80023dc:	e01b      	b.n	8002416 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023de:	4b3d      	ldr	r3, [pc, #244]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 80023e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023e4:	4a3b      	ldr	r2, [pc, #236]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ee:	f7fe fd61 	bl	8000eb4 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f6:	f7fe fd5d 	bl	8000eb4 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e1b7      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002408:	4b32      	ldr	r3, [pc, #200]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 800240a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1ef      	bne.n	80023f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 80a6 	beq.w	8002570 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002424:	2300      	movs	r3, #0
 8002426:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002428:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 800242a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10d      	bne.n	8002450 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002434:	4b27      	ldr	r3, [pc, #156]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002438:	4a26      	ldr	r2, [pc, #152]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 800243a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243e:	6593      	str	r3, [r2, #88]	; 0x58
 8002440:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244c:	2301      	movs	r3, #1
 800244e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002450:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <HAL_RCC_OscConfig+0x508>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002458:	2b00      	cmp	r3, #0
 800245a:	d118      	bne.n	800248e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800245c:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <HAL_RCC_OscConfig+0x508>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <HAL_RCC_OscConfig+0x508>)
 8002462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002466:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002468:	f7fe fd24 	bl	8000eb4 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002470:	f7fe fd20 	bl	8000eb4 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e17a      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_RCC_OscConfig+0x508>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d108      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4d8>
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249c:	4a0d      	ldr	r2, [pc, #52]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024a6:	e029      	b.n	80024fc <HAL_RCC_OscConfig+0x52c>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b05      	cmp	r3, #5
 80024ae:	d115      	bne.n	80024dc <HAL_RCC_OscConfig+0x50c>
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b6:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 80024b8:	f043 0304 	orr.w	r3, r3, #4
 80024bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c6:	4a03      	ldr	r2, [pc, #12]	; (80024d4 <HAL_RCC_OscConfig+0x504>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024d0:	e014      	b.n	80024fc <HAL_RCC_OscConfig+0x52c>
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40007000 	.word	0x40007000
 80024dc:	4b9c      	ldr	r3, [pc, #624]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 80024de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e2:	4a9b      	ldr	r2, [pc, #620]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ec:	4b98      	ldr	r3, [pc, #608]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f2:	4a97      	ldr	r2, [pc, #604]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 80024f4:	f023 0304 	bic.w	r3, r3, #4
 80024f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d016      	beq.n	8002532 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7fe fcd6 	bl	8000eb4 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800250a:	e00a      	b.n	8002522 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250c:	f7fe fcd2 	bl	8000eb4 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	; 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e12a      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002522:	4b8b      	ldr	r3, [pc, #556]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ed      	beq.n	800250c <HAL_RCC_OscConfig+0x53c>
 8002530:	e015      	b.n	800255e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002532:	f7fe fcbf 	bl	8000eb4 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7fe fcbb 	bl	8000eb4 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e113      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002550:	4b7f      	ldr	r3, [pc, #508]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1ed      	bne.n	800253a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800255e:	7ffb      	ldrb	r3, [r7, #31]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d105      	bne.n	8002570 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002564:	4b7a      	ldr	r3, [pc, #488]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	4a79      	ldr	r2, [pc, #484]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 800256a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80fe 	beq.w	8002776 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	2b02      	cmp	r3, #2
 8002580:	f040 80d0 	bne.w	8002724 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002584:	4b72      	ldr	r3, [pc, #456]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f003 0203 	and.w	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	429a      	cmp	r2, r3
 8002596:	d130      	bne.n	80025fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	3b01      	subs	r3, #1
 80025a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d127      	bne.n	80025fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d11f      	bne.n	80025fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025c4:	2a07      	cmp	r2, #7
 80025c6:	bf14      	ite	ne
 80025c8:	2201      	movne	r2, #1
 80025ca:	2200      	moveq	r2, #0
 80025cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d113      	bne.n	80025fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025dc:	085b      	lsrs	r3, r3, #1
 80025de:	3b01      	subs	r3, #1
 80025e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d109      	bne.n	80025fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	085b      	lsrs	r3, r3, #1
 80025f2:	3b01      	subs	r3, #1
 80025f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d06e      	beq.n	80026d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b0c      	cmp	r3, #12
 80025fe:	d069      	beq.n	80026d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002600:	4b53      	ldr	r3, [pc, #332]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d105      	bne.n	8002618 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800260c:	4b50      	ldr	r3, [pc, #320]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0ad      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800261c:	4b4c      	ldr	r3, [pc, #304]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a4b      	ldr	r2, [pc, #300]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 8002622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002626:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002628:	f7fe fc44 	bl	8000eb4 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002630:	f7fe fc40 	bl	8000eb4 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e09a      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002642:	4b43      	ldr	r3, [pc, #268]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800264e:	4b40      	ldr	r3, [pc, #256]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	4b40      	ldr	r3, [pc, #256]	; (8002754 <HAL_RCC_OscConfig+0x784>)
 8002654:	4013      	ands	r3, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800265e:	3a01      	subs	r2, #1
 8002660:	0112      	lsls	r2, r2, #4
 8002662:	4311      	orrs	r1, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002668:	0212      	lsls	r2, r2, #8
 800266a:	4311      	orrs	r1, r2
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002670:	0852      	lsrs	r2, r2, #1
 8002672:	3a01      	subs	r2, #1
 8002674:	0552      	lsls	r2, r2, #21
 8002676:	4311      	orrs	r1, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800267c:	0852      	lsrs	r2, r2, #1
 800267e:	3a01      	subs	r2, #1
 8002680:	0652      	lsls	r2, r2, #25
 8002682:	4311      	orrs	r1, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002688:	0912      	lsrs	r2, r2, #4
 800268a:	0452      	lsls	r2, r2, #17
 800268c:	430a      	orrs	r2, r1
 800268e:	4930      	ldr	r1, [pc, #192]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 8002690:	4313      	orrs	r3, r2
 8002692:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002694:	4b2e      	ldr	r3, [pc, #184]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a2d      	ldr	r2, [pc, #180]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 800269a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800269e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026a0:	4b2b      	ldr	r3, [pc, #172]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a2a      	ldr	r2, [pc, #168]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 80026a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026ac:	f7fe fc02 	bl	8000eb4 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b4:	f7fe fbfe 	bl	8000eb4 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e058      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c6:	4b22      	ldr	r3, [pc, #136]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026d2:	e050      	b.n	8002776 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e04f      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d8:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d148      	bne.n	8002776 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026e4:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a19      	ldr	r2, [pc, #100]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 80026ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026f0:	4b17      	ldr	r3, [pc, #92]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	4a16      	ldr	r2, [pc, #88]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 80026f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026fc:	f7fe fbda 	bl	8000eb4 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002704:	f7fe fbd6 	bl	8000eb4 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e030      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002716:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x734>
 8002722:	e028      	b.n	8002776 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	2b0c      	cmp	r3, #12
 8002728:	d023      	beq.n	8002772 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272a:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a08      	ldr	r2, [pc, #32]	; (8002750 <HAL_RCC_OscConfig+0x780>)
 8002730:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002736:	f7fe fbbd 	bl	8000eb4 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800273c:	e00c      	b.n	8002758 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273e:	f7fe fbb9 	bl	8000eb4 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d905      	bls.n	8002758 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e013      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
 8002750:	40021000 	.word	0x40021000
 8002754:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002758:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_RCC_OscConfig+0x7b0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1ec      	bne.n	800273e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_RCC_OscConfig+0x7b0>)
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	4905      	ldr	r1, [pc, #20]	; (8002780 <HAL_RCC_OscConfig+0x7b0>)
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_RCC_OscConfig+0x7b4>)
 800276c:	4013      	ands	r3, r2
 800276e:	60cb      	str	r3, [r1, #12]
 8002770:	e001      	b.n	8002776 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3720      	adds	r7, #32
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000
 8002784:	feeefffc 	.word	0xfeeefffc

08002788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0e7      	b.n	800296c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800279c:	4b75      	ldr	r3, [pc, #468]	; (8002974 <HAL_RCC_ClockConfig+0x1ec>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d910      	bls.n	80027cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b72      	ldr	r3, [pc, #456]	; (8002974 <HAL_RCC_ClockConfig+0x1ec>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 0207 	bic.w	r2, r3, #7
 80027b2:	4970      	ldr	r1, [pc, #448]	; (8002974 <HAL_RCC_ClockConfig+0x1ec>)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b6e      	ldr	r3, [pc, #440]	; (8002974 <HAL_RCC_ClockConfig+0x1ec>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0cf      	b.n	800296c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d010      	beq.n	80027fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	4b66      	ldr	r3, [pc, #408]	; (8002978 <HAL_RCC_ClockConfig+0x1f0>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d908      	bls.n	80027fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e8:	4b63      	ldr	r3, [pc, #396]	; (8002978 <HAL_RCC_ClockConfig+0x1f0>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	4960      	ldr	r1, [pc, #384]	; (8002978 <HAL_RCC_ClockConfig+0x1f0>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d04c      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b03      	cmp	r3, #3
 800280c:	d107      	bne.n	800281e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280e:	4b5a      	ldr	r3, [pc, #360]	; (8002978 <HAL_RCC_ClockConfig+0x1f0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d121      	bne.n	800285e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e0a6      	b.n	800296c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002826:	4b54      	ldr	r3, [pc, #336]	; (8002978 <HAL_RCC_ClockConfig+0x1f0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d115      	bne.n	800285e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e09a      	b.n	800296c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800283e:	4b4e      	ldr	r3, [pc, #312]	; (8002978 <HAL_RCC_ClockConfig+0x1f0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e08e      	b.n	800296c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800284e:	4b4a      	ldr	r3, [pc, #296]	; (8002978 <HAL_RCC_ClockConfig+0x1f0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e086      	b.n	800296c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800285e:	4b46      	ldr	r3, [pc, #280]	; (8002978 <HAL_RCC_ClockConfig+0x1f0>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f023 0203 	bic.w	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4943      	ldr	r1, [pc, #268]	; (8002978 <HAL_RCC_ClockConfig+0x1f0>)
 800286c:	4313      	orrs	r3, r2
 800286e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002870:	f7fe fb20 	bl	8000eb4 <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	e00a      	b.n	800288e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002878:	f7fe fb1c 	bl	8000eb4 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	; 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e06e      	b.n	800296c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	4b3a      	ldr	r3, [pc, #232]	; (8002978 <HAL_RCC_ClockConfig+0x1f0>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 020c 	and.w	r2, r3, #12
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	429a      	cmp	r2, r3
 800289e:	d1eb      	bne.n	8002878 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d010      	beq.n	80028ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	4b31      	ldr	r3, [pc, #196]	; (8002978 <HAL_RCC_ClockConfig+0x1f0>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d208      	bcs.n	80028ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028bc:	4b2e      	ldr	r3, [pc, #184]	; (8002978 <HAL_RCC_ClockConfig+0x1f0>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	492b      	ldr	r1, [pc, #172]	; (8002978 <HAL_RCC_ClockConfig+0x1f0>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ce:	4b29      	ldr	r3, [pc, #164]	; (8002974 <HAL_RCC_ClockConfig+0x1ec>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d210      	bcs.n	80028fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028dc:	4b25      	ldr	r3, [pc, #148]	; (8002974 <HAL_RCC_ClockConfig+0x1ec>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f023 0207 	bic.w	r2, r3, #7
 80028e4:	4923      	ldr	r1, [pc, #140]	; (8002974 <HAL_RCC_ClockConfig+0x1ec>)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ec:	4b21      	ldr	r3, [pc, #132]	; (8002974 <HAL_RCC_ClockConfig+0x1ec>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d001      	beq.n	80028fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e036      	b.n	800296c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800290a:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <HAL_RCC_ClockConfig+0x1f0>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	4918      	ldr	r1, [pc, #96]	; (8002978 <HAL_RCC_ClockConfig+0x1f0>)
 8002918:	4313      	orrs	r3, r2
 800291a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b00      	cmp	r3, #0
 8002926:	d009      	beq.n	800293c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002928:	4b13      	ldr	r3, [pc, #76]	; (8002978 <HAL_RCC_ClockConfig+0x1f0>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4910      	ldr	r1, [pc, #64]	; (8002978 <HAL_RCC_ClockConfig+0x1f0>)
 8002938:	4313      	orrs	r3, r2
 800293a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800293c:	f000 f824 	bl	8002988 <HAL_RCC_GetSysClockFreq>
 8002940:	4602      	mov	r2, r0
 8002942:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <HAL_RCC_ClockConfig+0x1f0>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	490b      	ldr	r1, [pc, #44]	; (800297c <HAL_RCC_ClockConfig+0x1f4>)
 800294e:	5ccb      	ldrb	r3, [r1, r3]
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	fa22 f303 	lsr.w	r3, r2, r3
 8002958:	4a09      	ldr	r2, [pc, #36]	; (8002980 <HAL_RCC_ClockConfig+0x1f8>)
 800295a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <HAL_RCC_ClockConfig+0x1fc>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe fa57 	bl	8000e14 <HAL_InitTick>
 8002966:	4603      	mov	r3, r0
 8002968:	72fb      	strb	r3, [r7, #11]

  return status;
 800296a:	7afb      	ldrb	r3, [r7, #11]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40022000 	.word	0x40022000
 8002978:	40021000 	.word	0x40021000
 800297c:	0800588c 	.word	0x0800588c
 8002980:	20000000 	.word	0x20000000
 8002984:	20000004 	.word	0x20000004

08002988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002988:	b480      	push	{r7}
 800298a:	b089      	sub	sp, #36	; 0x24
 800298c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	2300      	movs	r3, #0
 8002994:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002996:	4b3e      	ldr	r3, [pc, #248]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029a0:	4b3b      	ldr	r3, [pc, #236]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x34>
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	d121      	bne.n	80029fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d11e      	bne.n	80029fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029bc:	4b34      	ldr	r3, [pc, #208]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029c8:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	61fb      	str	r3, [r7, #28]
 80029d6:	e005      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029d8:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x108>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029e4:	4a2b      	ldr	r2, [pc, #172]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10d      	bne.n	8002a10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029f8:	e00a      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d102      	bne.n	8002a06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a00:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a02:	61bb      	str	r3, [r7, #24]
 8002a04:	e004      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a0c:	4b23      	ldr	r3, [pc, #140]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x114>)
 8002a0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	2b0c      	cmp	r3, #12
 8002a14:	d134      	bne.n	8002a80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a16:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d003      	beq.n	8002a2e <HAL_RCC_GetSysClockFreq+0xa6>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d003      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0xac>
 8002a2c:	e005      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a30:	617b      	str	r3, [r7, #20]
      break;
 8002a32:	e005      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a34:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x114>)
 8002a36:	617b      	str	r3, [r7, #20]
      break;
 8002a38:	e002      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	617b      	str	r3, [r7, #20]
      break;
 8002a3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a40:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	0a1b      	lsrs	r3, r3, #8
 8002a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	fb03 f202 	mul.w	r2, r3, r2
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	0e5b      	lsrs	r3, r3, #25
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	3301      	adds	r3, #1
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a80:	69bb      	ldr	r3, [r7, #24]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3724      	adds	r7, #36	; 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40021000 	.word	0x40021000
 8002a94:	080058a4 	.word	0x080058a4
 8002a98:	00f42400 	.word	0x00f42400
 8002a9c:	007a1200 	.word	0x007a1200

08002aa0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000000 	.word	0x20000000

08002ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002abc:	f7ff fff0 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4904      	ldr	r1, [pc, #16]	; (8002ae0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	0800589c 	.word	0x0800589c

08002ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ae8:	f7ff ffda 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	0adb      	lsrs	r3, r3, #11
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4904      	ldr	r1, [pc, #16]	; (8002b0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	0800589c 	.word	0x0800589c

08002b10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b1c:	4b2a      	ldr	r3, [pc, #168]	; (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b28:	f7ff f9ee 	bl	8001f08 <HAL_PWREx_GetVoltageRange>
 8002b2c:	6178      	str	r0, [r7, #20]
 8002b2e:	e014      	b.n	8002b5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b30:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b34:	4a24      	ldr	r2, [pc, #144]	; (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b3c:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b48:	f7ff f9de 	bl	8001f08 <HAL_PWREx_GetVoltageRange>
 8002b4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b4e:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	4a1d      	ldr	r2, [pc, #116]	; (8002bc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b60:	d10b      	bne.n	8002b7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b80      	cmp	r3, #128	; 0x80
 8002b66:	d919      	bls.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2ba0      	cmp	r3, #160	; 0xa0
 8002b6c:	d902      	bls.n	8002b74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b6e:	2302      	movs	r3, #2
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	e013      	b.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b74:	2301      	movs	r3, #1
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	e010      	b.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b80      	cmp	r3, #128	; 0x80
 8002b7e:	d902      	bls.n	8002b86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b80:	2303      	movs	r3, #3
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	e00a      	b.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b80      	cmp	r3, #128	; 0x80
 8002b8a:	d102      	bne.n	8002b92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	e004      	b.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b70      	cmp	r3, #112	; 0x70
 8002b96:	d101      	bne.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b98:	2301      	movs	r3, #1
 8002b9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 0207 	bic.w	r2, r3, #7
 8002ba4:	4909      	ldr	r1, [pc, #36]	; (8002bcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bac:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d001      	beq.n	8002bbe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40022000 	.word	0x40022000

08002bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bd8:	2300      	movs	r3, #0
 8002bda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bdc:	2300      	movs	r3, #0
 8002bde:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d041      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bf0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bf4:	d02a      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002bf6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bfa:	d824      	bhi.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c00:	d008      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c06:	d81e      	bhi.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c10:	d010      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c12:	e018      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c14:	4b86      	ldr	r3, [pc, #536]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4a85      	ldr	r2, [pc, #532]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c20:	e015      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fabb 	bl	80031a4 <RCCEx_PLLSAI1_Config>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c32:	e00c      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3320      	adds	r3, #32
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fba6 	bl	800338c <RCCEx_PLLSAI2_Config>
 8002c40:	4603      	mov	r3, r0
 8002c42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c44:	e003      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	74fb      	strb	r3, [r7, #19]
      break;
 8002c4a:	e000      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c4e:	7cfb      	ldrb	r3, [r7, #19]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10b      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c54:	4b76      	ldr	r3, [pc, #472]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c62:	4973      	ldr	r1, [pc, #460]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c6a:	e001      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c6c:	7cfb      	ldrb	r3, [r7, #19]
 8002c6e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d041      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c84:	d02a      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c8a:	d824      	bhi.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c90:	d008      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c96:	d81e      	bhi.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ca0:	d010      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ca2:	e018      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ca4:	4b62      	ldr	r3, [pc, #392]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4a61      	ldr	r2, [pc, #388]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cb0:	e015      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fa73 	bl	80031a4 <RCCEx_PLLSAI1_Config>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cc2:	e00c      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3320      	adds	r3, #32
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fb5e 	bl	800338c <RCCEx_PLLSAI2_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cd4:	e003      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	74fb      	strb	r3, [r7, #19]
      break;
 8002cda:	e000      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002cdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cde:	7cfb      	ldrb	r3, [r7, #19]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10b      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ce4:	4b52      	ldr	r3, [pc, #328]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cf2:	494f      	ldr	r1, [pc, #316]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cfa:	e001      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cfc:	7cfb      	ldrb	r3, [r7, #19]
 8002cfe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80a0 	beq.w	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d12:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d22:	2300      	movs	r3, #0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00d      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d28:	4b41      	ldr	r3, [pc, #260]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2c:	4a40      	ldr	r2, [pc, #256]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d32:	6593      	str	r3, [r2, #88]	; 0x58
 8002d34:	4b3e      	ldr	r3, [pc, #248]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d40:	2301      	movs	r3, #1
 8002d42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d44:	4b3b      	ldr	r3, [pc, #236]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a3a      	ldr	r2, [pc, #232]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d50:	f7fe f8b0 	bl	8000eb4 <HAL_GetTick>
 8002d54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d56:	e009      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d58:	f7fe f8ac 	bl	8000eb4 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d902      	bls.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	74fb      	strb	r3, [r7, #19]
        break;
 8002d6a:	e005      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d6c:	4b31      	ldr	r3, [pc, #196]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ef      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002d78:	7cfb      	ldrb	r3, [r7, #19]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d15c      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d7e:	4b2c      	ldr	r3, [pc, #176]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01f      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d019      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d9c:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002da8:	4b21      	ldr	r3, [pc, #132]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dae:	4a20      	ldr	r2, [pc, #128]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002db8:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	4a1c      	ldr	r2, [pc, #112]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002dc8:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d016      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dda:	f7fe f86b 	bl	8000eb4 <HAL_GetTick>
 8002dde:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de0:	e00b      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7fe f867 	bl	8000eb4 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d902      	bls.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	74fb      	strb	r3, [r7, #19]
            break;
 8002df8:	e006      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0ec      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e08:	7cfb      	ldrb	r3, [r7, #19]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10c      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e1e:	4904      	ldr	r1, [pc, #16]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e26:	e009      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e28:	7cfb      	ldrb	r3, [r7, #19]
 8002e2a:	74bb      	strb	r3, [r7, #18]
 8002e2c:	e006      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e3c:	7c7b      	ldrb	r3, [r7, #17]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d105      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e42:	4b9e      	ldr	r3, [pc, #632]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e46:	4a9d      	ldr	r2, [pc, #628]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e5a:	4b98      	ldr	r3, [pc, #608]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	f023 0203 	bic.w	r2, r3, #3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	4994      	ldr	r1, [pc, #592]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e7c:	4b8f      	ldr	r3, [pc, #572]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	f023 020c 	bic.w	r2, r3, #12
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8a:	498c      	ldr	r1, [pc, #560]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e9e:	4b87      	ldr	r3, [pc, #540]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	4983      	ldr	r1, [pc, #524]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ec0:	4b7e      	ldr	r3, [pc, #504]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	497b      	ldr	r1, [pc, #492]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ee2:	4b76      	ldr	r3, [pc, #472]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef0:	4972      	ldr	r1, [pc, #456]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f04:	4b6d      	ldr	r3, [pc, #436]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f12:	496a      	ldr	r1, [pc, #424]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f26:	4b65      	ldr	r3, [pc, #404]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f34:	4961      	ldr	r1, [pc, #388]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f48:	4b5c      	ldr	r3, [pc, #368]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f56:	4959      	ldr	r1, [pc, #356]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f6a:	4b54      	ldr	r3, [pc, #336]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f78:	4950      	ldr	r1, [pc, #320]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f8c:	4b4b      	ldr	r3, [pc, #300]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	4948      	ldr	r1, [pc, #288]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fae:	4b43      	ldr	r3, [pc, #268]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbc:	493f      	ldr	r1, [pc, #252]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d028      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fd0:	4b3a      	ldr	r3, [pc, #232]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fde:	4937      	ldr	r1, [pc, #220]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fee:	d106      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff0:	4b32      	ldr	r3, [pc, #200]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a31      	ldr	r2, [pc, #196]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ffa:	60d3      	str	r3, [r2, #12]
 8002ffc:	e011      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003002:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003006:	d10c      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3304      	adds	r3, #4
 800300c:	2101      	movs	r1, #1
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f8c8 	bl	80031a4 <RCCEx_PLLSAI1_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003018:	7cfb      	ldrb	r3, [r7, #19]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800301e:	7cfb      	ldrb	r3, [r7, #19]
 8003020:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d028      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800302e:	4b23      	ldr	r3, [pc, #140]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003034:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	491f      	ldr	r1, [pc, #124]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800304c:	d106      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800304e:	4b1b      	ldr	r3, [pc, #108]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	4a1a      	ldr	r2, [pc, #104]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003054:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003058:	60d3      	str	r3, [r2, #12]
 800305a:	e011      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003060:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003064:	d10c      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3304      	adds	r3, #4
 800306a:	2101      	movs	r1, #1
 800306c:	4618      	mov	r0, r3
 800306e:	f000 f899 	bl	80031a4 <RCCEx_PLLSAI1_Config>
 8003072:	4603      	mov	r3, r0
 8003074:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003076:	7cfb      	ldrb	r3, [r7, #19]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800307c:	7cfb      	ldrb	r3, [r7, #19]
 800307e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d02b      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309a:	4908      	ldr	r1, [pc, #32]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030aa:	d109      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ac:	4b03      	ldr	r3, [pc, #12]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4a02      	ldr	r2, [pc, #8]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030b6:	60d3      	str	r3, [r2, #12]
 80030b8:	e014      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80030ba:	bf00      	nop
 80030bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030c8:	d10c      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3304      	adds	r3, #4
 80030ce:	2101      	movs	r1, #1
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 f867 	bl	80031a4 <RCCEx_PLLSAI1_Config>
 80030d6:	4603      	mov	r3, r0
 80030d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d02f      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030f0:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030fe:	4928      	ldr	r1, [pc, #160]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800310a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800310e:	d10d      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3304      	adds	r3, #4
 8003114:	2102      	movs	r1, #2
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f844 	bl	80031a4 <RCCEx_PLLSAI1_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003120:	7cfb      	ldrb	r3, [r7, #19]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d014      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003126:	7cfb      	ldrb	r3, [r7, #19]
 8003128:	74bb      	strb	r3, [r7, #18]
 800312a:	e011      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003134:	d10c      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3320      	adds	r3, #32
 800313a:	2102      	movs	r1, #2
 800313c:	4618      	mov	r0, r3
 800313e:	f000 f925 	bl	800338c <RCCEx_PLLSAI2_Config>
 8003142:	4603      	mov	r3, r0
 8003144:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003146:	7cfb      	ldrb	r3, [r7, #19]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800314c:	7cfb      	ldrb	r3, [r7, #19]
 800314e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800315c:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800316a:	490d      	ldr	r1, [pc, #52]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00b      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800317e:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003184:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800318e:	4904      	ldr	r1, [pc, #16]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003196:	7cbb      	ldrb	r3, [r7, #18]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000

080031a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031b2:	4b75      	ldr	r3, [pc, #468]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d018      	beq.n	80031f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031be:	4b72      	ldr	r3, [pc, #456]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f003 0203 	and.w	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d10d      	bne.n	80031ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
       ||
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031d6:	4b6c      	ldr	r3, [pc, #432]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	091b      	lsrs	r3, r3, #4
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
       ||
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d047      	beq.n	800327a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	73fb      	strb	r3, [r7, #15]
 80031ee:	e044      	b.n	800327a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d018      	beq.n	800322a <RCCEx_PLLSAI1_Config+0x86>
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d825      	bhi.n	8003248 <RCCEx_PLLSAI1_Config+0xa4>
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d002      	beq.n	8003206 <RCCEx_PLLSAI1_Config+0x62>
 8003200:	2b02      	cmp	r3, #2
 8003202:	d009      	beq.n	8003218 <RCCEx_PLLSAI1_Config+0x74>
 8003204:	e020      	b.n	8003248 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003206:	4b60      	ldr	r3, [pc, #384]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d11d      	bne.n	800324e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003216:	e01a      	b.n	800324e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003218:	4b5b      	ldr	r3, [pc, #364]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003220:	2b00      	cmp	r3, #0
 8003222:	d116      	bne.n	8003252 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003228:	e013      	b.n	8003252 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800322a:	4b57      	ldr	r3, [pc, #348]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10f      	bne.n	8003256 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003236:	4b54      	ldr	r3, [pc, #336]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d109      	bne.n	8003256 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003246:	e006      	b.n	8003256 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
      break;
 800324c:	e004      	b.n	8003258 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800324e:	bf00      	nop
 8003250:	e002      	b.n	8003258 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003252:	bf00      	nop
 8003254:	e000      	b.n	8003258 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003256:	bf00      	nop
    }

    if(status == HAL_OK)
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10d      	bne.n	800327a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800325e:	4b4a      	ldr	r3, [pc, #296]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6819      	ldr	r1, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	3b01      	subs	r3, #1
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	430b      	orrs	r3, r1
 8003274:	4944      	ldr	r1, [pc, #272]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003276:	4313      	orrs	r3, r2
 8003278:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d17d      	bne.n	800337c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003280:	4b41      	ldr	r3, [pc, #260]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a40      	ldr	r2, [pc, #256]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003286:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800328a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800328c:	f7fd fe12 	bl	8000eb4 <HAL_GetTick>
 8003290:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003292:	e009      	b.n	80032a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003294:	f7fd fe0e 	bl	8000eb4 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d902      	bls.n	80032a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	73fb      	strb	r3, [r7, #15]
        break;
 80032a6:	e005      	b.n	80032b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032a8:	4b37      	ldr	r3, [pc, #220]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1ef      	bne.n	8003294 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d160      	bne.n	800337c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d111      	bne.n	80032e4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032c0:	4b31      	ldr	r3, [pc, #196]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80032c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6892      	ldr	r2, [r2, #8]
 80032d0:	0211      	lsls	r1, r2, #8
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68d2      	ldr	r2, [r2, #12]
 80032d6:	0912      	lsrs	r2, r2, #4
 80032d8:	0452      	lsls	r2, r2, #17
 80032da:	430a      	orrs	r2, r1
 80032dc:	492a      	ldr	r1, [pc, #168]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	610b      	str	r3, [r1, #16]
 80032e2:	e027      	b.n	8003334 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d112      	bne.n	8003310 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032ea:	4b27      	ldr	r3, [pc, #156]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80032f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6892      	ldr	r2, [r2, #8]
 80032fa:	0211      	lsls	r1, r2, #8
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6912      	ldr	r2, [r2, #16]
 8003300:	0852      	lsrs	r2, r2, #1
 8003302:	3a01      	subs	r2, #1
 8003304:	0552      	lsls	r2, r2, #21
 8003306:	430a      	orrs	r2, r1
 8003308:	491f      	ldr	r1, [pc, #124]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 800330a:	4313      	orrs	r3, r2
 800330c:	610b      	str	r3, [r1, #16]
 800330e:	e011      	b.n	8003334 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003310:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003318:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6892      	ldr	r2, [r2, #8]
 8003320:	0211      	lsls	r1, r2, #8
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6952      	ldr	r2, [r2, #20]
 8003326:	0852      	lsrs	r2, r2, #1
 8003328:	3a01      	subs	r2, #1
 800332a:	0652      	lsls	r2, r2, #25
 800332c:	430a      	orrs	r2, r1
 800332e:	4916      	ldr	r1, [pc, #88]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003330:	4313      	orrs	r3, r2
 8003332:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003334:	4b14      	ldr	r3, [pc, #80]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a13      	ldr	r2, [pc, #76]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 800333a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800333e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003340:	f7fd fdb8 	bl	8000eb4 <HAL_GetTick>
 8003344:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003346:	e009      	b.n	800335c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003348:	f7fd fdb4 	bl	8000eb4 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d902      	bls.n	800335c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	73fb      	strb	r3, [r7, #15]
          break;
 800335a:	e005      	b.n	8003368 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800335c:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ef      	beq.n	8003348 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800336e:	4b06      	ldr	r3, [pc, #24]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003370:	691a      	ldr	r2, [r3, #16]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	4904      	ldr	r1, [pc, #16]	; (8003388 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003378:	4313      	orrs	r3, r2
 800337a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000

0800338c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800339a:	4b6a      	ldr	r3, [pc, #424]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d018      	beq.n	80033d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80033a6:	4b67      	ldr	r3, [pc, #412]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f003 0203 	and.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d10d      	bne.n	80033d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
       ||
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d009      	beq.n	80033d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80033be:	4b61      	ldr	r3, [pc, #388]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
       ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d047      	beq.n	8003462 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	73fb      	strb	r3, [r7, #15]
 80033d6:	e044      	b.n	8003462 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d018      	beq.n	8003412 <RCCEx_PLLSAI2_Config+0x86>
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d825      	bhi.n	8003430 <RCCEx_PLLSAI2_Config+0xa4>
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d002      	beq.n	80033ee <RCCEx_PLLSAI2_Config+0x62>
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d009      	beq.n	8003400 <RCCEx_PLLSAI2_Config+0x74>
 80033ec:	e020      	b.n	8003430 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033ee:	4b55      	ldr	r3, [pc, #340]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d11d      	bne.n	8003436 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033fe:	e01a      	b.n	8003436 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003400:	4b50      	ldr	r3, [pc, #320]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003408:	2b00      	cmp	r3, #0
 800340a:	d116      	bne.n	800343a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003410:	e013      	b.n	800343a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003412:	4b4c      	ldr	r3, [pc, #304]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10f      	bne.n	800343e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800341e:	4b49      	ldr	r3, [pc, #292]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800342e:	e006      	b.n	800343e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
      break;
 8003434:	e004      	b.n	8003440 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003436:	bf00      	nop
 8003438:	e002      	b.n	8003440 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800343a:	bf00      	nop
 800343c:	e000      	b.n	8003440 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800343e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10d      	bne.n	8003462 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003446:	4b3f      	ldr	r3, [pc, #252]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6819      	ldr	r1, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	3b01      	subs	r3, #1
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	430b      	orrs	r3, r1
 800345c:	4939      	ldr	r1, [pc, #228]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 800345e:	4313      	orrs	r3, r2
 8003460:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d167      	bne.n	8003538 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003468:	4b36      	ldr	r3, [pc, #216]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a35      	ldr	r2, [pc, #212]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 800346e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003472:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003474:	f7fd fd1e 	bl	8000eb4 <HAL_GetTick>
 8003478:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800347a:	e009      	b.n	8003490 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800347c:	f7fd fd1a 	bl	8000eb4 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d902      	bls.n	8003490 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	73fb      	strb	r3, [r7, #15]
        break;
 800348e:	e005      	b.n	800349c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003490:	4b2c      	ldr	r3, [pc, #176]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1ef      	bne.n	800347c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d14a      	bne.n	8003538 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d111      	bne.n	80034cc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034a8:	4b26      	ldr	r3, [pc, #152]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6892      	ldr	r2, [r2, #8]
 80034b8:	0211      	lsls	r1, r2, #8
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68d2      	ldr	r2, [r2, #12]
 80034be:	0912      	lsrs	r2, r2, #4
 80034c0:	0452      	lsls	r2, r2, #17
 80034c2:	430a      	orrs	r2, r1
 80034c4:	491f      	ldr	r1, [pc, #124]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	614b      	str	r3, [r1, #20]
 80034ca:	e011      	b.n	80034f0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034cc:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6892      	ldr	r2, [r2, #8]
 80034dc:	0211      	lsls	r1, r2, #8
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6912      	ldr	r2, [r2, #16]
 80034e2:	0852      	lsrs	r2, r2, #1
 80034e4:	3a01      	subs	r2, #1
 80034e6:	0652      	lsls	r2, r2, #25
 80034e8:	430a      	orrs	r2, r1
 80034ea:	4916      	ldr	r1, [pc, #88]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80034f0:	4b14      	ldr	r3, [pc, #80]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a13      	ldr	r2, [pc, #76]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fc:	f7fd fcda 	bl	8000eb4 <HAL_GetTick>
 8003500:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003502:	e009      	b.n	8003518 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003504:	f7fd fcd6 	bl	8000eb4 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d902      	bls.n	8003518 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	73fb      	strb	r3, [r7, #15]
          break;
 8003516:	e005      	b.n	8003524 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003518:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0ef      	beq.n	8003504 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	4904      	ldr	r1, [pc, #16]	; (8003544 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003534:	4313      	orrs	r3, r2
 8003536:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003538:	7bfb      	ldrb	r3, [r7, #15]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000

08003548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e049      	b.n	80035ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fd fa80 	bl	8000a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3304      	adds	r3, #4
 8003584:	4619      	mov	r1, r3
 8003586:	4610      	mov	r0, r2
 8003588:	f000 fa9a 	bl	8003ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d001      	beq.n	8003610 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e04f      	b.n	80036b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a23      	ldr	r2, [pc, #140]	; (80036bc <HAL_TIM_Base_Start_IT+0xc4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d01d      	beq.n	800366e <HAL_TIM_Base_Start_IT+0x76>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363a:	d018      	beq.n	800366e <HAL_TIM_Base_Start_IT+0x76>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1f      	ldr	r2, [pc, #124]	; (80036c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d013      	beq.n	800366e <HAL_TIM_Base_Start_IT+0x76>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1e      	ldr	r2, [pc, #120]	; (80036c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d00e      	beq.n	800366e <HAL_TIM_Base_Start_IT+0x76>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1c      	ldr	r2, [pc, #112]	; (80036c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d009      	beq.n	800366e <HAL_TIM_Base_Start_IT+0x76>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1b      	ldr	r2, [pc, #108]	; (80036cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d004      	beq.n	800366e <HAL_TIM_Base_Start_IT+0x76>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a19      	ldr	r2, [pc, #100]	; (80036d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d115      	bne.n	800369a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	4b17      	ldr	r3, [pc, #92]	; (80036d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003676:	4013      	ands	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b06      	cmp	r3, #6
 800367e:	d015      	beq.n	80036ac <HAL_TIM_Base_Start_IT+0xb4>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003686:	d011      	beq.n	80036ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003698:	e008      	b.n	80036ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0201 	orr.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	e000      	b.n	80036ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40012c00 	.word	0x40012c00
 80036c0:	40000400 	.word	0x40000400
 80036c4:	40000800 	.word	0x40000800
 80036c8:	40000c00 	.word	0x40000c00
 80036cc:	40013400 	.word	0x40013400
 80036d0:	40014000 	.word	0x40014000
 80036d4:	00010007 	.word	0x00010007

080036d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d020      	beq.n	800373c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d01b      	beq.n	800373c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0202 	mvn.w	r2, #2
 800370c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f9ad 	bl	8003a82 <HAL_TIM_IC_CaptureCallback>
 8003728:	e005      	b.n	8003736 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f99f 	bl	8003a6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f9b0 	bl	8003a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	d020      	beq.n	8003788 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01b      	beq.n	8003788 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0204 	mvn.w	r2, #4
 8003758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2202      	movs	r2, #2
 800375e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f987 	bl	8003a82 <HAL_TIM_IC_CaptureCallback>
 8003774:	e005      	b.n	8003782 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f979 	bl	8003a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f98a 	bl	8003a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d020      	beq.n	80037d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01b      	beq.n	80037d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0208 	mvn.w	r2, #8
 80037a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2204      	movs	r2, #4
 80037aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f961 	bl	8003a82 <HAL_TIM_IC_CaptureCallback>
 80037c0:	e005      	b.n	80037ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f953 	bl	8003a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f964 	bl	8003a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d020      	beq.n	8003820 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01b      	beq.n	8003820 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0210 	mvn.w	r2, #16
 80037f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2208      	movs	r2, #8
 80037f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f93b 	bl	8003a82 <HAL_TIM_IC_CaptureCallback>
 800380c:	e005      	b.n	800381a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f92d 	bl	8003a6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f93e 	bl	8003a96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00c      	beq.n	8003844 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d007      	beq.n	8003844 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0201 	mvn.w	r2, #1
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fd f86e 	bl	8000920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00c      	beq.n	8003868 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003854:	2b00      	cmp	r3, #0
 8003856:	d007      	beq.n	8003868 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 faf2 	bl	8003e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00c      	beq.n	800388c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 faea 	bl	8003e60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00c      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389c:	2b00      	cmp	r3, #0
 800389e:	d007      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f8fd 	bl	8003aaa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00c      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d007      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0220 	mvn.w	r2, #32
 80038cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fab2 	bl	8003e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038d4:	bf00      	nop
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_TIM_ConfigClockSource+0x1c>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e0b6      	b.n	8003a66 <HAL_TIM_ConfigClockSource+0x18a>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003916:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800391a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003922:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003934:	d03e      	beq.n	80039b4 <HAL_TIM_ConfigClockSource+0xd8>
 8003936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800393a:	f200 8087 	bhi.w	8003a4c <HAL_TIM_ConfigClockSource+0x170>
 800393e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003942:	f000 8086 	beq.w	8003a52 <HAL_TIM_ConfigClockSource+0x176>
 8003946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800394a:	d87f      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x170>
 800394c:	2b70      	cmp	r3, #112	; 0x70
 800394e:	d01a      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0xaa>
 8003950:	2b70      	cmp	r3, #112	; 0x70
 8003952:	d87b      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x170>
 8003954:	2b60      	cmp	r3, #96	; 0x60
 8003956:	d050      	beq.n	80039fa <HAL_TIM_ConfigClockSource+0x11e>
 8003958:	2b60      	cmp	r3, #96	; 0x60
 800395a:	d877      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x170>
 800395c:	2b50      	cmp	r3, #80	; 0x50
 800395e:	d03c      	beq.n	80039da <HAL_TIM_ConfigClockSource+0xfe>
 8003960:	2b50      	cmp	r3, #80	; 0x50
 8003962:	d873      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x170>
 8003964:	2b40      	cmp	r3, #64	; 0x40
 8003966:	d058      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x13e>
 8003968:	2b40      	cmp	r3, #64	; 0x40
 800396a:	d86f      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x170>
 800396c:	2b30      	cmp	r3, #48	; 0x30
 800396e:	d064      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15e>
 8003970:	2b30      	cmp	r3, #48	; 0x30
 8003972:	d86b      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x170>
 8003974:	2b20      	cmp	r3, #32
 8003976:	d060      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15e>
 8003978:	2b20      	cmp	r3, #32
 800397a:	d867      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x170>
 800397c:	2b00      	cmp	r3, #0
 800397e:	d05c      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15e>
 8003980:	2b10      	cmp	r3, #16
 8003982:	d05a      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15e>
 8003984:	e062      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003996:	f000 f9a7 	bl	8003ce8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	609a      	str	r2, [r3, #8]
      break;
 80039b2:	e04f      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039c4:	f000 f990 	bl	8003ce8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039d6:	609a      	str	r2, [r3, #8]
      break;
 80039d8:	e03c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e6:	461a      	mov	r2, r3
 80039e8:	f000 f904 	bl	8003bf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2150      	movs	r1, #80	; 0x50
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f95d 	bl	8003cb2 <TIM_ITRx_SetConfig>
      break;
 80039f8:	e02c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a06:	461a      	mov	r2, r3
 8003a08:	f000 f923 	bl	8003c52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2160      	movs	r1, #96	; 0x60
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 f94d 	bl	8003cb2 <TIM_ITRx_SetConfig>
      break;
 8003a18:	e01c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a26:	461a      	mov	r2, r3
 8003a28:	f000 f8e4 	bl	8003bf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2140      	movs	r1, #64	; 0x40
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f93d 	bl	8003cb2 <TIM_ITRx_SetConfig>
      break;
 8003a38:	e00c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4619      	mov	r1, r3
 8003a44:	4610      	mov	r0, r2
 8003a46:	f000 f934 	bl	8003cb2 <TIM_ITRx_SetConfig>
      break;
 8003a4a:	e003      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a50:	e000      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a40      	ldr	r2, [pc, #256]	; (8003bd4 <TIM_Base_SetConfig+0x114>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d013      	beq.n	8003b00 <TIM_Base_SetConfig+0x40>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ade:	d00f      	beq.n	8003b00 <TIM_Base_SetConfig+0x40>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a3d      	ldr	r2, [pc, #244]	; (8003bd8 <TIM_Base_SetConfig+0x118>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d00b      	beq.n	8003b00 <TIM_Base_SetConfig+0x40>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a3c      	ldr	r2, [pc, #240]	; (8003bdc <TIM_Base_SetConfig+0x11c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d007      	beq.n	8003b00 <TIM_Base_SetConfig+0x40>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a3b      	ldr	r2, [pc, #236]	; (8003be0 <TIM_Base_SetConfig+0x120>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d003      	beq.n	8003b00 <TIM_Base_SetConfig+0x40>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a3a      	ldr	r2, [pc, #232]	; (8003be4 <TIM_Base_SetConfig+0x124>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d108      	bne.n	8003b12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a2f      	ldr	r2, [pc, #188]	; (8003bd4 <TIM_Base_SetConfig+0x114>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01f      	beq.n	8003b5a <TIM_Base_SetConfig+0x9a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b20:	d01b      	beq.n	8003b5a <TIM_Base_SetConfig+0x9a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a2c      	ldr	r2, [pc, #176]	; (8003bd8 <TIM_Base_SetConfig+0x118>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d017      	beq.n	8003b5a <TIM_Base_SetConfig+0x9a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a2b      	ldr	r2, [pc, #172]	; (8003bdc <TIM_Base_SetConfig+0x11c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <TIM_Base_SetConfig+0x9a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a2a      	ldr	r2, [pc, #168]	; (8003be0 <TIM_Base_SetConfig+0x120>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00f      	beq.n	8003b5a <TIM_Base_SetConfig+0x9a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a29      	ldr	r2, [pc, #164]	; (8003be4 <TIM_Base_SetConfig+0x124>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00b      	beq.n	8003b5a <TIM_Base_SetConfig+0x9a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a28      	ldr	r2, [pc, #160]	; (8003be8 <TIM_Base_SetConfig+0x128>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d007      	beq.n	8003b5a <TIM_Base_SetConfig+0x9a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a27      	ldr	r2, [pc, #156]	; (8003bec <TIM_Base_SetConfig+0x12c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d003      	beq.n	8003b5a <TIM_Base_SetConfig+0x9a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a26      	ldr	r2, [pc, #152]	; (8003bf0 <TIM_Base_SetConfig+0x130>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d108      	bne.n	8003b6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a10      	ldr	r2, [pc, #64]	; (8003bd4 <TIM_Base_SetConfig+0x114>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00f      	beq.n	8003bb8 <TIM_Base_SetConfig+0xf8>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a12      	ldr	r2, [pc, #72]	; (8003be4 <TIM_Base_SetConfig+0x124>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00b      	beq.n	8003bb8 <TIM_Base_SetConfig+0xf8>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a11      	ldr	r2, [pc, #68]	; (8003be8 <TIM_Base_SetConfig+0x128>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d007      	beq.n	8003bb8 <TIM_Base_SetConfig+0xf8>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a10      	ldr	r2, [pc, #64]	; (8003bec <TIM_Base_SetConfig+0x12c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d003      	beq.n	8003bb8 <TIM_Base_SetConfig+0xf8>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a0f      	ldr	r2, [pc, #60]	; (8003bf0 <TIM_Base_SetConfig+0x130>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d103      	bne.n	8003bc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	615a      	str	r2, [r3, #20]
}
 8003bc6:	bf00      	nop
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	40012c00 	.word	0x40012c00
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40000800 	.word	0x40000800
 8003be0:	40000c00 	.word	0x40000c00
 8003be4:	40013400 	.word	0x40013400
 8003be8:	40014000 	.word	0x40014000
 8003bec:	40014400 	.word	0x40014400
 8003bf0:	40014800 	.word	0x40014800

08003bf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	f023 0201 	bic.w	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f023 030a 	bic.w	r3, r3, #10
 8003c30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	621a      	str	r2, [r3, #32]
}
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b087      	sub	sp, #28
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f023 0210 	bic.w	r2, r3, #16
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	031b      	lsls	r3, r3, #12
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	621a      	str	r2, [r3, #32]
}
 8003ca6:	bf00      	nop
 8003ca8:	371c      	adds	r7, #28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b085      	sub	sp, #20
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f043 0307 	orr.w	r3, r3, #7
 8003cd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	609a      	str	r2, [r3, #8]
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	021a      	lsls	r2, r3, #8
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	609a      	str	r2, [r3, #8]
}
 8003d1c:	bf00      	nop
 8003d1e:	371c      	adds	r7, #28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e068      	b.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a2e      	ldr	r2, [pc, #184]	; (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d004      	beq.n	8003d74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a2d      	ldr	r2, [pc, #180]	; (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d108      	bne.n	8003d86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1e      	ldr	r2, [pc, #120]	; (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01d      	beq.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db2:	d018      	beq.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1b      	ldr	r2, [pc, #108]	; (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1a      	ldr	r2, [pc, #104]	; (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00e      	beq.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a18      	ldr	r2, [pc, #96]	; (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d009      	beq.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a13      	ldr	r2, [pc, #76]	; (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a14      	ldr	r2, [pc, #80]	; (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d10c      	bne.n	8003e00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	40013400 	.word	0x40013400
 8003e28:	40000400 	.word	0x40000400
 8003e2c:	40000800 	.word	0x40000800
 8003e30:	40000c00 	.word	0x40000c00
 8003e34:	40014000 	.word	0x40014000

08003e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e040      	b.n	8003f08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fc fe10 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2224      	movs	r2, #36	; 0x24
 8003ea0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0201 	bic.w	r2, r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fb6a 	bl	8004594 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f8af 	bl	8004024 <UART_SetConfig>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e01b      	b.n	8003f08 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ede:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fbe9 	bl	80046d8 <UART_CheckIdleState>
 8003f06:	4603      	mov	r3, r0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08a      	sub	sp, #40	; 0x28
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d178      	bne.n	800401a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_UART_Transmit+0x24>
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e071      	b.n	800401c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2221      	movs	r2, #33	; 0x21
 8003f44:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f46:	f7fc ffb5 	bl	8000eb4 <HAL_GetTick>
 8003f4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	88fa      	ldrh	r2, [r7, #6]
 8003f50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	88fa      	ldrh	r2, [r7, #6]
 8003f58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f64:	d108      	bne.n	8003f78 <HAL_UART_Transmit+0x68>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d104      	bne.n	8003f78 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	e003      	b.n	8003f80 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f80:	e030      	b.n	8003fe4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2180      	movs	r1, #128	; 0x80
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fc4b 	bl	8004828 <UART_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d004      	beq.n	8003fa2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e03c      	b.n	800401c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10b      	bne.n	8003fc0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	881a      	ldrh	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fb4:	b292      	uxth	r2, r2
 8003fb6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	3302      	adds	r3, #2
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	e008      	b.n	8003fd2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	781a      	ldrb	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	b292      	uxth	r2, r2
 8003fca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1c8      	bne.n	8003f82 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2140      	movs	r1, #64	; 0x40
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fc14 	bl	8004828 <UART_WaitOnFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d004      	beq.n	8004010 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2220      	movs	r2, #32
 800400a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e005      	b.n	800401c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2220      	movs	r2, #32
 8004014:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	e000      	b.n	800401c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800401a:	2302      	movs	r3, #2
  }
}
 800401c:	4618      	mov	r0, r3
 800401e:	3720      	adds	r7, #32
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004028:	b08a      	sub	sp, #40	; 0x28
 800402a:	af00      	add	r7, sp, #0
 800402c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	431a      	orrs	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	431a      	orrs	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	4313      	orrs	r3, r2
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4ba4      	ldr	r3, [pc, #656]	; (80042e4 <UART_SetConfig+0x2c0>)
 8004054:	4013      	ands	r3, r2
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800405c:	430b      	orrs	r3, r1
 800405e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a99      	ldr	r2, [pc, #612]	; (80042e8 <UART_SetConfig+0x2c4>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d004      	beq.n	8004090 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800408c:	4313      	orrs	r3, r2
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a0:	430a      	orrs	r2, r1
 80040a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a90      	ldr	r2, [pc, #576]	; (80042ec <UART_SetConfig+0x2c8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d126      	bne.n	80040fc <UART_SetConfig+0xd8>
 80040ae:	4b90      	ldr	r3, [pc, #576]	; (80042f0 <UART_SetConfig+0x2cc>)
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b4:	f003 0303 	and.w	r3, r3, #3
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d81b      	bhi.n	80040f4 <UART_SetConfig+0xd0>
 80040bc:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <UART_SetConfig+0xa0>)
 80040be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c2:	bf00      	nop
 80040c4:	080040d5 	.word	0x080040d5
 80040c8:	080040e5 	.word	0x080040e5
 80040cc:	080040dd 	.word	0x080040dd
 80040d0:	080040ed 	.word	0x080040ed
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040da:	e116      	b.n	800430a <UART_SetConfig+0x2e6>
 80040dc:	2302      	movs	r3, #2
 80040de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040e2:	e112      	b.n	800430a <UART_SetConfig+0x2e6>
 80040e4:	2304      	movs	r3, #4
 80040e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ea:	e10e      	b.n	800430a <UART_SetConfig+0x2e6>
 80040ec:	2308      	movs	r3, #8
 80040ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040f2:	e10a      	b.n	800430a <UART_SetConfig+0x2e6>
 80040f4:	2310      	movs	r3, #16
 80040f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040fa:	e106      	b.n	800430a <UART_SetConfig+0x2e6>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a7c      	ldr	r2, [pc, #496]	; (80042f4 <UART_SetConfig+0x2d0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d138      	bne.n	8004178 <UART_SetConfig+0x154>
 8004106:	4b7a      	ldr	r3, [pc, #488]	; (80042f0 <UART_SetConfig+0x2cc>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410c:	f003 030c 	and.w	r3, r3, #12
 8004110:	2b0c      	cmp	r3, #12
 8004112:	d82d      	bhi.n	8004170 <UART_SetConfig+0x14c>
 8004114:	a201      	add	r2, pc, #4	; (adr r2, 800411c <UART_SetConfig+0xf8>)
 8004116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411a:	bf00      	nop
 800411c:	08004151 	.word	0x08004151
 8004120:	08004171 	.word	0x08004171
 8004124:	08004171 	.word	0x08004171
 8004128:	08004171 	.word	0x08004171
 800412c:	08004161 	.word	0x08004161
 8004130:	08004171 	.word	0x08004171
 8004134:	08004171 	.word	0x08004171
 8004138:	08004171 	.word	0x08004171
 800413c:	08004159 	.word	0x08004159
 8004140:	08004171 	.word	0x08004171
 8004144:	08004171 	.word	0x08004171
 8004148:	08004171 	.word	0x08004171
 800414c:	08004169 	.word	0x08004169
 8004150:	2300      	movs	r3, #0
 8004152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004156:	e0d8      	b.n	800430a <UART_SetConfig+0x2e6>
 8004158:	2302      	movs	r3, #2
 800415a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800415e:	e0d4      	b.n	800430a <UART_SetConfig+0x2e6>
 8004160:	2304      	movs	r3, #4
 8004162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004166:	e0d0      	b.n	800430a <UART_SetConfig+0x2e6>
 8004168:	2308      	movs	r3, #8
 800416a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800416e:	e0cc      	b.n	800430a <UART_SetConfig+0x2e6>
 8004170:	2310      	movs	r3, #16
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004176:	e0c8      	b.n	800430a <UART_SetConfig+0x2e6>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a5e      	ldr	r2, [pc, #376]	; (80042f8 <UART_SetConfig+0x2d4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d125      	bne.n	80041ce <UART_SetConfig+0x1aa>
 8004182:	4b5b      	ldr	r3, [pc, #364]	; (80042f0 <UART_SetConfig+0x2cc>)
 8004184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004188:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800418c:	2b30      	cmp	r3, #48	; 0x30
 800418e:	d016      	beq.n	80041be <UART_SetConfig+0x19a>
 8004190:	2b30      	cmp	r3, #48	; 0x30
 8004192:	d818      	bhi.n	80041c6 <UART_SetConfig+0x1a2>
 8004194:	2b20      	cmp	r3, #32
 8004196:	d00a      	beq.n	80041ae <UART_SetConfig+0x18a>
 8004198:	2b20      	cmp	r3, #32
 800419a:	d814      	bhi.n	80041c6 <UART_SetConfig+0x1a2>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <UART_SetConfig+0x182>
 80041a0:	2b10      	cmp	r3, #16
 80041a2:	d008      	beq.n	80041b6 <UART_SetConfig+0x192>
 80041a4:	e00f      	b.n	80041c6 <UART_SetConfig+0x1a2>
 80041a6:	2300      	movs	r3, #0
 80041a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ac:	e0ad      	b.n	800430a <UART_SetConfig+0x2e6>
 80041ae:	2302      	movs	r3, #2
 80041b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041b4:	e0a9      	b.n	800430a <UART_SetConfig+0x2e6>
 80041b6:	2304      	movs	r3, #4
 80041b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041bc:	e0a5      	b.n	800430a <UART_SetConfig+0x2e6>
 80041be:	2308      	movs	r3, #8
 80041c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041c4:	e0a1      	b.n	800430a <UART_SetConfig+0x2e6>
 80041c6:	2310      	movs	r3, #16
 80041c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041cc:	e09d      	b.n	800430a <UART_SetConfig+0x2e6>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a4a      	ldr	r2, [pc, #296]	; (80042fc <UART_SetConfig+0x2d8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d125      	bne.n	8004224 <UART_SetConfig+0x200>
 80041d8:	4b45      	ldr	r3, [pc, #276]	; (80042f0 <UART_SetConfig+0x2cc>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041e2:	2bc0      	cmp	r3, #192	; 0xc0
 80041e4:	d016      	beq.n	8004214 <UART_SetConfig+0x1f0>
 80041e6:	2bc0      	cmp	r3, #192	; 0xc0
 80041e8:	d818      	bhi.n	800421c <UART_SetConfig+0x1f8>
 80041ea:	2b80      	cmp	r3, #128	; 0x80
 80041ec:	d00a      	beq.n	8004204 <UART_SetConfig+0x1e0>
 80041ee:	2b80      	cmp	r3, #128	; 0x80
 80041f0:	d814      	bhi.n	800421c <UART_SetConfig+0x1f8>
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <UART_SetConfig+0x1d8>
 80041f6:	2b40      	cmp	r3, #64	; 0x40
 80041f8:	d008      	beq.n	800420c <UART_SetConfig+0x1e8>
 80041fa:	e00f      	b.n	800421c <UART_SetConfig+0x1f8>
 80041fc:	2300      	movs	r3, #0
 80041fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004202:	e082      	b.n	800430a <UART_SetConfig+0x2e6>
 8004204:	2302      	movs	r3, #2
 8004206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420a:	e07e      	b.n	800430a <UART_SetConfig+0x2e6>
 800420c:	2304      	movs	r3, #4
 800420e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004212:	e07a      	b.n	800430a <UART_SetConfig+0x2e6>
 8004214:	2308      	movs	r3, #8
 8004216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800421a:	e076      	b.n	800430a <UART_SetConfig+0x2e6>
 800421c:	2310      	movs	r3, #16
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004222:	e072      	b.n	800430a <UART_SetConfig+0x2e6>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a35      	ldr	r2, [pc, #212]	; (8004300 <UART_SetConfig+0x2dc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d12a      	bne.n	8004284 <UART_SetConfig+0x260>
 800422e:	4b30      	ldr	r3, [pc, #192]	; (80042f0 <UART_SetConfig+0x2cc>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004238:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800423c:	d01a      	beq.n	8004274 <UART_SetConfig+0x250>
 800423e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004242:	d81b      	bhi.n	800427c <UART_SetConfig+0x258>
 8004244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004248:	d00c      	beq.n	8004264 <UART_SetConfig+0x240>
 800424a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424e:	d815      	bhi.n	800427c <UART_SetConfig+0x258>
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <UART_SetConfig+0x238>
 8004254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004258:	d008      	beq.n	800426c <UART_SetConfig+0x248>
 800425a:	e00f      	b.n	800427c <UART_SetConfig+0x258>
 800425c:	2300      	movs	r3, #0
 800425e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004262:	e052      	b.n	800430a <UART_SetConfig+0x2e6>
 8004264:	2302      	movs	r3, #2
 8004266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426a:	e04e      	b.n	800430a <UART_SetConfig+0x2e6>
 800426c:	2304      	movs	r3, #4
 800426e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004272:	e04a      	b.n	800430a <UART_SetConfig+0x2e6>
 8004274:	2308      	movs	r3, #8
 8004276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800427a:	e046      	b.n	800430a <UART_SetConfig+0x2e6>
 800427c:	2310      	movs	r3, #16
 800427e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004282:	e042      	b.n	800430a <UART_SetConfig+0x2e6>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <UART_SetConfig+0x2c4>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d13a      	bne.n	8004304 <UART_SetConfig+0x2e0>
 800428e:	4b18      	ldr	r3, [pc, #96]	; (80042f0 <UART_SetConfig+0x2cc>)
 8004290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004294:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004298:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800429c:	d01a      	beq.n	80042d4 <UART_SetConfig+0x2b0>
 800429e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042a2:	d81b      	bhi.n	80042dc <UART_SetConfig+0x2b8>
 80042a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a8:	d00c      	beq.n	80042c4 <UART_SetConfig+0x2a0>
 80042aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ae:	d815      	bhi.n	80042dc <UART_SetConfig+0x2b8>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <UART_SetConfig+0x298>
 80042b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b8:	d008      	beq.n	80042cc <UART_SetConfig+0x2a8>
 80042ba:	e00f      	b.n	80042dc <UART_SetConfig+0x2b8>
 80042bc:	2300      	movs	r3, #0
 80042be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c2:	e022      	b.n	800430a <UART_SetConfig+0x2e6>
 80042c4:	2302      	movs	r3, #2
 80042c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ca:	e01e      	b.n	800430a <UART_SetConfig+0x2e6>
 80042cc:	2304      	movs	r3, #4
 80042ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d2:	e01a      	b.n	800430a <UART_SetConfig+0x2e6>
 80042d4:	2308      	movs	r3, #8
 80042d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042da:	e016      	b.n	800430a <UART_SetConfig+0x2e6>
 80042dc:	2310      	movs	r3, #16
 80042de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e2:	e012      	b.n	800430a <UART_SetConfig+0x2e6>
 80042e4:	efff69f3 	.word	0xefff69f3
 80042e8:	40008000 	.word	0x40008000
 80042ec:	40013800 	.word	0x40013800
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40004400 	.word	0x40004400
 80042f8:	40004800 	.word	0x40004800
 80042fc:	40004c00 	.word	0x40004c00
 8004300:	40005000 	.word	0x40005000
 8004304:	2310      	movs	r3, #16
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a9f      	ldr	r2, [pc, #636]	; (800458c <UART_SetConfig+0x568>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d17a      	bne.n	800440a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004314:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004318:	2b08      	cmp	r3, #8
 800431a:	d824      	bhi.n	8004366 <UART_SetConfig+0x342>
 800431c:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <UART_SetConfig+0x300>)
 800431e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004322:	bf00      	nop
 8004324:	08004349 	.word	0x08004349
 8004328:	08004367 	.word	0x08004367
 800432c:	08004351 	.word	0x08004351
 8004330:	08004367 	.word	0x08004367
 8004334:	08004357 	.word	0x08004357
 8004338:	08004367 	.word	0x08004367
 800433c:	08004367 	.word	0x08004367
 8004340:	08004367 	.word	0x08004367
 8004344:	0800435f 	.word	0x0800435f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004348:	f7fe fbb6 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 800434c:	61f8      	str	r0, [r7, #28]
        break;
 800434e:	e010      	b.n	8004372 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004350:	4b8f      	ldr	r3, [pc, #572]	; (8004590 <UART_SetConfig+0x56c>)
 8004352:	61fb      	str	r3, [r7, #28]
        break;
 8004354:	e00d      	b.n	8004372 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004356:	f7fe fb17 	bl	8002988 <HAL_RCC_GetSysClockFreq>
 800435a:	61f8      	str	r0, [r7, #28]
        break;
 800435c:	e009      	b.n	8004372 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800435e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004362:	61fb      	str	r3, [r7, #28]
        break;
 8004364:	e005      	b.n	8004372 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004370:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80fb 	beq.w	8004570 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4413      	add	r3, r2
 8004384:	69fa      	ldr	r2, [r7, #28]
 8004386:	429a      	cmp	r2, r3
 8004388:	d305      	bcc.n	8004396 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	429a      	cmp	r2, r3
 8004394:	d903      	bls.n	800439e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800439c:	e0e8      	b.n	8004570 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	2200      	movs	r2, #0
 80043a2:	461c      	mov	r4, r3
 80043a4:	4615      	mov	r5, r2
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	022b      	lsls	r3, r5, #8
 80043b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80043b4:	0222      	lsls	r2, r4, #8
 80043b6:	68f9      	ldr	r1, [r7, #12]
 80043b8:	6849      	ldr	r1, [r1, #4]
 80043ba:	0849      	lsrs	r1, r1, #1
 80043bc:	2000      	movs	r0, #0
 80043be:	4688      	mov	r8, r1
 80043c0:	4681      	mov	r9, r0
 80043c2:	eb12 0a08 	adds.w	sl, r2, r8
 80043c6:	eb43 0b09 	adc.w	fp, r3, r9
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	603b      	str	r3, [r7, #0]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043d8:	4650      	mov	r0, sl
 80043da:	4659      	mov	r1, fp
 80043dc:	f7fb ff48 	bl	8000270 <__aeabi_uldivmod>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4613      	mov	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ee:	d308      	bcc.n	8004402 <UART_SetConfig+0x3de>
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f6:	d204      	bcs.n	8004402 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	60da      	str	r2, [r3, #12]
 8004400:	e0b6      	b.n	8004570 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004408:	e0b2      	b.n	8004570 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004412:	d15e      	bne.n	80044d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004414:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004418:	2b08      	cmp	r3, #8
 800441a:	d828      	bhi.n	800446e <UART_SetConfig+0x44a>
 800441c:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <UART_SetConfig+0x400>)
 800441e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004422:	bf00      	nop
 8004424:	08004449 	.word	0x08004449
 8004428:	08004451 	.word	0x08004451
 800442c:	08004459 	.word	0x08004459
 8004430:	0800446f 	.word	0x0800446f
 8004434:	0800445f 	.word	0x0800445f
 8004438:	0800446f 	.word	0x0800446f
 800443c:	0800446f 	.word	0x0800446f
 8004440:	0800446f 	.word	0x0800446f
 8004444:	08004467 	.word	0x08004467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004448:	f7fe fb36 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 800444c:	61f8      	str	r0, [r7, #28]
        break;
 800444e:	e014      	b.n	800447a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004450:	f7fe fb48 	bl	8002ae4 <HAL_RCC_GetPCLK2Freq>
 8004454:	61f8      	str	r0, [r7, #28]
        break;
 8004456:	e010      	b.n	800447a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004458:	4b4d      	ldr	r3, [pc, #308]	; (8004590 <UART_SetConfig+0x56c>)
 800445a:	61fb      	str	r3, [r7, #28]
        break;
 800445c:	e00d      	b.n	800447a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800445e:	f7fe fa93 	bl	8002988 <HAL_RCC_GetSysClockFreq>
 8004462:	61f8      	str	r0, [r7, #28]
        break;
 8004464:	e009      	b.n	800447a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446a:	61fb      	str	r3, [r7, #28]
        break;
 800446c:	e005      	b.n	800447a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004478:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d077      	beq.n	8004570 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	005a      	lsls	r2, r3, #1
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	085b      	lsrs	r3, r3, #1
 800448a:	441a      	add	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	fbb2 f3f3 	udiv	r3, r2, r3
 8004494:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	2b0f      	cmp	r3, #15
 800449a:	d916      	bls.n	80044ca <UART_SetConfig+0x4a6>
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a2:	d212      	bcs.n	80044ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f023 030f 	bic.w	r3, r3, #15
 80044ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	085b      	lsrs	r3, r3, #1
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	8afb      	ldrh	r3, [r7, #22]
 80044bc:	4313      	orrs	r3, r2
 80044be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	8afa      	ldrh	r2, [r7, #22]
 80044c6:	60da      	str	r2, [r3, #12]
 80044c8:	e052      	b.n	8004570 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044d0:	e04e      	b.n	8004570 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d827      	bhi.n	800452a <UART_SetConfig+0x506>
 80044da:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <UART_SetConfig+0x4bc>)
 80044dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e0:	08004505 	.word	0x08004505
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004515 	.word	0x08004515
 80044ec:	0800452b 	.word	0x0800452b
 80044f0:	0800451b 	.word	0x0800451b
 80044f4:	0800452b 	.word	0x0800452b
 80044f8:	0800452b 	.word	0x0800452b
 80044fc:	0800452b 	.word	0x0800452b
 8004500:	08004523 	.word	0x08004523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004504:	f7fe fad8 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8004508:	61f8      	str	r0, [r7, #28]
        break;
 800450a:	e014      	b.n	8004536 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800450c:	f7fe faea 	bl	8002ae4 <HAL_RCC_GetPCLK2Freq>
 8004510:	61f8      	str	r0, [r7, #28]
        break;
 8004512:	e010      	b.n	8004536 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004514:	4b1e      	ldr	r3, [pc, #120]	; (8004590 <UART_SetConfig+0x56c>)
 8004516:	61fb      	str	r3, [r7, #28]
        break;
 8004518:	e00d      	b.n	8004536 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800451a:	f7fe fa35 	bl	8002988 <HAL_RCC_GetSysClockFreq>
 800451e:	61f8      	str	r0, [r7, #28]
        break;
 8004520:	e009      	b.n	8004536 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004526:	61fb      	str	r3, [r7, #28]
        break;
 8004528:	e005      	b.n	8004536 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004534:	bf00      	nop
    }

    if (pclk != 0U)
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d019      	beq.n	8004570 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	085a      	lsrs	r2, r3, #1
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	441a      	add	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	fbb2 f3f3 	udiv	r3, r2, r3
 800454e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2b0f      	cmp	r3, #15
 8004554:	d909      	bls.n	800456a <UART_SetConfig+0x546>
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455c:	d205      	bcs.n	800456a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60da      	str	r2, [r3, #12]
 8004568:	e002      	b.n	8004570 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800457c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004580:	4618      	mov	r0, r3
 8004582:	3728      	adds	r7, #40	; 0x28
 8004584:	46bd      	mov	sp, r7
 8004586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800458a:	bf00      	nop
 800458c:	40008000 	.word	0x40008000
 8004590:	00f42400 	.word	0x00f42400

08004594 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	f003 0308 	and.w	r3, r3, #8
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	f003 0310 	and.w	r3, r3, #16
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d01a      	beq.n	80046aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004692:	d10a      	bne.n	80046aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	605a      	str	r2, [r3, #4]
  }
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b098      	sub	sp, #96	; 0x60
 80046dc:	af02      	add	r7, sp, #8
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046e8:	f7fc fbe4 	bl	8000eb4 <HAL_GetTick>
 80046ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d12e      	bne.n	800475a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004704:	2200      	movs	r2, #0
 8004706:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f88c 	bl	8004828 <UART_WaitOnFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d021      	beq.n	800475a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471e:	e853 3f00 	ldrex	r3, [r3]
 8004722:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800472a:	653b      	str	r3, [r7, #80]	; 0x50
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004734:	647b      	str	r3, [r7, #68]	; 0x44
 8004736:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004738:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800473a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800473c:	e841 2300 	strex	r3, r2, [r1]
 8004740:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e6      	bne.n	8004716 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e062      	b.n	8004820 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b04      	cmp	r3, #4
 8004766:	d149      	bne.n	80047fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004768:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004770:	2200      	movs	r2, #0
 8004772:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f856 	bl	8004828 <UART_WaitOnFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d03c      	beq.n	80047fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	623b      	str	r3, [r7, #32]
   return(result);
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a0:	633b      	str	r3, [r7, #48]	; 0x30
 80047a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047a8:	e841 2300 	strex	r3, r2, [r1]
 80047ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e6      	bne.n	8004782 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3308      	adds	r3, #8
 80047ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3308      	adds	r3, #8
 80047d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047d4:	61fa      	str	r2, [r7, #28]
 80047d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	69b9      	ldr	r1, [r7, #24]
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	617b      	str	r3, [r7, #20]
   return(result);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e5      	bne.n	80047b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e011      	b.n	8004820 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3758      	adds	r7, #88	; 0x58
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004838:	e049      	b.n	80048ce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d045      	beq.n	80048ce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004842:	f7fc fb37 	bl	8000eb4 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	429a      	cmp	r2, r3
 8004850:	d302      	bcc.n	8004858 <UART_WaitOnFlagUntilTimeout+0x30>
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e048      	b.n	80048ee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b00      	cmp	r3, #0
 8004868:	d031      	beq.n	80048ce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b08      	cmp	r3, #8
 8004876:	d110      	bne.n	800489a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2208      	movs	r2, #8
 800487e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f838 	bl	80048f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2208      	movs	r2, #8
 800488a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e029      	b.n	80048ee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a8:	d111      	bne.n	80048ce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f81e 	bl	80048f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e00f      	b.n	80048ee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4013      	ands	r3, r2
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	429a      	cmp	r2, r3
 80048dc:	bf0c      	ite	eq
 80048de:	2301      	moveq	r3, #1
 80048e0:	2300      	movne	r3, #0
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d0a6      	beq.n	800483a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b095      	sub	sp, #84	; 0x54
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004906:	e853 3f00 	ldrex	r3, [r3]
 800490a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	461a      	mov	r2, r3
 800491a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800491c:	643b      	str	r3, [r7, #64]	; 0x40
 800491e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004920:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004922:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004924:	e841 2300 	strex	r3, r2, [r1]
 8004928:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800492a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1e6      	bne.n	80048fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3308      	adds	r3, #8
 8004936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	64bb      	str	r3, [r7, #72]	; 0x48
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3308      	adds	r3, #8
 800494e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004950:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004952:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e5      	bne.n	8004930 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004968:	2b01      	cmp	r3, #1
 800496a:	d118      	bne.n	800499e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	60bb      	str	r3, [r7, #8]
   return(result);
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f023 0310 	bic.w	r3, r3, #16
 8004980:	647b      	str	r3, [r7, #68]	; 0x44
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	461a      	mov	r2, r3
 8004988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498a:	61bb      	str	r3, [r7, #24]
 800498c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	6979      	ldr	r1, [r7, #20]
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	613b      	str	r3, [r7, #16]
   return(result);
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e6      	bne.n	800496c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80049b2:	bf00      	nop
 80049b4:	3754      	adds	r7, #84	; 0x54
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
	...

080049c0 <std>:
 80049c0:	2300      	movs	r3, #0
 80049c2:	b510      	push	{r4, lr}
 80049c4:	4604      	mov	r4, r0
 80049c6:	e9c0 3300 	strd	r3, r3, [r0]
 80049ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049ce:	6083      	str	r3, [r0, #8]
 80049d0:	8181      	strh	r1, [r0, #12]
 80049d2:	6643      	str	r3, [r0, #100]	; 0x64
 80049d4:	81c2      	strh	r2, [r0, #14]
 80049d6:	6183      	str	r3, [r0, #24]
 80049d8:	4619      	mov	r1, r3
 80049da:	2208      	movs	r2, #8
 80049dc:	305c      	adds	r0, #92	; 0x5c
 80049de:	f000 f906 	bl	8004bee <memset>
 80049e2:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <std+0x58>)
 80049e4:	6263      	str	r3, [r4, #36]	; 0x24
 80049e6:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <std+0x5c>)
 80049e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80049ea:	4b0d      	ldr	r3, [pc, #52]	; (8004a20 <std+0x60>)
 80049ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049ee:	4b0d      	ldr	r3, [pc, #52]	; (8004a24 <std+0x64>)
 80049f0:	6323      	str	r3, [r4, #48]	; 0x30
 80049f2:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <std+0x68>)
 80049f4:	6224      	str	r4, [r4, #32]
 80049f6:	429c      	cmp	r4, r3
 80049f8:	d006      	beq.n	8004a08 <std+0x48>
 80049fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80049fe:	4294      	cmp	r4, r2
 8004a00:	d002      	beq.n	8004a08 <std+0x48>
 8004a02:	33d0      	adds	r3, #208	; 0xd0
 8004a04:	429c      	cmp	r4, r3
 8004a06:	d105      	bne.n	8004a14 <std+0x54>
 8004a08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a10:	f000 b966 	b.w	8004ce0 <__retarget_lock_init_recursive>
 8004a14:	bd10      	pop	{r4, pc}
 8004a16:	bf00      	nop
 8004a18:	08004b69 	.word	0x08004b69
 8004a1c:	08004b8b 	.word	0x08004b8b
 8004a20:	08004bc3 	.word	0x08004bc3
 8004a24:	08004be7 	.word	0x08004be7
 8004a28:	200001bc 	.word	0x200001bc

08004a2c <stdio_exit_handler>:
 8004a2c:	4a02      	ldr	r2, [pc, #8]	; (8004a38 <stdio_exit_handler+0xc>)
 8004a2e:	4903      	ldr	r1, [pc, #12]	; (8004a3c <stdio_exit_handler+0x10>)
 8004a30:	4803      	ldr	r0, [pc, #12]	; (8004a40 <stdio_exit_handler+0x14>)
 8004a32:	f000 b869 	b.w	8004b08 <_fwalk_sglue>
 8004a36:	bf00      	nop
 8004a38:	2000000c 	.word	0x2000000c
 8004a3c:	0800558d 	.word	0x0800558d
 8004a40:	20000018 	.word	0x20000018

08004a44 <cleanup_stdio>:
 8004a44:	6841      	ldr	r1, [r0, #4]
 8004a46:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <cleanup_stdio+0x34>)
 8004a48:	4299      	cmp	r1, r3
 8004a4a:	b510      	push	{r4, lr}
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	d001      	beq.n	8004a54 <cleanup_stdio+0x10>
 8004a50:	f000 fd9c 	bl	800558c <_fflush_r>
 8004a54:	68a1      	ldr	r1, [r4, #8]
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <cleanup_stdio+0x38>)
 8004a58:	4299      	cmp	r1, r3
 8004a5a:	d002      	beq.n	8004a62 <cleanup_stdio+0x1e>
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	f000 fd95 	bl	800558c <_fflush_r>
 8004a62:	68e1      	ldr	r1, [r4, #12]
 8004a64:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <cleanup_stdio+0x3c>)
 8004a66:	4299      	cmp	r1, r3
 8004a68:	d004      	beq.n	8004a74 <cleanup_stdio+0x30>
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a70:	f000 bd8c 	b.w	800558c <_fflush_r>
 8004a74:	bd10      	pop	{r4, pc}
 8004a76:	bf00      	nop
 8004a78:	200001bc 	.word	0x200001bc
 8004a7c:	20000224 	.word	0x20000224
 8004a80:	2000028c 	.word	0x2000028c

08004a84 <global_stdio_init.part.0>:
 8004a84:	b510      	push	{r4, lr}
 8004a86:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <global_stdio_init.part.0+0x30>)
 8004a88:	4c0b      	ldr	r4, [pc, #44]	; (8004ab8 <global_stdio_init.part.0+0x34>)
 8004a8a:	4a0c      	ldr	r2, [pc, #48]	; (8004abc <global_stdio_init.part.0+0x38>)
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	4620      	mov	r0, r4
 8004a90:	2200      	movs	r2, #0
 8004a92:	2104      	movs	r1, #4
 8004a94:	f7ff ff94 	bl	80049c0 <std>
 8004a98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	2109      	movs	r1, #9
 8004aa0:	f7ff ff8e 	bl	80049c0 <std>
 8004aa4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aae:	2112      	movs	r1, #18
 8004ab0:	f7ff bf86 	b.w	80049c0 <std>
 8004ab4:	200002f4 	.word	0x200002f4
 8004ab8:	200001bc 	.word	0x200001bc
 8004abc:	08004a2d 	.word	0x08004a2d

08004ac0 <__sfp_lock_acquire>:
 8004ac0:	4801      	ldr	r0, [pc, #4]	; (8004ac8 <__sfp_lock_acquire+0x8>)
 8004ac2:	f000 b90e 	b.w	8004ce2 <__retarget_lock_acquire_recursive>
 8004ac6:	bf00      	nop
 8004ac8:	200002fd 	.word	0x200002fd

08004acc <__sfp_lock_release>:
 8004acc:	4801      	ldr	r0, [pc, #4]	; (8004ad4 <__sfp_lock_release+0x8>)
 8004ace:	f000 b909 	b.w	8004ce4 <__retarget_lock_release_recursive>
 8004ad2:	bf00      	nop
 8004ad4:	200002fd 	.word	0x200002fd

08004ad8 <__sinit>:
 8004ad8:	b510      	push	{r4, lr}
 8004ada:	4604      	mov	r4, r0
 8004adc:	f7ff fff0 	bl	8004ac0 <__sfp_lock_acquire>
 8004ae0:	6a23      	ldr	r3, [r4, #32]
 8004ae2:	b11b      	cbz	r3, 8004aec <__sinit+0x14>
 8004ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ae8:	f7ff bff0 	b.w	8004acc <__sfp_lock_release>
 8004aec:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <__sinit+0x28>)
 8004aee:	6223      	str	r3, [r4, #32]
 8004af0:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <__sinit+0x2c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f5      	bne.n	8004ae4 <__sinit+0xc>
 8004af8:	f7ff ffc4 	bl	8004a84 <global_stdio_init.part.0>
 8004afc:	e7f2      	b.n	8004ae4 <__sinit+0xc>
 8004afe:	bf00      	nop
 8004b00:	08004a45 	.word	0x08004a45
 8004b04:	200002f4 	.word	0x200002f4

08004b08 <_fwalk_sglue>:
 8004b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b0c:	4607      	mov	r7, r0
 8004b0e:	4688      	mov	r8, r1
 8004b10:	4614      	mov	r4, r2
 8004b12:	2600      	movs	r6, #0
 8004b14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b18:	f1b9 0901 	subs.w	r9, r9, #1
 8004b1c:	d505      	bpl.n	8004b2a <_fwalk_sglue+0x22>
 8004b1e:	6824      	ldr	r4, [r4, #0]
 8004b20:	2c00      	cmp	r4, #0
 8004b22:	d1f7      	bne.n	8004b14 <_fwalk_sglue+0xc>
 8004b24:	4630      	mov	r0, r6
 8004b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b2a:	89ab      	ldrh	r3, [r5, #12]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d907      	bls.n	8004b40 <_fwalk_sglue+0x38>
 8004b30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b34:	3301      	adds	r3, #1
 8004b36:	d003      	beq.n	8004b40 <_fwalk_sglue+0x38>
 8004b38:	4629      	mov	r1, r5
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	47c0      	blx	r8
 8004b3e:	4306      	orrs	r6, r0
 8004b40:	3568      	adds	r5, #104	; 0x68
 8004b42:	e7e9      	b.n	8004b18 <_fwalk_sglue+0x10>

08004b44 <iprintf>:
 8004b44:	b40f      	push	{r0, r1, r2, r3}
 8004b46:	b507      	push	{r0, r1, r2, lr}
 8004b48:	4906      	ldr	r1, [pc, #24]	; (8004b64 <iprintf+0x20>)
 8004b4a:	ab04      	add	r3, sp, #16
 8004b4c:	6808      	ldr	r0, [r1, #0]
 8004b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b52:	6881      	ldr	r1, [r0, #8]
 8004b54:	9301      	str	r3, [sp, #4]
 8004b56:	f000 f9e9 	bl	8004f2c <_vfiprintf_r>
 8004b5a:	b003      	add	sp, #12
 8004b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b60:	b004      	add	sp, #16
 8004b62:	4770      	bx	lr
 8004b64:	20000064 	.word	0x20000064

08004b68 <__sread>:
 8004b68:	b510      	push	{r4, lr}
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b70:	f000 f868 	bl	8004c44 <_read_r>
 8004b74:	2800      	cmp	r0, #0
 8004b76:	bfab      	itete	ge
 8004b78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b7a:	89a3      	ldrhlt	r3, [r4, #12]
 8004b7c:	181b      	addge	r3, r3, r0
 8004b7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b82:	bfac      	ite	ge
 8004b84:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b86:	81a3      	strhlt	r3, [r4, #12]
 8004b88:	bd10      	pop	{r4, pc}

08004b8a <__swrite>:
 8004b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b8e:	461f      	mov	r7, r3
 8004b90:	898b      	ldrh	r3, [r1, #12]
 8004b92:	05db      	lsls	r3, r3, #23
 8004b94:	4605      	mov	r5, r0
 8004b96:	460c      	mov	r4, r1
 8004b98:	4616      	mov	r6, r2
 8004b9a:	d505      	bpl.n	8004ba8 <__swrite+0x1e>
 8004b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f000 f83c 	bl	8004c20 <_lseek_r>
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bb2:	81a3      	strh	r3, [r4, #12]
 8004bb4:	4632      	mov	r2, r6
 8004bb6:	463b      	mov	r3, r7
 8004bb8:	4628      	mov	r0, r5
 8004bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bbe:	f000 b853 	b.w	8004c68 <_write_r>

08004bc2 <__sseek>:
 8004bc2:	b510      	push	{r4, lr}
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bca:	f000 f829 	bl	8004c20 <_lseek_r>
 8004bce:	1c43      	adds	r3, r0, #1
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	bf15      	itete	ne
 8004bd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004bd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004bda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004bde:	81a3      	strheq	r3, [r4, #12]
 8004be0:	bf18      	it	ne
 8004be2:	81a3      	strhne	r3, [r4, #12]
 8004be4:	bd10      	pop	{r4, pc}

08004be6 <__sclose>:
 8004be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bea:	f000 b809 	b.w	8004c00 <_close_r>

08004bee <memset>:
 8004bee:	4402      	add	r2, r0
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d100      	bne.n	8004bf8 <memset+0xa>
 8004bf6:	4770      	bx	lr
 8004bf8:	f803 1b01 	strb.w	r1, [r3], #1
 8004bfc:	e7f9      	b.n	8004bf2 <memset+0x4>
	...

08004c00 <_close_r>:
 8004c00:	b538      	push	{r3, r4, r5, lr}
 8004c02:	4d06      	ldr	r5, [pc, #24]	; (8004c1c <_close_r+0x1c>)
 8004c04:	2300      	movs	r3, #0
 8004c06:	4604      	mov	r4, r0
 8004c08:	4608      	mov	r0, r1
 8004c0a:	602b      	str	r3, [r5, #0]
 8004c0c:	f7fc f83b 	bl	8000c86 <_close>
 8004c10:	1c43      	adds	r3, r0, #1
 8004c12:	d102      	bne.n	8004c1a <_close_r+0x1a>
 8004c14:	682b      	ldr	r3, [r5, #0]
 8004c16:	b103      	cbz	r3, 8004c1a <_close_r+0x1a>
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	bd38      	pop	{r3, r4, r5, pc}
 8004c1c:	200002f8 	.word	0x200002f8

08004c20 <_lseek_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	4d07      	ldr	r5, [pc, #28]	; (8004c40 <_lseek_r+0x20>)
 8004c24:	4604      	mov	r4, r0
 8004c26:	4608      	mov	r0, r1
 8004c28:	4611      	mov	r1, r2
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	602a      	str	r2, [r5, #0]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f7fc f850 	bl	8000cd4 <_lseek>
 8004c34:	1c43      	adds	r3, r0, #1
 8004c36:	d102      	bne.n	8004c3e <_lseek_r+0x1e>
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	b103      	cbz	r3, 8004c3e <_lseek_r+0x1e>
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	bd38      	pop	{r3, r4, r5, pc}
 8004c40:	200002f8 	.word	0x200002f8

08004c44 <_read_r>:
 8004c44:	b538      	push	{r3, r4, r5, lr}
 8004c46:	4d07      	ldr	r5, [pc, #28]	; (8004c64 <_read_r+0x20>)
 8004c48:	4604      	mov	r4, r0
 8004c4a:	4608      	mov	r0, r1
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	2200      	movs	r2, #0
 8004c50:	602a      	str	r2, [r5, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	f7fb ffde 	bl	8000c14 <_read>
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	d102      	bne.n	8004c62 <_read_r+0x1e>
 8004c5c:	682b      	ldr	r3, [r5, #0]
 8004c5e:	b103      	cbz	r3, 8004c62 <_read_r+0x1e>
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	200002f8 	.word	0x200002f8

08004c68 <_write_r>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	4d07      	ldr	r5, [pc, #28]	; (8004c88 <_write_r+0x20>)
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	4608      	mov	r0, r1
 8004c70:	4611      	mov	r1, r2
 8004c72:	2200      	movs	r2, #0
 8004c74:	602a      	str	r2, [r5, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	f7fb ffe9 	bl	8000c4e <_write>
 8004c7c:	1c43      	adds	r3, r0, #1
 8004c7e:	d102      	bne.n	8004c86 <_write_r+0x1e>
 8004c80:	682b      	ldr	r3, [r5, #0]
 8004c82:	b103      	cbz	r3, 8004c86 <_write_r+0x1e>
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	bd38      	pop	{r3, r4, r5, pc}
 8004c88:	200002f8 	.word	0x200002f8

08004c8c <__errno>:
 8004c8c:	4b01      	ldr	r3, [pc, #4]	; (8004c94 <__errno+0x8>)
 8004c8e:	6818      	ldr	r0, [r3, #0]
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	20000064 	.word	0x20000064

08004c98 <__libc_init_array>:
 8004c98:	b570      	push	{r4, r5, r6, lr}
 8004c9a:	4d0d      	ldr	r5, [pc, #52]	; (8004cd0 <__libc_init_array+0x38>)
 8004c9c:	4c0d      	ldr	r4, [pc, #52]	; (8004cd4 <__libc_init_array+0x3c>)
 8004c9e:	1b64      	subs	r4, r4, r5
 8004ca0:	10a4      	asrs	r4, r4, #2
 8004ca2:	2600      	movs	r6, #0
 8004ca4:	42a6      	cmp	r6, r4
 8004ca6:	d109      	bne.n	8004cbc <__libc_init_array+0x24>
 8004ca8:	4d0b      	ldr	r5, [pc, #44]	; (8004cd8 <__libc_init_array+0x40>)
 8004caa:	4c0c      	ldr	r4, [pc, #48]	; (8004cdc <__libc_init_array+0x44>)
 8004cac:	f000 fdc0 	bl	8005830 <_init>
 8004cb0:	1b64      	subs	r4, r4, r5
 8004cb2:	10a4      	asrs	r4, r4, #2
 8004cb4:	2600      	movs	r6, #0
 8004cb6:	42a6      	cmp	r6, r4
 8004cb8:	d105      	bne.n	8004cc6 <__libc_init_array+0x2e>
 8004cba:	bd70      	pop	{r4, r5, r6, pc}
 8004cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc0:	4798      	blx	r3
 8004cc2:	3601      	adds	r6, #1
 8004cc4:	e7ee      	b.n	8004ca4 <__libc_init_array+0xc>
 8004cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cca:	4798      	blx	r3
 8004ccc:	3601      	adds	r6, #1
 8004cce:	e7f2      	b.n	8004cb6 <__libc_init_array+0x1e>
 8004cd0:	08005910 	.word	0x08005910
 8004cd4:	08005910 	.word	0x08005910
 8004cd8:	08005910 	.word	0x08005910
 8004cdc:	08005914 	.word	0x08005914

08004ce0 <__retarget_lock_init_recursive>:
 8004ce0:	4770      	bx	lr

08004ce2 <__retarget_lock_acquire_recursive>:
 8004ce2:	4770      	bx	lr

08004ce4 <__retarget_lock_release_recursive>:
 8004ce4:	4770      	bx	lr
	...

08004ce8 <_free_r>:
 8004ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cea:	2900      	cmp	r1, #0
 8004cec:	d044      	beq.n	8004d78 <_free_r+0x90>
 8004cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cf2:	9001      	str	r0, [sp, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f1a1 0404 	sub.w	r4, r1, #4
 8004cfa:	bfb8      	it	lt
 8004cfc:	18e4      	addlt	r4, r4, r3
 8004cfe:	f000 f8df 	bl	8004ec0 <__malloc_lock>
 8004d02:	4a1e      	ldr	r2, [pc, #120]	; (8004d7c <_free_r+0x94>)
 8004d04:	9801      	ldr	r0, [sp, #4]
 8004d06:	6813      	ldr	r3, [r2, #0]
 8004d08:	b933      	cbnz	r3, 8004d18 <_free_r+0x30>
 8004d0a:	6063      	str	r3, [r4, #4]
 8004d0c:	6014      	str	r4, [r2, #0]
 8004d0e:	b003      	add	sp, #12
 8004d10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d14:	f000 b8da 	b.w	8004ecc <__malloc_unlock>
 8004d18:	42a3      	cmp	r3, r4
 8004d1a:	d908      	bls.n	8004d2e <_free_r+0x46>
 8004d1c:	6825      	ldr	r5, [r4, #0]
 8004d1e:	1961      	adds	r1, r4, r5
 8004d20:	428b      	cmp	r3, r1
 8004d22:	bf01      	itttt	eq
 8004d24:	6819      	ldreq	r1, [r3, #0]
 8004d26:	685b      	ldreq	r3, [r3, #4]
 8004d28:	1949      	addeq	r1, r1, r5
 8004d2a:	6021      	streq	r1, [r4, #0]
 8004d2c:	e7ed      	b.n	8004d0a <_free_r+0x22>
 8004d2e:	461a      	mov	r2, r3
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	b10b      	cbz	r3, 8004d38 <_free_r+0x50>
 8004d34:	42a3      	cmp	r3, r4
 8004d36:	d9fa      	bls.n	8004d2e <_free_r+0x46>
 8004d38:	6811      	ldr	r1, [r2, #0]
 8004d3a:	1855      	adds	r5, r2, r1
 8004d3c:	42a5      	cmp	r5, r4
 8004d3e:	d10b      	bne.n	8004d58 <_free_r+0x70>
 8004d40:	6824      	ldr	r4, [r4, #0]
 8004d42:	4421      	add	r1, r4
 8004d44:	1854      	adds	r4, r2, r1
 8004d46:	42a3      	cmp	r3, r4
 8004d48:	6011      	str	r1, [r2, #0]
 8004d4a:	d1e0      	bne.n	8004d0e <_free_r+0x26>
 8004d4c:	681c      	ldr	r4, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	6053      	str	r3, [r2, #4]
 8004d52:	440c      	add	r4, r1
 8004d54:	6014      	str	r4, [r2, #0]
 8004d56:	e7da      	b.n	8004d0e <_free_r+0x26>
 8004d58:	d902      	bls.n	8004d60 <_free_r+0x78>
 8004d5a:	230c      	movs	r3, #12
 8004d5c:	6003      	str	r3, [r0, #0]
 8004d5e:	e7d6      	b.n	8004d0e <_free_r+0x26>
 8004d60:	6825      	ldr	r5, [r4, #0]
 8004d62:	1961      	adds	r1, r4, r5
 8004d64:	428b      	cmp	r3, r1
 8004d66:	bf04      	itt	eq
 8004d68:	6819      	ldreq	r1, [r3, #0]
 8004d6a:	685b      	ldreq	r3, [r3, #4]
 8004d6c:	6063      	str	r3, [r4, #4]
 8004d6e:	bf04      	itt	eq
 8004d70:	1949      	addeq	r1, r1, r5
 8004d72:	6021      	streq	r1, [r4, #0]
 8004d74:	6054      	str	r4, [r2, #4]
 8004d76:	e7ca      	b.n	8004d0e <_free_r+0x26>
 8004d78:	b003      	add	sp, #12
 8004d7a:	bd30      	pop	{r4, r5, pc}
 8004d7c:	20000300 	.word	0x20000300

08004d80 <sbrk_aligned>:
 8004d80:	b570      	push	{r4, r5, r6, lr}
 8004d82:	4e0e      	ldr	r6, [pc, #56]	; (8004dbc <sbrk_aligned+0x3c>)
 8004d84:	460c      	mov	r4, r1
 8004d86:	6831      	ldr	r1, [r6, #0]
 8004d88:	4605      	mov	r5, r0
 8004d8a:	b911      	cbnz	r1, 8004d92 <sbrk_aligned+0x12>
 8004d8c:	f000 fcbc 	bl	8005708 <_sbrk_r>
 8004d90:	6030      	str	r0, [r6, #0]
 8004d92:	4621      	mov	r1, r4
 8004d94:	4628      	mov	r0, r5
 8004d96:	f000 fcb7 	bl	8005708 <_sbrk_r>
 8004d9a:	1c43      	adds	r3, r0, #1
 8004d9c:	d00a      	beq.n	8004db4 <sbrk_aligned+0x34>
 8004d9e:	1cc4      	adds	r4, r0, #3
 8004da0:	f024 0403 	bic.w	r4, r4, #3
 8004da4:	42a0      	cmp	r0, r4
 8004da6:	d007      	beq.n	8004db8 <sbrk_aligned+0x38>
 8004da8:	1a21      	subs	r1, r4, r0
 8004daa:	4628      	mov	r0, r5
 8004dac:	f000 fcac 	bl	8005708 <_sbrk_r>
 8004db0:	3001      	adds	r0, #1
 8004db2:	d101      	bne.n	8004db8 <sbrk_aligned+0x38>
 8004db4:	f04f 34ff 	mov.w	r4, #4294967295
 8004db8:	4620      	mov	r0, r4
 8004dba:	bd70      	pop	{r4, r5, r6, pc}
 8004dbc:	20000304 	.word	0x20000304

08004dc0 <_malloc_r>:
 8004dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dc4:	1ccd      	adds	r5, r1, #3
 8004dc6:	f025 0503 	bic.w	r5, r5, #3
 8004dca:	3508      	adds	r5, #8
 8004dcc:	2d0c      	cmp	r5, #12
 8004dce:	bf38      	it	cc
 8004dd0:	250c      	movcc	r5, #12
 8004dd2:	2d00      	cmp	r5, #0
 8004dd4:	4607      	mov	r7, r0
 8004dd6:	db01      	blt.n	8004ddc <_malloc_r+0x1c>
 8004dd8:	42a9      	cmp	r1, r5
 8004dda:	d905      	bls.n	8004de8 <_malloc_r+0x28>
 8004ddc:	230c      	movs	r3, #12
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	2600      	movs	r6, #0
 8004de2:	4630      	mov	r0, r6
 8004de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004de8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004ebc <_malloc_r+0xfc>
 8004dec:	f000 f868 	bl	8004ec0 <__malloc_lock>
 8004df0:	f8d8 3000 	ldr.w	r3, [r8]
 8004df4:	461c      	mov	r4, r3
 8004df6:	bb5c      	cbnz	r4, 8004e50 <_malloc_r+0x90>
 8004df8:	4629      	mov	r1, r5
 8004dfa:	4638      	mov	r0, r7
 8004dfc:	f7ff ffc0 	bl	8004d80 <sbrk_aligned>
 8004e00:	1c43      	adds	r3, r0, #1
 8004e02:	4604      	mov	r4, r0
 8004e04:	d155      	bne.n	8004eb2 <_malloc_r+0xf2>
 8004e06:	f8d8 4000 	ldr.w	r4, [r8]
 8004e0a:	4626      	mov	r6, r4
 8004e0c:	2e00      	cmp	r6, #0
 8004e0e:	d145      	bne.n	8004e9c <_malloc_r+0xdc>
 8004e10:	2c00      	cmp	r4, #0
 8004e12:	d048      	beq.n	8004ea6 <_malloc_r+0xe6>
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	4631      	mov	r1, r6
 8004e18:	4638      	mov	r0, r7
 8004e1a:	eb04 0903 	add.w	r9, r4, r3
 8004e1e:	f000 fc73 	bl	8005708 <_sbrk_r>
 8004e22:	4581      	cmp	r9, r0
 8004e24:	d13f      	bne.n	8004ea6 <_malloc_r+0xe6>
 8004e26:	6821      	ldr	r1, [r4, #0]
 8004e28:	1a6d      	subs	r5, r5, r1
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	f7ff ffa7 	bl	8004d80 <sbrk_aligned>
 8004e32:	3001      	adds	r0, #1
 8004e34:	d037      	beq.n	8004ea6 <_malloc_r+0xe6>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	442b      	add	r3, r5
 8004e3a:	6023      	str	r3, [r4, #0]
 8004e3c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d038      	beq.n	8004eb6 <_malloc_r+0xf6>
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	42a2      	cmp	r2, r4
 8004e48:	d12b      	bne.n	8004ea2 <_malloc_r+0xe2>
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	605a      	str	r2, [r3, #4]
 8004e4e:	e00f      	b.n	8004e70 <_malloc_r+0xb0>
 8004e50:	6822      	ldr	r2, [r4, #0]
 8004e52:	1b52      	subs	r2, r2, r5
 8004e54:	d41f      	bmi.n	8004e96 <_malloc_r+0xd6>
 8004e56:	2a0b      	cmp	r2, #11
 8004e58:	d917      	bls.n	8004e8a <_malloc_r+0xca>
 8004e5a:	1961      	adds	r1, r4, r5
 8004e5c:	42a3      	cmp	r3, r4
 8004e5e:	6025      	str	r5, [r4, #0]
 8004e60:	bf18      	it	ne
 8004e62:	6059      	strne	r1, [r3, #4]
 8004e64:	6863      	ldr	r3, [r4, #4]
 8004e66:	bf08      	it	eq
 8004e68:	f8c8 1000 	streq.w	r1, [r8]
 8004e6c:	5162      	str	r2, [r4, r5]
 8004e6e:	604b      	str	r3, [r1, #4]
 8004e70:	4638      	mov	r0, r7
 8004e72:	f104 060b 	add.w	r6, r4, #11
 8004e76:	f000 f829 	bl	8004ecc <__malloc_unlock>
 8004e7a:	f026 0607 	bic.w	r6, r6, #7
 8004e7e:	1d23      	adds	r3, r4, #4
 8004e80:	1af2      	subs	r2, r6, r3
 8004e82:	d0ae      	beq.n	8004de2 <_malloc_r+0x22>
 8004e84:	1b9b      	subs	r3, r3, r6
 8004e86:	50a3      	str	r3, [r4, r2]
 8004e88:	e7ab      	b.n	8004de2 <_malloc_r+0x22>
 8004e8a:	42a3      	cmp	r3, r4
 8004e8c:	6862      	ldr	r2, [r4, #4]
 8004e8e:	d1dd      	bne.n	8004e4c <_malloc_r+0x8c>
 8004e90:	f8c8 2000 	str.w	r2, [r8]
 8004e94:	e7ec      	b.n	8004e70 <_malloc_r+0xb0>
 8004e96:	4623      	mov	r3, r4
 8004e98:	6864      	ldr	r4, [r4, #4]
 8004e9a:	e7ac      	b.n	8004df6 <_malloc_r+0x36>
 8004e9c:	4634      	mov	r4, r6
 8004e9e:	6876      	ldr	r6, [r6, #4]
 8004ea0:	e7b4      	b.n	8004e0c <_malloc_r+0x4c>
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	e7cc      	b.n	8004e40 <_malloc_r+0x80>
 8004ea6:	230c      	movs	r3, #12
 8004ea8:	603b      	str	r3, [r7, #0]
 8004eaa:	4638      	mov	r0, r7
 8004eac:	f000 f80e 	bl	8004ecc <__malloc_unlock>
 8004eb0:	e797      	b.n	8004de2 <_malloc_r+0x22>
 8004eb2:	6025      	str	r5, [r4, #0]
 8004eb4:	e7dc      	b.n	8004e70 <_malloc_r+0xb0>
 8004eb6:	605b      	str	r3, [r3, #4]
 8004eb8:	deff      	udf	#255	; 0xff
 8004eba:	bf00      	nop
 8004ebc:	20000300 	.word	0x20000300

08004ec0 <__malloc_lock>:
 8004ec0:	4801      	ldr	r0, [pc, #4]	; (8004ec8 <__malloc_lock+0x8>)
 8004ec2:	f7ff bf0e 	b.w	8004ce2 <__retarget_lock_acquire_recursive>
 8004ec6:	bf00      	nop
 8004ec8:	200002fc 	.word	0x200002fc

08004ecc <__malloc_unlock>:
 8004ecc:	4801      	ldr	r0, [pc, #4]	; (8004ed4 <__malloc_unlock+0x8>)
 8004ece:	f7ff bf09 	b.w	8004ce4 <__retarget_lock_release_recursive>
 8004ed2:	bf00      	nop
 8004ed4:	200002fc 	.word	0x200002fc

08004ed8 <__sfputc_r>:
 8004ed8:	6893      	ldr	r3, [r2, #8]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	b410      	push	{r4}
 8004ee0:	6093      	str	r3, [r2, #8]
 8004ee2:	da08      	bge.n	8004ef6 <__sfputc_r+0x1e>
 8004ee4:	6994      	ldr	r4, [r2, #24]
 8004ee6:	42a3      	cmp	r3, r4
 8004ee8:	db01      	blt.n	8004eee <__sfputc_r+0x16>
 8004eea:	290a      	cmp	r1, #10
 8004eec:	d103      	bne.n	8004ef6 <__sfputc_r+0x1e>
 8004eee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ef2:	f000 bb73 	b.w	80055dc <__swbuf_r>
 8004ef6:	6813      	ldr	r3, [r2, #0]
 8004ef8:	1c58      	adds	r0, r3, #1
 8004efa:	6010      	str	r0, [r2, #0]
 8004efc:	7019      	strb	r1, [r3, #0]
 8004efe:	4608      	mov	r0, r1
 8004f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <__sfputs_r>:
 8004f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f08:	4606      	mov	r6, r0
 8004f0a:	460f      	mov	r7, r1
 8004f0c:	4614      	mov	r4, r2
 8004f0e:	18d5      	adds	r5, r2, r3
 8004f10:	42ac      	cmp	r4, r5
 8004f12:	d101      	bne.n	8004f18 <__sfputs_r+0x12>
 8004f14:	2000      	movs	r0, #0
 8004f16:	e007      	b.n	8004f28 <__sfputs_r+0x22>
 8004f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f1c:	463a      	mov	r2, r7
 8004f1e:	4630      	mov	r0, r6
 8004f20:	f7ff ffda 	bl	8004ed8 <__sfputc_r>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d1f3      	bne.n	8004f10 <__sfputs_r+0xa>
 8004f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f2c <_vfiprintf_r>:
 8004f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f30:	460d      	mov	r5, r1
 8004f32:	b09d      	sub	sp, #116	; 0x74
 8004f34:	4614      	mov	r4, r2
 8004f36:	4698      	mov	r8, r3
 8004f38:	4606      	mov	r6, r0
 8004f3a:	b118      	cbz	r0, 8004f44 <_vfiprintf_r+0x18>
 8004f3c:	6a03      	ldr	r3, [r0, #32]
 8004f3e:	b90b      	cbnz	r3, 8004f44 <_vfiprintf_r+0x18>
 8004f40:	f7ff fdca 	bl	8004ad8 <__sinit>
 8004f44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f46:	07d9      	lsls	r1, r3, #31
 8004f48:	d405      	bmi.n	8004f56 <_vfiprintf_r+0x2a>
 8004f4a:	89ab      	ldrh	r3, [r5, #12]
 8004f4c:	059a      	lsls	r2, r3, #22
 8004f4e:	d402      	bmi.n	8004f56 <_vfiprintf_r+0x2a>
 8004f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f52:	f7ff fec6 	bl	8004ce2 <__retarget_lock_acquire_recursive>
 8004f56:	89ab      	ldrh	r3, [r5, #12]
 8004f58:	071b      	lsls	r3, r3, #28
 8004f5a:	d501      	bpl.n	8004f60 <_vfiprintf_r+0x34>
 8004f5c:	692b      	ldr	r3, [r5, #16]
 8004f5e:	b99b      	cbnz	r3, 8004f88 <_vfiprintf_r+0x5c>
 8004f60:	4629      	mov	r1, r5
 8004f62:	4630      	mov	r0, r6
 8004f64:	f000 fb78 	bl	8005658 <__swsetup_r>
 8004f68:	b170      	cbz	r0, 8004f88 <_vfiprintf_r+0x5c>
 8004f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f6c:	07dc      	lsls	r4, r3, #31
 8004f6e:	d504      	bpl.n	8004f7a <_vfiprintf_r+0x4e>
 8004f70:	f04f 30ff 	mov.w	r0, #4294967295
 8004f74:	b01d      	add	sp, #116	; 0x74
 8004f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f7a:	89ab      	ldrh	r3, [r5, #12]
 8004f7c:	0598      	lsls	r0, r3, #22
 8004f7e:	d4f7      	bmi.n	8004f70 <_vfiprintf_r+0x44>
 8004f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f82:	f7ff feaf 	bl	8004ce4 <__retarget_lock_release_recursive>
 8004f86:	e7f3      	b.n	8004f70 <_vfiprintf_r+0x44>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f8c:	2320      	movs	r3, #32
 8004f8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f92:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f96:	2330      	movs	r3, #48	; 0x30
 8004f98:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800514c <_vfiprintf_r+0x220>
 8004f9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fa0:	f04f 0901 	mov.w	r9, #1
 8004fa4:	4623      	mov	r3, r4
 8004fa6:	469a      	mov	sl, r3
 8004fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fac:	b10a      	cbz	r2, 8004fb2 <_vfiprintf_r+0x86>
 8004fae:	2a25      	cmp	r2, #37	; 0x25
 8004fb0:	d1f9      	bne.n	8004fa6 <_vfiprintf_r+0x7a>
 8004fb2:	ebba 0b04 	subs.w	fp, sl, r4
 8004fb6:	d00b      	beq.n	8004fd0 <_vfiprintf_r+0xa4>
 8004fb8:	465b      	mov	r3, fp
 8004fba:	4622      	mov	r2, r4
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	4630      	mov	r0, r6
 8004fc0:	f7ff ffa1 	bl	8004f06 <__sfputs_r>
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	f000 80a9 	beq.w	800511c <_vfiprintf_r+0x1f0>
 8004fca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fcc:	445a      	add	r2, fp
 8004fce:	9209      	str	r2, [sp, #36]	; 0x24
 8004fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 80a1 	beq.w	800511c <_vfiprintf_r+0x1f0>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fe4:	f10a 0a01 	add.w	sl, sl, #1
 8004fe8:	9304      	str	r3, [sp, #16]
 8004fea:	9307      	str	r3, [sp, #28]
 8004fec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ff0:	931a      	str	r3, [sp, #104]	; 0x68
 8004ff2:	4654      	mov	r4, sl
 8004ff4:	2205      	movs	r2, #5
 8004ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ffa:	4854      	ldr	r0, [pc, #336]	; (800514c <_vfiprintf_r+0x220>)
 8004ffc:	f7fb f8e8 	bl	80001d0 <memchr>
 8005000:	9a04      	ldr	r2, [sp, #16]
 8005002:	b9d8      	cbnz	r0, 800503c <_vfiprintf_r+0x110>
 8005004:	06d1      	lsls	r1, r2, #27
 8005006:	bf44      	itt	mi
 8005008:	2320      	movmi	r3, #32
 800500a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800500e:	0713      	lsls	r3, r2, #28
 8005010:	bf44      	itt	mi
 8005012:	232b      	movmi	r3, #43	; 0x2b
 8005014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005018:	f89a 3000 	ldrb.w	r3, [sl]
 800501c:	2b2a      	cmp	r3, #42	; 0x2a
 800501e:	d015      	beq.n	800504c <_vfiprintf_r+0x120>
 8005020:	9a07      	ldr	r2, [sp, #28]
 8005022:	4654      	mov	r4, sl
 8005024:	2000      	movs	r0, #0
 8005026:	f04f 0c0a 	mov.w	ip, #10
 800502a:	4621      	mov	r1, r4
 800502c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005030:	3b30      	subs	r3, #48	; 0x30
 8005032:	2b09      	cmp	r3, #9
 8005034:	d94d      	bls.n	80050d2 <_vfiprintf_r+0x1a6>
 8005036:	b1b0      	cbz	r0, 8005066 <_vfiprintf_r+0x13a>
 8005038:	9207      	str	r2, [sp, #28]
 800503a:	e014      	b.n	8005066 <_vfiprintf_r+0x13a>
 800503c:	eba0 0308 	sub.w	r3, r0, r8
 8005040:	fa09 f303 	lsl.w	r3, r9, r3
 8005044:	4313      	orrs	r3, r2
 8005046:	9304      	str	r3, [sp, #16]
 8005048:	46a2      	mov	sl, r4
 800504a:	e7d2      	b.n	8004ff2 <_vfiprintf_r+0xc6>
 800504c:	9b03      	ldr	r3, [sp, #12]
 800504e:	1d19      	adds	r1, r3, #4
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	9103      	str	r1, [sp, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	bfbb      	ittet	lt
 8005058:	425b      	neglt	r3, r3
 800505a:	f042 0202 	orrlt.w	r2, r2, #2
 800505e:	9307      	strge	r3, [sp, #28]
 8005060:	9307      	strlt	r3, [sp, #28]
 8005062:	bfb8      	it	lt
 8005064:	9204      	strlt	r2, [sp, #16]
 8005066:	7823      	ldrb	r3, [r4, #0]
 8005068:	2b2e      	cmp	r3, #46	; 0x2e
 800506a:	d10c      	bne.n	8005086 <_vfiprintf_r+0x15a>
 800506c:	7863      	ldrb	r3, [r4, #1]
 800506e:	2b2a      	cmp	r3, #42	; 0x2a
 8005070:	d134      	bne.n	80050dc <_vfiprintf_r+0x1b0>
 8005072:	9b03      	ldr	r3, [sp, #12]
 8005074:	1d1a      	adds	r2, r3, #4
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	9203      	str	r2, [sp, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	bfb8      	it	lt
 800507e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005082:	3402      	adds	r4, #2
 8005084:	9305      	str	r3, [sp, #20]
 8005086:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800515c <_vfiprintf_r+0x230>
 800508a:	7821      	ldrb	r1, [r4, #0]
 800508c:	2203      	movs	r2, #3
 800508e:	4650      	mov	r0, sl
 8005090:	f7fb f89e 	bl	80001d0 <memchr>
 8005094:	b138      	cbz	r0, 80050a6 <_vfiprintf_r+0x17a>
 8005096:	9b04      	ldr	r3, [sp, #16]
 8005098:	eba0 000a 	sub.w	r0, r0, sl
 800509c:	2240      	movs	r2, #64	; 0x40
 800509e:	4082      	lsls	r2, r0
 80050a0:	4313      	orrs	r3, r2
 80050a2:	3401      	adds	r4, #1
 80050a4:	9304      	str	r3, [sp, #16]
 80050a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050aa:	4829      	ldr	r0, [pc, #164]	; (8005150 <_vfiprintf_r+0x224>)
 80050ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050b0:	2206      	movs	r2, #6
 80050b2:	f7fb f88d 	bl	80001d0 <memchr>
 80050b6:	2800      	cmp	r0, #0
 80050b8:	d03f      	beq.n	800513a <_vfiprintf_r+0x20e>
 80050ba:	4b26      	ldr	r3, [pc, #152]	; (8005154 <_vfiprintf_r+0x228>)
 80050bc:	bb1b      	cbnz	r3, 8005106 <_vfiprintf_r+0x1da>
 80050be:	9b03      	ldr	r3, [sp, #12]
 80050c0:	3307      	adds	r3, #7
 80050c2:	f023 0307 	bic.w	r3, r3, #7
 80050c6:	3308      	adds	r3, #8
 80050c8:	9303      	str	r3, [sp, #12]
 80050ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050cc:	443b      	add	r3, r7
 80050ce:	9309      	str	r3, [sp, #36]	; 0x24
 80050d0:	e768      	b.n	8004fa4 <_vfiprintf_r+0x78>
 80050d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80050d6:	460c      	mov	r4, r1
 80050d8:	2001      	movs	r0, #1
 80050da:	e7a6      	b.n	800502a <_vfiprintf_r+0xfe>
 80050dc:	2300      	movs	r3, #0
 80050de:	3401      	adds	r4, #1
 80050e0:	9305      	str	r3, [sp, #20]
 80050e2:	4619      	mov	r1, r3
 80050e4:	f04f 0c0a 	mov.w	ip, #10
 80050e8:	4620      	mov	r0, r4
 80050ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050ee:	3a30      	subs	r2, #48	; 0x30
 80050f0:	2a09      	cmp	r2, #9
 80050f2:	d903      	bls.n	80050fc <_vfiprintf_r+0x1d0>
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0c6      	beq.n	8005086 <_vfiprintf_r+0x15a>
 80050f8:	9105      	str	r1, [sp, #20]
 80050fa:	e7c4      	b.n	8005086 <_vfiprintf_r+0x15a>
 80050fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005100:	4604      	mov	r4, r0
 8005102:	2301      	movs	r3, #1
 8005104:	e7f0      	b.n	80050e8 <_vfiprintf_r+0x1bc>
 8005106:	ab03      	add	r3, sp, #12
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	462a      	mov	r2, r5
 800510c:	4b12      	ldr	r3, [pc, #72]	; (8005158 <_vfiprintf_r+0x22c>)
 800510e:	a904      	add	r1, sp, #16
 8005110:	4630      	mov	r0, r6
 8005112:	f3af 8000 	nop.w
 8005116:	4607      	mov	r7, r0
 8005118:	1c78      	adds	r0, r7, #1
 800511a:	d1d6      	bne.n	80050ca <_vfiprintf_r+0x19e>
 800511c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800511e:	07d9      	lsls	r1, r3, #31
 8005120:	d405      	bmi.n	800512e <_vfiprintf_r+0x202>
 8005122:	89ab      	ldrh	r3, [r5, #12]
 8005124:	059a      	lsls	r2, r3, #22
 8005126:	d402      	bmi.n	800512e <_vfiprintf_r+0x202>
 8005128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800512a:	f7ff fddb 	bl	8004ce4 <__retarget_lock_release_recursive>
 800512e:	89ab      	ldrh	r3, [r5, #12]
 8005130:	065b      	lsls	r3, r3, #25
 8005132:	f53f af1d 	bmi.w	8004f70 <_vfiprintf_r+0x44>
 8005136:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005138:	e71c      	b.n	8004f74 <_vfiprintf_r+0x48>
 800513a:	ab03      	add	r3, sp, #12
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	462a      	mov	r2, r5
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <_vfiprintf_r+0x22c>)
 8005142:	a904      	add	r1, sp, #16
 8005144:	4630      	mov	r0, r6
 8005146:	f000 f879 	bl	800523c <_printf_i>
 800514a:	e7e4      	b.n	8005116 <_vfiprintf_r+0x1ea>
 800514c:	080058d4 	.word	0x080058d4
 8005150:	080058de 	.word	0x080058de
 8005154:	00000000 	.word	0x00000000
 8005158:	08004f07 	.word	0x08004f07
 800515c:	080058da 	.word	0x080058da

08005160 <_printf_common>:
 8005160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005164:	4616      	mov	r6, r2
 8005166:	4699      	mov	r9, r3
 8005168:	688a      	ldr	r2, [r1, #8]
 800516a:	690b      	ldr	r3, [r1, #16]
 800516c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005170:	4293      	cmp	r3, r2
 8005172:	bfb8      	it	lt
 8005174:	4613      	movlt	r3, r2
 8005176:	6033      	str	r3, [r6, #0]
 8005178:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800517c:	4607      	mov	r7, r0
 800517e:	460c      	mov	r4, r1
 8005180:	b10a      	cbz	r2, 8005186 <_printf_common+0x26>
 8005182:	3301      	adds	r3, #1
 8005184:	6033      	str	r3, [r6, #0]
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	0699      	lsls	r1, r3, #26
 800518a:	bf42      	ittt	mi
 800518c:	6833      	ldrmi	r3, [r6, #0]
 800518e:	3302      	addmi	r3, #2
 8005190:	6033      	strmi	r3, [r6, #0]
 8005192:	6825      	ldr	r5, [r4, #0]
 8005194:	f015 0506 	ands.w	r5, r5, #6
 8005198:	d106      	bne.n	80051a8 <_printf_common+0x48>
 800519a:	f104 0a19 	add.w	sl, r4, #25
 800519e:	68e3      	ldr	r3, [r4, #12]
 80051a0:	6832      	ldr	r2, [r6, #0]
 80051a2:	1a9b      	subs	r3, r3, r2
 80051a4:	42ab      	cmp	r3, r5
 80051a6:	dc26      	bgt.n	80051f6 <_printf_common+0x96>
 80051a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051ac:	1e13      	subs	r3, r2, #0
 80051ae:	6822      	ldr	r2, [r4, #0]
 80051b0:	bf18      	it	ne
 80051b2:	2301      	movne	r3, #1
 80051b4:	0692      	lsls	r2, r2, #26
 80051b6:	d42b      	bmi.n	8005210 <_printf_common+0xb0>
 80051b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051bc:	4649      	mov	r1, r9
 80051be:	4638      	mov	r0, r7
 80051c0:	47c0      	blx	r8
 80051c2:	3001      	adds	r0, #1
 80051c4:	d01e      	beq.n	8005204 <_printf_common+0xa4>
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	6922      	ldr	r2, [r4, #16]
 80051ca:	f003 0306 	and.w	r3, r3, #6
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	bf02      	ittt	eq
 80051d2:	68e5      	ldreq	r5, [r4, #12]
 80051d4:	6833      	ldreq	r3, [r6, #0]
 80051d6:	1aed      	subeq	r5, r5, r3
 80051d8:	68a3      	ldr	r3, [r4, #8]
 80051da:	bf0c      	ite	eq
 80051dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051e0:	2500      	movne	r5, #0
 80051e2:	4293      	cmp	r3, r2
 80051e4:	bfc4      	itt	gt
 80051e6:	1a9b      	subgt	r3, r3, r2
 80051e8:	18ed      	addgt	r5, r5, r3
 80051ea:	2600      	movs	r6, #0
 80051ec:	341a      	adds	r4, #26
 80051ee:	42b5      	cmp	r5, r6
 80051f0:	d11a      	bne.n	8005228 <_printf_common+0xc8>
 80051f2:	2000      	movs	r0, #0
 80051f4:	e008      	b.n	8005208 <_printf_common+0xa8>
 80051f6:	2301      	movs	r3, #1
 80051f8:	4652      	mov	r2, sl
 80051fa:	4649      	mov	r1, r9
 80051fc:	4638      	mov	r0, r7
 80051fe:	47c0      	blx	r8
 8005200:	3001      	adds	r0, #1
 8005202:	d103      	bne.n	800520c <_printf_common+0xac>
 8005204:	f04f 30ff 	mov.w	r0, #4294967295
 8005208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520c:	3501      	adds	r5, #1
 800520e:	e7c6      	b.n	800519e <_printf_common+0x3e>
 8005210:	18e1      	adds	r1, r4, r3
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	2030      	movs	r0, #48	; 0x30
 8005216:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800521a:	4422      	add	r2, r4
 800521c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005220:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005224:	3302      	adds	r3, #2
 8005226:	e7c7      	b.n	80051b8 <_printf_common+0x58>
 8005228:	2301      	movs	r3, #1
 800522a:	4622      	mov	r2, r4
 800522c:	4649      	mov	r1, r9
 800522e:	4638      	mov	r0, r7
 8005230:	47c0      	blx	r8
 8005232:	3001      	adds	r0, #1
 8005234:	d0e6      	beq.n	8005204 <_printf_common+0xa4>
 8005236:	3601      	adds	r6, #1
 8005238:	e7d9      	b.n	80051ee <_printf_common+0x8e>
	...

0800523c <_printf_i>:
 800523c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005240:	7e0f      	ldrb	r7, [r1, #24]
 8005242:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005244:	2f78      	cmp	r7, #120	; 0x78
 8005246:	4691      	mov	r9, r2
 8005248:	4680      	mov	r8, r0
 800524a:	460c      	mov	r4, r1
 800524c:	469a      	mov	sl, r3
 800524e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005252:	d807      	bhi.n	8005264 <_printf_i+0x28>
 8005254:	2f62      	cmp	r7, #98	; 0x62
 8005256:	d80a      	bhi.n	800526e <_printf_i+0x32>
 8005258:	2f00      	cmp	r7, #0
 800525a:	f000 80d4 	beq.w	8005406 <_printf_i+0x1ca>
 800525e:	2f58      	cmp	r7, #88	; 0x58
 8005260:	f000 80c0 	beq.w	80053e4 <_printf_i+0x1a8>
 8005264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005268:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800526c:	e03a      	b.n	80052e4 <_printf_i+0xa8>
 800526e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005272:	2b15      	cmp	r3, #21
 8005274:	d8f6      	bhi.n	8005264 <_printf_i+0x28>
 8005276:	a101      	add	r1, pc, #4	; (adr r1, 800527c <_printf_i+0x40>)
 8005278:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800527c:	080052d5 	.word	0x080052d5
 8005280:	080052e9 	.word	0x080052e9
 8005284:	08005265 	.word	0x08005265
 8005288:	08005265 	.word	0x08005265
 800528c:	08005265 	.word	0x08005265
 8005290:	08005265 	.word	0x08005265
 8005294:	080052e9 	.word	0x080052e9
 8005298:	08005265 	.word	0x08005265
 800529c:	08005265 	.word	0x08005265
 80052a0:	08005265 	.word	0x08005265
 80052a4:	08005265 	.word	0x08005265
 80052a8:	080053ed 	.word	0x080053ed
 80052ac:	08005315 	.word	0x08005315
 80052b0:	080053a7 	.word	0x080053a7
 80052b4:	08005265 	.word	0x08005265
 80052b8:	08005265 	.word	0x08005265
 80052bc:	0800540f 	.word	0x0800540f
 80052c0:	08005265 	.word	0x08005265
 80052c4:	08005315 	.word	0x08005315
 80052c8:	08005265 	.word	0x08005265
 80052cc:	08005265 	.word	0x08005265
 80052d0:	080053af 	.word	0x080053af
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	1d1a      	adds	r2, r3, #4
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	602a      	str	r2, [r5, #0]
 80052dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052e4:	2301      	movs	r3, #1
 80052e6:	e09f      	b.n	8005428 <_printf_i+0x1ec>
 80052e8:	6820      	ldr	r0, [r4, #0]
 80052ea:	682b      	ldr	r3, [r5, #0]
 80052ec:	0607      	lsls	r7, r0, #24
 80052ee:	f103 0104 	add.w	r1, r3, #4
 80052f2:	6029      	str	r1, [r5, #0]
 80052f4:	d501      	bpl.n	80052fa <_printf_i+0xbe>
 80052f6:	681e      	ldr	r6, [r3, #0]
 80052f8:	e003      	b.n	8005302 <_printf_i+0xc6>
 80052fa:	0646      	lsls	r6, r0, #25
 80052fc:	d5fb      	bpl.n	80052f6 <_printf_i+0xba>
 80052fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005302:	2e00      	cmp	r6, #0
 8005304:	da03      	bge.n	800530e <_printf_i+0xd2>
 8005306:	232d      	movs	r3, #45	; 0x2d
 8005308:	4276      	negs	r6, r6
 800530a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800530e:	485a      	ldr	r0, [pc, #360]	; (8005478 <_printf_i+0x23c>)
 8005310:	230a      	movs	r3, #10
 8005312:	e012      	b.n	800533a <_printf_i+0xfe>
 8005314:	682b      	ldr	r3, [r5, #0]
 8005316:	6820      	ldr	r0, [r4, #0]
 8005318:	1d19      	adds	r1, r3, #4
 800531a:	6029      	str	r1, [r5, #0]
 800531c:	0605      	lsls	r5, r0, #24
 800531e:	d501      	bpl.n	8005324 <_printf_i+0xe8>
 8005320:	681e      	ldr	r6, [r3, #0]
 8005322:	e002      	b.n	800532a <_printf_i+0xee>
 8005324:	0641      	lsls	r1, r0, #25
 8005326:	d5fb      	bpl.n	8005320 <_printf_i+0xe4>
 8005328:	881e      	ldrh	r6, [r3, #0]
 800532a:	4853      	ldr	r0, [pc, #332]	; (8005478 <_printf_i+0x23c>)
 800532c:	2f6f      	cmp	r7, #111	; 0x6f
 800532e:	bf0c      	ite	eq
 8005330:	2308      	moveq	r3, #8
 8005332:	230a      	movne	r3, #10
 8005334:	2100      	movs	r1, #0
 8005336:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800533a:	6865      	ldr	r5, [r4, #4]
 800533c:	60a5      	str	r5, [r4, #8]
 800533e:	2d00      	cmp	r5, #0
 8005340:	bfa2      	ittt	ge
 8005342:	6821      	ldrge	r1, [r4, #0]
 8005344:	f021 0104 	bicge.w	r1, r1, #4
 8005348:	6021      	strge	r1, [r4, #0]
 800534a:	b90e      	cbnz	r6, 8005350 <_printf_i+0x114>
 800534c:	2d00      	cmp	r5, #0
 800534e:	d04b      	beq.n	80053e8 <_printf_i+0x1ac>
 8005350:	4615      	mov	r5, r2
 8005352:	fbb6 f1f3 	udiv	r1, r6, r3
 8005356:	fb03 6711 	mls	r7, r3, r1, r6
 800535a:	5dc7      	ldrb	r7, [r0, r7]
 800535c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005360:	4637      	mov	r7, r6
 8005362:	42bb      	cmp	r3, r7
 8005364:	460e      	mov	r6, r1
 8005366:	d9f4      	bls.n	8005352 <_printf_i+0x116>
 8005368:	2b08      	cmp	r3, #8
 800536a:	d10b      	bne.n	8005384 <_printf_i+0x148>
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	07de      	lsls	r6, r3, #31
 8005370:	d508      	bpl.n	8005384 <_printf_i+0x148>
 8005372:	6923      	ldr	r3, [r4, #16]
 8005374:	6861      	ldr	r1, [r4, #4]
 8005376:	4299      	cmp	r1, r3
 8005378:	bfde      	ittt	le
 800537a:	2330      	movle	r3, #48	; 0x30
 800537c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005380:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005384:	1b52      	subs	r2, r2, r5
 8005386:	6122      	str	r2, [r4, #16]
 8005388:	f8cd a000 	str.w	sl, [sp]
 800538c:	464b      	mov	r3, r9
 800538e:	aa03      	add	r2, sp, #12
 8005390:	4621      	mov	r1, r4
 8005392:	4640      	mov	r0, r8
 8005394:	f7ff fee4 	bl	8005160 <_printf_common>
 8005398:	3001      	adds	r0, #1
 800539a:	d14a      	bne.n	8005432 <_printf_i+0x1f6>
 800539c:	f04f 30ff 	mov.w	r0, #4294967295
 80053a0:	b004      	add	sp, #16
 80053a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	f043 0320 	orr.w	r3, r3, #32
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	4833      	ldr	r0, [pc, #204]	; (800547c <_printf_i+0x240>)
 80053b0:	2778      	movs	r7, #120	; 0x78
 80053b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	6829      	ldr	r1, [r5, #0]
 80053ba:	061f      	lsls	r7, r3, #24
 80053bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80053c0:	d402      	bmi.n	80053c8 <_printf_i+0x18c>
 80053c2:	065f      	lsls	r7, r3, #25
 80053c4:	bf48      	it	mi
 80053c6:	b2b6      	uxthmi	r6, r6
 80053c8:	07df      	lsls	r7, r3, #31
 80053ca:	bf48      	it	mi
 80053cc:	f043 0320 	orrmi.w	r3, r3, #32
 80053d0:	6029      	str	r1, [r5, #0]
 80053d2:	bf48      	it	mi
 80053d4:	6023      	strmi	r3, [r4, #0]
 80053d6:	b91e      	cbnz	r6, 80053e0 <_printf_i+0x1a4>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	f023 0320 	bic.w	r3, r3, #32
 80053de:	6023      	str	r3, [r4, #0]
 80053e0:	2310      	movs	r3, #16
 80053e2:	e7a7      	b.n	8005334 <_printf_i+0xf8>
 80053e4:	4824      	ldr	r0, [pc, #144]	; (8005478 <_printf_i+0x23c>)
 80053e6:	e7e4      	b.n	80053b2 <_printf_i+0x176>
 80053e8:	4615      	mov	r5, r2
 80053ea:	e7bd      	b.n	8005368 <_printf_i+0x12c>
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	6826      	ldr	r6, [r4, #0]
 80053f0:	6961      	ldr	r1, [r4, #20]
 80053f2:	1d18      	adds	r0, r3, #4
 80053f4:	6028      	str	r0, [r5, #0]
 80053f6:	0635      	lsls	r5, r6, #24
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	d501      	bpl.n	8005400 <_printf_i+0x1c4>
 80053fc:	6019      	str	r1, [r3, #0]
 80053fe:	e002      	b.n	8005406 <_printf_i+0x1ca>
 8005400:	0670      	lsls	r0, r6, #25
 8005402:	d5fb      	bpl.n	80053fc <_printf_i+0x1c0>
 8005404:	8019      	strh	r1, [r3, #0]
 8005406:	2300      	movs	r3, #0
 8005408:	6123      	str	r3, [r4, #16]
 800540a:	4615      	mov	r5, r2
 800540c:	e7bc      	b.n	8005388 <_printf_i+0x14c>
 800540e:	682b      	ldr	r3, [r5, #0]
 8005410:	1d1a      	adds	r2, r3, #4
 8005412:	602a      	str	r2, [r5, #0]
 8005414:	681d      	ldr	r5, [r3, #0]
 8005416:	6862      	ldr	r2, [r4, #4]
 8005418:	2100      	movs	r1, #0
 800541a:	4628      	mov	r0, r5
 800541c:	f7fa fed8 	bl	80001d0 <memchr>
 8005420:	b108      	cbz	r0, 8005426 <_printf_i+0x1ea>
 8005422:	1b40      	subs	r0, r0, r5
 8005424:	6060      	str	r0, [r4, #4]
 8005426:	6863      	ldr	r3, [r4, #4]
 8005428:	6123      	str	r3, [r4, #16]
 800542a:	2300      	movs	r3, #0
 800542c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005430:	e7aa      	b.n	8005388 <_printf_i+0x14c>
 8005432:	6923      	ldr	r3, [r4, #16]
 8005434:	462a      	mov	r2, r5
 8005436:	4649      	mov	r1, r9
 8005438:	4640      	mov	r0, r8
 800543a:	47d0      	blx	sl
 800543c:	3001      	adds	r0, #1
 800543e:	d0ad      	beq.n	800539c <_printf_i+0x160>
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	079b      	lsls	r3, r3, #30
 8005444:	d413      	bmi.n	800546e <_printf_i+0x232>
 8005446:	68e0      	ldr	r0, [r4, #12]
 8005448:	9b03      	ldr	r3, [sp, #12]
 800544a:	4298      	cmp	r0, r3
 800544c:	bfb8      	it	lt
 800544e:	4618      	movlt	r0, r3
 8005450:	e7a6      	b.n	80053a0 <_printf_i+0x164>
 8005452:	2301      	movs	r3, #1
 8005454:	4632      	mov	r2, r6
 8005456:	4649      	mov	r1, r9
 8005458:	4640      	mov	r0, r8
 800545a:	47d0      	blx	sl
 800545c:	3001      	adds	r0, #1
 800545e:	d09d      	beq.n	800539c <_printf_i+0x160>
 8005460:	3501      	adds	r5, #1
 8005462:	68e3      	ldr	r3, [r4, #12]
 8005464:	9903      	ldr	r1, [sp, #12]
 8005466:	1a5b      	subs	r3, r3, r1
 8005468:	42ab      	cmp	r3, r5
 800546a:	dcf2      	bgt.n	8005452 <_printf_i+0x216>
 800546c:	e7eb      	b.n	8005446 <_printf_i+0x20a>
 800546e:	2500      	movs	r5, #0
 8005470:	f104 0619 	add.w	r6, r4, #25
 8005474:	e7f5      	b.n	8005462 <_printf_i+0x226>
 8005476:	bf00      	nop
 8005478:	080058e5 	.word	0x080058e5
 800547c:	080058f6 	.word	0x080058f6

08005480 <__sflush_r>:
 8005480:	898a      	ldrh	r2, [r1, #12]
 8005482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005486:	4605      	mov	r5, r0
 8005488:	0710      	lsls	r0, r2, #28
 800548a:	460c      	mov	r4, r1
 800548c:	d458      	bmi.n	8005540 <__sflush_r+0xc0>
 800548e:	684b      	ldr	r3, [r1, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	dc05      	bgt.n	80054a0 <__sflush_r+0x20>
 8005494:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	dc02      	bgt.n	80054a0 <__sflush_r+0x20>
 800549a:	2000      	movs	r0, #0
 800549c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054a2:	2e00      	cmp	r6, #0
 80054a4:	d0f9      	beq.n	800549a <__sflush_r+0x1a>
 80054a6:	2300      	movs	r3, #0
 80054a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054ac:	682f      	ldr	r7, [r5, #0]
 80054ae:	6a21      	ldr	r1, [r4, #32]
 80054b0:	602b      	str	r3, [r5, #0]
 80054b2:	d032      	beq.n	800551a <__sflush_r+0x9a>
 80054b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054b6:	89a3      	ldrh	r3, [r4, #12]
 80054b8:	075a      	lsls	r2, r3, #29
 80054ba:	d505      	bpl.n	80054c8 <__sflush_r+0x48>
 80054bc:	6863      	ldr	r3, [r4, #4]
 80054be:	1ac0      	subs	r0, r0, r3
 80054c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054c2:	b10b      	cbz	r3, 80054c8 <__sflush_r+0x48>
 80054c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054c6:	1ac0      	subs	r0, r0, r3
 80054c8:	2300      	movs	r3, #0
 80054ca:	4602      	mov	r2, r0
 80054cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054ce:	6a21      	ldr	r1, [r4, #32]
 80054d0:	4628      	mov	r0, r5
 80054d2:	47b0      	blx	r6
 80054d4:	1c43      	adds	r3, r0, #1
 80054d6:	89a3      	ldrh	r3, [r4, #12]
 80054d8:	d106      	bne.n	80054e8 <__sflush_r+0x68>
 80054da:	6829      	ldr	r1, [r5, #0]
 80054dc:	291d      	cmp	r1, #29
 80054de:	d82b      	bhi.n	8005538 <__sflush_r+0xb8>
 80054e0:	4a29      	ldr	r2, [pc, #164]	; (8005588 <__sflush_r+0x108>)
 80054e2:	410a      	asrs	r2, r1
 80054e4:	07d6      	lsls	r6, r2, #31
 80054e6:	d427      	bmi.n	8005538 <__sflush_r+0xb8>
 80054e8:	2200      	movs	r2, #0
 80054ea:	6062      	str	r2, [r4, #4]
 80054ec:	04d9      	lsls	r1, r3, #19
 80054ee:	6922      	ldr	r2, [r4, #16]
 80054f0:	6022      	str	r2, [r4, #0]
 80054f2:	d504      	bpl.n	80054fe <__sflush_r+0x7e>
 80054f4:	1c42      	adds	r2, r0, #1
 80054f6:	d101      	bne.n	80054fc <__sflush_r+0x7c>
 80054f8:	682b      	ldr	r3, [r5, #0]
 80054fa:	b903      	cbnz	r3, 80054fe <__sflush_r+0x7e>
 80054fc:	6560      	str	r0, [r4, #84]	; 0x54
 80054fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005500:	602f      	str	r7, [r5, #0]
 8005502:	2900      	cmp	r1, #0
 8005504:	d0c9      	beq.n	800549a <__sflush_r+0x1a>
 8005506:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800550a:	4299      	cmp	r1, r3
 800550c:	d002      	beq.n	8005514 <__sflush_r+0x94>
 800550e:	4628      	mov	r0, r5
 8005510:	f7ff fbea 	bl	8004ce8 <_free_r>
 8005514:	2000      	movs	r0, #0
 8005516:	6360      	str	r0, [r4, #52]	; 0x34
 8005518:	e7c0      	b.n	800549c <__sflush_r+0x1c>
 800551a:	2301      	movs	r3, #1
 800551c:	4628      	mov	r0, r5
 800551e:	47b0      	blx	r6
 8005520:	1c41      	adds	r1, r0, #1
 8005522:	d1c8      	bne.n	80054b6 <__sflush_r+0x36>
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0c5      	beq.n	80054b6 <__sflush_r+0x36>
 800552a:	2b1d      	cmp	r3, #29
 800552c:	d001      	beq.n	8005532 <__sflush_r+0xb2>
 800552e:	2b16      	cmp	r3, #22
 8005530:	d101      	bne.n	8005536 <__sflush_r+0xb6>
 8005532:	602f      	str	r7, [r5, #0]
 8005534:	e7b1      	b.n	800549a <__sflush_r+0x1a>
 8005536:	89a3      	ldrh	r3, [r4, #12]
 8005538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800553c:	81a3      	strh	r3, [r4, #12]
 800553e:	e7ad      	b.n	800549c <__sflush_r+0x1c>
 8005540:	690f      	ldr	r7, [r1, #16]
 8005542:	2f00      	cmp	r7, #0
 8005544:	d0a9      	beq.n	800549a <__sflush_r+0x1a>
 8005546:	0793      	lsls	r3, r2, #30
 8005548:	680e      	ldr	r6, [r1, #0]
 800554a:	bf08      	it	eq
 800554c:	694b      	ldreq	r3, [r1, #20]
 800554e:	600f      	str	r7, [r1, #0]
 8005550:	bf18      	it	ne
 8005552:	2300      	movne	r3, #0
 8005554:	eba6 0807 	sub.w	r8, r6, r7
 8005558:	608b      	str	r3, [r1, #8]
 800555a:	f1b8 0f00 	cmp.w	r8, #0
 800555e:	dd9c      	ble.n	800549a <__sflush_r+0x1a>
 8005560:	6a21      	ldr	r1, [r4, #32]
 8005562:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005564:	4643      	mov	r3, r8
 8005566:	463a      	mov	r2, r7
 8005568:	4628      	mov	r0, r5
 800556a:	47b0      	blx	r6
 800556c:	2800      	cmp	r0, #0
 800556e:	dc06      	bgt.n	800557e <__sflush_r+0xfe>
 8005570:	89a3      	ldrh	r3, [r4, #12]
 8005572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005576:	81a3      	strh	r3, [r4, #12]
 8005578:	f04f 30ff 	mov.w	r0, #4294967295
 800557c:	e78e      	b.n	800549c <__sflush_r+0x1c>
 800557e:	4407      	add	r7, r0
 8005580:	eba8 0800 	sub.w	r8, r8, r0
 8005584:	e7e9      	b.n	800555a <__sflush_r+0xda>
 8005586:	bf00      	nop
 8005588:	dfbffffe 	.word	0xdfbffffe

0800558c <_fflush_r>:
 800558c:	b538      	push	{r3, r4, r5, lr}
 800558e:	690b      	ldr	r3, [r1, #16]
 8005590:	4605      	mov	r5, r0
 8005592:	460c      	mov	r4, r1
 8005594:	b913      	cbnz	r3, 800559c <_fflush_r+0x10>
 8005596:	2500      	movs	r5, #0
 8005598:	4628      	mov	r0, r5
 800559a:	bd38      	pop	{r3, r4, r5, pc}
 800559c:	b118      	cbz	r0, 80055a6 <_fflush_r+0x1a>
 800559e:	6a03      	ldr	r3, [r0, #32]
 80055a0:	b90b      	cbnz	r3, 80055a6 <_fflush_r+0x1a>
 80055a2:	f7ff fa99 	bl	8004ad8 <__sinit>
 80055a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0f3      	beq.n	8005596 <_fflush_r+0xa>
 80055ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055b0:	07d0      	lsls	r0, r2, #31
 80055b2:	d404      	bmi.n	80055be <_fflush_r+0x32>
 80055b4:	0599      	lsls	r1, r3, #22
 80055b6:	d402      	bmi.n	80055be <_fflush_r+0x32>
 80055b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ba:	f7ff fb92 	bl	8004ce2 <__retarget_lock_acquire_recursive>
 80055be:	4628      	mov	r0, r5
 80055c0:	4621      	mov	r1, r4
 80055c2:	f7ff ff5d 	bl	8005480 <__sflush_r>
 80055c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055c8:	07da      	lsls	r2, r3, #31
 80055ca:	4605      	mov	r5, r0
 80055cc:	d4e4      	bmi.n	8005598 <_fflush_r+0xc>
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	059b      	lsls	r3, r3, #22
 80055d2:	d4e1      	bmi.n	8005598 <_fflush_r+0xc>
 80055d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055d6:	f7ff fb85 	bl	8004ce4 <__retarget_lock_release_recursive>
 80055da:	e7dd      	b.n	8005598 <_fflush_r+0xc>

080055dc <__swbuf_r>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	460e      	mov	r6, r1
 80055e0:	4614      	mov	r4, r2
 80055e2:	4605      	mov	r5, r0
 80055e4:	b118      	cbz	r0, 80055ee <__swbuf_r+0x12>
 80055e6:	6a03      	ldr	r3, [r0, #32]
 80055e8:	b90b      	cbnz	r3, 80055ee <__swbuf_r+0x12>
 80055ea:	f7ff fa75 	bl	8004ad8 <__sinit>
 80055ee:	69a3      	ldr	r3, [r4, #24]
 80055f0:	60a3      	str	r3, [r4, #8]
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	071a      	lsls	r2, r3, #28
 80055f6:	d525      	bpl.n	8005644 <__swbuf_r+0x68>
 80055f8:	6923      	ldr	r3, [r4, #16]
 80055fa:	b31b      	cbz	r3, 8005644 <__swbuf_r+0x68>
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	6922      	ldr	r2, [r4, #16]
 8005600:	1a98      	subs	r0, r3, r2
 8005602:	6963      	ldr	r3, [r4, #20]
 8005604:	b2f6      	uxtb	r6, r6
 8005606:	4283      	cmp	r3, r0
 8005608:	4637      	mov	r7, r6
 800560a:	dc04      	bgt.n	8005616 <__swbuf_r+0x3a>
 800560c:	4621      	mov	r1, r4
 800560e:	4628      	mov	r0, r5
 8005610:	f7ff ffbc 	bl	800558c <_fflush_r>
 8005614:	b9e0      	cbnz	r0, 8005650 <__swbuf_r+0x74>
 8005616:	68a3      	ldr	r3, [r4, #8]
 8005618:	3b01      	subs	r3, #1
 800561a:	60a3      	str	r3, [r4, #8]
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	6022      	str	r2, [r4, #0]
 8005622:	701e      	strb	r6, [r3, #0]
 8005624:	6962      	ldr	r2, [r4, #20]
 8005626:	1c43      	adds	r3, r0, #1
 8005628:	429a      	cmp	r2, r3
 800562a:	d004      	beq.n	8005636 <__swbuf_r+0x5a>
 800562c:	89a3      	ldrh	r3, [r4, #12]
 800562e:	07db      	lsls	r3, r3, #31
 8005630:	d506      	bpl.n	8005640 <__swbuf_r+0x64>
 8005632:	2e0a      	cmp	r6, #10
 8005634:	d104      	bne.n	8005640 <__swbuf_r+0x64>
 8005636:	4621      	mov	r1, r4
 8005638:	4628      	mov	r0, r5
 800563a:	f7ff ffa7 	bl	800558c <_fflush_r>
 800563e:	b938      	cbnz	r0, 8005650 <__swbuf_r+0x74>
 8005640:	4638      	mov	r0, r7
 8005642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005644:	4621      	mov	r1, r4
 8005646:	4628      	mov	r0, r5
 8005648:	f000 f806 	bl	8005658 <__swsetup_r>
 800564c:	2800      	cmp	r0, #0
 800564e:	d0d5      	beq.n	80055fc <__swbuf_r+0x20>
 8005650:	f04f 37ff 	mov.w	r7, #4294967295
 8005654:	e7f4      	b.n	8005640 <__swbuf_r+0x64>
	...

08005658 <__swsetup_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4b2a      	ldr	r3, [pc, #168]	; (8005704 <__swsetup_r+0xac>)
 800565c:	4605      	mov	r5, r0
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	460c      	mov	r4, r1
 8005662:	b118      	cbz	r0, 800566c <__swsetup_r+0x14>
 8005664:	6a03      	ldr	r3, [r0, #32]
 8005666:	b90b      	cbnz	r3, 800566c <__swsetup_r+0x14>
 8005668:	f7ff fa36 	bl	8004ad8 <__sinit>
 800566c:	89a3      	ldrh	r3, [r4, #12]
 800566e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005672:	0718      	lsls	r0, r3, #28
 8005674:	d422      	bmi.n	80056bc <__swsetup_r+0x64>
 8005676:	06d9      	lsls	r1, r3, #27
 8005678:	d407      	bmi.n	800568a <__swsetup_r+0x32>
 800567a:	2309      	movs	r3, #9
 800567c:	602b      	str	r3, [r5, #0]
 800567e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005682:	81a3      	strh	r3, [r4, #12]
 8005684:	f04f 30ff 	mov.w	r0, #4294967295
 8005688:	e034      	b.n	80056f4 <__swsetup_r+0x9c>
 800568a:	0758      	lsls	r0, r3, #29
 800568c:	d512      	bpl.n	80056b4 <__swsetup_r+0x5c>
 800568e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005690:	b141      	cbz	r1, 80056a4 <__swsetup_r+0x4c>
 8005692:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005696:	4299      	cmp	r1, r3
 8005698:	d002      	beq.n	80056a0 <__swsetup_r+0x48>
 800569a:	4628      	mov	r0, r5
 800569c:	f7ff fb24 	bl	8004ce8 <_free_r>
 80056a0:	2300      	movs	r3, #0
 80056a2:	6363      	str	r3, [r4, #52]	; 0x34
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056aa:	81a3      	strh	r3, [r4, #12]
 80056ac:	2300      	movs	r3, #0
 80056ae:	6063      	str	r3, [r4, #4]
 80056b0:	6923      	ldr	r3, [r4, #16]
 80056b2:	6023      	str	r3, [r4, #0]
 80056b4:	89a3      	ldrh	r3, [r4, #12]
 80056b6:	f043 0308 	orr.w	r3, r3, #8
 80056ba:	81a3      	strh	r3, [r4, #12]
 80056bc:	6923      	ldr	r3, [r4, #16]
 80056be:	b94b      	cbnz	r3, 80056d4 <__swsetup_r+0x7c>
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ca:	d003      	beq.n	80056d4 <__swsetup_r+0x7c>
 80056cc:	4621      	mov	r1, r4
 80056ce:	4628      	mov	r0, r5
 80056d0:	f000 f850 	bl	8005774 <__smakebuf_r>
 80056d4:	89a0      	ldrh	r0, [r4, #12]
 80056d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056da:	f010 0301 	ands.w	r3, r0, #1
 80056de:	d00a      	beq.n	80056f6 <__swsetup_r+0x9e>
 80056e0:	2300      	movs	r3, #0
 80056e2:	60a3      	str	r3, [r4, #8]
 80056e4:	6963      	ldr	r3, [r4, #20]
 80056e6:	425b      	negs	r3, r3
 80056e8:	61a3      	str	r3, [r4, #24]
 80056ea:	6923      	ldr	r3, [r4, #16]
 80056ec:	b943      	cbnz	r3, 8005700 <__swsetup_r+0xa8>
 80056ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056f2:	d1c4      	bne.n	800567e <__swsetup_r+0x26>
 80056f4:	bd38      	pop	{r3, r4, r5, pc}
 80056f6:	0781      	lsls	r1, r0, #30
 80056f8:	bf58      	it	pl
 80056fa:	6963      	ldrpl	r3, [r4, #20]
 80056fc:	60a3      	str	r3, [r4, #8]
 80056fe:	e7f4      	b.n	80056ea <__swsetup_r+0x92>
 8005700:	2000      	movs	r0, #0
 8005702:	e7f7      	b.n	80056f4 <__swsetup_r+0x9c>
 8005704:	20000064 	.word	0x20000064

08005708 <_sbrk_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	4d06      	ldr	r5, [pc, #24]	; (8005724 <_sbrk_r+0x1c>)
 800570c:	2300      	movs	r3, #0
 800570e:	4604      	mov	r4, r0
 8005710:	4608      	mov	r0, r1
 8005712:	602b      	str	r3, [r5, #0]
 8005714:	f7fb faec 	bl	8000cf0 <_sbrk>
 8005718:	1c43      	adds	r3, r0, #1
 800571a:	d102      	bne.n	8005722 <_sbrk_r+0x1a>
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	b103      	cbz	r3, 8005722 <_sbrk_r+0x1a>
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	bd38      	pop	{r3, r4, r5, pc}
 8005724:	200002f8 	.word	0x200002f8

08005728 <__swhatbuf_r>:
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	460c      	mov	r4, r1
 800572c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005730:	2900      	cmp	r1, #0
 8005732:	b096      	sub	sp, #88	; 0x58
 8005734:	4615      	mov	r5, r2
 8005736:	461e      	mov	r6, r3
 8005738:	da0d      	bge.n	8005756 <__swhatbuf_r+0x2e>
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005740:	f04f 0100 	mov.w	r1, #0
 8005744:	bf0c      	ite	eq
 8005746:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800574a:	2340      	movne	r3, #64	; 0x40
 800574c:	2000      	movs	r0, #0
 800574e:	6031      	str	r1, [r6, #0]
 8005750:	602b      	str	r3, [r5, #0]
 8005752:	b016      	add	sp, #88	; 0x58
 8005754:	bd70      	pop	{r4, r5, r6, pc}
 8005756:	466a      	mov	r2, sp
 8005758:	f000 f848 	bl	80057ec <_fstat_r>
 800575c:	2800      	cmp	r0, #0
 800575e:	dbec      	blt.n	800573a <__swhatbuf_r+0x12>
 8005760:	9901      	ldr	r1, [sp, #4]
 8005762:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005766:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800576a:	4259      	negs	r1, r3
 800576c:	4159      	adcs	r1, r3
 800576e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005772:	e7eb      	b.n	800574c <__swhatbuf_r+0x24>

08005774 <__smakebuf_r>:
 8005774:	898b      	ldrh	r3, [r1, #12]
 8005776:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005778:	079d      	lsls	r5, r3, #30
 800577a:	4606      	mov	r6, r0
 800577c:	460c      	mov	r4, r1
 800577e:	d507      	bpl.n	8005790 <__smakebuf_r+0x1c>
 8005780:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	6123      	str	r3, [r4, #16]
 8005788:	2301      	movs	r3, #1
 800578a:	6163      	str	r3, [r4, #20]
 800578c:	b002      	add	sp, #8
 800578e:	bd70      	pop	{r4, r5, r6, pc}
 8005790:	ab01      	add	r3, sp, #4
 8005792:	466a      	mov	r2, sp
 8005794:	f7ff ffc8 	bl	8005728 <__swhatbuf_r>
 8005798:	9900      	ldr	r1, [sp, #0]
 800579a:	4605      	mov	r5, r0
 800579c:	4630      	mov	r0, r6
 800579e:	f7ff fb0f 	bl	8004dc0 <_malloc_r>
 80057a2:	b948      	cbnz	r0, 80057b8 <__smakebuf_r+0x44>
 80057a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057a8:	059a      	lsls	r2, r3, #22
 80057aa:	d4ef      	bmi.n	800578c <__smakebuf_r+0x18>
 80057ac:	f023 0303 	bic.w	r3, r3, #3
 80057b0:	f043 0302 	orr.w	r3, r3, #2
 80057b4:	81a3      	strh	r3, [r4, #12]
 80057b6:	e7e3      	b.n	8005780 <__smakebuf_r+0xc>
 80057b8:	89a3      	ldrh	r3, [r4, #12]
 80057ba:	6020      	str	r0, [r4, #0]
 80057bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c0:	81a3      	strh	r3, [r4, #12]
 80057c2:	9b00      	ldr	r3, [sp, #0]
 80057c4:	6163      	str	r3, [r4, #20]
 80057c6:	9b01      	ldr	r3, [sp, #4]
 80057c8:	6120      	str	r0, [r4, #16]
 80057ca:	b15b      	cbz	r3, 80057e4 <__smakebuf_r+0x70>
 80057cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057d0:	4630      	mov	r0, r6
 80057d2:	f000 f81d 	bl	8005810 <_isatty_r>
 80057d6:	b128      	cbz	r0, 80057e4 <__smakebuf_r+0x70>
 80057d8:	89a3      	ldrh	r3, [r4, #12]
 80057da:	f023 0303 	bic.w	r3, r3, #3
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	81a3      	strh	r3, [r4, #12]
 80057e4:	89a3      	ldrh	r3, [r4, #12]
 80057e6:	431d      	orrs	r5, r3
 80057e8:	81a5      	strh	r5, [r4, #12]
 80057ea:	e7cf      	b.n	800578c <__smakebuf_r+0x18>

080057ec <_fstat_r>:
 80057ec:	b538      	push	{r3, r4, r5, lr}
 80057ee:	4d07      	ldr	r5, [pc, #28]	; (800580c <_fstat_r+0x20>)
 80057f0:	2300      	movs	r3, #0
 80057f2:	4604      	mov	r4, r0
 80057f4:	4608      	mov	r0, r1
 80057f6:	4611      	mov	r1, r2
 80057f8:	602b      	str	r3, [r5, #0]
 80057fa:	f7fb fa50 	bl	8000c9e <_fstat>
 80057fe:	1c43      	adds	r3, r0, #1
 8005800:	d102      	bne.n	8005808 <_fstat_r+0x1c>
 8005802:	682b      	ldr	r3, [r5, #0]
 8005804:	b103      	cbz	r3, 8005808 <_fstat_r+0x1c>
 8005806:	6023      	str	r3, [r4, #0]
 8005808:	bd38      	pop	{r3, r4, r5, pc}
 800580a:	bf00      	nop
 800580c:	200002f8 	.word	0x200002f8

08005810 <_isatty_r>:
 8005810:	b538      	push	{r3, r4, r5, lr}
 8005812:	4d06      	ldr	r5, [pc, #24]	; (800582c <_isatty_r+0x1c>)
 8005814:	2300      	movs	r3, #0
 8005816:	4604      	mov	r4, r0
 8005818:	4608      	mov	r0, r1
 800581a:	602b      	str	r3, [r5, #0]
 800581c:	f7fb fa4f 	bl	8000cbe <_isatty>
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	d102      	bne.n	800582a <_isatty_r+0x1a>
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	b103      	cbz	r3, 800582a <_isatty_r+0x1a>
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	bd38      	pop	{r3, r4, r5, pc}
 800582c:	200002f8 	.word	0x200002f8

08005830 <_init>:
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	bf00      	nop
 8005834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005836:	bc08      	pop	{r3}
 8005838:	469e      	mov	lr, r3
 800583a:	4770      	bx	lr

0800583c <_fini>:
 800583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583e:	bf00      	nop
 8005840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005842:	bc08      	pop	{r3}
 8005844:	469e      	mov	lr, r3
 8005846:	4770      	bx	lr
