
ECEN-361-STM32-Lab-08-DTMF-Solution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08006c10  08006c10  00016c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cdc  08006cdc  0002028c  2**0
                  CONTENTS
  4 .ARM          00000008  08006cdc  08006cdc  00016cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ce4  08006ce4  0002028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ce4  08006ce4  00016ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ce8  08006ce8  00016ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  08006cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  2000028c  08006f78  0002028c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000664  08006f78  00020664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001578b  00000000  00000000  000202ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ab3  00000000  00000000  00035a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  00038540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f1d  00000000  00000000  000398a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029ae5  00000000  00000000  0003a7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b37  00000000  00000000  000642a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107938  00000000  00000000  00079dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a68  00000000  00000000  00181714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0018717c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000028c 	.word	0x2000028c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006bf8 	.word	0x08006bf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000290 	.word	0x20000290
 80001cc:	08006bf8 	.word	0x08006bf8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <Goertzel>:


/*------------------------------------------------------------------------------
  Calculate Power of Signal
 *------------------------------------------------------------------------------*/
static unsigned int Goertzel (int cos_fact)  {
 800056c:	b480      	push	{r7}
 800056e:	b08d      	sub	sp, #52	; 0x34
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  long  v0, v1, v2; 
  int  pwr;
  int p1, p2, p01;
  unsigned int  i;

  v1  = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	62bb      	str	r3, [r7, #40]	; 0x28
  v2  = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	627b      	str	r3, [r7, #36]	; 0x24
// 1. Compute for each sample: 
// vk(n) = (2*cos(2*PI*f0/fs)) * vk(n-1) - vk(n-2) + x(n)
  x = DTMFin;
 800057c:	4b20      	ldr	r3, [pc, #128]	; (8000600 <Goertzel+0x94>)
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (i = 0; i < N; i++) {
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]
 8000584:	e015      	b.n	80005b2 <Goertzel+0x46>
    v0 = ((cos_fact*v1)>>14)-v2+*x;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800058a:	fb02 f303 	mul.w	r3, r2, r3
 800058e:	139a      	asrs	r2, r3, #14
 8000590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000592:	1ad3      	subs	r3, r2, r3
 8000594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000596:	f9b2 2000 	ldrsh.w	r2, [r2]
 800059a:	4413      	add	r3, r2
 800059c:	60fb      	str	r3, [r7, #12]
    x++;
 800059e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a0:	3302      	adds	r3, #2
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    v2 = v1;
 80005a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005a6:	627b      	str	r3, [r7, #36]	; 0x24
    v1 = v0;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = 0; i < N; i++) {
 80005ac:	6a3b      	ldr	r3, [r7, #32]
 80005ae:	3301      	adds	r3, #1
 80005b0:	623b      	str	r3, [r7, #32]
 80005b2:	6a3b      	ldr	r3, [r7, #32]
 80005b4:	2b71      	cmp	r3, #113	; 0x71
 80005b6:	d9e6      	bls.n	8000586 <Goertzel+0x1a>
  }
// 2. Compute once every N samples:
// |X(k)|2 = vk(N)2 + vk(N-1)2 - (2*cos(2*PI*f0/fs)) * vk(N) * vk(N-1))
  p1  = v1*v1;
 80005b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ba:	fb03 f303 	mul.w	r3, r3, r3
 80005be:	61fb      	str	r3, [r7, #28]
  p2  = v2*v2;
 80005c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c2:	fb03 f303 	mul.w	r3, r3, r3
 80005c6:	61bb      	str	r3, [r7, #24]
  p01 = v1*v2;
 80005c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005cc:	fb02 f303 	mul.w	r3, r2, r3
 80005d0:	617b      	str	r3, [r7, #20]
  pwr = p1 - (cos_fact*(p01>>14)) + p2;
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	139b      	asrs	r3, r3, #14
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	fb02 f303 	mul.w	r3, r2, r3
 80005dc:	69fa      	ldr	r2, [r7, #28]
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	69ba      	ldr	r2, [r7, #24]
 80005e2:	4413      	add	r3, r2
 80005e4:	613b      	str	r3, [r7, #16]
  if (pwr < 0)  return (0);
 80005e6:	693b      	ldr	r3, [r7, #16]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	da01      	bge.n	80005f0 <Goertzel+0x84>
 80005ec:	2300      	movs	r3, #0
 80005ee:	e001      	b.n	80005f4 <Goertzel+0x88>
  return ((pwr>>16));          //  make sure that -1 is not returned
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	141b      	asrs	r3, r3, #16
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3734      	adds	r7, #52	; 0x34
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	200002a8 	.word	0x200002a8

08000604 <GainControl>:


/*------------------------------------------------------------------------------
  Check Input Signal and Copy it to the DTMF Input Buffer
 *------------------------------------------------------------------------------*/
static void GainControl (DTMF *t)  {
 8000604:	b480      	push	{r7}
 8000606:	b089      	sub	sp, #36	; 0x24
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  unsigned int  avg;
  unsigned int  min, max;
  unsigned int  idx;
  short *d;

  min = 0xFFFF;
 800060c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000610:	617b      	str	r3, [r7, #20]
  max = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]

  avg  = 0x10000L / N;         // normalize factor for average calculation  
 8000616:	f240 233e 	movw	r3, #574	; 0x23e
 800061a:	61bb      	str	r3, [r7, #24]
  d = &DTMFin[N];
 800061c:	4b42      	ldr	r3, [pc, #264]	; (8000728 <GainControl+0x124>)
 800061e:	60bb      	str	r3, [r7, #8]
  idx = t->AIindex;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	60fb      	str	r3, [r7, #12]
  do  {
    v =  t->AInput[idx & (DTMFsz-1)];
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	3308      	adds	r3, #8
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	889b      	ldrh	r3, [r3, #4]
 8000634:	61fb      	str	r3, [r7, #28]
    if (v < min)  min = v;
 8000636:	69fa      	ldr	r2, [r7, #28]
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	429a      	cmp	r2, r3
 800063c:	d201      	bcs.n	8000642 <GainControl+0x3e>
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	617b      	str	r3, [r7, #20]
    if (v > max)  max = v;
 8000642:	69fa      	ldr	r2, [r7, #28]
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	429a      	cmp	r2, r3
 8000648:	d901      	bls.n	800064e <GainControl+0x4a>
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	613b      	str	r3, [r7, #16]
    avg += (0x10000L / N) * v;
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	f240 223e 	movw	r2, #574	; 0x23e
 8000654:	fb02 f303 	mul.w	r3, r2, r3
 8000658:	69ba      	ldr	r2, [r7, #24]
 800065a:	4413      	add	r3, r2
 800065c:	61bb      	str	r3, [r7, #24]
    idx--;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	3b01      	subs	r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
    *--d = v;
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	3b02      	subs	r3, #2
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	b21a      	sxth	r2, r3
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	801a      	strh	r2, [r3, #0]
  }  while (d != &DTMFin[0]);
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	4a2d      	ldr	r2, [pc, #180]	; (800072c <GainControl+0x128>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d1d5      	bne.n	8000626 <GainControl+0x22>

  avg >>= 16;                  // avarage value
 800067a:	69bb      	ldr	r3, [r7, #24]
 800067c:	0c1b      	lsrs	r3, r3, #16
 800067e:	61bb      	str	r3, [r7, #24]
  min = max - min;
 8000680:	693a      	ldr	r2, [r7, #16]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	617b      	str	r3, [r7, #20]
// calculate prior value in 'v'
  for (v = 0; v < 15 && (min & 0x8000)==0; v++)  {
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
 800068c:	e005      	b.n	800069a <GainControl+0x96>
    min <<= 1;
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	617b      	str	r3, [r7, #20]
  for (v = 0; v < 15 && (min & 0x8000)==0; v++)  {
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	3301      	adds	r3, #1
 8000698:	61fb      	str	r3, [r7, #28]
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	2b0e      	cmp	r3, #14
 800069e:	d804      	bhi.n	80006aa <GainControl+0xa6>
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0f1      	beq.n	800068e <GainControl+0x8a>
  }
  if (v < 7)  {
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d81d      	bhi.n	80006ec <GainControl+0xe8>
    v = 7 - v;
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	f1c3 0307 	rsb	r3, r3, #7
 80006b6:	61fb      	str	r3, [r7, #28]
    for (d = &DTMFin[0]; d != &DTMFin[N]; )  {
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <GainControl+0x128>)
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	e011      	b.n	80006e2 <GainControl+0xde>
      *d++ = ((short) (*d - avg)) >> v;
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	69bb      	ldr	r3, [r7, #24]
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	b21b      	sxth	r3, r3
 80006d0:	461a      	mov	r2, r3
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	fa42 f103 	asr.w	r1, r2, r3
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	1c9a      	adds	r2, r3, #2
 80006dc:	60ba      	str	r2, [r7, #8]
 80006de:	b20a      	sxth	r2, r1
 80006e0:	801a      	strh	r2, [r3, #0]
    for (d = &DTMFin[0]; d != &DTMFin[N]; )  {
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	4a10      	ldr	r2, [pc, #64]	; (8000728 <GainControl+0x124>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d1e9      	bne.n	80006be <GainControl+0xba>
    }
    return;
 80006ea:	e018      	b.n	800071e <GainControl+0x11a>
  }

  v -= 7;
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	3b07      	subs	r3, #7
 80006f0:	61fb      	str	r3, [r7, #28]
  for (d = &DTMFin[0]; d != &DTMFin[N]; )  {
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <GainControl+0x128>)
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	e00e      	b.n	8000716 <GainControl+0x112>
    *d++ = ((int) (*d - avg)) << v;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006fe:	461a      	mov	r2, r3
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	461a      	mov	r2, r3
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	fa02 f103 	lsl.w	r1, r2, r3
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	1c9a      	adds	r2, r3, #2
 8000710:	60ba      	str	r2, [r7, #8]
 8000712:	b20a      	sxth	r2, r1
 8000714:	801a      	strh	r2, [r3, #0]
  for (d = &DTMFin[0]; d != &DTMFin[N]; )  {
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	4a03      	ldr	r2, [pc, #12]	; (8000728 <GainControl+0x124>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d1ec      	bne.n	80006f8 <GainControl+0xf4>
  }
}
 800071e:	3724      	adds	r7, #36	; 0x24
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	2000038c 	.word	0x2000038c
 800072c:	200002a8 	.word	0x200002a8

08000730 <chk_valid>:
  Check if remaining powers are outside 
    return 0 if invalid power values detected
 *------------------------------------------------------------------------------*/
static int chk_valid (unsigned int p[4],     // power results
                      unsigned int d,        // maximum power
                      unsigned int pref)  {  // power reference
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]

  if (d == 0)  return 0;                     // no digit
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d101      	bne.n	8000746 <chk_valid+0x16>
 8000742:	2300      	movs	r3, #0
 8000744:	e02e      	b.n	80007a4 <chk_valid+0x74>
  pref /= 8;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	08db      	lsrs	r3, r3, #3
 800074a:	607b      	str	r3, [r7, #4]
  if (d != 1 && p[0] > pref) return (0);
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d006      	beq.n	8000760 <chk_valid+0x30>
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	429a      	cmp	r2, r3
 800075a:	d201      	bcs.n	8000760 <chk_valid+0x30>
 800075c:	2300      	movs	r3, #0
 800075e:	e021      	b.n	80007a4 <chk_valid+0x74>
  if (d != 2 && p[1] > pref) return (0);
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	2b02      	cmp	r3, #2
 8000764:	d007      	beq.n	8000776 <chk_valid+0x46>
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	3304      	adds	r3, #4
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	429a      	cmp	r2, r3
 8000770:	d201      	bcs.n	8000776 <chk_valid+0x46>
 8000772:	2300      	movs	r3, #0
 8000774:	e016      	b.n	80007a4 <chk_valid+0x74>
  if (d != 3 && p[2] > pref) return (0);
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	2b03      	cmp	r3, #3
 800077a:	d007      	beq.n	800078c <chk_valid+0x5c>
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3308      	adds	r3, #8
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	429a      	cmp	r2, r3
 8000786:	d201      	bcs.n	800078c <chk_valid+0x5c>
 8000788:	2300      	movs	r3, #0
 800078a:	e00b      	b.n	80007a4 <chk_valid+0x74>
  if (d != 4 && p[3] > pref) return (0);
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	2b04      	cmp	r3, #4
 8000790:	d007      	beq.n	80007a2 <chk_valid+0x72>
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	330c      	adds	r3, #12
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	429a      	cmp	r2, r3
 800079c:	d201      	bcs.n	80007a2 <chk_valid+0x72>
 800079e:	2300      	movs	r3, #0
 80007a0:	e000      	b.n	80007a4 <chk_valid+0x74>
  return (1);
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <DTMF_digit>:

/*------------------------------------------------------------------------------
  DTMF Digit:  Checks for valid DTMF digit
      return  digit+0x10  or 0 for invalid digit
 *------------------------------------------------------------------------------*/
static unsigned char DTMF_digit (void)  {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
  unsigned int f, rampl, campl;
  unsigned int row, col;
  unsigned int p[4];

//--- Check Row Frequency -------------------------------------
  p[0] = Goertzel (DTMF_697Hz);
 80007b6:	f646 504c 	movw	r0, #27980	; 0x6d4c
 80007ba:	f7ff fed7 	bl	800056c <Goertzel>
 80007be:	4603      	mov	r3, r0
 80007c0:	607b      	str	r3, [r7, #4]
  p[1] = Goertzel (DTMF_770Hz);
 80007c2:	f646 104c 	movw	r0, #26956	; 0x694c
 80007c6:	f7ff fed1 	bl	800056c <Goertzel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	60bb      	str	r3, [r7, #8]
  p[2] = Goertzel (DTMF_852Hz);
 80007ce:	f246 4065 	movw	r0, #25701	; 0x6465
 80007d2:	f7ff fecb 	bl	800056c <Goertzel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	60fb      	str	r3, [r7, #12]
  p[3] = Goertzel (DTMF_941Hz);
 80007da:	f645 609b 	movw	r0, #24219	; 0x5e9b
 80007de:	f7ff fec5 	bl	800056c <Goertzel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	613b      	str	r3, [r7, #16]
//  printf ("\nr=%d %d %d %d", p[0], p[1],p[2],p[3]);
  row = 0; rampl = 0x40;  // initial sensivity
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
 80007ea:	2340      	movs	r3, #64	; 0x40
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (p[0] > rampl)  { row = 1;  rampl = p[0]; } 
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d203      	bcs.n	80007fe <DTMF_digit+0x4e>
 80007f6:	2301      	movs	r3, #1
 80007f8:	61fb      	str	r3, [r7, #28]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (p[1] > rampl)  { row = 2;  rampl = p[1]; } 
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000802:	429a      	cmp	r2, r3
 8000804:	d203      	bcs.n	800080e <DTMF_digit+0x5e>
 8000806:	2302      	movs	r3, #2
 8000808:	61fb      	str	r3, [r7, #28]
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  if (p[2] > rampl)  { row = 3;  rampl = p[2]; } 
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000812:	429a      	cmp	r2, r3
 8000814:	d203      	bcs.n	800081e <DTMF_digit+0x6e>
 8000816:	2303      	movs	r3, #3
 8000818:	61fb      	str	r3, [r7, #28]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  if (p[3] > rampl)  { row = 4;  rampl = p[3]; } 
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000822:	429a      	cmp	r2, r3
 8000824:	d203      	bcs.n	800082e <DTMF_digit+0x7e>
 8000826:	2304      	movs	r3, #4
 8000828:	61fb      	str	r3, [r7, #28]
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  if (!chk_valid (p, row, rampl)) goto invalid;  
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000832:	69f9      	ldr	r1, [r7, #28]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff7b 	bl	8000730 <chk_valid>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	f000 80fd 	beq.w	8000a3c <DTMF_digit+0x28c>
//--- Check Col Frequency -------------------------------------
  p[0] = Goertzel (DTMF_1209Hz);
 8000842:	f644 2081 	movw	r0, #19073	; 0x4a81
 8000846:	f7ff fe91 	bl	800056c <Goertzel>
 800084a:	4603      	mov	r3, r0
 800084c:	607b      	str	r3, [r7, #4]
  p[1] = Goertzel (DTMF_1336Hz);
 800084e:	f643 70c5 	movw	r0, #16325	; 0x3fc5
 8000852:	f7ff fe8b 	bl	800056c <Goertzel>
 8000856:	4603      	mov	r3, r0
 8000858:	60bb      	str	r3, [r7, #8]
  p[2] = Goertzel (DTMF_1477Hz);
 800085a:	f243 301d 	movw	r0, #13085	; 0x331d
 800085e:	f7ff fe85 	bl	800056c <Goertzel>
 8000862:	4603      	mov	r3, r0
 8000864:	60fb      	str	r3, [r7, #12]
  p[3] = Goertzel (DTMF_1633Hz);
 8000866:	f242 4063 	movw	r0, #9315	; 0x2463
 800086a:	f7ff fe7f 	bl	800056c <Goertzel>
 800086e:	4603      	mov	r3, r0
 8000870:	613b      	str	r3, [r7, #16]
//  printf (" c=%d %d %d %d", p[0], p[1],p[2],p[3]);
  col = 0; campl = 0x50;  // initial sensivity
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
 8000876:	2350      	movs	r3, #80	; 0x50
 8000878:	623b      	str	r3, [r7, #32]
  if (p[0] > campl)  { col = 1;  campl = p[0]; } 
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6a3a      	ldr	r2, [r7, #32]
 800087e:	429a      	cmp	r2, r3
 8000880:	d203      	bcs.n	800088a <DTMF_digit+0xda>
 8000882:	2301      	movs	r3, #1
 8000884:	61bb      	str	r3, [r7, #24]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	623b      	str	r3, [r7, #32]
  if (p[1] > campl)  { col = 2;  campl = p[1]; } 
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	6a3a      	ldr	r2, [r7, #32]
 800088e:	429a      	cmp	r2, r3
 8000890:	d203      	bcs.n	800089a <DTMF_digit+0xea>
 8000892:	2302      	movs	r3, #2
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	623b      	str	r3, [r7, #32]
  if (p[2] > campl)  { col = 3;  campl = p[2]; } 
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	6a3a      	ldr	r2, [r7, #32]
 800089e:	429a      	cmp	r2, r3
 80008a0:	d203      	bcs.n	80008aa <DTMF_digit+0xfa>
 80008a2:	2303      	movs	r3, #3
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	623b      	str	r3, [r7, #32]
  if (p[3] > campl)  { col = 4;  campl = p[3]; } 
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	6a3a      	ldr	r2, [r7, #32]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d203      	bcs.n	80008ba <DTMF_digit+0x10a>
 80008b2:	2304      	movs	r3, #4
 80008b4:	61bb      	str	r3, [r7, #24]
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	623b      	str	r3, [r7, #32]
  if (!chk_valid (p, col, campl)) goto invalid;  
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	6a3a      	ldr	r2, [r7, #32]
 80008be:	69b9      	ldr	r1, [r7, #24]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff35 	bl	8000730 <chk_valid>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	f000 80b9 	beq.w	8000a40 <DTMF_digit+0x290>

  if (col && row)  {                        // valid digit detected
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	f000 80b7 	beq.w	8000a44 <DTMF_digit+0x294>
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	f000 80b3 	beq.w	8000a44 <DTMF_digit+0x294>
// Amplitute Check: col must be within -4dB..+8dB of row 
    if ((rampl << 4) < campl)  goto invalid;
 80008de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e0:	011b      	lsls	r3, r3, #4
 80008e2:	6a3a      	ldr	r2, [r7, #32]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	f200 80af 	bhi.w	8000a48 <DTMF_digit+0x298>
    if ((campl << 3) < rampl)  goto invalid;
 80008ea:	6a3b      	ldr	r3, [r7, #32]
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008f0:	429a      	cmp	r2, r3
 80008f2:	f200 80ab 	bhi.w	8000a4c <DTMF_digit+0x29c>

// check 2nd harmonic
    switch (row)  {
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3b01      	subs	r3, #1
 80008fa:	2b03      	cmp	r3, #3
 80008fc:	d84c      	bhi.n	8000998 <DTMF_digit+0x1e8>
 80008fe:	a201      	add	r2, pc, #4	; (adr r2, 8000904 <DTMF_digit+0x154>)
 8000900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000904:	08000915 	.word	0x08000915
 8000908:	08000937 	.word	0x08000937
 800090c:	08000959 	.word	0x08000959
 8000910:	08000975 	.word	0x08000975
      case 1:
        if (col == 2 || col == 3)  break;   // do not check it
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	2b02      	cmp	r3, #2
 8000918:	d03e      	beq.n	8000998 <DTMF_digit+0x1e8>
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	2b03      	cmp	r3, #3
 800091e:	d03b      	beq.n	8000998 <DTMF_digit+0x1e8>
        f = Goertzel (DTMF_1394Hz);
 8000920:	f643 20a6 	movw	r0, #15014	; 0x3aa6
 8000924:	f7ff fe22 	bl	800056c <Goertzel>
 8000928:	6178      	str	r0, [r7, #20]
        if (f > (campl / 8))   goto invalid;
 800092a:	6a3b      	ldr	r3, [r7, #32]
 800092c:	08db      	lsrs	r3, r3, #3
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	429a      	cmp	r2, r3
 8000932:	d92a      	bls.n	800098a <DTMF_digit+0x1da>
 8000934:	e08f      	b.n	8000a56 <DTMF_digit+0x2a6>
        break;

      case 2:
        if (col == 3 || col == 4)  break;   // do not check it
 8000936:	69bb      	ldr	r3, [r7, #24]
 8000938:	2b03      	cmp	r3, #3
 800093a:	d02d      	beq.n	8000998 <DTMF_digit+0x1e8>
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	2b04      	cmp	r3, #4
 8000940:	d02a      	beq.n	8000998 <DTMF_digit+0x1e8>
        f = Goertzel (DTMF_1540Hz);
 8000942:	f642 503f 	movw	r0, #11583	; 0x2d3f
 8000946:	f7ff fe11 	bl	800056c <Goertzel>
 800094a:	6178      	str	r0, [r7, #20]
        if (f > (campl / 8))   goto invalid;
 800094c:	6a3b      	ldr	r3, [r7, #32]
 800094e:	08db      	lsrs	r3, r3, #3
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	429a      	cmp	r2, r3
 8000954:	d91b      	bls.n	800098e <DTMF_digit+0x1de>
 8000956:	e07e      	b.n	8000a56 <DTMF_digit+0x2a6>
        break;

      case 3:
        if (col == 4)  break;              // do not check it
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	2b04      	cmp	r3, #4
 800095c:	d019      	beq.n	8000992 <DTMF_digit+0x1e2>
        f = Goertzel (DTMF_1704Hz);
 800095e:	f641 507d 	movw	r0, #7549	; 0x1d7d
 8000962:	f7ff fe03 	bl	800056c <Goertzel>
 8000966:	6178      	str	r0, [r7, #20]
        if (f > (campl / 8))   goto invalid;
 8000968:	6a3b      	ldr	r3, [r7, #32]
 800096a:	08db      	lsrs	r3, r3, #3
 800096c:	697a      	ldr	r2, [r7, #20]
 800096e:	429a      	cmp	r2, r3
 8000970:	d911      	bls.n	8000996 <DTMF_digit+0x1e6>
 8000972:	e070      	b.n	8000a56 <DTMF_digit+0x2a6>
        break;

      case 4:
        f = Goertzel (DTMF_1882Hz);
 8000974:	f640 30d8 	movw	r0, #3032	; 0xbd8
 8000978:	f7ff fdf8 	bl	800056c <Goertzel>
 800097c:	6178      	str	r0, [r7, #20]
        if (f > (campl / 8))   goto invalid;
 800097e:	6a3b      	ldr	r3, [r7, #32]
 8000980:	08db      	lsrs	r3, r3, #3
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	429a      	cmp	r2, r3
 8000986:	d863      	bhi.n	8000a50 <DTMF_digit+0x2a0>
        break;
 8000988:	e006      	b.n	8000998 <DTMF_digit+0x1e8>
        break;
 800098a:	bf00      	nop
 800098c:	e004      	b.n	8000998 <DTMF_digit+0x1e8>
        break;
 800098e:	bf00      	nop
 8000990:	e002      	b.n	8000998 <DTMF_digit+0x1e8>
        if (col == 4)  break;              // do not check it
 8000992:	bf00      	nop
 8000994:	e000      	b.n	8000998 <DTMF_digit+0x1e8>
        break;
 8000996:	bf00      	nop
    }

    switch (col)  {
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	3b01      	subs	r3, #1
 800099c:	2b03      	cmp	r3, #3
 800099e:	d83d      	bhi.n	8000a1c <DTMF_digit+0x26c>
 80009a0:	a201      	add	r2, pc, #4	; (adr r2, 80009a8 <DTMF_digit+0x1f8>)
 80009a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a6:	bf00      	nop
 80009a8:	080009b9 	.word	0x080009b9
 80009ac:	080009cd 	.word	0x080009cd
 80009b0:	080009e1 	.word	0x080009e1
 80009b4:	080009fb 	.word	0x080009fb
      case 1:
        f = Goertzel (DTMF_2418Hz);
 80009b8:	4829      	ldr	r0, [pc, #164]	; (8000a60 <DTMF_digit+0x2b0>)
 80009ba:	f7ff fdd7 	bl	800056c <Goertzel>
 80009be:	6178      	str	r0, [r7, #20]
        if (f > (rampl / 8))   goto invalid;
 80009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c2:	08db      	lsrs	r3, r3, #3
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d921      	bls.n	8000a0e <DTMF_digit+0x25e>
 80009ca:	e044      	b.n	8000a56 <DTMF_digit+0x2a6>
        break;

      case 2:
        f = Goertzel (DTMF_2672Hz);
 80009cc:	4825      	ldr	r0, [pc, #148]	; (8000a64 <DTMF_digit+0x2b4>)
 80009ce:	f7ff fdcd 	bl	800056c <Goertzel>
 80009d2:	6178      	str	r0, [r7, #20]
        if (f > (rampl / 8))   goto invalid;
 80009d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d6:	08db      	lsrs	r3, r3, #3
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d919      	bls.n	8000a12 <DTMF_digit+0x262>
 80009de:	e03a      	b.n	8000a56 <DTMF_digit+0x2a6>
        break;

      case 3:
        if (row == 4)  break;              // do not check it
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	d017      	beq.n	8000a16 <DTMF_digit+0x266>
        f = Goertzel (DTMF_2954Hz);
 80009e6:	4820      	ldr	r0, [pc, #128]	; (8000a68 <DTMF_digit+0x2b8>)
 80009e8:	f7ff fdc0 	bl	800056c <Goertzel>
 80009ec:	6178      	str	r0, [r7, #20]
        if (f > (rampl / 8))   goto invalid;
 80009ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f0:	08db      	lsrs	r3, r3, #3
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d910      	bls.n	8000a1a <DTMF_digit+0x26a>
 80009f8:	e02d      	b.n	8000a56 <DTMF_digit+0x2a6>
        break;

      case 4:
        f = Goertzel (DTMF_3266Hz);
 80009fa:	481c      	ldr	r0, [pc, #112]	; (8000a6c <DTMF_digit+0x2bc>)
 80009fc:	f7ff fdb6 	bl	800056c <Goertzel>
 8000a00:	6178      	str	r0, [r7, #20]
        if (f > (rampl / 8))   goto invalid;
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	08db      	lsrs	r3, r3, #3
 8000a06:	697a      	ldr	r2, [r7, #20]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d823      	bhi.n	8000a54 <DTMF_digit+0x2a4>
        break;
 8000a0c:	e006      	b.n	8000a1c <DTMF_digit+0x26c>
        break;
 8000a0e:	bf00      	nop
 8000a10:	e004      	b.n	8000a1c <DTMF_digit+0x26c>
        break;
 8000a12:	bf00      	nop
 8000a14:	e002      	b.n	8000a1c <DTMF_digit+0x26c>
        if (row == 4)  break;              // do not check it
 8000a16:	bf00      	nop
 8000a18:	e000      	b.n	8000a1c <DTMF_digit+0x26c>
        break;
 8000a1a:	bf00      	nop
    }

// digit is valid
    return ((row-1) << 2) | (col-1) | 0x10;
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	3b01      	subs	r3, #1
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	4313      	orrs	r3, r2
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	f043 0310 	orr.w	r3, r3, #16
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	e00d      	b.n	8000a58 <DTMF_digit+0x2a8>
  if (!chk_valid (p, row, rampl)) goto invalid;  
 8000a3c:	bf00      	nop
 8000a3e:	e00a      	b.n	8000a56 <DTMF_digit+0x2a6>
  if (!chk_valid (p, col, campl)) goto invalid;  
 8000a40:	bf00      	nop
 8000a42:	e008      	b.n	8000a56 <DTMF_digit+0x2a6>
  }

invalid:
 8000a44:	bf00      	nop
 8000a46:	e006      	b.n	8000a56 <DTMF_digit+0x2a6>
    if ((rampl << 4) < campl)  goto invalid;
 8000a48:	bf00      	nop
 8000a4a:	e004      	b.n	8000a56 <DTMF_digit+0x2a6>
    if ((campl << 3) < rampl)  goto invalid;
 8000a4c:	bf00      	nop
 8000a4e:	e002      	b.n	8000a56 <DTMF_digit+0x2a6>
        if (f > (campl / 8))   goto invalid;
 8000a50:	bf00      	nop
 8000a52:	e000      	b.n	8000a56 <DTMF_digit+0x2a6>
        if (f > (rampl / 8))   goto invalid;
 8000a54:	bf00      	nop
  return (0);
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3728      	adds	r7, #40	; 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	ffffd6bb 	.word	0xffffd6bb
 8000a64:	ffffbf89 	.word	0xffffbf89
 8000a68:	ffffa8d2 	.word	0xffffa8d2
 8000a6c:	ffff94b0 	.word	0xffff94b0

08000a70 <DTMF_Detect>:


/*------------------------------------------------------------------------------
  DTMF Detect
 *------------------------------------------------------------------------------*/
void DTMF_Detect (DTMF *t)  {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  unsigned char d;
  unsigned int  cnt;

  if (t->AIindex >= t->AIcheck)  {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d352      	bcc.n	8000b2a <DTMF_Detect+0xba>
    GainControl (t);                       // Copy AD Input to DTMF Buffer
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff fdbd 	bl	8000604 <GainControl>
    t->AIindex &= (DTMFsz-1);              // ToDo make atomic
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	601a      	str	r2, [r3, #0]
    t->AIcheck = t->AIindex + ((N*2)/3);   // Increment DTMF Window (Overlapping Input Buffer)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	605a      	str	r2, [r3, #4]
    d = DTMF_digit ();
 8000aa0:	f7ff fe86 	bl	80007b0 <DTMF_digit>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	72fb      	strb	r3, [r7, #11]
    t->early = d;     cnt = 0;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	7afa      	ldrb	r2, [r7, #11]
 8000aac:	725a      	strb	r2, [r3, #9]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
    if (t->d[0] == d) cnt++;       
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	7adb      	ldrb	r3, [r3, #11]
 8000ab6:	7afa      	ldrb	r2, [r7, #11]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d102      	bne.n	8000ac2 <DTMF_Detect+0x52>
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	60fb      	str	r3, [r7, #12]
    if (t->d[1] == d) cnt++;       
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	7b1b      	ldrb	r3, [r3, #12]
 8000ac6:	7afa      	ldrb	r2, [r7, #11]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d102      	bne.n	8000ad2 <DTMF_Detect+0x62>
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
    if (t->d[2] == d) cnt++;       
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	7b5b      	ldrb	r3, [r3, #13]
 8000ad6:	7afa      	ldrb	r2, [r7, #11]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d102      	bne.n	8000ae2 <DTMF_Detect+0x72>
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
    if (t->d[3] == d) cnt++;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	7b9b      	ldrb	r3, [r3, #14]
 8000ae6:	7afa      	ldrb	r2, [r7, #11]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d102      	bne.n	8000af2 <DTMF_Detect+0x82>
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3301      	adds	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
    t->d[(t->d_i++ & 3)] = d;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	1c59      	adds	r1, r3, #1
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	6111      	str	r1, [r2, #16]
 8000afc:	f003 0303 	and.w	r3, r3, #3
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	4413      	add	r3, r2
 8000b04:	7afa      	ldrb	r2, [r7, #11]
 8000b06:	72da      	strb	r2, [r3, #11]
    if (cnt >= 2)  {
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d90d      	bls.n	8000b2a <DTMF_Detect+0xba>
      if (t->digit != d)  {
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	7a1b      	ldrb	r3, [r3, #8]
 8000b12:	7afa      	ldrb	r2, [r7, #11]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d008      	beq.n	8000b2a <DTMF_Detect+0xba>
        t->digit = d;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	7afa      	ldrb	r2, [r7, #11]
 8000b1c:	721a      	strb	r2, [r3, #8]
        if (d)  t->new   = 1;
 8000b1e:	7afb      	ldrb	r3, [r7, #11]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <DTMF_Detect+0xba>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2201      	movs	r2, #1
 8000b28:	729a      	strb	r2, [r3, #10]
      }     
    }       
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <actuateOutput>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void actuateOutput(char dtmfcode)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	switch(dtmfcode){
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	3b31      	subs	r3, #49	; 0x31
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	d824      	bhi.n	8000b90 <actuateOutput+0x5c>
 8000b46:	a201      	add	r2, pc, #4	; (adr r2, 8000b4c <actuateOutput+0x18>)
 8000b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4c:	08000b61 	.word	0x08000b61
 8000b50:	08000b6d 	.word	0x08000b6d
 8000b54:	08000b91 	.word	0x08000b91
 8000b58:	08000b79 	.word	0x08000b79
 8000b5c:	08000b85 	.word	0x08000b85
		case '1' :
			HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2104      	movs	r1, #4
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <actuateOutput+0x68>)
 8000b66:	f002 fc5b 	bl	8003420 <HAL_GPIO_WritePin>
			break;
 8000b6a:	e012      	b.n	8000b92 <actuateOutput+0x5e>
		
		case '2' :
			HAL_GPIO_WritePin(OUT1_GPIO_Port, OUT1_Pin, GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2104      	movs	r1, #4
 8000b70:	480a      	ldr	r0, [pc, #40]	; (8000b9c <actuateOutput+0x68>)
 8000b72:	f002 fc55 	bl	8003420 <HAL_GPIO_WritePin>
			break;
 8000b76:	e00c      	b.n	8000b92 <actuateOutput+0x5e>
		
		case '4' :
			HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2108      	movs	r1, #8
 8000b7c:	4807      	ldr	r0, [pc, #28]	; (8000b9c <actuateOutput+0x68>)
 8000b7e:	f002 fc4f 	bl	8003420 <HAL_GPIO_WritePin>
			break;
 8000b82:	e006      	b.n	8000b92 <actuateOutput+0x5e>

		case '5' :
			HAL_GPIO_WritePin(OUT2_GPIO_Port, OUT2_Pin, GPIO_PIN_SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	2108      	movs	r1, #8
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <actuateOutput+0x68>)
 8000b8a:	f002 fc49 	bl	8003420 <HAL_GPIO_WritePin>
			break;
 8000b8e:	e000      	b.n	8000b92 <actuateOutput+0x5e>

		default:
			break;
 8000b90:	bf00      	nop
	}
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	48000800 	.word	0x48000800

08000ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba4:	f000 fd24 	bl	80015f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba8:	f000 f866 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bac:	f000 f992 	bl	8000ed4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bb0:	f000 f960 	bl	8000e74 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000bb4:	f000 f8b2 	bl	8000d1c <MX_ADC1_Init>
  MX_TIM7_Init();
 8000bb8:	f000 f926 	bl	8000e08 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	
	printf("Welcome to DTMF decoder \r\n");
 8000bbc:	4826      	ldr	r0, [pc, #152]	; (8000c58 <main+0xb8>)
 8000bbe:	f005 f9b3 	bl	8005f28 <puts>
	
	
	/* Run ADC calibration */
	if(HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED) != HAL_OK)
 8000bc2:	217f      	movs	r1, #127	; 0x7f
 8000bc4:	4825      	ldr	r0, [pc, #148]	; (8000c5c <main+0xbc>)
 8000bc6:	f002 f88f 	bl	8002ce8 <HAL_ADCEx_Calibration_Start>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d000      	beq.n	8000bd2 <main+0x32>
		while(1);
 8000bd0:	e7fe      	b.n	8000bd0 <main+0x30>
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)aResultDMA, BUFLEN) != HAL_OK)
		while(1);
#endif
	
	/* Start 8kHz timer */
	if(HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8000bd2:	4823      	ldr	r0, [pc, #140]	; (8000c60 <main+0xc0>)
 8000bd4:	f004 f800 	bl	8004bd8 <HAL_TIM_Base_Start_IT>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d000      	beq.n	8000be0 <main+0x40>
		while(1);
 8000bde:	e7fe      	b.n	8000bde <main+0x3e>

printf("\033\143");
 8000be0:	4820      	ldr	r0, [pc, #128]	; (8000c64 <main+0xc4>)
 8000be2:	f005 f93b 	bl	8005e5c <iprintf>
printf("Welcome to ECEN-361 Lab-08 DTMF Decoder\n\r\n\r");
 8000be6:	4820      	ldr	r0, [pc, #128]	; (8000c68 <main+0xc8>)
 8000be8:	f005 f938 	bl	8005e5c <iprintf>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		
		/* run DTMF decoder */
		if (dail1.AIindex >= dail1.AIcheck)  {
 8000bec:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <main+0xcc>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <main+0xcc>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d302      	bcc.n	8000bfe <main+0x5e>
			DTMF_Detect (&dail1);
 8000bf8:	481c      	ldr	r0, [pc, #112]	; (8000c6c <main+0xcc>)
 8000bfa:	f7ff ff39 	bl	8000a70 <DTMF_Detect>
		} 

		if (dail1.early)
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <main+0xcc>)
 8000c00:	7a5b      	ldrb	r3, [r3, #9]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d006      	beq.n	8000c14 <main+0x74>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2120      	movs	r1, #32
 8000c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0e:	f002 fc07 	bl	8003420 <HAL_GPIO_WritePin>
 8000c12:	e005      	b.n	8000c20 <main+0x80>
		else
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2120      	movs	r1, #32
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1c:	f002 fc00 	bl	8003420 <HAL_GPIO_WritePin>

		if (dail1.new){
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <main+0xcc>)
 8000c22:	7a9b      	ldrb	r3, [r3, #10]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d0e1      	beq.n	8000bec <main+0x4c>
			printf ("%c ", DTMFchar[dail1.digit & 0x0F]);
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <main+0xcc>)
 8000c2a:	7a1b      	ldrb	r3, [r3, #8]
 8000c2c:	f003 030f 	and.w	r3, r3, #15
 8000c30:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <main+0xd0>)
 8000c32:	5cd3      	ldrb	r3, [r2, r3]
 8000c34:	4619      	mov	r1, r3
 8000c36:	480f      	ldr	r0, [pc, #60]	; (8000c74 <main+0xd4>)
 8000c38:	f005 f910 	bl	8005e5c <iprintf>
			actuateOutput(DTMFchar[dail1.digit & 0x0F]);
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <main+0xcc>)
 8000c3e:	7a1b      	ldrb	r3, [r3, #8]
 8000c40:	f003 030f 	and.w	r3, r3, #15
 8000c44:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <main+0xd0>)
 8000c46:	5cd3      	ldrb	r3, [r2, r3]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff73 	bl	8000b34 <actuateOutput>
			dail1.new = 0;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <main+0xcc>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	729a      	strb	r2, [r3, #10]
		if (dail1.AIindex >= dail1.AIcheck)  {
 8000c54:	e7ca      	b.n	8000bec <main+0x4c>
 8000c56:	bf00      	nop
 8000c58:	08006c10 	.word	0x08006c10
 8000c5c:	2000038c 	.word	0x2000038c
 8000c60:	200003f0 	.word	0x200003f0
 8000c64:	08006c2c 	.word	0x08006c2c
 8000c68:	08006c30 	.word	0x08006c30
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000214 	.word	0x20000214
 8000c74:	08006c5c 	.word	0x08006c5c

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b096      	sub	sp, #88	; 0x58
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	2244      	movs	r2, #68	; 0x44
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f005 f956 	bl	8005f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c9e:	f002 fbff 	bl	80034a0 <HAL_PWREx_ControlVoltageScaling>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ca8:	f000 f9f4 	bl	8001094 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cac:	2302      	movs	r3, #2
 8000cae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cb4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb6:	2310      	movs	r3, #16
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cca:	2307      	movs	r3, #7
 8000ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f002 fc36 	bl	800354c <HAL_RCC_OscConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ce6:	f000 f9d5 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cea:	230f      	movs	r3, #15
 8000cec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2104      	movs	r1, #4
 8000d02:	4618      	mov	r0, r3
 8000d04:	f002 fffe 	bl	8003d04 <HAL_RCC_ClockConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d0e:	f000 f9c1 	bl	8001094 <Error_Handler>
  }
}
 8000d12:	bf00      	nop
 8000d14:	3758      	adds	r7, #88	; 0x58
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
 8000d3c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d3e:	4b2f      	ldr	r3, [pc, #188]	; (8000dfc <MX_ADC1_Init+0xe0>)
 8000d40:	4a2f      	ldr	r2, [pc, #188]	; (8000e00 <MX_ADC1_Init+0xe4>)
 8000d42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d44:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <MX_ADC1_Init+0xe0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d4a:	4b2c      	ldr	r3, [pc, #176]	; (8000dfc <MX_ADC1_Init+0xe0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d50:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <MX_ADC1_Init+0xe0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d56:	4b29      	ldr	r3, [pc, #164]	; (8000dfc <MX_ADC1_Init+0xe0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d5c:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <MX_ADC1_Init+0xe0>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d62:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <MX_ADC1_Init+0xe0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d68:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <MX_ADC1_Init+0xe0>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d6e:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <MX_ADC1_Init+0xe0>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d74:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <MX_ADC1_Init+0xe0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <MX_ADC1_Init+0xe0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d82:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <MX_ADC1_Init+0xe0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <MX_ADC1_Init+0xe0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d90:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MX_ADC1_Init+0xe0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <MX_ADC1_Init+0xe0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d9e:	4817      	ldr	r0, [pc, #92]	; (8000dfc <MX_ADC1_Init+0xe0>)
 8000da0:	f000 fe98 	bl	8001ad4 <HAL_ADC_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000daa:	f000 f973 	bl	8001094 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4810      	ldr	r0, [pc, #64]	; (8000dfc <MX_ADC1_Init+0xe0>)
 8000dba:	f001 fff5 	bl	8002da8 <HAL_ADCEx_MultiModeConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000dc4:	f000 f966 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_ADC1_Init+0xe8>)
 8000dca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dcc:	2306      	movs	r3, #6
 8000dce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dd4:	237f      	movs	r3, #127	; 0x7f
 8000dd6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_ADC1_Init+0xe0>)
 8000de6:	f001 f999 	bl	800211c <HAL_ADC_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000df0:	f000 f950 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	3728      	adds	r7, #40	; 0x28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	2000038c 	.word	0x2000038c
 8000e00:	50040000 	.word	0x50040000
 8000e04:	04300002 	.word	0x04300002

08000e08 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_TIM7_Init+0x64>)
 8000e1a:	4a15      	ldr	r2, [pc, #84]	; (8000e70 <MX_TIM7_Init+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 5;
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <MX_TIM7_Init+0x64>)
 8000e20:	2205      	movs	r2, #5
 8000e22:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_TIM7_Init+0x64>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <MX_TIM7_Init+0x64>)
 8000e2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e30:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <MX_TIM7_Init+0x64>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <MX_TIM7_Init+0x64>)
 8000e3a:	f003 fe75 	bl	8004b28 <HAL_TIM_Base_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000e44:	f000 f926 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_TIM7_Init+0x64>)
 8000e56:	f004 f8f3 	bl	8005040 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000e60:	f000 f918 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200003f0 	.word	0x200003f0
 8000e70:	40001400 	.word	0x40001400

08000e74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <MX_USART2_UART_Init+0x58>)
 8000e7a:	4a15      	ldr	r2, [pc, #84]	; (8000ed0 <MX_USART2_UART_Init+0x5c>)
 8000e7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <MX_USART2_UART_Init+0x58>)
 8000e80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_USART2_UART_Init+0x58>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <MX_USART2_UART_Init+0x58>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_USART2_UART_Init+0x58>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <MX_USART2_UART_Init+0x58>)
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <MX_USART2_UART_Init+0x58>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <MX_USART2_UART_Init+0x58>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <MX_USART2_UART_Init+0x58>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MX_USART2_UART_Init+0x58>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_USART2_UART_Init+0x58>)
 8000eb8:	f004 f968 	bl	800518c <HAL_UART_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ec2:	f000 f8e7 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	2000043c 	.word	0x2000043c
 8000ed0:	40004400 	.word	0x40004400

08000ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	4b3b      	ldr	r3, [pc, #236]	; (8000fd8 <MX_GPIO_Init+0x104>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4a3a      	ldr	r2, [pc, #232]	; (8000fd8 <MX_GPIO_Init+0x104>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4b38      	ldr	r3, [pc, #224]	; (8000fd8 <MX_GPIO_Init+0x104>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f02:	4b35      	ldr	r3, [pc, #212]	; (8000fd8 <MX_GPIO_Init+0x104>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a34      	ldr	r2, [pc, #208]	; (8000fd8 <MX_GPIO_Init+0x104>)
 8000f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <MX_GPIO_Init+0x104>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b2f      	ldr	r3, [pc, #188]	; (8000fd8 <MX_GPIO_Init+0x104>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4a2e      	ldr	r2, [pc, #184]	; (8000fd8 <MX_GPIO_Init+0x104>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <MX_GPIO_Init+0x104>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <MX_GPIO_Init+0x104>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	4a28      	ldr	r2, [pc, #160]	; (8000fd8 <MX_GPIO_Init+0x104>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3e:	4b26      	ldr	r3, [pc, #152]	; (8000fd8 <MX_GPIO_Init+0x104>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT1_Pin|OUT2_Pin|GPIO_Output_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	211c      	movs	r1, #28
 8000f4e:	4823      	ldr	r0, [pc, #140]	; (8000fdc <MX_GPIO_Init+0x108>)
 8000f50:	f002 fa66 	bl	8003420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2120      	movs	r1, #32
 8000f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5c:	f002 fa60 	bl	8003420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f66:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4819      	ldr	r0, [pc, #100]	; (8000fdc <MX_GPIO_Init+0x108>)
 8000f78:	f002 f8a8 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_Pin OUT2_Pin GPIO_Output_Pin */
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|GPIO_Output_Pin;
 8000f7c:	231c      	movs	r3, #28
 8000f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	4812      	ldr	r0, [pc, #72]	; (8000fdc <MX_GPIO_Init+0x108>)
 8000f94:	f002 f89a 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_IN0_Pin */
  GPIO_InitStruct.Pin = ADC_IN0_Pin;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADC_IN0_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fae:	f002 f88d 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fb2:	2320      	movs	r3, #32
 8000fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f002 f87e 	bl	80030cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd0:	bf00      	nop
 8000fd2:	3728      	adds	r7, #40	; 0x28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	48000800 	.word	0x48000800

08000fe0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000fe8:	1d39      	adds	r1, r7, #4
 8000fea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4803      	ldr	r0, [pc, #12]	; (8001000 <__io_putchar+0x20>)
 8000ff2:	f004 f919 	bl	8005228 <HAL_UART_Transmit>

  return ch;
 8000ff6:	687b      	ldr	r3, [r7, #4]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000043c 	.word	0x2000043c

08001004 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

#ifdef USE_DMA
	dail1.AInput[dail1.AIindex & (DTMFsz-1)] = aResultDMA[0];
#else

	err = HAL_ADC_Start(&hadc1);
 800100c:	481d      	ldr	r0, [pc, #116]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800100e:	f000 feb1 	bl	8001d74 <HAL_ADC_Start>
 8001012:	4603      	mov	r3, r0
 8001014:	60fb      	str	r3, [r7, #12]
	if(err != HAL_OK)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d000      	beq.n	800101e <HAL_TIM_PeriodElapsedCallback+0x1a>
		while(1);
 800101c:	e7fe      	b.n	800101c <HAL_TIM_PeriodElapsedCallback+0x18>

	err = HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800101e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001022:	4818      	ldr	r0, [pc, #96]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001024:	f000 ff94 	bl	8001f50 <HAL_ADC_PollForConversion>
 8001028:	4603      	mov	r3, r0
 800102a:	60fb      	str	r3, [r7, #12]

	dail1.AInput[dail1.AIindex & (DTMFsz-1)] = HAL_ADC_GetValue(&hadc1);
 800102c:	4815      	ldr	r0, [pc, #84]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800102e:	f001 f867 	bl	8002100 <HAL_ADC_GetValue>
 8001032:	4602      	mov	r2, r0
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	b291      	uxth	r1, r2
 800103c:	4a12      	ldr	r2, [pc, #72]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800103e:	3308      	adds	r3, #8
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	460a      	mov	r2, r1
 8001046:	809a      	strh	r2, [r3, #4]
	dail1.AIindex++;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001050:	6013      	str	r3, [r2, #0]

	err = HAL_ADC_Stop(&hadc1);
 8001052:	480c      	ldr	r0, [pc, #48]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001054:	f000 ff48 	bl	8001ee8 <HAL_ADC_Stop>
 8001058:	4603      	mov	r3, r0
 800105a:	60fb      	str	r3, [r7, #12]
	if(err != HAL_OK)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d000      	beq.n	8001064 <HAL_TIM_PeriodElapsedCallback+0x60>
		while(1);
 8001062:	e7fe      	b.n	8001062 <HAL_TIM_PeriodElapsedCallback+0x5e>
#endif
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8001064:	2110      	movs	r1, #16
 8001066:	4809      	ldr	r0, [pc, #36]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001068:	f002 f9f2 	bl	8003450 <HAL_GPIO_TogglePin>

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d101      	bne.n	800107a <HAL_TIM_PeriodElapsedCallback+0x76>
    HAL_IncTick();
 8001076:	f000 fadb 	bl	8001630 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000038c 	.word	0x2000038c
 8001088:	20000000 	.word	0x20000000
 800108c:	48000800 	.word	0x48000800
 8001090:	40001000 	.word	0x40001000

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001098:	e7fe      	b.n	8001098 <Error_Handler+0x4>
	...

0800109c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <HAL_MspInit+0x44>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a6:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <HAL_MspInit+0x44>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6613      	str	r3, [r2, #96]	; 0x60
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <HAL_MspInit+0x44>)
 80010b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_MspInit+0x44>)
 80010bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <HAL_MspInit+0x44>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c4:	6593      	str	r3, [r2, #88]	; 0x58
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_MspInit+0x44>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000

080010e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0ac      	sub	sp, #176	; 0xb0
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2288      	movs	r2, #136	; 0x88
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f004 ff17 	bl	8005f38 <memset>
  if(hadc->Instance==ADC1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a27      	ldr	r2, [pc, #156]	; (80011ac <HAL_ADC_MspInit+0xc8>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d146      	bne.n	80011a2 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001114:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001118:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800111a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800111e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001126:	2301      	movs	r3, #1
 8001128:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800112a:	2308      	movs	r3, #8
 800112c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800112e:	2307      	movs	r3, #7
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001132:	2302      	movs	r3, #2
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001136:	2302      	movs	r3, #2
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800113a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4618      	mov	r0, r3
 8001146:	f003 f833 	bl	80041b0 <HAL_RCCEx_PeriphCLKConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001150:	f7ff ffa0 	bl	8001094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_ADC_MspInit+0xcc>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001158:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <HAL_ADC_MspInit+0xcc>)
 800115a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800115e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <HAL_ADC_MspInit+0xcc>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001164:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116c:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <HAL_ADC_MspInit+0xcc>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001170:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <HAL_ADC_MspInit+0xcc>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <HAL_ADC_MspInit+0xcc>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001184:	2301      	movs	r3, #1
 8001186:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800118a:	230b      	movs	r3, #11
 800118c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001196:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <HAL_ADC_MspInit+0xd0>)
 800119e:	f001 ff95 	bl	80030cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011a2:	bf00      	nop
 80011a4:	37b0      	adds	r7, #176	; 0xb0
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	50040000 	.word	0x50040000
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48000800 	.word	0x48000800

080011b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <HAL_TIM_Base_MspInit+0x44>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d113      	bne.n	80011f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <HAL_TIM_Base_MspInit+0x48>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	4a0c      	ldr	r2, [pc, #48]	; (8001200 <HAL_TIM_Base_MspInit+0x48>)
 80011d0:	f043 0320 	orr.w	r3, r3, #32
 80011d4:	6593      	str	r3, [r2, #88]	; 0x58
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_TIM_Base_MspInit+0x48>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	2037      	movs	r0, #55	; 0x37
 80011e8:	f001 ff46 	bl	8003078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80011ec:	2037      	movs	r0, #55	; 0x37
 80011ee:	f001 ff5f 	bl	80030b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40001400 	.word	0x40001400
 8001200:	40021000 	.word	0x40021000

08001204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b0ac      	sub	sp, #176	; 0xb0
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2288      	movs	r2, #136	; 0x88
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f004 fe87 	bl	8005f38 <memset>
  if(huart->Instance==USART2)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a21      	ldr	r2, [pc, #132]	; (80012b4 <HAL_UART_MspInit+0xb0>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d13b      	bne.n	80012ac <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001234:	2302      	movs	r3, #2
 8001236:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001238:	2300      	movs	r3, #0
 800123a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4618      	mov	r0, r3
 8001242:	f002 ffb5 	bl	80041b0 <HAL_RCCEx_PeriphCLKConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800124c:	f7ff ff22 	bl	8001094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_UART_MspInit+0xb4>)
 8001252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001254:	4a18      	ldr	r2, [pc, #96]	; (80012b8 <HAL_UART_MspInit+0xb4>)
 8001256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125a:	6593      	str	r3, [r2, #88]	; 0x58
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <HAL_UART_MspInit+0xb4>)
 800125e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <HAL_UART_MspInit+0xb4>)
 800126a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126c:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <HAL_UART_MspInit+0xb4>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HAL_UART_MspInit+0xb4>)
 8001276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001280:	230c      	movs	r3, #12
 8001282:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001298:	2307      	movs	r3, #7
 800129a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012a2:	4619      	mov	r1, r3
 80012a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a8:	f001 ff10 	bl	80030cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	37b0      	adds	r7, #176	; 0xb0
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40004400 	.word	0x40004400
 80012b8:	40021000 	.word	0x40021000

080012bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	; 0x38
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012ca:	4b34      	ldr	r3, [pc, #208]	; (800139c <HAL_InitTick+0xe0>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ce:	4a33      	ldr	r2, [pc, #204]	; (800139c <HAL_InitTick+0xe0>)
 80012d0:	f043 0310 	orr.w	r3, r3, #16
 80012d4:	6593      	str	r3, [r2, #88]	; 0x58
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <HAL_InitTick+0xe0>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012e2:	f107 0210 	add.w	r2, r7, #16
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 fecd 	bl	800408c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d103      	bne.n	8001304 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012fc:	f002 fe9a 	bl	8004034 <HAL_RCC_GetPCLK1Freq>
 8001300:	6378      	str	r0, [r7, #52]	; 0x34
 8001302:	e004      	b.n	800130e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001304:	f002 fe96 	bl	8004034 <HAL_RCC_GetPCLK1Freq>
 8001308:	4603      	mov	r3, r0
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800130e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001310:	4a23      	ldr	r2, [pc, #140]	; (80013a0 <HAL_InitTick+0xe4>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	0c9b      	lsrs	r3, r3, #18
 8001318:	3b01      	subs	r3, #1
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800131c:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <HAL_InitTick+0xe8>)
 800131e:	4a22      	ldr	r2, [pc, #136]	; (80013a8 <HAL_InitTick+0xec>)
 8001320:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <HAL_InitTick+0xe8>)
 8001324:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001328:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800132a:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <HAL_InitTick+0xe8>)
 800132c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001330:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <HAL_InitTick+0xe8>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <HAL_InitTick+0xe8>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <HAL_InitTick+0xe8>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001342:	4818      	ldr	r0, [pc, #96]	; (80013a4 <HAL_InitTick+0xe8>)
 8001344:	f003 fbf0 	bl	8004b28 <HAL_TIM_Base_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800134e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001352:	2b00      	cmp	r3, #0
 8001354:	d11b      	bne.n	800138e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001356:	4813      	ldr	r0, [pc, #76]	; (80013a4 <HAL_InitTick+0xe8>)
 8001358:	f003 fc3e 	bl	8004bd8 <HAL_TIM_Base_Start_IT>
 800135c:	4603      	mov	r3, r0
 800135e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001362:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001366:	2b00      	cmp	r3, #0
 8001368:	d111      	bne.n	800138e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800136a:	2036      	movs	r0, #54	; 0x36
 800136c:	f001 fea0 	bl	80030b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b0f      	cmp	r3, #15
 8001374:	d808      	bhi.n	8001388 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001376:	2200      	movs	r2, #0
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	2036      	movs	r0, #54	; 0x36
 800137c:	f001 fe7c 	bl	8003078 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001380:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <HAL_InitTick+0xf0>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e002      	b.n	800138e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800138e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001392:	4618      	mov	r0, r3
 8001394:	3738      	adds	r7, #56	; 0x38
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000
 80013a0:	431bde83 	.word	0x431bde83
 80013a4:	200004c4 	.word	0x200004c4
 80013a8:	40001000 	.word	0x40001000
 80013ac:	20000228 	.word	0x20000228

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <NMI_Handler+0x4>

080013b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <MemManage_Handler+0x4>

080013c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <UsageFault_Handler+0x4>

080013ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <TIM6_DAC_IRQHandler+0x10>)
 800140e:	f003 fc53 	bl	8004cb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200004c4 	.word	0x200004c4

0800141c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <TIM7_IRQHandler+0x10>)
 8001422:	f003 fc49 	bl	8004cb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200003f0 	.word	0x200003f0

08001430 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	e00a      	b.n	8001458 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001442:	f3af 8000 	nop.w
 8001446:	4601      	mov	r1, r0
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	60ba      	str	r2, [r7, #8]
 800144e:	b2ca      	uxtb	r2, r1
 8001450:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	3301      	adds	r3, #1
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	429a      	cmp	r2, r3
 800145e:	dbf0      	blt.n	8001442 <_read+0x12>
  }

  return len;
 8001460:	687b      	ldr	r3, [r7, #4]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	e009      	b.n	8001490 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	60ba      	str	r2, [r7, #8]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fdab 	bl	8000fe0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	3301      	adds	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	429a      	cmp	r2, r3
 8001496:	dbf1      	blt.n	800147c <_write+0x12>
  }
  return len;
 8001498:	687b      	ldr	r3, [r7, #4]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <_close>:

int _close(int file)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ca:	605a      	str	r2, [r3, #4]
  return 0;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <_isatty>:

int _isatty(int file)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014e2:	2301      	movs	r3, #1
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001514:	4a14      	ldr	r2, [pc, #80]	; (8001568 <_sbrk+0x5c>)
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <_sbrk+0x60>)
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <_sbrk+0x64>)
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <_sbrk+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	429a      	cmp	r2, r3
 800153a:	d207      	bcs.n	800154c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800153c:	f004 fd04 	bl	8005f48 <__errno>
 8001540:	4603      	mov	r3, r0
 8001542:	220c      	movs	r2, #12
 8001544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800154a:	e009      	b.n	8001560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	4a05      	ldr	r2, [pc, #20]	; (8001570 <_sbrk+0x64>)
 800155c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20018000 	.word	0x20018000
 800156c:	00000400 	.word	0x00000400
 8001570:	20000510 	.word	0x20000510
 8001574:	20000668 	.word	0x20000668

08001578 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <SystemInit+0x20>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <SystemInit+0x20>)
 8001584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800159c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015a0:	f7ff ffea 	bl	8001578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80015a6:	490d      	ldr	r1, [pc, #52]	; (80015dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80015a8:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <LoopForever+0xe>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ac:	e002      	b.n	80015b4 <LoopCopyDataInit>

080015ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b2:	3304      	adds	r3, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b8:	d3f9      	bcc.n	80015ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015bc:	4c0a      	ldr	r4, [pc, #40]	; (80015e8 <LoopForever+0x16>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c0:	e001      	b.n	80015c6 <LoopFillZerobss>

080015c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c4:	3204      	adds	r2, #4

080015c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c8:	d3fb      	bcc.n	80015c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ca:	f004 fcc3 	bl	8005f54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ce:	f7ff fae7 	bl	8000ba0 <main>

080015d2 <LoopForever>:

LoopForever:
    b LoopForever
 80015d2:	e7fe      	b.n	80015d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015dc:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 80015e0:	08006cec 	.word	0x08006cec
  ldr r2, =_sbss
 80015e4:	2000028c 	.word	0x2000028c
  ldr r4, =_ebss
 80015e8:	20000664 	.word	0x20000664

080015ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC1_2_IRQHandler>
	...

080015f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_Init+0x3c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <HAL_Init+0x3c>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001604:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001606:	2003      	movs	r0, #3
 8001608:	f001 fd2b 	bl	8003062 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800160c:	200f      	movs	r0, #15
 800160e:	f7ff fe55 	bl	80012bc <HAL_InitTick>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	71fb      	strb	r3, [r7, #7]
 800161c:	e001      	b.n	8001622 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800161e:	f7ff fd3d 	bl	800109c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001622:	79fb      	ldrb	r3, [r7, #7]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40022000 	.word	0x40022000

08001630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_IncTick+0x20>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_IncTick+0x24>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4413      	add	r3, r2
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <HAL_IncTick+0x24>)
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	2000022c 	.word	0x2000022c
 8001654:	20000514 	.word	0x20000514

08001658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <HAL_GetTick+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000514 	.word	0x20000514

08001670 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	609a      	str	r2, [r3, #8]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	609a      	str	r2, [r3, #8]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
 80016e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3360      	adds	r3, #96	; 0x60
 80016ea:	461a      	mov	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <LL_ADC_SetOffset+0x44>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	4313      	orrs	r3, r2
 8001708:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001710:	bf00      	nop
 8001712:	371c      	adds	r7, #28
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	03fff000 	.word	0x03fff000

08001720 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3360      	adds	r3, #96	; 0x60
 800172e:	461a      	mov	r2, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	3360      	adds	r3, #96	; 0x60
 800175c:	461a      	mov	r2, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	431a      	orrs	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001776:	bf00      	nop
 8001778:	371c      	adds	r7, #28
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3330      	adds	r3, #48	; 0x30
 80017b8:	461a      	mov	r2, r3
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	4413      	add	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	211f      	movs	r1, #31
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	401a      	ands	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	0e9b      	lsrs	r3, r3, #26
 80017e0:	f003 011f 	and.w	r1, r3, #31
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	f003 031f 	and.w	r3, r3, #31
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	431a      	orrs	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017f4:	bf00      	nop
 80017f6:	371c      	adds	r7, #28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3314      	adds	r3, #20
 8001810:	461a      	mov	r2, r3
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	0e5b      	lsrs	r3, r3, #25
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	4413      	add	r3, r2
 800181e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	0d1b      	lsrs	r3, r3, #20
 8001828:	f003 031f 	and.w	r3, r3, #31
 800182c:	2107      	movs	r1, #7
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	401a      	ands	r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	0d1b      	lsrs	r3, r3, #20
 800183a:	f003 031f 	and.w	r3, r3, #31
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	431a      	orrs	r2, r3
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800184a:	bf00      	nop
 800184c:	371c      	adds	r7, #28
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001870:	43db      	mvns	r3, r3
 8001872:	401a      	ands	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0318 	and.w	r3, r3, #24
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <LL_ADC_SetChannelSingleDiff+0x44>)
 800187c:	40d9      	lsrs	r1, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	400b      	ands	r3, r1
 8001882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001886:	431a      	orrs	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	0007ffff 	.word	0x0007ffff

080018a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 031f 	and.w	r3, r3, #31
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6093      	str	r3, [r2, #8]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800190c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001910:	d101      	bne.n	8001916 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001934:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001938:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001960:	d101      	bne.n	8001966 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001984:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001988:	f043 0201 	orr.w	r2, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019b0:	f043 0202 	orr.w	r2, r3, #2
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <LL_ADC_IsEnabled+0x18>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <LL_ADC_IsEnabled+0x1a>
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d101      	bne.n	8001a02 <LL_ADC_IsDisableOngoing+0x18>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <LL_ADC_IsDisableOngoing+0x1a>
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a24:	f043 0204 	orr.w	r2, r3, #4
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a4c:	f043 0210 	orr.w	r2, r3, #16
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d101      	bne.n	8001a78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a9a:	f043 0220 	orr.w	r2, r3, #32
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d101      	bne.n	8001ac6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e130      	b.n	8001d50 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d109      	bne.n	8001b10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff faf1 	bl	80010e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fef1 	bl	80018fc <LL_ADC_IsDeepPowerDownEnabled>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d004      	beq.n	8001b2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fed7 	bl	80018d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff0c 	bl	800194c <LL_ADC_IsInternalRegulatorEnabled>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d115      	bne.n	8001b66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fef0 	bl	8001924 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b44:	4b84      	ldr	r3, [pc, #528]	; (8001d58 <HAL_ADC_Init+0x284>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	099b      	lsrs	r3, r3, #6
 8001b4a:	4a84      	ldr	r2, [pc, #528]	; (8001d5c <HAL_ADC_Init+0x288>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	099b      	lsrs	r3, r3, #6
 8001b52:	3301      	adds	r3, #1
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b58:	e002      	b.n	8001b60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f9      	bne.n	8001b5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff feee 	bl	800194c <LL_ADC_IsInternalRegulatorEnabled>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10d      	bne.n	8001b92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7a:	f043 0210 	orr.w	r2, r3, #16
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	f043 0201 	orr.w	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff62 	bl	8001a60 <LL_ADC_REG_IsConversionOngoing>
 8001b9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 80c9 	bne.w	8001d3e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 80c5 	bne.w	8001d3e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bbc:	f043 0202 	orr.w	r2, r3, #2
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fefb 	bl	80019c4 <LL_ADC_IsEnabled>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d115      	bne.n	8001c00 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bd4:	4862      	ldr	r0, [pc, #392]	; (8001d60 <HAL_ADC_Init+0x28c>)
 8001bd6:	f7ff fef5 	bl	80019c4 <LL_ADC_IsEnabled>
 8001bda:	4604      	mov	r4, r0
 8001bdc:	4861      	ldr	r0, [pc, #388]	; (8001d64 <HAL_ADC_Init+0x290>)
 8001bde:	f7ff fef1 	bl	80019c4 <LL_ADC_IsEnabled>
 8001be2:	4603      	mov	r3, r0
 8001be4:	431c      	orrs	r4, r3
 8001be6:	4860      	ldr	r0, [pc, #384]	; (8001d68 <HAL_ADC_Init+0x294>)
 8001be8:	f7ff feec 	bl	80019c4 <LL_ADC_IsEnabled>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4323      	orrs	r3, r4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d105      	bne.n	8001c00 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	485c      	ldr	r0, [pc, #368]	; (8001d6c <HAL_ADC_Init+0x298>)
 8001bfc:	f7ff fd38 	bl	8001670 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	7e5b      	ldrb	r3, [r3, #25]
 8001c04:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c0a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c10:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c16:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c1e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d106      	bne.n	8001c3c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	3b01      	subs	r3, #1
 8001c34:	045b      	lsls	r3, r3, #17
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d009      	beq.n	8001c58 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	4b44      	ldr	r3, [pc, #272]	; (8001d70 <HAL_ADC_Init+0x29c>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	69b9      	ldr	r1, [r7, #24]
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff1c 	bl	8001aae <LL_ADC_INJ_IsConversionOngoing>
 8001c76:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d13d      	bne.n	8001cfa <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d13a      	bne.n	8001cfa <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c88:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c90:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ca0:	f023 0302 	bic.w	r3, r3, #2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	69b9      	ldr	r1, [r7, #24]
 8001caa:	430b      	orrs	r3, r1
 8001cac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d118      	bne.n	8001cea <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001cc2:	f023 0304 	bic.w	r3, r3, #4
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cce:	4311      	orrs	r1, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cd4:	4311      	orrs	r1, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	611a      	str	r2, [r3, #16]
 8001ce8:	e007      	b.n	8001cfa <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0201 	bic.w	r2, r2, #1
 8001cf8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d10c      	bne.n	8001d1c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d08:	f023 010f 	bic.w	r1, r3, #15
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	1e5a      	subs	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	631a      	str	r2, [r3, #48]	; 0x30
 8001d1a:	e007      	b.n	8001d2c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 020f 	bic.w	r2, r2, #15
 8001d2a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d30:	f023 0303 	bic.w	r3, r3, #3
 8001d34:	f043 0201 	orr.w	r2, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	655a      	str	r2, [r3, #84]	; 0x54
 8001d3c:	e007      	b.n	8001d4e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d42:	f043 0210 	orr.w	r2, r3, #16
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3724      	adds	r7, #36	; 0x24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd90      	pop	{r4, r7, pc}
 8001d58:	20000224 	.word	0x20000224
 8001d5c:	053e2d63 	.word	0x053e2d63
 8001d60:	50040000 	.word	0x50040000
 8001d64:	50040100 	.word	0x50040100
 8001d68:	50040200 	.word	0x50040200
 8001d6c:	50040300 	.word	0x50040300
 8001d70:	fff0c007 	.word	0xfff0c007

08001d74 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d7c:	4857      	ldr	r0, [pc, #348]	; (8001edc <HAL_ADC_Start+0x168>)
 8001d7e:	f7ff fd8f 	bl	80018a0 <LL_ADC_GetMultimode>
 8001d82:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fe69 	bl	8001a60 <LL_ADC_REG_IsConversionOngoing>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f040 809c 	bne.w	8001ece <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_ADC_Start+0x30>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e097      	b.n	8001ed4 <HAL_ADC_Start+0x160>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fe63 	bl	8002a78 <ADC_Enable>
 8001db2:	4603      	mov	r3, r0
 8001db4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001db6:	7dfb      	ldrb	r3, [r7, #23]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f040 8083 	bne.w	8001ec4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dc6:	f023 0301 	bic.w	r3, r3, #1
 8001dca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a42      	ldr	r2, [pc, #264]	; (8001ee0 <HAL_ADC_Start+0x16c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d002      	beq.n	8001de2 <HAL_ADC_Start+0x6e>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	e000      	b.n	8001de4 <HAL_ADC_Start+0x70>
 8001de2:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <HAL_ADC_Start+0x170>)
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d002      	beq.n	8001df2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d105      	bne.n	8001dfe <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e0a:	d106      	bne.n	8001e1a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e10:	f023 0206 	bic.w	r2, r3, #6
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	659a      	str	r2, [r3, #88]	; 0x58
 8001e18:	e002      	b.n	8001e20 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	221c      	movs	r2, #28
 8001e26:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a2a      	ldr	r2, [pc, #168]	; (8001ee0 <HAL_ADC_Start+0x16c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d002      	beq.n	8001e40 <HAL_ADC_Start+0xcc>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	e000      	b.n	8001e42 <HAL_ADC_Start+0xce>
 8001e40:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <HAL_ADC_Start+0x170>)
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d008      	beq.n	8001e5c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	2b05      	cmp	r3, #5
 8001e54:	d002      	beq.n	8001e5c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b09      	cmp	r3, #9
 8001e5a:	d114      	bne.n	8001e86 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d007      	beq.n	8001e7a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fdc6 	bl	8001a10 <LL_ADC_REG_StartConversion>
 8001e84:	e025      	b.n	8001ed2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <HAL_ADC_Start+0x16c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d002      	beq.n	8001ea2 <HAL_ADC_Start+0x12e>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	e000      	b.n	8001ea4 <HAL_ADC_Start+0x130>
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_ADC_Start+0x170>)
 8001ea4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00f      	beq.n	8001ed2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001eba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54
 8001ec2:	e006      	b.n	8001ed2 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001ecc:	e001      	b.n	8001ed2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	50040300 	.word	0x50040300
 8001ee0:	50040100 	.word	0x50040100
 8001ee4:	50040000 	.word	0x50040000

08001ee8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_Stop+0x16>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e023      	b.n	8001f46 <HAL_ADC_Stop+0x5e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001f06:	2103      	movs	r1, #3
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fcf9 	bl	8002900 <ADC_ConversionStop>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d111      	bne.n	8001f3c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fe33 	bl	8002b84 <ADC_Disable>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d109      	bne.n	8001f3c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	f043 0201 	orr.w	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f5a:	4866      	ldr	r0, [pc, #408]	; (80020f4 <HAL_ADC_PollForConversion+0x1a4>)
 8001f5c:	f7ff fca0 	bl	80018a0 <LL_ADC_GetMultimode>
 8001f60:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d102      	bne.n	8001f70 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f6a:	2308      	movs	r3, #8
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e02a      	b.n	8001fc6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d005      	beq.n	8001f82 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2b05      	cmp	r3, #5
 8001f7a:	d002      	beq.n	8001f82 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2b09      	cmp	r3, #9
 8001f80:	d111      	bne.n	8001fa6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d007      	beq.n	8001fa0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	f043 0220 	orr.w	r2, r3, #32
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0a4      	b.n	80020ea <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001fa4:	e00f      	b.n	8001fc6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001fa6:	4853      	ldr	r0, [pc, #332]	; (80020f4 <HAL_ADC_PollForConversion+0x1a4>)
 8001fa8:	f7ff fc88 	bl	80018bc <LL_ADC_GetMultiDMATransfer>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d007      	beq.n	8001fc2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb6:	f043 0220 	orr.w	r2, r3, #32
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e093      	b.n	80020ea <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001fc6:	f7ff fb47 	bl	8001658 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fcc:	e021      	b.n	8002012 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fd4:	d01d      	beq.n	8002012 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001fd6:	f7ff fb3f 	bl	8001658 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d302      	bcc.n	8001fec <HAL_ADC_PollForConversion+0x9c>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d112      	bne.n	8002012 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10b      	bne.n	8002012 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	f043 0204 	orr.w	r2, r3, #4
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e06b      	b.n	80020ea <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	4013      	ands	r3, r2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0d6      	beq.n	8001fce <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002024:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fba6 	bl	8001782 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01c      	beq.n	8002076 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	7e5b      	ldrb	r3, [r3, #25]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d118      	bne.n	8002076 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b08      	cmp	r3, #8
 8002050:	d111      	bne.n	8002076 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002056:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d105      	bne.n	8002076 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206e:	f043 0201 	orr.w	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a1f      	ldr	r2, [pc, #124]	; (80020f8 <HAL_ADC_PollForConversion+0x1a8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d002      	beq.n	8002086 <HAL_ADC_PollForConversion+0x136>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	e000      	b.n	8002088 <HAL_ADC_PollForConversion+0x138>
 8002086:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <HAL_ADC_PollForConversion+0x1ac>)
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	4293      	cmp	r3, r2
 800208e:	d008      	beq.n	80020a2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2b05      	cmp	r3, #5
 800209a:	d002      	beq.n	80020a2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2b09      	cmp	r3, #9
 80020a0:	d104      	bne.n	80020ac <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	e00c      	b.n	80020c6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a11      	ldr	r2, [pc, #68]	; (80020f8 <HAL_ADC_PollForConversion+0x1a8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d002      	beq.n	80020bc <HAL_ADC_PollForConversion+0x16c>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	e000      	b.n	80020be <HAL_ADC_PollForConversion+0x16e>
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <HAL_ADC_PollForConversion+0x1ac>)
 80020be:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d104      	bne.n	80020d6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2208      	movs	r2, #8
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e008      	b.n	80020e8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d103      	bne.n	80020e8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	220c      	movs	r2, #12
 80020e6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3720      	adds	r7, #32
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	50040300 	.word	0x50040300
 80020f8:	50040100 	.word	0x50040100
 80020fc:	50040000 	.word	0x50040000

08002100 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b0b6      	sub	sp, #216	; 0xd8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_ADC_ConfigChannel+0x22>
 800213a:	2302      	movs	r3, #2
 800213c:	e3c9      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x7b6>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fc88 	bl	8001a60 <LL_ADC_REG_IsConversionOngoing>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 83aa 	bne.w	80028ac <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b05      	cmp	r3, #5
 8002166:	d824      	bhi.n	80021b2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	3b02      	subs	r3, #2
 800216e:	2b03      	cmp	r3, #3
 8002170:	d81b      	bhi.n	80021aa <HAL_ADC_ConfigChannel+0x8e>
 8002172:	a201      	add	r2, pc, #4	; (adr r2, 8002178 <HAL_ADC_ConfigChannel+0x5c>)
 8002174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002178:	08002189 	.word	0x08002189
 800217c:	08002191 	.word	0x08002191
 8002180:	08002199 	.word	0x08002199
 8002184:	080021a1 	.word	0x080021a1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002188:	230c      	movs	r3, #12
 800218a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800218e:	e010      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002190:	2312      	movs	r3, #18
 8002192:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002196:	e00c      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002198:	2318      	movs	r3, #24
 800219a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800219e:	e008      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80021a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80021a8:	e003      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80021aa:	2306      	movs	r3, #6
 80021ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80021b0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80021c0:	f7ff faf2 	bl	80017a8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fc49 	bl	8001a60 <LL_ADC_REG_IsConversionOngoing>
 80021ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fc69 	bl	8001aae <LL_ADC_INJ_IsConversionOngoing>
 80021dc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f040 81a4 	bne.w	8002532 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 819f 	bne.w	8002532 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	6819      	ldr	r1, [r3, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	461a      	mov	r2, r3
 8002202:	f7ff fafd 	bl	8001800 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	08db      	lsrs	r3, r3, #3
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	2b04      	cmp	r3, #4
 8002226:	d00a      	beq.n	800223e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	6919      	ldr	r1, [r3, #16]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002238:	f7ff fa4e 	bl	80016d8 <LL_ADC_SetOffset>
 800223c:	e179      	b.n	8002532 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fa6b 	bl	8001720 <LL_ADC_GetOffsetChannel>
 800224a:	4603      	mov	r3, r0
 800224c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10a      	bne.n	800226a <HAL_ADC_ConfigChannel+0x14e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fa60 	bl	8001720 <LL_ADC_GetOffsetChannel>
 8002260:	4603      	mov	r3, r0
 8002262:	0e9b      	lsrs	r3, r3, #26
 8002264:	f003 021f 	and.w	r2, r3, #31
 8002268:	e01e      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x18c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fa55 	bl	8001720 <LL_ADC_GetOffsetChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002288:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800228c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002290:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002298:	2320      	movs	r3, #32
 800229a:	e004      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800229c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d105      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x1a4>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0e9b      	lsrs	r3, r3, #26
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	e018      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x1d6>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022cc:	fa93 f3a3 	rbit	r3, r3
 80022d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80022d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80022dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80022e4:	2320      	movs	r3, #32
 80022e6:	e004      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80022e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d106      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2200      	movs	r2, #0
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fa24 	bl	800174c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2101      	movs	r1, #1
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fa08 	bl	8001720 <LL_ADC_GetOffsetChannel>
 8002310:	4603      	mov	r3, r0
 8002312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10a      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x214>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2101      	movs	r1, #1
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff f9fd 	bl	8001720 <LL_ADC_GetOffsetChannel>
 8002326:	4603      	mov	r3, r0
 8002328:	0e9b      	lsrs	r3, r3, #26
 800232a:	f003 021f 	and.w	r2, r3, #31
 800232e:	e01e      	b.n	800236e <HAL_ADC_ConfigChannel+0x252>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2101      	movs	r1, #1
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff f9f2 	bl	8001720 <LL_ADC_GetOffsetChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800234e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002352:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002356:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800235e:	2320      	movs	r3, #32
 8002360:	e004      	b.n	800236c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002362:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002376:	2b00      	cmp	r3, #0
 8002378:	d105      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x26a>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	0e9b      	lsrs	r3, r3, #26
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	e018      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x29c>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800239a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800239e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80023a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80023aa:	2320      	movs	r3, #32
 80023ac:	e004      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80023ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023b2:	fab3 f383 	clz	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d106      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2200      	movs	r2, #0
 80023c2:	2101      	movs	r1, #1
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff f9c1 	bl	800174c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2102      	movs	r1, #2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff f9a5 	bl	8001720 <LL_ADC_GetOffsetChannel>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10a      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x2da>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2102      	movs	r1, #2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff f99a 	bl	8001720 <LL_ADC_GetOffsetChannel>
 80023ec:	4603      	mov	r3, r0
 80023ee:	0e9b      	lsrs	r3, r3, #26
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	e01e      	b.n	8002434 <HAL_ADC_ConfigChannel+0x318>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2102      	movs	r1, #2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff f98f 	bl	8001720 <LL_ADC_GetOffsetChannel>
 8002402:	4603      	mov	r3, r0
 8002404:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002414:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002418:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800241c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002424:	2320      	movs	r3, #32
 8002426:	e004      	b.n	8002432 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002428:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <HAL_ADC_ConfigChannel+0x330>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	0e9b      	lsrs	r3, r3, #26
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	e014      	b.n	8002476 <HAL_ADC_ConfigChannel+0x35a>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800245a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800245c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002460:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002468:	2320      	movs	r3, #32
 800246a:	e004      	b.n	8002476 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800246c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002476:	429a      	cmp	r2, r3
 8002478:	d106      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2200      	movs	r2, #0
 8002480:	2102      	movs	r1, #2
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff f962 	bl	800174c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2103      	movs	r1, #3
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff f946 	bl	8001720 <LL_ADC_GetOffsetChannel>
 8002494:	4603      	mov	r3, r0
 8002496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10a      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x398>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2103      	movs	r1, #3
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff f93b 	bl	8001720 <LL_ADC_GetOffsetChannel>
 80024aa:	4603      	mov	r3, r0
 80024ac:	0e9b      	lsrs	r3, r3, #26
 80024ae:	f003 021f 	and.w	r2, r3, #31
 80024b2:	e017      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x3c8>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2103      	movs	r1, #3
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff f930 	bl	8001720 <LL_ADC_GetOffsetChannel>
 80024c0:	4603      	mov	r3, r0
 80024c2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024c6:	fa93 f3a3 	rbit	r3, r3
 80024ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80024cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ce:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80024d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80024d6:	2320      	movs	r3, #32
 80024d8:	e003      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80024da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d105      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x3e0>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	0e9b      	lsrs	r3, r3, #26
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	e011      	b.n	8002520 <HAL_ADC_ConfigChannel+0x404>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800250a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800250c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800250e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	e003      	b.n	8002520 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002518:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002520:	429a      	cmp	r2, r3
 8002522:	d106      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2200      	movs	r2, #0
 800252a:	2103      	movs	r1, #3
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff f90d 	bl	800174c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fa44 	bl	80019c4 <LL_ADC_IsEnabled>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 8140 	bne.w	80027c4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	461a      	mov	r2, r3
 8002552:	f7ff f981 	bl	8001858 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	4a8f      	ldr	r2, [pc, #572]	; (8002798 <HAL_ADC_ConfigChannel+0x67c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	f040 8131 	bne.w	80027c4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10b      	bne.n	800258a <HAL_ADC_ConfigChannel+0x46e>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	0e9b      	lsrs	r3, r3, #26
 8002578:	3301      	adds	r3, #1
 800257a:	f003 031f 	and.w	r3, r3, #31
 800257e:	2b09      	cmp	r3, #9
 8002580:	bf94      	ite	ls
 8002582:	2301      	movls	r3, #1
 8002584:	2300      	movhi	r3, #0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	e019      	b.n	80025be <HAL_ADC_ConfigChannel+0x4a2>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800259a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800259c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80025a2:	2320      	movs	r3, #32
 80025a4:	e003      	b.n	80025ae <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80025a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	2b09      	cmp	r3, #9
 80025b6:	bf94      	ite	ls
 80025b8:	2301      	movls	r3, #1
 80025ba:	2300      	movhi	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d079      	beq.n	80026b6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d107      	bne.n	80025de <HAL_ADC_ConfigChannel+0x4c2>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	0e9b      	lsrs	r3, r3, #26
 80025d4:	3301      	adds	r3, #1
 80025d6:	069b      	lsls	r3, r3, #26
 80025d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025dc:	e015      	b.n	800260a <HAL_ADC_ConfigChannel+0x4ee>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e6:	fa93 f3a3 	rbit	r3, r3
 80025ea:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80025ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ee:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80025f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80025f6:	2320      	movs	r3, #32
 80025f8:	e003      	b.n	8002602 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80025fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	3301      	adds	r3, #1
 8002604:	069b      	lsls	r3, r3, #26
 8002606:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <HAL_ADC_ConfigChannel+0x50e>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	0e9b      	lsrs	r3, r3, #26
 800261c:	3301      	adds	r3, #1
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	2101      	movs	r1, #1
 8002624:	fa01 f303 	lsl.w	r3, r1, r3
 8002628:	e017      	b.n	800265a <HAL_ADC_ConfigChannel+0x53e>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800263c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002642:	2320      	movs	r3, #32
 8002644:	e003      	b.n	800264e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002648:	fab3 f383 	clz	r3, r3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	3301      	adds	r3, #1
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	2101      	movs	r1, #1
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	ea42 0103 	orr.w	r1, r2, r3
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10a      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x564>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	0e9b      	lsrs	r3, r3, #26
 8002670:	3301      	adds	r3, #1
 8002672:	f003 021f 	and.w	r2, r3, #31
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	051b      	lsls	r3, r3, #20
 800267e:	e018      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x596>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002698:	2320      	movs	r3, #32
 800269a:	e003      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	3301      	adds	r3, #1
 80026a6:	f003 021f 	and.w	r2, r3, #31
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026b2:	430b      	orrs	r3, r1
 80026b4:	e081      	b.n	80027ba <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d107      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x5b6>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	0e9b      	lsrs	r3, r3, #26
 80026c8:	3301      	adds	r3, #1
 80026ca:	069b      	lsls	r3, r3, #26
 80026cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026d0:	e015      	b.n	80026fe <HAL_ADC_ConfigChannel+0x5e2>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80026e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80026ea:	2320      	movs	r3, #32
 80026ec:	e003      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	fab3 f383 	clz	r3, r3
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	3301      	adds	r3, #1
 80026f8:	069b      	lsls	r3, r3, #26
 80026fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <HAL_ADC_ConfigChannel+0x602>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	0e9b      	lsrs	r3, r3, #26
 8002710:	3301      	adds	r3, #1
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	2101      	movs	r1, #1
 8002718:	fa01 f303 	lsl.w	r3, r1, r3
 800271c:	e017      	b.n	800274e <HAL_ADC_ConfigChannel+0x632>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	61bb      	str	r3, [r7, #24]
  return result;
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002736:	2320      	movs	r3, #32
 8002738:	e003      	b.n	8002742 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	fab3 f383 	clz	r3, r3
 8002740:	b2db      	uxtb	r3, r3
 8002742:	3301      	adds	r3, #1
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	2101      	movs	r1, #1
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	ea42 0103 	orr.w	r1, r2, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10d      	bne.n	800277a <HAL_ADC_ConfigChannel+0x65e>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0e9b      	lsrs	r3, r3, #26
 8002764:	3301      	adds	r3, #1
 8002766:	f003 021f 	and.w	r2, r3, #31
 800276a:	4613      	mov	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4413      	add	r3, r2
 8002770:	3b1e      	subs	r3, #30
 8002772:	051b      	lsls	r3, r3, #20
 8002774:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002778:	e01e      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x69c>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	60fb      	str	r3, [r7, #12]
  return result;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d104      	bne.n	800279c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002792:	2320      	movs	r3, #32
 8002794:	e006      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x688>
 8002796:	bf00      	nop
 8002798:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	fab3 f383 	clz	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	3301      	adds	r3, #1
 80027a6:	f003 021f 	and.w	r2, r3, #31
 80027aa:	4613      	mov	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	3b1e      	subs	r3, #30
 80027b2:	051b      	lsls	r3, r3, #20
 80027b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027be:	4619      	mov	r1, r3
 80027c0:	f7ff f81e 	bl	8001800 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b44      	ldr	r3, [pc, #272]	; (80028dc <HAL_ADC_ConfigChannel+0x7c0>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d07a      	beq.n	80028c6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027d0:	4843      	ldr	r0, [pc, #268]	; (80028e0 <HAL_ADC_ConfigChannel+0x7c4>)
 80027d2:	f7fe ff73 	bl	80016bc <LL_ADC_GetCommonPathInternalCh>
 80027d6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a41      	ldr	r2, [pc, #260]	; (80028e4 <HAL_ADC_ConfigChannel+0x7c8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d12c      	bne.n	800283e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d126      	bne.n	800283e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a3c      	ldr	r2, [pc, #240]	; (80028e8 <HAL_ADC_ConfigChannel+0x7cc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d004      	beq.n	8002804 <HAL_ADC_ConfigChannel+0x6e8>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a3b      	ldr	r2, [pc, #236]	; (80028ec <HAL_ADC_ConfigChannel+0x7d0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d15d      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002804:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002808:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800280c:	4619      	mov	r1, r3
 800280e:	4834      	ldr	r0, [pc, #208]	; (80028e0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002810:	f7fe ff41 	bl	8001696 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002814:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	099b      	lsrs	r3, r3, #6
 800281a:	4a36      	ldr	r2, [pc, #216]	; (80028f4 <HAL_ADC_ConfigChannel+0x7d8>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	099b      	lsrs	r3, r3, #6
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	4613      	mov	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800282e:	e002      	b.n	8002836 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	3b01      	subs	r3, #1
 8002834:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f9      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800283c:	e040      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a2d      	ldr	r2, [pc, #180]	; (80028f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d118      	bne.n	800287a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002848:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800284c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d112      	bne.n	800287a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a23      	ldr	r2, [pc, #140]	; (80028e8 <HAL_ADC_ConfigChannel+0x7cc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d004      	beq.n	8002868 <HAL_ADC_ConfigChannel+0x74c>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a22      	ldr	r2, [pc, #136]	; (80028ec <HAL_ADC_ConfigChannel+0x7d0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d12d      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002868:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800286c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002870:	4619      	mov	r1, r3
 8002872:	481b      	ldr	r0, [pc, #108]	; (80028e0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002874:	f7fe ff0f 	bl	8001696 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002878:	e024      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a1f      	ldr	r2, [pc, #124]	; (80028fc <HAL_ADC_ConfigChannel+0x7e0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d120      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002884:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d11a      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d115      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800289a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800289e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028a2:	4619      	mov	r1, r3
 80028a4:	480e      	ldr	r0, [pc, #56]	; (80028e0 <HAL_ADC_ConfigChannel+0x7c4>)
 80028a6:	f7fe fef6 	bl	8001696 <LL_ADC_SetCommonPathInternalCh>
 80028aa:	e00c      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80028be:	e002      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028c0:	bf00      	nop
 80028c2:	e000      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	37d8      	adds	r7, #216	; 0xd8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	80080000 	.word	0x80080000
 80028e0:	50040300 	.word	0x50040300
 80028e4:	c7520000 	.word	0xc7520000
 80028e8:	50040000 	.word	0x50040000
 80028ec:	50040200 	.word	0x50040200
 80028f0:	20000224 	.word	0x20000224
 80028f4:	053e2d63 	.word	0x053e2d63
 80028f8:	cb840000 	.word	0xcb840000
 80028fc:	80000001 	.word	0x80000001

08002900 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff f8a2 	bl	8001a60 <LL_ADC_REG_IsConversionOngoing>
 800291c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff f8c3 	bl	8001aae <LL_ADC_INJ_IsConversionOngoing>
 8002928:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d103      	bne.n	8002938 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8098 	beq.w	8002a68 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d02a      	beq.n	800299c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	7e5b      	ldrb	r3, [r3, #25]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d126      	bne.n	800299c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7e1b      	ldrb	r3, [r3, #24]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d122      	bne.n	800299c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002956:	2301      	movs	r3, #1
 8002958:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800295a:	e014      	b.n	8002986 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	4a45      	ldr	r2, [pc, #276]	; (8002a74 <ADC_ConversionStop+0x174>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d90d      	bls.n	8002980 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002968:	f043 0210 	orr.w	r2, r3, #16
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002974:	f043 0201 	orr.w	r2, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e074      	b.n	8002a6a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	3301      	adds	r3, #1
 8002984:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002990:	2b40      	cmp	r3, #64	; 0x40
 8002992:	d1e3      	bne.n	800295c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2240      	movs	r2, #64	; 0x40
 800299a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d014      	beq.n	80029cc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff f85a 	bl	8001a60 <LL_ADC_REG_IsConversionOngoing>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00c      	beq.n	80029cc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff f817 	bl	80019ea <LL_ADC_IsDisableOngoing>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d104      	bne.n	80029cc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff f836 	bl	8001a38 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d014      	beq.n	80029fc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff f869 	bl	8001aae <LL_ADC_INJ_IsConversionOngoing>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00c      	beq.n	80029fc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe ffff 	bl	80019ea <LL_ADC_IsDisableOngoing>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d104      	bne.n	80029fc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff f845 	bl	8001a86 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d005      	beq.n	8002a0e <ADC_ConversionStop+0x10e>
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d105      	bne.n	8002a14 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002a08:	230c      	movs	r3, #12
 8002a0a:	617b      	str	r3, [r7, #20]
        break;
 8002a0c:	e005      	b.n	8002a1a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a0e:	2308      	movs	r3, #8
 8002a10:	617b      	str	r3, [r7, #20]
        break;
 8002a12:	e002      	b.n	8002a1a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a14:	2304      	movs	r3, #4
 8002a16:	617b      	str	r3, [r7, #20]
        break;
 8002a18:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002a1a:	f7fe fe1d 	bl	8001658 <HAL_GetTick>
 8002a1e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a20:	e01b      	b.n	8002a5a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002a22:	f7fe fe19 	bl	8001658 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b05      	cmp	r3, #5
 8002a2e:	d914      	bls.n	8002a5a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00d      	beq.n	8002a5a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a42:	f043 0210 	orr.w	r2, r3, #16
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	f043 0201 	orr.w	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e007      	b.n	8002a6a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1dc      	bne.n	8002a22 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	a33fffff 	.word	0xa33fffff

08002a78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe ff9b 	bl	80019c4 <LL_ADC_IsEnabled>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d169      	bne.n	8002b68 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <ADC_Enable+0xfc>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00d      	beq.n	8002abe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa6:	f043 0210 	orr.w	r2, r3, #16
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab2:	f043 0201 	orr.w	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e055      	b.n	8002b6a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe ff56 	bl	8001974 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ac8:	482b      	ldr	r0, [pc, #172]	; (8002b78 <ADC_Enable+0x100>)
 8002aca:	f7fe fdf7 	bl	80016bc <LL_ADC_GetCommonPathInternalCh>
 8002ace:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ad0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d013      	beq.n	8002b00 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ad8:	4b28      	ldr	r3, [pc, #160]	; (8002b7c <ADC_Enable+0x104>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	099b      	lsrs	r3, r3, #6
 8002ade:	4a28      	ldr	r2, [pc, #160]	; (8002b80 <ADC_Enable+0x108>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	099b      	lsrs	r3, r3, #6
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	4613      	mov	r3, r2
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002af2:	e002      	b.n	8002afa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1f9      	bne.n	8002af4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b00:	f7fe fdaa 	bl	8001658 <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b06:	e028      	b.n	8002b5a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe ff59 	bl	80019c4 <LL_ADC_IsEnabled>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d104      	bne.n	8002b22 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe ff29 	bl	8001974 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b22:	f7fe fd99 	bl	8001658 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d914      	bls.n	8002b5a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d00d      	beq.n	8002b5a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	f043 0210 	orr.w	r2, r3, #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4e:	f043 0201 	orr.w	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e007      	b.n	8002b6a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d1cf      	bne.n	8002b08 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	8000003f 	.word	0x8000003f
 8002b78:	50040300 	.word	0x50040300
 8002b7c:	20000224 	.word	0x20000224
 8002b80:	053e2d63 	.word	0x053e2d63

08002b84 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe ff2a 	bl	80019ea <LL_ADC_IsDisableOngoing>
 8002b96:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe ff11 	bl	80019c4 <LL_ADC_IsEnabled>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d047      	beq.n	8002c38 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d144      	bne.n	8002c38 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 030d 	and.w	r3, r3, #13
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d10c      	bne.n	8002bd6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fe feeb 	bl	800199c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2203      	movs	r2, #3
 8002bcc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bce:	f7fe fd43 	bl	8001658 <HAL_GetTick>
 8002bd2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bd4:	e029      	b.n	8002c2a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bda:	f043 0210 	orr.w	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be6:	f043 0201 	orr.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e023      	b.n	8002c3a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bf2:	f7fe fd31 	bl	8001658 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d914      	bls.n	8002c2a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00d      	beq.n	8002c2a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	f043 0210 	orr.w	r2, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	f043 0201 	orr.w	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e007      	b.n	8002c3a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1dc      	bne.n	8002bf2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <LL_ADC_IsEnabled>:
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <LL_ADC_IsEnabled+0x18>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <LL_ADC_IsEnabled+0x1a>
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <LL_ADC_StartCalibration>:
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002c7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	609a      	str	r2, [r3, #8]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <LL_ADC_IsCalibrationOnGoing>:
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002caa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cae:	d101      	bne.n	8002cb4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d101      	bne.n	8002cda <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADCEx_Calibration_Start+0x1c>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e04d      	b.n	8002da0 <HAL_ADCEx_Calibration_Start+0xb8>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ff39 	bl	8002b84 <ADC_Disable>
 8002d12:	4603      	mov	r3, r0
 8002d14:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d136      	bne.n	8002d8a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d24:	f023 0302 	bic.w	r3, r3, #2
 8002d28:	f043 0202 	orr.w	r2, r3, #2
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6839      	ldr	r1, [r7, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff ff96 	bl	8002c68 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d3c:	e014      	b.n	8002d68 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	3301      	adds	r3, #1
 8002d42:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002d4a:	d30d      	bcc.n	8002d68 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f023 0312 	bic.w	r3, r3, #18
 8002d54:	f043 0210 	orr.w	r2, r3, #16
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e01b      	b.n	8002da0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff ff94 	bl	8002c9a <LL_ADC_IsCalibrationOnGoing>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e2      	bne.n	8002d3e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7c:	f023 0303 	bic.w	r3, r3, #3
 8002d80:	f043 0201 	orr.w	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54
 8002d88:	e005      	b.n	8002d96 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8e:	f043 0210 	orr.w	r2, r3, #16
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b09f      	sub	sp, #124	; 0x7c
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e093      	b.n	8002eee <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002dce:	2300      	movs	r3, #0
 8002dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a47      	ldr	r2, [pc, #284]	; (8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d102      	bne.n	8002de6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002de0:	4b46      	ldr	r3, [pc, #280]	; (8002efc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	e001      	b.n	8002dea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002de6:	2300      	movs	r3, #0
 8002de8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10b      	bne.n	8002e08 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df4:	f043 0220 	orr.w	r2, r3, #32
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e072      	b.n	8002eee <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff59 	bl	8002cc2 <LL_ADC_REG_IsConversionOngoing>
 8002e10:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ff53 	bl	8002cc2 <LL_ADC_REG_IsConversionOngoing>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d154      	bne.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002e22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d151      	bne.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e28:	4b35      	ldr	r3, [pc, #212]	; (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002e2a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d02c      	beq.n	8002e8e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	6859      	ldr	r1, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e46:	035b      	lsls	r3, r3, #13
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e50:	4829      	ldr	r0, [pc, #164]	; (8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e52:	f7ff fef6 	bl	8002c42 <LL_ADC_IsEnabled>
 8002e56:	4604      	mov	r4, r0
 8002e58:	4828      	ldr	r0, [pc, #160]	; (8002efc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e5a:	f7ff fef2 	bl	8002c42 <LL_ADC_IsEnabled>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	431c      	orrs	r4, r3
 8002e62:	4828      	ldr	r0, [pc, #160]	; (8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002e64:	f7ff feed 	bl	8002c42 <LL_ADC_IsEnabled>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	4323      	orrs	r3, r4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d137      	bne.n	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e78:	f023 030f 	bic.w	r3, r3, #15
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	6811      	ldr	r1, [r2, #0]
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	6892      	ldr	r2, [r2, #8]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	431a      	orrs	r2, r3
 8002e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e8c:	e028      	b.n	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e98:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e9a:	4817      	ldr	r0, [pc, #92]	; (8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e9c:	f7ff fed1 	bl	8002c42 <LL_ADC_IsEnabled>
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	4816      	ldr	r0, [pc, #88]	; (8002efc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ea4:	f7ff fecd 	bl	8002c42 <LL_ADC_IsEnabled>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	431c      	orrs	r4, r3
 8002eac:	4815      	ldr	r0, [pc, #84]	; (8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002eae:	f7ff fec8 	bl	8002c42 <LL_ADC_IsEnabled>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4323      	orrs	r3, r4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d112      	bne.n	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ec2:	f023 030f 	bic.w	r3, r3, #15
 8002ec6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ec8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002eca:	e009      	b.n	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	f043 0220 	orr.w	r2, r3, #32
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ede:	e000      	b.n	8002ee2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ee0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002eea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	377c      	adds	r7, #124	; 0x7c
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd90      	pop	{r4, r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	50040000 	.word	0x50040000
 8002efc:	50040100 	.word	0x50040100
 8002f00:	50040300 	.word	0x50040300
 8002f04:	50040200 	.word	0x50040200

08002f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <__NVIC_SetPriorityGrouping+0x44>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f24:	4013      	ands	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f3a:	4a04      	ldr	r2, [pc, #16]	; (8002f4c <__NVIC_SetPriorityGrouping+0x44>)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	60d3      	str	r3, [r2, #12]
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f54:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <__NVIC_GetPriorityGrouping+0x18>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	0a1b      	lsrs	r3, r3, #8
 8002f5a:	f003 0307 	and.w	r3, r3, #7
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	db0b      	blt.n	8002f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	f003 021f 	and.w	r2, r3, #31
 8002f84:	4907      	ldr	r1, [pc, #28]	; (8002fa4 <__NVIC_EnableIRQ+0x38>)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	e000e100 	.word	0xe000e100

08002fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	6039      	str	r1, [r7, #0]
 8002fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	db0a      	blt.n	8002fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	490c      	ldr	r1, [pc, #48]	; (8002ff4 <__NVIC_SetPriority+0x4c>)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	0112      	lsls	r2, r2, #4
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	440b      	add	r3, r1
 8002fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd0:	e00a      	b.n	8002fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4908      	ldr	r1, [pc, #32]	; (8002ff8 <__NVIC_SetPriority+0x50>)
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	3b04      	subs	r3, #4
 8002fe0:	0112      	lsls	r2, r2, #4
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	761a      	strb	r2, [r3, #24]
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000e100 	.word	0xe000e100
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b089      	sub	sp, #36	; 0x24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f1c3 0307 	rsb	r3, r3, #7
 8003016:	2b04      	cmp	r3, #4
 8003018:	bf28      	it	cs
 800301a:	2304      	movcs	r3, #4
 800301c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3304      	adds	r3, #4
 8003022:	2b06      	cmp	r3, #6
 8003024:	d902      	bls.n	800302c <NVIC_EncodePriority+0x30>
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3b03      	subs	r3, #3
 800302a:	e000      	b.n	800302e <NVIC_EncodePriority+0x32>
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43da      	mvns	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	401a      	ands	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003044:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	fa01 f303 	lsl.w	r3, r1, r3
 800304e:	43d9      	mvns	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003054:	4313      	orrs	r3, r2
         );
}
 8003056:	4618      	mov	r0, r3
 8003058:	3724      	adds	r7, #36	; 0x24
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff ff4c 	bl	8002f08 <__NVIC_SetPriorityGrouping>
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800308a:	f7ff ff61 	bl	8002f50 <__NVIC_GetPriorityGrouping>
 800308e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	6978      	ldr	r0, [r7, #20]
 8003096:	f7ff ffb1 	bl	8002ffc <NVIC_EncodePriority>
 800309a:	4602      	mov	r2, r0
 800309c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff ff80 	bl	8002fa8 <__NVIC_SetPriority>
}
 80030a8:	bf00      	nop
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff ff54 	bl	8002f6c <__NVIC_EnableIRQ>
}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030da:	e17f      	b.n	80033dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	2101      	movs	r1, #1
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	fa01 f303 	lsl.w	r3, r1, r3
 80030e8:	4013      	ands	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 8171 	beq.w	80033d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d005      	beq.n	800310c <HAL_GPIO_Init+0x40>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d130      	bne.n	800316e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003142:	2201      	movs	r2, #1
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4013      	ands	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	f003 0201 	and.w	r2, r3, #1
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	2b03      	cmp	r3, #3
 8003178:	d118      	bne.n	80031ac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003180:	2201      	movs	r2, #1
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4013      	ands	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	08db      	lsrs	r3, r3, #3
 8003196:	f003 0201 	and.w	r2, r3, #1
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d017      	beq.n	80031e8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	2203      	movs	r2, #3
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4013      	ands	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d123      	bne.n	800323c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	08da      	lsrs	r2, r3, #3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3208      	adds	r2, #8
 80031fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	220f      	movs	r2, #15
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4013      	ands	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	08da      	lsrs	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3208      	adds	r2, #8
 8003236:	6939      	ldr	r1, [r7, #16]
 8003238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	2203      	movs	r2, #3
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4013      	ands	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0203 	and.w	r2, r3, #3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 80ac 	beq.w	80033d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327e:	4b5f      	ldr	r3, [pc, #380]	; (80033fc <HAL_GPIO_Init+0x330>)
 8003280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003282:	4a5e      	ldr	r2, [pc, #376]	; (80033fc <HAL_GPIO_Init+0x330>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	6613      	str	r3, [r2, #96]	; 0x60
 800328a:	4b5c      	ldr	r3, [pc, #368]	; (80033fc <HAL_GPIO_Init+0x330>)
 800328c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003296:	4a5a      	ldr	r2, [pc, #360]	; (8003400 <HAL_GPIO_Init+0x334>)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	3302      	adds	r3, #2
 800329e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	220f      	movs	r2, #15
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4013      	ands	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032c0:	d025      	beq.n	800330e <HAL_GPIO_Init+0x242>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a4f      	ldr	r2, [pc, #316]	; (8003404 <HAL_GPIO_Init+0x338>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d01f      	beq.n	800330a <HAL_GPIO_Init+0x23e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a4e      	ldr	r2, [pc, #312]	; (8003408 <HAL_GPIO_Init+0x33c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d019      	beq.n	8003306 <HAL_GPIO_Init+0x23a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a4d      	ldr	r2, [pc, #308]	; (800340c <HAL_GPIO_Init+0x340>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <HAL_GPIO_Init+0x236>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a4c      	ldr	r2, [pc, #304]	; (8003410 <HAL_GPIO_Init+0x344>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00d      	beq.n	80032fe <HAL_GPIO_Init+0x232>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4b      	ldr	r2, [pc, #300]	; (8003414 <HAL_GPIO_Init+0x348>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d007      	beq.n	80032fa <HAL_GPIO_Init+0x22e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a4a      	ldr	r2, [pc, #296]	; (8003418 <HAL_GPIO_Init+0x34c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d101      	bne.n	80032f6 <HAL_GPIO_Init+0x22a>
 80032f2:	2306      	movs	r3, #6
 80032f4:	e00c      	b.n	8003310 <HAL_GPIO_Init+0x244>
 80032f6:	2307      	movs	r3, #7
 80032f8:	e00a      	b.n	8003310 <HAL_GPIO_Init+0x244>
 80032fa:	2305      	movs	r3, #5
 80032fc:	e008      	b.n	8003310 <HAL_GPIO_Init+0x244>
 80032fe:	2304      	movs	r3, #4
 8003300:	e006      	b.n	8003310 <HAL_GPIO_Init+0x244>
 8003302:	2303      	movs	r3, #3
 8003304:	e004      	b.n	8003310 <HAL_GPIO_Init+0x244>
 8003306:	2302      	movs	r3, #2
 8003308:	e002      	b.n	8003310 <HAL_GPIO_Init+0x244>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_GPIO_Init+0x244>
 800330e:	2300      	movs	r3, #0
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	f002 0203 	and.w	r2, r2, #3
 8003316:	0092      	lsls	r2, r2, #2
 8003318:	4093      	lsls	r3, r2
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003320:	4937      	ldr	r1, [pc, #220]	; (8003400 <HAL_GPIO_Init+0x334>)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	089b      	lsrs	r3, r3, #2
 8003326:	3302      	adds	r3, #2
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800332e:	4b3b      	ldr	r3, [pc, #236]	; (800341c <HAL_GPIO_Init+0x350>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	43db      	mvns	r3, r3
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4013      	ands	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003352:	4a32      	ldr	r2, [pc, #200]	; (800341c <HAL_GPIO_Init+0x350>)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003358:	4b30      	ldr	r3, [pc, #192]	; (800341c <HAL_GPIO_Init+0x350>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	43db      	mvns	r3, r3
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4013      	ands	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800337c:	4a27      	ldr	r2, [pc, #156]	; (800341c <HAL_GPIO_Init+0x350>)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003382:	4b26      	ldr	r3, [pc, #152]	; (800341c <HAL_GPIO_Init+0x350>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	43db      	mvns	r3, r3
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	4013      	ands	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033a6:	4a1d      	ldr	r2, [pc, #116]	; (800341c <HAL_GPIO_Init+0x350>)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033ac:	4b1b      	ldr	r3, [pc, #108]	; (800341c <HAL_GPIO_Init+0x350>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033d0:	4a12      	ldr	r2, [pc, #72]	; (800341c <HAL_GPIO_Init+0x350>)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	3301      	adds	r3, #1
 80033da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	fa22 f303 	lsr.w	r3, r2, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f47f ae78 	bne.w	80030dc <HAL_GPIO_Init+0x10>
  }
}
 80033ec:	bf00      	nop
 80033ee:	bf00      	nop
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40021000 	.word	0x40021000
 8003400:	40010000 	.word	0x40010000
 8003404:	48000400 	.word	0x48000400
 8003408:	48000800 	.word	0x48000800
 800340c:	48000c00 	.word	0x48000c00
 8003410:	48001000 	.word	0x48001000
 8003414:	48001400 	.word	0x48001400
 8003418:	48001800 	.word	0x48001800
 800341c:	40010400 	.word	0x40010400

08003420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	807b      	strh	r3, [r7, #2]
 800342c:	4613      	mov	r3, r2
 800342e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003430:	787b      	ldrb	r3, [r7, #1]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003436:	887a      	ldrh	r2, [r7, #2]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800343c:	e002      	b.n	8003444 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800343e:	887a      	ldrh	r2, [r7, #2]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003462:	887a      	ldrh	r2, [r7, #2]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4013      	ands	r3, r2
 8003468:	041a      	lsls	r2, r3, #16
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	43d9      	mvns	r1, r3
 800346e:	887b      	ldrh	r3, [r7, #2]
 8003470:	400b      	ands	r3, r1
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	619a      	str	r2, [r3, #24]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003488:	4b04      	ldr	r3, [pc, #16]	; (800349c <HAL_PWREx_GetVoltageRange+0x18>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40007000 	.word	0x40007000

080034a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ae:	d130      	bne.n	8003512 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034b0:	4b23      	ldr	r3, [pc, #140]	; (8003540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034bc:	d038      	beq.n	8003530 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034c6:	4a1e      	ldr	r2, [pc, #120]	; (8003540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034ce:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2232      	movs	r2, #50	; 0x32
 80034d4:	fb02 f303 	mul.w	r3, r2, r3
 80034d8:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	0c9b      	lsrs	r3, r3, #18
 80034e0:	3301      	adds	r3, #1
 80034e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034e4:	e002      	b.n	80034ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034ec:	4b14      	ldr	r3, [pc, #80]	; (8003540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f8:	d102      	bne.n	8003500 <HAL_PWREx_ControlVoltageScaling+0x60>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f2      	bne.n	80034e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003500:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800350c:	d110      	bne.n	8003530 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e00f      	b.n	8003532 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003512:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800351a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800351e:	d007      	beq.n	8003530 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003520:	4b07      	ldr	r3, [pc, #28]	; (8003540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003528:	4a05      	ldr	r2, [pc, #20]	; (8003540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800352a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800352e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40007000 	.word	0x40007000
 8003544:	20000224 	.word	0x20000224
 8003548:	431bde83 	.word	0x431bde83

0800354c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e3ca      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800355e:	4b97      	ldr	r3, [pc, #604]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003568:	4b94      	ldr	r3, [pc, #592]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80e4 	beq.w	8003748 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d007      	beq.n	8003596 <HAL_RCC_OscConfig+0x4a>
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	2b0c      	cmp	r3, #12
 800358a:	f040 808b 	bne.w	80036a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2b01      	cmp	r3, #1
 8003592:	f040 8087 	bne.w	80036a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003596:	4b89      	ldr	r3, [pc, #548]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_RCC_OscConfig+0x62>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e3a2      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1a      	ldr	r2, [r3, #32]
 80035b2:	4b82      	ldr	r3, [pc, #520]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d004      	beq.n	80035c8 <HAL_RCC_OscConfig+0x7c>
 80035be:	4b7f      	ldr	r3, [pc, #508]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035c6:	e005      	b.n	80035d4 <HAL_RCC_OscConfig+0x88>
 80035c8:	4b7c      	ldr	r3, [pc, #496]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80035ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d223      	bcs.n	8003620 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fd87 	bl	80040f0 <RCC_SetFlashLatencyFromMSIRange>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e383      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035ec:	4b73      	ldr	r3, [pc, #460]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a72      	ldr	r2, [pc, #456]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80035f2:	f043 0308 	orr.w	r3, r3, #8
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b70      	ldr	r3, [pc, #448]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	496d      	ldr	r1, [pc, #436]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800360a:	4b6c      	ldr	r3, [pc, #432]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	4968      	ldr	r1, [pc, #416]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 800361a:	4313      	orrs	r3, r2
 800361c:	604b      	str	r3, [r1, #4]
 800361e:	e025      	b.n	800366c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003620:	4b66      	ldr	r3, [pc, #408]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a65      	ldr	r2, [pc, #404]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 8003626:	f043 0308 	orr.w	r3, r3, #8
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	4b63      	ldr	r3, [pc, #396]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	4960      	ldr	r1, [pc, #384]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800363e:	4b5f      	ldr	r3, [pc, #380]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	495b      	ldr	r1, [pc, #364]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 800364e:	4313      	orrs	r3, r2
 8003650:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d109      	bne.n	800366c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	4618      	mov	r0, r3
 800365e:	f000 fd47 	bl	80040f0 <RCC_SetFlashLatencyFromMSIRange>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e343      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800366c:	f000 fc4a 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b52      	ldr	r3, [pc, #328]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	4950      	ldr	r1, [pc, #320]	; (80037c0 <HAL_RCC_OscConfig+0x274>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
 8003688:	4a4e      	ldr	r2, [pc, #312]	; (80037c4 <HAL_RCC_OscConfig+0x278>)
 800368a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800368c:	4b4e      	ldr	r3, [pc, #312]	; (80037c8 <HAL_RCC_OscConfig+0x27c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7fd fe13 	bl	80012bc <HAL_InitTick>
 8003696:	4603      	mov	r3, r0
 8003698:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d052      	beq.n	8003746 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	e327      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d032      	beq.n	8003712 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036ac:	4b43      	ldr	r3, [pc, #268]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a42      	ldr	r2, [pc, #264]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036b8:	f7fd ffce 	bl	8001658 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036c0:	f7fd ffca 	bl	8001658 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e310      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036d2:	4b3a      	ldr	r3, [pc, #232]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036de:	4b37      	ldr	r3, [pc, #220]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a36      	ldr	r2, [pc, #216]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80036e4:	f043 0308 	orr.w	r3, r3, #8
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	4b34      	ldr	r3, [pc, #208]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	4931      	ldr	r1, [pc, #196]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036fc:	4b2f      	ldr	r3, [pc, #188]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	492c      	ldr	r1, [pc, #176]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
 8003710:	e01a      	b.n	8003748 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003712:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a29      	ldr	r2, [pc, #164]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800371e:	f7fd ff9b 	bl	8001658 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003726:	f7fd ff97 	bl	8001658 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e2dd      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003738:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1f0      	bne.n	8003726 <HAL_RCC_OscConfig+0x1da>
 8003744:	e000      	b.n	8003748 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003746:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d074      	beq.n	800383e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b08      	cmp	r3, #8
 8003758:	d005      	beq.n	8003766 <HAL_RCC_OscConfig+0x21a>
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	2b0c      	cmp	r3, #12
 800375e:	d10e      	bne.n	800377e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b03      	cmp	r3, #3
 8003764:	d10b      	bne.n	800377e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d064      	beq.n	800383c <HAL_RCC_OscConfig+0x2f0>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d160      	bne.n	800383c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e2ba      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003786:	d106      	bne.n	8003796 <HAL_RCC_OscConfig+0x24a>
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a0b      	ldr	r2, [pc, #44]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 800378e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	e026      	b.n	80037e4 <HAL_RCC_OscConfig+0x298>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800379e:	d115      	bne.n	80037cc <HAL_RCC_OscConfig+0x280>
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a05      	ldr	r2, [pc, #20]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80037a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a02      	ldr	r2, [pc, #8]	; (80037bc <HAL_RCC_OscConfig+0x270>)
 80037b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	e014      	b.n	80037e4 <HAL_RCC_OscConfig+0x298>
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000
 80037c0:	08006c60 	.word	0x08006c60
 80037c4:	20000224 	.word	0x20000224
 80037c8:	20000228 	.word	0x20000228
 80037cc:	4ba0      	ldr	r3, [pc, #640]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a9f      	ldr	r2, [pc, #636]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 80037d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4b9d      	ldr	r3, [pc, #628]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a9c      	ldr	r2, [pc, #624]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 80037de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d013      	beq.n	8003814 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ec:	f7fd ff34 	bl	8001658 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fd ff30 	bl	8001658 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e276      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003806:	4b92      	ldr	r3, [pc, #584]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0x2a8>
 8003812:	e014      	b.n	800383e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fd ff20 	bl	8001658 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800381c:	f7fd ff1c 	bl	8001658 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	; 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e262      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800382e:	4b88      	ldr	r3, [pc, #544]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x2d0>
 800383a:	e000      	b.n	800383e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d060      	beq.n	800390c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b04      	cmp	r3, #4
 800384e:	d005      	beq.n	800385c <HAL_RCC_OscConfig+0x310>
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b0c      	cmp	r3, #12
 8003854:	d119      	bne.n	800388a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d116      	bne.n	800388a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800385c:	4b7c      	ldr	r3, [pc, #496]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_OscConfig+0x328>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e23f      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003874:	4b76      	ldr	r3, [pc, #472]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	4973      	ldr	r1, [pc, #460]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003888:	e040      	b.n	800390c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d023      	beq.n	80038da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003892:	4b6f      	ldr	r3, [pc, #444]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a6e      	ldr	r2, [pc, #440]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389e:	f7fd fedb 	bl	8001658 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a6:	f7fd fed7 	bl	8001658 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e21d      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b8:	4b65      	ldr	r3, [pc, #404]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c4:	4b62      	ldr	r3, [pc, #392]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	061b      	lsls	r3, r3, #24
 80038d2:	495f      	ldr	r1, [pc, #380]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]
 80038d8:	e018      	b.n	800390c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038da:	4b5d      	ldr	r3, [pc, #372]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a5c      	ldr	r2, [pc, #368]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 80038e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e6:	f7fd feb7 	bl	8001658 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ee:	f7fd feb3 	bl	8001658 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e1f9      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003900:	4b53      	ldr	r3, [pc, #332]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f0      	bne.n	80038ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d03c      	beq.n	8003992 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d01c      	beq.n	800395a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003920:	4b4b      	ldr	r3, [pc, #300]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003926:	4a4a      	ldr	r2, [pc, #296]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7fd fe92 	bl	8001658 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003938:	f7fd fe8e 	bl	8001658 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e1d4      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800394a:	4b41      	ldr	r3, [pc, #260]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 800394c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0ef      	beq.n	8003938 <HAL_RCC_OscConfig+0x3ec>
 8003958:	e01b      	b.n	8003992 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800395a:	4b3d      	ldr	r3, [pc, #244]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 800395c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003960:	4a3b      	ldr	r2, [pc, #236]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003962:	f023 0301 	bic.w	r3, r3, #1
 8003966:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396a:	f7fd fe75 	bl	8001658 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003972:	f7fd fe71 	bl	8001658 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e1b7      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003984:	4b32      	ldr	r3, [pc, #200]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1ef      	bne.n	8003972 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 80a6 	beq.w	8003aec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a0:	2300      	movs	r3, #0
 80039a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039a4:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 80039a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10d      	bne.n	80039cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b0:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 80039b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b4:	4a26      	ldr	r2, [pc, #152]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 80039b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ba:	6593      	str	r3, [r2, #88]	; 0x58
 80039bc:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 80039be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039c8:	2301      	movs	r3, #1
 80039ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039cc:	4b21      	ldr	r3, [pc, #132]	; (8003a54 <HAL_RCC_OscConfig+0x508>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d118      	bne.n	8003a0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039d8:	4b1e      	ldr	r3, [pc, #120]	; (8003a54 <HAL_RCC_OscConfig+0x508>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1d      	ldr	r2, [pc, #116]	; (8003a54 <HAL_RCC_OscConfig+0x508>)
 80039de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e4:	f7fd fe38 	bl	8001658 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ec:	f7fd fe34 	bl	8001658 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e17a      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039fe:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <HAL_RCC_OscConfig+0x508>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d108      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4d8>
 8003a12:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a18:	4a0d      	ldr	r2, [pc, #52]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a22:	e029      	b.n	8003a78 <HAL_RCC_OscConfig+0x52c>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b05      	cmp	r3, #5
 8003a2a:	d115      	bne.n	8003a58 <HAL_RCC_OscConfig+0x50c>
 8003a2c:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a32:	4a07      	ldr	r2, [pc, #28]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003a34:	f043 0304 	orr.w	r3, r3, #4
 8003a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a3c:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a42:	4a03      	ldr	r2, [pc, #12]	; (8003a50 <HAL_RCC_OscConfig+0x504>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a4c:	e014      	b.n	8003a78 <HAL_RCC_OscConfig+0x52c>
 8003a4e:	bf00      	nop
 8003a50:	40021000 	.word	0x40021000
 8003a54:	40007000 	.word	0x40007000
 8003a58:	4b9c      	ldr	r3, [pc, #624]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5e:	4a9b      	ldr	r2, [pc, #620]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a68:	4b98      	ldr	r3, [pc, #608]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6e:	4a97      	ldr	r2, [pc, #604]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003a70:	f023 0304 	bic.w	r3, r3, #4
 8003a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d016      	beq.n	8003aae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a80:	f7fd fdea 	bl	8001658 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a86:	e00a      	b.n	8003a9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a88:	f7fd fde6 	bl	8001658 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e12a      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a9e:	4b8b      	ldr	r3, [pc, #556]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0ed      	beq.n	8003a88 <HAL_RCC_OscConfig+0x53c>
 8003aac:	e015      	b.n	8003ada <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aae:	f7fd fdd3 	bl	8001658 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ab4:	e00a      	b.n	8003acc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab6:	f7fd fdcf 	bl	8001658 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e113      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003acc:	4b7f      	ldr	r3, [pc, #508]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1ed      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ada:	7ffb      	ldrb	r3, [r7, #31]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d105      	bne.n	8003aec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae0:	4b7a      	ldr	r3, [pc, #488]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae4:	4a79      	ldr	r2, [pc, #484]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 80fe 	beq.w	8003cf2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	f040 80d0 	bne.w	8003ca0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b00:	4b72      	ldr	r3, [pc, #456]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f003 0203 	and.w	r2, r3, #3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d130      	bne.n	8003b76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d127      	bne.n	8003b76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b30:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d11f      	bne.n	8003b76 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b40:	2a07      	cmp	r2, #7
 8003b42:	bf14      	ite	ne
 8003b44:	2201      	movne	r2, #1
 8003b46:	2200      	moveq	r2, #0
 8003b48:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d113      	bne.n	8003b76 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b58:	085b      	lsrs	r3, r3, #1
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d109      	bne.n	8003b76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	085b      	lsrs	r3, r3, #1
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d06e      	beq.n	8003c54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2b0c      	cmp	r3, #12
 8003b7a:	d069      	beq.n	8003c50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b7c:	4b53      	ldr	r3, [pc, #332]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d105      	bne.n	8003b94 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b88:	4b50      	ldr	r3, [pc, #320]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0ad      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b98:	4b4c      	ldr	r3, [pc, #304]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a4b      	ldr	r2, [pc, #300]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ba2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ba4:	f7fd fd58 	bl	8001658 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fd fd54 	bl	8001658 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e09a      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bbe:	4b43      	ldr	r3, [pc, #268]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bca:	4b40      	ldr	r3, [pc, #256]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	4b40      	ldr	r3, [pc, #256]	; (8003cd0 <HAL_RCC_OscConfig+0x784>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003bda:	3a01      	subs	r2, #1
 8003bdc:	0112      	lsls	r2, r2, #4
 8003bde:	4311      	orrs	r1, r2
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003be4:	0212      	lsls	r2, r2, #8
 8003be6:	4311      	orrs	r1, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bec:	0852      	lsrs	r2, r2, #1
 8003bee:	3a01      	subs	r2, #1
 8003bf0:	0552      	lsls	r2, r2, #21
 8003bf2:	4311      	orrs	r1, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bf8:	0852      	lsrs	r2, r2, #1
 8003bfa:	3a01      	subs	r2, #1
 8003bfc:	0652      	lsls	r2, r2, #25
 8003bfe:	4311      	orrs	r1, r2
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c04:	0912      	lsrs	r2, r2, #4
 8003c06:	0452      	lsls	r2, r2, #17
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	4930      	ldr	r1, [pc, #192]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c10:	4b2e      	ldr	r3, [pc, #184]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a2d      	ldr	r2, [pc, #180]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c1c:	4b2b      	ldr	r3, [pc, #172]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4a2a      	ldr	r2, [pc, #168]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c28:	f7fd fd16 	bl	8001658 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c30:	f7fd fd12 	bl	8001658 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e058      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c42:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c4e:	e050      	b.n	8003cf2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e04f      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c54:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d148      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c60:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a19      	ldr	r2, [pc, #100]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c6c:	4b17      	ldr	r3, [pc, #92]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c78:	f7fd fcee 	bl	8001658 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c80:	f7fd fcea 	bl	8001658 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e030      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x734>
 8003c9e:	e028      	b.n	8003cf2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	2b0c      	cmp	r3, #12
 8003ca4:	d023      	beq.n	8003cee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca6:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a08      	ldr	r2, [pc, #32]	; (8003ccc <HAL_RCC_OscConfig+0x780>)
 8003cac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7fd fcd1 	bl	8001658 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb8:	e00c      	b.n	8003cd4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cba:	f7fd fccd 	bl	8001658 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d905      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e013      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cd4:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <HAL_RCC_OscConfig+0x7b0>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1ec      	bne.n	8003cba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_RCC_OscConfig+0x7b0>)
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	4905      	ldr	r1, [pc, #20]	; (8003cfc <HAL_RCC_OscConfig+0x7b0>)
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_RCC_OscConfig+0x7b4>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	60cb      	str	r3, [r1, #12]
 8003cec:	e001      	b.n	8003cf2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3720      	adds	r7, #32
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	feeefffc 	.word	0xfeeefffc

08003d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0e7      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d18:	4b75      	ldr	r3, [pc, #468]	; (8003ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d910      	bls.n	8003d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d26:	4b72      	ldr	r3, [pc, #456]	; (8003ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 0207 	bic.w	r2, r3, #7
 8003d2e:	4970      	ldr	r1, [pc, #448]	; (8003ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d36:	4b6e      	ldr	r3, [pc, #440]	; (8003ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0cf      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d010      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	4b66      	ldr	r3, [pc, #408]	; (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d908      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d64:	4b63      	ldr	r3, [pc, #396]	; (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	4960      	ldr	r1, [pc, #384]	; (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d04c      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d107      	bne.n	8003d9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d8a:	4b5a      	ldr	r3, [pc, #360]	; (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d121      	bne.n	8003dda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e0a6      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d107      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003da2:	4b54      	ldr	r3, [pc, #336]	; (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d115      	bne.n	8003dda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e09a      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d107      	bne.n	8003dca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dba:	4b4e      	ldr	r3, [pc, #312]	; (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e08e      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dca:	4b4a      	ldr	r3, [pc, #296]	; (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e086      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dda:	4b46      	ldr	r3, [pc, #280]	; (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f023 0203 	bic.w	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	4943      	ldr	r1, [pc, #268]	; (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dec:	f7fd fc34 	bl	8001658 <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df2:	e00a      	b.n	8003e0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df4:	f7fd fc30 	bl	8001658 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e06e      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	4b3a      	ldr	r3, [pc, #232]	; (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 020c 	and.w	r2, r3, #12
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d1eb      	bne.n	8003df4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d010      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	4b31      	ldr	r3, [pc, #196]	; (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d208      	bcs.n	8003e4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e38:	4b2e      	ldr	r3, [pc, #184]	; (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	492b      	ldr	r1, [pc, #172]	; (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e4a:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d210      	bcs.n	8003e7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f023 0207 	bic.w	r2, r3, #7
 8003e60:	4923      	ldr	r1, [pc, #140]	; (8003ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e68:	4b21      	ldr	r3, [pc, #132]	; (8003ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d001      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e036      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d008      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e86:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	4918      	ldr	r1, [pc, #96]	; (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d009      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ea4:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4910      	ldr	r1, [pc, #64]	; (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eb8:	f000 f824 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	091b      	lsrs	r3, r3, #4
 8003ec4:	f003 030f 	and.w	r3, r3, #15
 8003ec8:	490b      	ldr	r1, [pc, #44]	; (8003ef8 <HAL_RCC_ClockConfig+0x1f4>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed4:	4a09      	ldr	r2, [pc, #36]	; (8003efc <HAL_RCC_ClockConfig+0x1f8>)
 8003ed6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ed8:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <HAL_RCC_ClockConfig+0x1fc>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fd f9ed 	bl	80012bc <HAL_InitTick>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ee6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40022000 	.word	0x40022000
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	08006c60 	.word	0x08006c60
 8003efc:	20000224 	.word	0x20000224
 8003f00:	20000228 	.word	0x20000228

08003f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b089      	sub	sp, #36	; 0x24
 8003f08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f12:	4b3e      	ldr	r3, [pc, #248]	; (800400c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f1c:	4b3b      	ldr	r3, [pc, #236]	; (800400c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_GetSysClockFreq+0x34>
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b0c      	cmp	r3, #12
 8003f30:	d121      	bne.n	8003f76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d11e      	bne.n	8003f76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f38:	4b34      	ldr	r3, [pc, #208]	; (800400c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d107      	bne.n	8003f54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f44:	4b31      	ldr	r3, [pc, #196]	; (800400c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f4a:	0a1b      	lsrs	r3, r3, #8
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	61fb      	str	r3, [r7, #28]
 8003f52:	e005      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f54:	4b2d      	ldr	r3, [pc, #180]	; (800400c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	091b      	lsrs	r3, r3, #4
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f60:	4a2b      	ldr	r2, [pc, #172]	; (8004010 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10d      	bne.n	8003f8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f74:	e00a      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d102      	bne.n	8003f82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f7c:	4b25      	ldr	r3, [pc, #148]	; (8004014 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f7e:	61bb      	str	r3, [r7, #24]
 8003f80:	e004      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f88:	4b23      	ldr	r3, [pc, #140]	; (8004018 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	2b0c      	cmp	r3, #12
 8003f90:	d134      	bne.n	8003ffc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f92:	4b1e      	ldr	r3, [pc, #120]	; (800400c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d003      	beq.n	8003faa <HAL_RCC_GetSysClockFreq+0xa6>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d003      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0xac>
 8003fa8:	e005      	b.n	8003fb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003faa:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fac:	617b      	str	r3, [r7, #20]
      break;
 8003fae:	e005      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fb0:	4b19      	ldr	r3, [pc, #100]	; (8004018 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fb2:	617b      	str	r3, [r7, #20]
      break;
 8003fb4:	e002      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	617b      	str	r3, [r7, #20]
      break;
 8003fba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fbc:	4b13      	ldr	r3, [pc, #76]	; (800400c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	091b      	lsrs	r3, r3, #4
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fca:	4b10      	ldr	r3, [pc, #64]	; (800400c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	0a1b      	lsrs	r3, r3, #8
 8003fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	fb03 f202 	mul.w	r2, r3, r2
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	; (800400c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	0e5b      	lsrs	r3, r3, #25
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	3301      	adds	r3, #1
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ffc:	69bb      	ldr	r3, [r7, #24]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3724      	adds	r7, #36	; 0x24
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000
 8004010:	08006c78 	.word	0x08006c78
 8004014:	00f42400 	.word	0x00f42400
 8004018:	007a1200 	.word	0x007a1200

0800401c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004020:	4b03      	ldr	r3, [pc, #12]	; (8004030 <HAL_RCC_GetHCLKFreq+0x14>)
 8004022:	681b      	ldr	r3, [r3, #0]
}
 8004024:	4618      	mov	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	20000224 	.word	0x20000224

08004034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004038:	f7ff fff0 	bl	800401c <HAL_RCC_GetHCLKFreq>
 800403c:	4602      	mov	r2, r0
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	4904      	ldr	r1, [pc, #16]	; (800405c <HAL_RCC_GetPCLK1Freq+0x28>)
 800404a:	5ccb      	ldrb	r3, [r1, r3]
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004054:	4618      	mov	r0, r3
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40021000 	.word	0x40021000
 800405c:	08006c70 	.word	0x08006c70

08004060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004064:	f7ff ffda 	bl	800401c <HAL_RCC_GetHCLKFreq>
 8004068:	4602      	mov	r2, r0
 800406a:	4b06      	ldr	r3, [pc, #24]	; (8004084 <HAL_RCC_GetPCLK2Freq+0x24>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	0adb      	lsrs	r3, r3, #11
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	4904      	ldr	r1, [pc, #16]	; (8004088 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004076:	5ccb      	ldrb	r3, [r1, r3]
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004080:	4618      	mov	r0, r3
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40021000 	.word	0x40021000
 8004088:	08006c70 	.word	0x08006c70

0800408c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	220f      	movs	r2, #15
 800409a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800409c:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <HAL_RCC_GetClockConfig+0x5c>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 0203 	and.w	r2, r3, #3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80040a8:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <HAL_RCC_GetClockConfig+0x5c>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <HAL_RCC_GetClockConfig+0x5c>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80040c0:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <HAL_RCC_GetClockConfig+0x5c>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	08db      	lsrs	r3, r3, #3
 80040c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80040ce:	4b07      	ldr	r3, [pc, #28]	; (80040ec <HAL_RCC_GetClockConfig+0x60>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0207 	and.w	r2, r3, #7
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	601a      	str	r2, [r3, #0]
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40022000 	.word	0x40022000

080040f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040f8:	2300      	movs	r3, #0
 80040fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040fc:	4b2a      	ldr	r3, [pc, #168]	; (80041a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004108:	f7ff f9bc 	bl	8003484 <HAL_PWREx_GetVoltageRange>
 800410c:	6178      	str	r0, [r7, #20]
 800410e:	e014      	b.n	800413a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004110:	4b25      	ldr	r3, [pc, #148]	; (80041a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004114:	4a24      	ldr	r2, [pc, #144]	; (80041a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411a:	6593      	str	r3, [r2, #88]	; 0x58
 800411c:	4b22      	ldr	r3, [pc, #136]	; (80041a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800411e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004128:	f7ff f9ac 	bl	8003484 <HAL_PWREx_GetVoltageRange>
 800412c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800412e:	4b1e      	ldr	r3, [pc, #120]	; (80041a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	4a1d      	ldr	r2, [pc, #116]	; (80041a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004138:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004140:	d10b      	bne.n	800415a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b80      	cmp	r3, #128	; 0x80
 8004146:	d919      	bls.n	800417c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2ba0      	cmp	r3, #160	; 0xa0
 800414c:	d902      	bls.n	8004154 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800414e:	2302      	movs	r3, #2
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	e013      	b.n	800417c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004154:	2301      	movs	r3, #1
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	e010      	b.n	800417c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b80      	cmp	r3, #128	; 0x80
 800415e:	d902      	bls.n	8004166 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004160:	2303      	movs	r3, #3
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	e00a      	b.n	800417c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b80      	cmp	r3, #128	; 0x80
 800416a:	d102      	bne.n	8004172 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800416c:	2302      	movs	r3, #2
 800416e:	613b      	str	r3, [r7, #16]
 8004170:	e004      	b.n	800417c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b70      	cmp	r3, #112	; 0x70
 8004176:	d101      	bne.n	800417c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004178:	2301      	movs	r3, #1
 800417a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800417c:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f023 0207 	bic.w	r2, r3, #7
 8004184:	4909      	ldr	r1, [pc, #36]	; (80041ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800418c:	4b07      	ldr	r3, [pc, #28]	; (80041ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	429a      	cmp	r2, r3
 8004198:	d001      	beq.n	800419e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40022000 	.word	0x40022000

080041b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041b8:	2300      	movs	r3, #0
 80041ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041bc:	2300      	movs	r3, #0
 80041be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d041      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041d4:	d02a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041da:	d824      	bhi.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041e0:	d008      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041e6:	d81e      	bhi.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80041ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f0:	d010      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041f2:	e018      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041f4:	4b86      	ldr	r3, [pc, #536]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	4a85      	ldr	r2, [pc, #532]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004200:	e015      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3304      	adds	r3, #4
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fabb 	bl	8004784 <RCCEx_PLLSAI1_Config>
 800420e:	4603      	mov	r3, r0
 8004210:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004212:	e00c      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3320      	adds	r3, #32
 8004218:	2100      	movs	r1, #0
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fba6 	bl	800496c <RCCEx_PLLSAI2_Config>
 8004220:	4603      	mov	r3, r0
 8004222:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004224:	e003      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	74fb      	strb	r3, [r7, #19]
      break;
 800422a:	e000      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800422c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800422e:	7cfb      	ldrb	r3, [r7, #19]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10b      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004234:	4b76      	ldr	r3, [pc, #472]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004242:	4973      	ldr	r1, [pc, #460]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800424a:	e001      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424c:	7cfb      	ldrb	r3, [r7, #19]
 800424e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d041      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004260:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004264:	d02a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004266:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800426a:	d824      	bhi.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800426c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004270:	d008      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004272:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004276:	d81e      	bhi.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800427c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004280:	d010      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004282:	e018      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004284:	4b62      	ldr	r3, [pc, #392]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4a61      	ldr	r2, [pc, #388]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800428e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004290:	e015      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3304      	adds	r3, #4
 8004296:	2100      	movs	r1, #0
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fa73 	bl	8004784 <RCCEx_PLLSAI1_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042a2:	e00c      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3320      	adds	r3, #32
 80042a8:	2100      	movs	r1, #0
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fb5e 	bl	800496c <RCCEx_PLLSAI2_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042b4:	e003      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	74fb      	strb	r3, [r7, #19]
      break;
 80042ba:	e000      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80042bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042be:	7cfb      	ldrb	r3, [r7, #19]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10b      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042c4:	4b52      	ldr	r3, [pc, #328]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042d2:	494f      	ldr	r1, [pc, #316]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042da:	e001      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042dc:	7cfb      	ldrb	r3, [r7, #19]
 80042de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 80a0 	beq.w	800442e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ee:	2300      	movs	r3, #0
 80042f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042f2:	4b47      	ldr	r3, [pc, #284]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004302:	2300      	movs	r3, #0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00d      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004308:	4b41      	ldr	r3, [pc, #260]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430c:	4a40      	ldr	r2, [pc, #256]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004312:	6593      	str	r3, [r2, #88]	; 0x58
 8004314:	4b3e      	ldr	r3, [pc, #248]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004320:	2301      	movs	r3, #1
 8004322:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004324:	4b3b      	ldr	r3, [pc, #236]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a3a      	ldr	r2, [pc, #232]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800432a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004330:	f7fd f992 	bl	8001658 <HAL_GetTick>
 8004334:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004336:	e009      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004338:	f7fd f98e 	bl	8001658 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d902      	bls.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	74fb      	strb	r3, [r7, #19]
        break;
 800434a:	e005      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800434c:	4b31      	ldr	r3, [pc, #196]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0ef      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004358:	7cfb      	ldrb	r3, [r7, #19]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d15c      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800435e:	4b2c      	ldr	r3, [pc, #176]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004368:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01f      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	429a      	cmp	r2, r3
 800437a:	d019      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800437c:	4b24      	ldr	r3, [pc, #144]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004386:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004388:	4b21      	ldr	r3, [pc, #132]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	4a20      	ldr	r2, [pc, #128]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004398:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439e:	4a1c      	ldr	r2, [pc, #112]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043a8:	4a19      	ldr	r2, [pc, #100]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d016      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ba:	f7fd f94d 	bl	8001658 <HAL_GetTick>
 80043be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043c0:	e00b      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c2:	f7fd f949 	bl	8001658 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d902      	bls.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	74fb      	strb	r3, [r7, #19]
            break;
 80043d8:	e006      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043da:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0ec      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80043e8:	7cfb      	ldrb	r3, [r7, #19]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10c      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ee:	4b08      	ldr	r3, [pc, #32]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043fe:	4904      	ldr	r1, [pc, #16]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004406:	e009      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	74bb      	strb	r3, [r7, #18]
 800440c:	e006      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800440e:	bf00      	nop
 8004410:	40021000 	.word	0x40021000
 8004414:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004418:	7cfb      	ldrb	r3, [r7, #19]
 800441a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800441c:	7c7b      	ldrb	r3, [r7, #17]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d105      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004422:	4b9e      	ldr	r3, [pc, #632]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004426:	4a9d      	ldr	r2, [pc, #628]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800442c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800443a:	4b98      	ldr	r3, [pc, #608]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004440:	f023 0203 	bic.w	r2, r3, #3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	4994      	ldr	r1, [pc, #592]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800445c:	4b8f      	ldr	r3, [pc, #572]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004462:	f023 020c 	bic.w	r2, r3, #12
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446a:	498c      	ldr	r1, [pc, #560]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800447e:	4b87      	ldr	r3, [pc, #540]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004484:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	4983      	ldr	r1, [pc, #524]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044a0:	4b7e      	ldr	r3, [pc, #504]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	497b      	ldr	r1, [pc, #492]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044c2:	4b76      	ldr	r3, [pc, #472]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d0:	4972      	ldr	r1, [pc, #456]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044e4:	4b6d      	ldr	r3, [pc, #436]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f2:	496a      	ldr	r1, [pc, #424]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004506:	4b65      	ldr	r3, [pc, #404]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004514:	4961      	ldr	r1, [pc, #388]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004528:	4b5c      	ldr	r3, [pc, #368]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004536:	4959      	ldr	r1, [pc, #356]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800454a:	4b54      	ldr	r3, [pc, #336]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004550:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004558:	4950      	ldr	r1, [pc, #320]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800456c:	4b4b      	ldr	r3, [pc, #300]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004572:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457a:	4948      	ldr	r1, [pc, #288]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800458e:	4b43      	ldr	r3, [pc, #268]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004594:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459c:	493f      	ldr	r1, [pc, #252]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d028      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045b0:	4b3a      	ldr	r3, [pc, #232]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045be:	4937      	ldr	r1, [pc, #220]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045ce:	d106      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045d0:	4b32      	ldr	r3, [pc, #200]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	4a31      	ldr	r2, [pc, #196]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045da:	60d3      	str	r3, [r2, #12]
 80045dc:	e011      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045e6:	d10c      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	2101      	movs	r1, #1
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 f8c8 	bl	8004784 <RCCEx_PLLSAI1_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045f8:	7cfb      	ldrb	r3, [r7, #19]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80045fe:	7cfb      	ldrb	r3, [r7, #19]
 8004600:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d028      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800460e:	4b23      	ldr	r3, [pc, #140]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461c:	491f      	ldr	r1, [pc, #124]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800462c:	d106      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800462e:	4b1b      	ldr	r3, [pc, #108]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	4a1a      	ldr	r2, [pc, #104]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004638:	60d3      	str	r3, [r2, #12]
 800463a:	e011      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004640:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004644:	d10c      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3304      	adds	r3, #4
 800464a:	2101      	movs	r1, #1
 800464c:	4618      	mov	r0, r3
 800464e:	f000 f899 	bl	8004784 <RCCEx_PLLSAI1_Config>
 8004652:	4603      	mov	r3, r0
 8004654:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004656:	7cfb      	ldrb	r3, [r7, #19]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800465c:	7cfb      	ldrb	r3, [r7, #19]
 800465e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d02b      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800466c:	4b0b      	ldr	r3, [pc, #44]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004672:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800467a:	4908      	ldr	r1, [pc, #32]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800468a:	d109      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800468c:	4b03      	ldr	r3, [pc, #12]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4a02      	ldr	r2, [pc, #8]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004696:	60d3      	str	r3, [r2, #12]
 8004698:	e014      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3304      	adds	r3, #4
 80046ae:	2101      	movs	r1, #1
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 f867 	bl	8004784 <RCCEx_PLLSAI1_Config>
 80046b6:	4603      	mov	r3, r0
 80046b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ba:	7cfb      	ldrb	r3, [r7, #19]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80046c0:	7cfb      	ldrb	r3, [r7, #19]
 80046c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d02f      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046d0:	4b2b      	ldr	r3, [pc, #172]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046de:	4928      	ldr	r1, [pc, #160]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046ee:	d10d      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3304      	adds	r3, #4
 80046f4:	2102      	movs	r1, #2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 f844 	bl	8004784 <RCCEx_PLLSAI1_Config>
 80046fc:	4603      	mov	r3, r0
 80046fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004700:	7cfb      	ldrb	r3, [r7, #19]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d014      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004706:	7cfb      	ldrb	r3, [r7, #19]
 8004708:	74bb      	strb	r3, [r7, #18]
 800470a:	e011      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004714:	d10c      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3320      	adds	r3, #32
 800471a:	2102      	movs	r1, #2
 800471c:	4618      	mov	r0, r3
 800471e:	f000 f925 	bl	800496c <RCCEx_PLLSAI2_Config>
 8004722:	4603      	mov	r3, r0
 8004724:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004726:	7cfb      	ldrb	r3, [r7, #19]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800472c:	7cfb      	ldrb	r3, [r7, #19]
 800472e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800473c:	4b10      	ldr	r3, [pc, #64]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800473e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004742:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800474a:	490d      	ldr	r1, [pc, #52]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00b      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800475e:	4b08      	ldr	r3, [pc, #32]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004764:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800476e:	4904      	ldr	r1, [pc, #16]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004776:	7cbb      	ldrb	r3, [r7, #18]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40021000 	.word	0x40021000

08004784 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004792:	4b75      	ldr	r3, [pc, #468]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d018      	beq.n	80047d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800479e:	4b72      	ldr	r3, [pc, #456]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f003 0203 	and.w	r2, r3, #3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d10d      	bne.n	80047ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
       ||
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d009      	beq.n	80047ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047b6:	4b6c      	ldr	r3, [pc, #432]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	091b      	lsrs	r3, r3, #4
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
       ||
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d047      	beq.n	800485a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	73fb      	strb	r3, [r7, #15]
 80047ce:	e044      	b.n	800485a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d018      	beq.n	800480a <RCCEx_PLLSAI1_Config+0x86>
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d825      	bhi.n	8004828 <RCCEx_PLLSAI1_Config+0xa4>
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d002      	beq.n	80047e6 <RCCEx_PLLSAI1_Config+0x62>
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d009      	beq.n	80047f8 <RCCEx_PLLSAI1_Config+0x74>
 80047e4:	e020      	b.n	8004828 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047e6:	4b60      	ldr	r3, [pc, #384]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d11d      	bne.n	800482e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047f6:	e01a      	b.n	800482e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047f8:	4b5b      	ldr	r3, [pc, #364]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004800:	2b00      	cmp	r3, #0
 8004802:	d116      	bne.n	8004832 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004808:	e013      	b.n	8004832 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800480a:	4b57      	ldr	r3, [pc, #348]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10f      	bne.n	8004836 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004816:	4b54      	ldr	r3, [pc, #336]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d109      	bne.n	8004836 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004826:	e006      	b.n	8004836 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
      break;
 800482c:	e004      	b.n	8004838 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800482e:	bf00      	nop
 8004830:	e002      	b.n	8004838 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004832:	bf00      	nop
 8004834:	e000      	b.n	8004838 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004836:	bf00      	nop
    }

    if(status == HAL_OK)
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10d      	bne.n	800485a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800483e:	4b4a      	ldr	r3, [pc, #296]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6819      	ldr	r1, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	3b01      	subs	r3, #1
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	430b      	orrs	r3, r1
 8004854:	4944      	ldr	r1, [pc, #272]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004856:	4313      	orrs	r3, r2
 8004858:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d17d      	bne.n	800495c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004860:	4b41      	ldr	r3, [pc, #260]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a40      	ldr	r2, [pc, #256]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004866:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800486a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800486c:	f7fc fef4 	bl	8001658 <HAL_GetTick>
 8004870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004872:	e009      	b.n	8004888 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004874:	f7fc fef0 	bl	8001658 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d902      	bls.n	8004888 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	73fb      	strb	r3, [r7, #15]
        break;
 8004886:	e005      	b.n	8004894 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004888:	4b37      	ldr	r3, [pc, #220]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1ef      	bne.n	8004874 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004894:	7bfb      	ldrb	r3, [r7, #15]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d160      	bne.n	800495c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d111      	bne.n	80048c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048a0:	4b31      	ldr	r3, [pc, #196]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6892      	ldr	r2, [r2, #8]
 80048b0:	0211      	lsls	r1, r2, #8
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	68d2      	ldr	r2, [r2, #12]
 80048b6:	0912      	lsrs	r2, r2, #4
 80048b8:	0452      	lsls	r2, r2, #17
 80048ba:	430a      	orrs	r2, r1
 80048bc:	492a      	ldr	r1, [pc, #168]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	610b      	str	r3, [r1, #16]
 80048c2:	e027      	b.n	8004914 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d112      	bne.n	80048f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048ca:	4b27      	ldr	r3, [pc, #156]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80048d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6892      	ldr	r2, [r2, #8]
 80048da:	0211      	lsls	r1, r2, #8
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6912      	ldr	r2, [r2, #16]
 80048e0:	0852      	lsrs	r2, r2, #1
 80048e2:	3a01      	subs	r2, #1
 80048e4:	0552      	lsls	r2, r2, #21
 80048e6:	430a      	orrs	r2, r1
 80048e8:	491f      	ldr	r1, [pc, #124]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	610b      	str	r3, [r1, #16]
 80048ee:	e011      	b.n	8004914 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048f0:	4b1d      	ldr	r3, [pc, #116]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6892      	ldr	r2, [r2, #8]
 8004900:	0211      	lsls	r1, r2, #8
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6952      	ldr	r2, [r2, #20]
 8004906:	0852      	lsrs	r2, r2, #1
 8004908:	3a01      	subs	r2, #1
 800490a:	0652      	lsls	r2, r2, #25
 800490c:	430a      	orrs	r2, r1
 800490e:	4916      	ldr	r1, [pc, #88]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004910:	4313      	orrs	r3, r2
 8004912:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004914:	4b14      	ldr	r3, [pc, #80]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a13      	ldr	r2, [pc, #76]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 800491a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800491e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004920:	f7fc fe9a 	bl	8001658 <HAL_GetTick>
 8004924:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004926:	e009      	b.n	800493c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004928:	f7fc fe96 	bl	8001658 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d902      	bls.n	800493c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	73fb      	strb	r3, [r7, #15]
          break;
 800493a:	e005      	b.n	8004948 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0ef      	beq.n	8004928 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800494e:	4b06      	ldr	r3, [pc, #24]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004950:	691a      	ldr	r2, [r3, #16]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	4904      	ldr	r1, [pc, #16]	; (8004968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004958:	4313      	orrs	r3, r2
 800495a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800495c:	7bfb      	ldrb	r3, [r7, #15]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	40021000 	.word	0x40021000

0800496c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800497a:	4b6a      	ldr	r3, [pc, #424]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d018      	beq.n	80049b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004986:	4b67      	ldr	r3, [pc, #412]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f003 0203 	and.w	r2, r3, #3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d10d      	bne.n	80049b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
       ||
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800499e:	4b61      	ldr	r3, [pc, #388]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	091b      	lsrs	r3, r3, #4
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
       ||
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d047      	beq.n	8004a42 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	73fb      	strb	r3, [r7, #15]
 80049b6:	e044      	b.n	8004a42 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d018      	beq.n	80049f2 <RCCEx_PLLSAI2_Config+0x86>
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d825      	bhi.n	8004a10 <RCCEx_PLLSAI2_Config+0xa4>
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d002      	beq.n	80049ce <RCCEx_PLLSAI2_Config+0x62>
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d009      	beq.n	80049e0 <RCCEx_PLLSAI2_Config+0x74>
 80049cc:	e020      	b.n	8004a10 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049ce:	4b55      	ldr	r3, [pc, #340]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d11d      	bne.n	8004a16 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049de:	e01a      	b.n	8004a16 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049e0:	4b50      	ldr	r3, [pc, #320]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d116      	bne.n	8004a1a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049f0:	e013      	b.n	8004a1a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049f2:	4b4c      	ldr	r3, [pc, #304]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10f      	bne.n	8004a1e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049fe:	4b49      	ldr	r3, [pc, #292]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d109      	bne.n	8004a1e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a0e:	e006      	b.n	8004a1e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	73fb      	strb	r3, [r7, #15]
      break;
 8004a14:	e004      	b.n	8004a20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a16:	bf00      	nop
 8004a18:	e002      	b.n	8004a20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a1a:	bf00      	nop
 8004a1c:	e000      	b.n	8004a20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10d      	bne.n	8004a42 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a26:	4b3f      	ldr	r3, [pc, #252]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6819      	ldr	r1, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	430b      	orrs	r3, r1
 8004a3c:	4939      	ldr	r1, [pc, #228]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d167      	bne.n	8004b18 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a48:	4b36      	ldr	r3, [pc, #216]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a35      	ldr	r2, [pc, #212]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a54:	f7fc fe00 	bl	8001658 <HAL_GetTick>
 8004a58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a5a:	e009      	b.n	8004a70 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a5c:	f7fc fdfc 	bl	8001658 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d902      	bls.n	8004a70 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a6e:	e005      	b.n	8004a7c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a70:	4b2c      	ldr	r3, [pc, #176]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1ef      	bne.n	8004a5c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d14a      	bne.n	8004b18 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d111      	bne.n	8004aac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a88:	4b26      	ldr	r3, [pc, #152]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6892      	ldr	r2, [r2, #8]
 8004a98:	0211      	lsls	r1, r2, #8
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	68d2      	ldr	r2, [r2, #12]
 8004a9e:	0912      	lsrs	r2, r2, #4
 8004aa0:	0452      	lsls	r2, r2, #17
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	491f      	ldr	r1, [pc, #124]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	614b      	str	r3, [r1, #20]
 8004aaa:	e011      	b.n	8004ad0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004aac:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ab4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6892      	ldr	r2, [r2, #8]
 8004abc:	0211      	lsls	r1, r2, #8
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6912      	ldr	r2, [r2, #16]
 8004ac2:	0852      	lsrs	r2, r2, #1
 8004ac4:	3a01      	subs	r2, #1
 8004ac6:	0652      	lsls	r2, r2, #25
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	4916      	ldr	r1, [pc, #88]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ad0:	4b14      	ldr	r3, [pc, #80]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a13      	ldr	r2, [pc, #76]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ada:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004adc:	f7fc fdbc 	bl	8001658 <HAL_GetTick>
 8004ae0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ae2:	e009      	b.n	8004af8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ae4:	f7fc fdb8 	bl	8001658 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d902      	bls.n	8004af8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	73fb      	strb	r3, [r7, #15]
          break;
 8004af6:	e005      	b.n	8004b04 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004af8:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0ef      	beq.n	8004ae4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b0a:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b0c:	695a      	ldr	r2, [r3, #20]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	4904      	ldr	r1, [pc, #16]	; (8004b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40021000 	.word	0x40021000

08004b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e049      	b.n	8004bce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fc fb32 	bl	80011b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2202      	movs	r2, #2
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3304      	adds	r3, #4
 8004b64:	4619      	mov	r1, r3
 8004b66:	4610      	mov	r0, r2
 8004b68:	f000 f9d0 	bl	8004f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d001      	beq.n	8004bf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e04f      	b.n	8004c90 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0201 	orr.w	r2, r2, #1
 8004c06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a23      	ldr	r2, [pc, #140]	; (8004c9c <HAL_TIM_Base_Start_IT+0xc4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d01d      	beq.n	8004c4e <HAL_TIM_Base_Start_IT+0x76>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1a:	d018      	beq.n	8004c4e <HAL_TIM_Base_Start_IT+0x76>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1f      	ldr	r2, [pc, #124]	; (8004ca0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <HAL_TIM_Base_Start_IT+0x76>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1e      	ldr	r2, [pc, #120]	; (8004ca4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00e      	beq.n	8004c4e <HAL_TIM_Base_Start_IT+0x76>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1c      	ldr	r2, [pc, #112]	; (8004ca8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d009      	beq.n	8004c4e <HAL_TIM_Base_Start_IT+0x76>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1b      	ldr	r2, [pc, #108]	; (8004cac <HAL_TIM_Base_Start_IT+0xd4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d004      	beq.n	8004c4e <HAL_TIM_Base_Start_IT+0x76>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a19      	ldr	r2, [pc, #100]	; (8004cb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d115      	bne.n	8004c7a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	4b17      	ldr	r3, [pc, #92]	; (8004cb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2b06      	cmp	r3, #6
 8004c5e:	d015      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0xb4>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c66:	d011      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c78:	e008      	b.n	8004c8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0201 	orr.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	e000      	b.n	8004c8e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	40012c00 	.word	0x40012c00
 8004ca0:	40000400 	.word	0x40000400
 8004ca4:	40000800 	.word	0x40000800
 8004ca8:	40000c00 	.word	0x40000c00
 8004cac:	40013400 	.word	0x40013400
 8004cb0:	40014000 	.word	0x40014000
 8004cb4:	00010007 	.word	0x00010007

08004cb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d020      	beq.n	8004d1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d01b      	beq.n	8004d1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0202 	mvn.w	r2, #2
 8004cec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f8e4 	bl	8004ed0 <HAL_TIM_IC_CaptureCallback>
 8004d08:	e005      	b.n	8004d16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f8d6 	bl	8004ebc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f8e7 	bl	8004ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d020      	beq.n	8004d68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01b      	beq.n	8004d68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0204 	mvn.w	r2, #4
 8004d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f8be 	bl	8004ed0 <HAL_TIM_IC_CaptureCallback>
 8004d54:	e005      	b.n	8004d62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f8b0 	bl	8004ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f8c1 	bl	8004ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d020      	beq.n	8004db4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01b      	beq.n	8004db4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f06f 0208 	mvn.w	r2, #8
 8004d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2204      	movs	r2, #4
 8004d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f898 	bl	8004ed0 <HAL_TIM_IC_CaptureCallback>
 8004da0:	e005      	b.n	8004dae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f88a 	bl	8004ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f89b 	bl	8004ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f003 0310 	and.w	r3, r3, #16
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d020      	beq.n	8004e00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01b      	beq.n	8004e00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f06f 0210 	mvn.w	r2, #16
 8004dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2208      	movs	r2, #8
 8004dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f872 	bl	8004ed0 <HAL_TIM_IC_CaptureCallback>
 8004dec:	e005      	b.n	8004dfa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f864 	bl	8004ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f875 	bl	8004ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00c      	beq.n	8004e24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d007      	beq.n	8004e24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f06f 0201 	mvn.w	r2, #1
 8004e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fc f8f0 	bl	8001004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00c      	beq.n	8004e48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f98e 	bl	8005164 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00c      	beq.n	8004e6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d007      	beq.n	8004e6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f986 	bl	8005178 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00c      	beq.n	8004e90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d007      	beq.n	8004e90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f834 	bl	8004ef8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00c      	beq.n	8004eb4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f003 0320 	and.w	r3, r3, #32
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d007      	beq.n	8004eb4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0220 	mvn.w	r2, #32
 8004eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f94e 	bl	8005150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a40      	ldr	r2, [pc, #256]	; (8005020 <TIM_Base_SetConfig+0x114>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d013      	beq.n	8004f4c <TIM_Base_SetConfig+0x40>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2a:	d00f      	beq.n	8004f4c <TIM_Base_SetConfig+0x40>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a3d      	ldr	r2, [pc, #244]	; (8005024 <TIM_Base_SetConfig+0x118>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00b      	beq.n	8004f4c <TIM_Base_SetConfig+0x40>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a3c      	ldr	r2, [pc, #240]	; (8005028 <TIM_Base_SetConfig+0x11c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d007      	beq.n	8004f4c <TIM_Base_SetConfig+0x40>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a3b      	ldr	r2, [pc, #236]	; (800502c <TIM_Base_SetConfig+0x120>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_Base_SetConfig+0x40>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a3a      	ldr	r2, [pc, #232]	; (8005030 <TIM_Base_SetConfig+0x124>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d108      	bne.n	8004f5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a2f      	ldr	r2, [pc, #188]	; (8005020 <TIM_Base_SetConfig+0x114>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d01f      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6c:	d01b      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a2c      	ldr	r2, [pc, #176]	; (8005024 <TIM_Base_SetConfig+0x118>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d017      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a2b      	ldr	r2, [pc, #172]	; (8005028 <TIM_Base_SetConfig+0x11c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d013      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a2a      	ldr	r2, [pc, #168]	; (800502c <TIM_Base_SetConfig+0x120>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00f      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a29      	ldr	r2, [pc, #164]	; (8005030 <TIM_Base_SetConfig+0x124>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00b      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a28      	ldr	r2, [pc, #160]	; (8005034 <TIM_Base_SetConfig+0x128>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d007      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a27      	ldr	r2, [pc, #156]	; (8005038 <TIM_Base_SetConfig+0x12c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d003      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a26      	ldr	r2, [pc, #152]	; (800503c <TIM_Base_SetConfig+0x130>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d108      	bne.n	8004fb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a10      	ldr	r2, [pc, #64]	; (8005020 <TIM_Base_SetConfig+0x114>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00f      	beq.n	8005004 <TIM_Base_SetConfig+0xf8>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a12      	ldr	r2, [pc, #72]	; (8005030 <TIM_Base_SetConfig+0x124>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00b      	beq.n	8005004 <TIM_Base_SetConfig+0xf8>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a11      	ldr	r2, [pc, #68]	; (8005034 <TIM_Base_SetConfig+0x128>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d007      	beq.n	8005004 <TIM_Base_SetConfig+0xf8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a10      	ldr	r2, [pc, #64]	; (8005038 <TIM_Base_SetConfig+0x12c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d003      	beq.n	8005004 <TIM_Base_SetConfig+0xf8>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a0f      	ldr	r2, [pc, #60]	; (800503c <TIM_Base_SetConfig+0x130>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d103      	bne.n	800500c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	615a      	str	r2, [r3, #20]
}
 8005012:	bf00      	nop
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40012c00 	.word	0x40012c00
 8005024:	40000400 	.word	0x40000400
 8005028:	40000800 	.word	0x40000800
 800502c:	40000c00 	.word	0x40000c00
 8005030:	40013400 	.word	0x40013400
 8005034:	40014000 	.word	0x40014000
 8005038:	40014400 	.word	0x40014400
 800503c:	40014800 	.word	0x40014800

08005040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005054:	2302      	movs	r3, #2
 8005056:	e068      	b.n	800512a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a2e      	ldr	r2, [pc, #184]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d004      	beq.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a2d      	ldr	r2, [pc, #180]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d108      	bne.n	800509e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005092:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1e      	ldr	r2, [pc, #120]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d01d      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ca:	d018      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1b      	ldr	r2, [pc, #108]	; (8005140 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d013      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a1a      	ldr	r2, [pc, #104]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00e      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a18      	ldr	r2, [pc, #96]	; (8005148 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d009      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a13      	ldr	r2, [pc, #76]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d004      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a14      	ldr	r2, [pc, #80]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d10c      	bne.n	8005118 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005104:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	4313      	orrs	r3, r2
 800510e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40012c00 	.word	0x40012c00
 800513c:	40013400 	.word	0x40013400
 8005140:	40000400 	.word	0x40000400
 8005144:	40000800 	.word	0x40000800
 8005148:	40000c00 	.word	0x40000c00
 800514c:	40014000 	.word	0x40014000

08005150 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e040      	b.n	8005220 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d106      	bne.n	80051b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7fc f828 	bl	8001204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2224      	movs	r2, #36	; 0x24
 80051b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0201 	bic.w	r2, r2, #1
 80051c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fb6a 	bl	80058ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f8af 	bl	800533c <UART_SetConfig>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e01b      	b.n	8005220 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005206:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0201 	orr.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fbe9 	bl	80059f0 <UART_CheckIdleState>
 800521e:	4603      	mov	r3, r0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b08a      	sub	sp, #40	; 0x28
 800522c:	af02      	add	r7, sp, #8
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	4613      	mov	r3, r2
 8005236:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800523c:	2b20      	cmp	r3, #32
 800523e:	d178      	bne.n	8005332 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <HAL_UART_Transmit+0x24>
 8005246:	88fb      	ldrh	r3, [r7, #6]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e071      	b.n	8005334 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2221      	movs	r2, #33	; 0x21
 800525c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800525e:	f7fc f9fb 	bl	8001658 <HAL_GetTick>
 8005262:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	88fa      	ldrh	r2, [r7, #6]
 8005268:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	88fa      	ldrh	r2, [r7, #6]
 8005270:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800527c:	d108      	bne.n	8005290 <HAL_UART_Transmit+0x68>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d104      	bne.n	8005290 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005286:	2300      	movs	r3, #0
 8005288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	e003      	b.n	8005298 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005294:	2300      	movs	r3, #0
 8005296:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005298:	e030      	b.n	80052fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2200      	movs	r2, #0
 80052a2:	2180      	movs	r1, #128	; 0x80
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 fc4b 	bl	8005b40 <UART_WaitOnFlagUntilTimeout>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d004      	beq.n	80052ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2220      	movs	r2, #32
 80052b4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e03c      	b.n	8005334 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10b      	bne.n	80052d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	881a      	ldrh	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052cc:	b292      	uxth	r2, r2
 80052ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	3302      	adds	r3, #2
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	e008      	b.n	80052ea <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	781a      	ldrb	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	b292      	uxth	r2, r2
 80052e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	3301      	adds	r3, #1
 80052e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1c8      	bne.n	800529a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2200      	movs	r2, #0
 8005310:	2140      	movs	r1, #64	; 0x40
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 fc14 	bl	8005b40 <UART_WaitOnFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d004      	beq.n	8005328 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2220      	movs	r2, #32
 8005322:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e005      	b.n	8005334 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	e000      	b.n	8005334 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005332:	2302      	movs	r3, #2
  }
}
 8005334:	4618      	mov	r0, r3
 8005336:	3720      	adds	r7, #32
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800533c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005340:	b08a      	sub	sp, #40	; 0x28
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005346:	2300      	movs	r3, #0
 8005348:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	431a      	orrs	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	431a      	orrs	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	4313      	orrs	r3, r2
 8005362:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	4ba4      	ldr	r3, [pc, #656]	; (80055fc <UART_SetConfig+0x2c0>)
 800536c:	4013      	ands	r3, r2
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	6812      	ldr	r2, [r2, #0]
 8005372:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005374:	430b      	orrs	r3, r1
 8005376:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a99      	ldr	r2, [pc, #612]	; (8005600 <UART_SetConfig+0x2c4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d004      	beq.n	80053a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a4:	4313      	orrs	r3, r2
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b8:	430a      	orrs	r2, r1
 80053ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a90      	ldr	r2, [pc, #576]	; (8005604 <UART_SetConfig+0x2c8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d126      	bne.n	8005414 <UART_SetConfig+0xd8>
 80053c6:	4b90      	ldr	r3, [pc, #576]	; (8005608 <UART_SetConfig+0x2cc>)
 80053c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053cc:	f003 0303 	and.w	r3, r3, #3
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d81b      	bhi.n	800540c <UART_SetConfig+0xd0>
 80053d4:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <UART_SetConfig+0xa0>)
 80053d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053da:	bf00      	nop
 80053dc:	080053ed 	.word	0x080053ed
 80053e0:	080053fd 	.word	0x080053fd
 80053e4:	080053f5 	.word	0x080053f5
 80053e8:	08005405 	.word	0x08005405
 80053ec:	2301      	movs	r3, #1
 80053ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f2:	e116      	b.n	8005622 <UART_SetConfig+0x2e6>
 80053f4:	2302      	movs	r3, #2
 80053f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053fa:	e112      	b.n	8005622 <UART_SetConfig+0x2e6>
 80053fc:	2304      	movs	r3, #4
 80053fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005402:	e10e      	b.n	8005622 <UART_SetConfig+0x2e6>
 8005404:	2308      	movs	r3, #8
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540a:	e10a      	b.n	8005622 <UART_SetConfig+0x2e6>
 800540c:	2310      	movs	r3, #16
 800540e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005412:	e106      	b.n	8005622 <UART_SetConfig+0x2e6>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a7c      	ldr	r2, [pc, #496]	; (800560c <UART_SetConfig+0x2d0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d138      	bne.n	8005490 <UART_SetConfig+0x154>
 800541e:	4b7a      	ldr	r3, [pc, #488]	; (8005608 <UART_SetConfig+0x2cc>)
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005424:	f003 030c 	and.w	r3, r3, #12
 8005428:	2b0c      	cmp	r3, #12
 800542a:	d82d      	bhi.n	8005488 <UART_SetConfig+0x14c>
 800542c:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <UART_SetConfig+0xf8>)
 800542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005432:	bf00      	nop
 8005434:	08005469 	.word	0x08005469
 8005438:	08005489 	.word	0x08005489
 800543c:	08005489 	.word	0x08005489
 8005440:	08005489 	.word	0x08005489
 8005444:	08005479 	.word	0x08005479
 8005448:	08005489 	.word	0x08005489
 800544c:	08005489 	.word	0x08005489
 8005450:	08005489 	.word	0x08005489
 8005454:	08005471 	.word	0x08005471
 8005458:	08005489 	.word	0x08005489
 800545c:	08005489 	.word	0x08005489
 8005460:	08005489 	.word	0x08005489
 8005464:	08005481 	.word	0x08005481
 8005468:	2300      	movs	r3, #0
 800546a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546e:	e0d8      	b.n	8005622 <UART_SetConfig+0x2e6>
 8005470:	2302      	movs	r3, #2
 8005472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005476:	e0d4      	b.n	8005622 <UART_SetConfig+0x2e6>
 8005478:	2304      	movs	r3, #4
 800547a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547e:	e0d0      	b.n	8005622 <UART_SetConfig+0x2e6>
 8005480:	2308      	movs	r3, #8
 8005482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005486:	e0cc      	b.n	8005622 <UART_SetConfig+0x2e6>
 8005488:	2310      	movs	r3, #16
 800548a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800548e:	e0c8      	b.n	8005622 <UART_SetConfig+0x2e6>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a5e      	ldr	r2, [pc, #376]	; (8005610 <UART_SetConfig+0x2d4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d125      	bne.n	80054e6 <UART_SetConfig+0x1aa>
 800549a:	4b5b      	ldr	r3, [pc, #364]	; (8005608 <UART_SetConfig+0x2cc>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054a4:	2b30      	cmp	r3, #48	; 0x30
 80054a6:	d016      	beq.n	80054d6 <UART_SetConfig+0x19a>
 80054a8:	2b30      	cmp	r3, #48	; 0x30
 80054aa:	d818      	bhi.n	80054de <UART_SetConfig+0x1a2>
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	d00a      	beq.n	80054c6 <UART_SetConfig+0x18a>
 80054b0:	2b20      	cmp	r3, #32
 80054b2:	d814      	bhi.n	80054de <UART_SetConfig+0x1a2>
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <UART_SetConfig+0x182>
 80054b8:	2b10      	cmp	r3, #16
 80054ba:	d008      	beq.n	80054ce <UART_SetConfig+0x192>
 80054bc:	e00f      	b.n	80054de <UART_SetConfig+0x1a2>
 80054be:	2300      	movs	r3, #0
 80054c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054c4:	e0ad      	b.n	8005622 <UART_SetConfig+0x2e6>
 80054c6:	2302      	movs	r3, #2
 80054c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054cc:	e0a9      	b.n	8005622 <UART_SetConfig+0x2e6>
 80054ce:	2304      	movs	r3, #4
 80054d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054d4:	e0a5      	b.n	8005622 <UART_SetConfig+0x2e6>
 80054d6:	2308      	movs	r3, #8
 80054d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054dc:	e0a1      	b.n	8005622 <UART_SetConfig+0x2e6>
 80054de:	2310      	movs	r3, #16
 80054e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054e4:	e09d      	b.n	8005622 <UART_SetConfig+0x2e6>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a4a      	ldr	r2, [pc, #296]	; (8005614 <UART_SetConfig+0x2d8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d125      	bne.n	800553c <UART_SetConfig+0x200>
 80054f0:	4b45      	ldr	r3, [pc, #276]	; (8005608 <UART_SetConfig+0x2cc>)
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054fa:	2bc0      	cmp	r3, #192	; 0xc0
 80054fc:	d016      	beq.n	800552c <UART_SetConfig+0x1f0>
 80054fe:	2bc0      	cmp	r3, #192	; 0xc0
 8005500:	d818      	bhi.n	8005534 <UART_SetConfig+0x1f8>
 8005502:	2b80      	cmp	r3, #128	; 0x80
 8005504:	d00a      	beq.n	800551c <UART_SetConfig+0x1e0>
 8005506:	2b80      	cmp	r3, #128	; 0x80
 8005508:	d814      	bhi.n	8005534 <UART_SetConfig+0x1f8>
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <UART_SetConfig+0x1d8>
 800550e:	2b40      	cmp	r3, #64	; 0x40
 8005510:	d008      	beq.n	8005524 <UART_SetConfig+0x1e8>
 8005512:	e00f      	b.n	8005534 <UART_SetConfig+0x1f8>
 8005514:	2300      	movs	r3, #0
 8005516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800551a:	e082      	b.n	8005622 <UART_SetConfig+0x2e6>
 800551c:	2302      	movs	r3, #2
 800551e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005522:	e07e      	b.n	8005622 <UART_SetConfig+0x2e6>
 8005524:	2304      	movs	r3, #4
 8005526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800552a:	e07a      	b.n	8005622 <UART_SetConfig+0x2e6>
 800552c:	2308      	movs	r3, #8
 800552e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005532:	e076      	b.n	8005622 <UART_SetConfig+0x2e6>
 8005534:	2310      	movs	r3, #16
 8005536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800553a:	e072      	b.n	8005622 <UART_SetConfig+0x2e6>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a35      	ldr	r2, [pc, #212]	; (8005618 <UART_SetConfig+0x2dc>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d12a      	bne.n	800559c <UART_SetConfig+0x260>
 8005546:	4b30      	ldr	r3, [pc, #192]	; (8005608 <UART_SetConfig+0x2cc>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005554:	d01a      	beq.n	800558c <UART_SetConfig+0x250>
 8005556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800555a:	d81b      	bhi.n	8005594 <UART_SetConfig+0x258>
 800555c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005560:	d00c      	beq.n	800557c <UART_SetConfig+0x240>
 8005562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005566:	d815      	bhi.n	8005594 <UART_SetConfig+0x258>
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <UART_SetConfig+0x238>
 800556c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005570:	d008      	beq.n	8005584 <UART_SetConfig+0x248>
 8005572:	e00f      	b.n	8005594 <UART_SetConfig+0x258>
 8005574:	2300      	movs	r3, #0
 8005576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800557a:	e052      	b.n	8005622 <UART_SetConfig+0x2e6>
 800557c:	2302      	movs	r3, #2
 800557e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005582:	e04e      	b.n	8005622 <UART_SetConfig+0x2e6>
 8005584:	2304      	movs	r3, #4
 8005586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800558a:	e04a      	b.n	8005622 <UART_SetConfig+0x2e6>
 800558c:	2308      	movs	r3, #8
 800558e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005592:	e046      	b.n	8005622 <UART_SetConfig+0x2e6>
 8005594:	2310      	movs	r3, #16
 8005596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800559a:	e042      	b.n	8005622 <UART_SetConfig+0x2e6>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a17      	ldr	r2, [pc, #92]	; (8005600 <UART_SetConfig+0x2c4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d13a      	bne.n	800561c <UART_SetConfig+0x2e0>
 80055a6:	4b18      	ldr	r3, [pc, #96]	; (8005608 <UART_SetConfig+0x2cc>)
 80055a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055b4:	d01a      	beq.n	80055ec <UART_SetConfig+0x2b0>
 80055b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055ba:	d81b      	bhi.n	80055f4 <UART_SetConfig+0x2b8>
 80055bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055c0:	d00c      	beq.n	80055dc <UART_SetConfig+0x2a0>
 80055c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055c6:	d815      	bhi.n	80055f4 <UART_SetConfig+0x2b8>
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <UART_SetConfig+0x298>
 80055cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d0:	d008      	beq.n	80055e4 <UART_SetConfig+0x2a8>
 80055d2:	e00f      	b.n	80055f4 <UART_SetConfig+0x2b8>
 80055d4:	2300      	movs	r3, #0
 80055d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055da:	e022      	b.n	8005622 <UART_SetConfig+0x2e6>
 80055dc:	2302      	movs	r3, #2
 80055de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055e2:	e01e      	b.n	8005622 <UART_SetConfig+0x2e6>
 80055e4:	2304      	movs	r3, #4
 80055e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ea:	e01a      	b.n	8005622 <UART_SetConfig+0x2e6>
 80055ec:	2308      	movs	r3, #8
 80055ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055f2:	e016      	b.n	8005622 <UART_SetConfig+0x2e6>
 80055f4:	2310      	movs	r3, #16
 80055f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055fa:	e012      	b.n	8005622 <UART_SetConfig+0x2e6>
 80055fc:	efff69f3 	.word	0xefff69f3
 8005600:	40008000 	.word	0x40008000
 8005604:	40013800 	.word	0x40013800
 8005608:	40021000 	.word	0x40021000
 800560c:	40004400 	.word	0x40004400
 8005610:	40004800 	.word	0x40004800
 8005614:	40004c00 	.word	0x40004c00
 8005618:	40005000 	.word	0x40005000
 800561c:	2310      	movs	r3, #16
 800561e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a9f      	ldr	r2, [pc, #636]	; (80058a4 <UART_SetConfig+0x568>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d17a      	bne.n	8005722 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800562c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005630:	2b08      	cmp	r3, #8
 8005632:	d824      	bhi.n	800567e <UART_SetConfig+0x342>
 8005634:	a201      	add	r2, pc, #4	; (adr r2, 800563c <UART_SetConfig+0x300>)
 8005636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563a:	bf00      	nop
 800563c:	08005661 	.word	0x08005661
 8005640:	0800567f 	.word	0x0800567f
 8005644:	08005669 	.word	0x08005669
 8005648:	0800567f 	.word	0x0800567f
 800564c:	0800566f 	.word	0x0800566f
 8005650:	0800567f 	.word	0x0800567f
 8005654:	0800567f 	.word	0x0800567f
 8005658:	0800567f 	.word	0x0800567f
 800565c:	08005677 	.word	0x08005677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005660:	f7fe fce8 	bl	8004034 <HAL_RCC_GetPCLK1Freq>
 8005664:	61f8      	str	r0, [r7, #28]
        break;
 8005666:	e010      	b.n	800568a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005668:	4b8f      	ldr	r3, [pc, #572]	; (80058a8 <UART_SetConfig+0x56c>)
 800566a:	61fb      	str	r3, [r7, #28]
        break;
 800566c:	e00d      	b.n	800568a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800566e:	f7fe fc49 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8005672:	61f8      	str	r0, [r7, #28]
        break;
 8005674:	e009      	b.n	800568a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800567a:	61fb      	str	r3, [r7, #28]
        break;
 800567c:	e005      	b.n	800568a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005688:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 80fb 	beq.w	8005888 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	4613      	mov	r3, r2
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	4413      	add	r3, r2
 800569c:	69fa      	ldr	r2, [r7, #28]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d305      	bcc.n	80056ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d903      	bls.n	80056b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80056b4:	e0e8      	b.n	8005888 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	2200      	movs	r2, #0
 80056ba:	461c      	mov	r4, r3
 80056bc:	4615      	mov	r5, r2
 80056be:	f04f 0200 	mov.w	r2, #0
 80056c2:	f04f 0300 	mov.w	r3, #0
 80056c6:	022b      	lsls	r3, r5, #8
 80056c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80056cc:	0222      	lsls	r2, r4, #8
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	6849      	ldr	r1, [r1, #4]
 80056d2:	0849      	lsrs	r1, r1, #1
 80056d4:	2000      	movs	r0, #0
 80056d6:	4688      	mov	r8, r1
 80056d8:	4681      	mov	r9, r0
 80056da:	eb12 0a08 	adds.w	sl, r2, r8
 80056de:	eb43 0b09 	adc.w	fp, r3, r9
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	603b      	str	r3, [r7, #0]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056f0:	4650      	mov	r0, sl
 80056f2:	4659      	mov	r1, fp
 80056f4:	f7fa fdbc 	bl	8000270 <__aeabi_uldivmod>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4613      	mov	r3, r2
 80056fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005706:	d308      	bcc.n	800571a <UART_SetConfig+0x3de>
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800570e:	d204      	bcs.n	800571a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	60da      	str	r2, [r3, #12]
 8005718:	e0b6      	b.n	8005888 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005720:	e0b2      	b.n	8005888 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800572a:	d15e      	bne.n	80057ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800572c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005730:	2b08      	cmp	r3, #8
 8005732:	d828      	bhi.n	8005786 <UART_SetConfig+0x44a>
 8005734:	a201      	add	r2, pc, #4	; (adr r2, 800573c <UART_SetConfig+0x400>)
 8005736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573a:	bf00      	nop
 800573c:	08005761 	.word	0x08005761
 8005740:	08005769 	.word	0x08005769
 8005744:	08005771 	.word	0x08005771
 8005748:	08005787 	.word	0x08005787
 800574c:	08005777 	.word	0x08005777
 8005750:	08005787 	.word	0x08005787
 8005754:	08005787 	.word	0x08005787
 8005758:	08005787 	.word	0x08005787
 800575c:	0800577f 	.word	0x0800577f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005760:	f7fe fc68 	bl	8004034 <HAL_RCC_GetPCLK1Freq>
 8005764:	61f8      	str	r0, [r7, #28]
        break;
 8005766:	e014      	b.n	8005792 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005768:	f7fe fc7a 	bl	8004060 <HAL_RCC_GetPCLK2Freq>
 800576c:	61f8      	str	r0, [r7, #28]
        break;
 800576e:	e010      	b.n	8005792 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005770:	4b4d      	ldr	r3, [pc, #308]	; (80058a8 <UART_SetConfig+0x56c>)
 8005772:	61fb      	str	r3, [r7, #28]
        break;
 8005774:	e00d      	b.n	8005792 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005776:	f7fe fbc5 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 800577a:	61f8      	str	r0, [r7, #28]
        break;
 800577c:	e009      	b.n	8005792 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800577e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005782:	61fb      	str	r3, [r7, #28]
        break;
 8005784:	e005      	b.n	8005792 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005790:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d077      	beq.n	8005888 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	005a      	lsls	r2, r3, #1
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	441a      	add	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	2b0f      	cmp	r3, #15
 80057b2:	d916      	bls.n	80057e2 <UART_SetConfig+0x4a6>
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ba:	d212      	bcs.n	80057e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f023 030f 	bic.w	r3, r3, #15
 80057c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	085b      	lsrs	r3, r3, #1
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	8afb      	ldrh	r3, [r7, #22]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	8afa      	ldrh	r2, [r7, #22]
 80057de:	60da      	str	r2, [r3, #12]
 80057e0:	e052      	b.n	8005888 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057e8:	e04e      	b.n	8005888 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057ee:	2b08      	cmp	r3, #8
 80057f0:	d827      	bhi.n	8005842 <UART_SetConfig+0x506>
 80057f2:	a201      	add	r2, pc, #4	; (adr r2, 80057f8 <UART_SetConfig+0x4bc>)
 80057f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f8:	0800581d 	.word	0x0800581d
 80057fc:	08005825 	.word	0x08005825
 8005800:	0800582d 	.word	0x0800582d
 8005804:	08005843 	.word	0x08005843
 8005808:	08005833 	.word	0x08005833
 800580c:	08005843 	.word	0x08005843
 8005810:	08005843 	.word	0x08005843
 8005814:	08005843 	.word	0x08005843
 8005818:	0800583b 	.word	0x0800583b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800581c:	f7fe fc0a 	bl	8004034 <HAL_RCC_GetPCLK1Freq>
 8005820:	61f8      	str	r0, [r7, #28]
        break;
 8005822:	e014      	b.n	800584e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005824:	f7fe fc1c 	bl	8004060 <HAL_RCC_GetPCLK2Freq>
 8005828:	61f8      	str	r0, [r7, #28]
        break;
 800582a:	e010      	b.n	800584e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800582c:	4b1e      	ldr	r3, [pc, #120]	; (80058a8 <UART_SetConfig+0x56c>)
 800582e:	61fb      	str	r3, [r7, #28]
        break;
 8005830:	e00d      	b.n	800584e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005832:	f7fe fb67 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8005836:	61f8      	str	r0, [r7, #28]
        break;
 8005838:	e009      	b.n	800584e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800583a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800583e:	61fb      	str	r3, [r7, #28]
        break;
 8005840:	e005      	b.n	800584e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800584c:	bf00      	nop
    }

    if (pclk != 0U)
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d019      	beq.n	8005888 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	085a      	lsrs	r2, r3, #1
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	441a      	add	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	fbb2 f3f3 	udiv	r3, r2, r3
 8005866:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	2b0f      	cmp	r3, #15
 800586c:	d909      	bls.n	8005882 <UART_SetConfig+0x546>
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005874:	d205      	bcs.n	8005882 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60da      	str	r2, [r3, #12]
 8005880:	e002      	b.n	8005888 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005894:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005898:	4618      	mov	r0, r3
 800589a:	3728      	adds	r7, #40	; 0x28
 800589c:	46bd      	mov	sp, r7
 800589e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058a2:	bf00      	nop
 80058a4:	40008000 	.word	0x40008000
 80058a8:	00f42400 	.word	0x00f42400

080058ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	f003 0310 	and.w	r3, r3, #16
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01a      	beq.n	80059c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059aa:	d10a      	bne.n	80059c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	605a      	str	r2, [r3, #4]
  }
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b098      	sub	sp, #96	; 0x60
 80059f4:	af02      	add	r7, sp, #8
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a00:	f7fb fe2a 	bl	8001658 <HAL_GetTick>
 8005a04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0308 	and.w	r3, r3, #8
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d12e      	bne.n	8005a72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f88c 	bl	8005b40 <UART_WaitOnFlagUntilTimeout>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d021      	beq.n	8005a72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a42:	653b      	str	r3, [r7, #80]	; 0x50
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a4e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a54:	e841 2300 	strex	r3, r2, [r1]
 8005a58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e6      	bne.n	8005a2e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e062      	b.n	8005b38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b04      	cmp	r3, #4
 8005a7e:	d149      	bne.n	8005b14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f856 	bl	8005b40 <UART_WaitOnFlagUntilTimeout>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d03c      	beq.n	8005b14 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	e853 3f00 	ldrex	r3, [r3]
 8005aa6:	623b      	str	r3, [r7, #32]
   return(result);
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab8:	633b      	str	r3, [r7, #48]	; 0x30
 8005aba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac0:	e841 2300 	strex	r3, r2, [r1]
 8005ac4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e6      	bne.n	8005a9a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f023 0301 	bic.w	r3, r3, #1
 8005ae2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3308      	adds	r3, #8
 8005aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aec:	61fa      	str	r2, [r7, #28]
 8005aee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	69b9      	ldr	r1, [r7, #24]
 8005af2:	69fa      	ldr	r2, [r7, #28]
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	617b      	str	r3, [r7, #20]
   return(result);
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e5      	bne.n	8005acc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e011      	b.n	8005b38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3758      	adds	r7, #88	; 0x58
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b50:	e049      	b.n	8005be6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b58:	d045      	beq.n	8005be6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b5a:	f7fb fd7d 	bl	8001658 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d302      	bcc.n	8005b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e048      	b.n	8005c06 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d031      	beq.n	8005be6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d110      	bne.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2208      	movs	r2, #8
 8005b96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f838 	bl	8005c0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e029      	b.n	8005c06 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bc0:	d111      	bne.n	8005be6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f81e 	bl	8005c0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e00f      	b.n	8005c06 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69da      	ldr	r2, [r3, #28]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	bf0c      	ite	eq
 8005bf6:	2301      	moveq	r3, #1
 8005bf8:	2300      	movne	r3, #0
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d0a6      	beq.n	8005b52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b095      	sub	sp, #84	; 0x54
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1e:	e853 3f00 	ldrex	r3, [r3]
 8005c22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	461a      	mov	r2, r3
 8005c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c34:	643b      	str	r3, [r7, #64]	; 0x40
 8005c36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c3c:	e841 2300 	strex	r3, r2, [r1]
 8005c40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e6      	bne.n	8005c16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	f023 0301 	bic.w	r3, r3, #1
 8005c5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3308      	adds	r3, #8
 8005c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e5      	bne.n	8005c48 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d118      	bne.n	8005cb6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	e853 3f00 	ldrex	r3, [r3]
 8005c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f023 0310 	bic.w	r3, r3, #16
 8005c98:	647b      	str	r3, [r7, #68]	; 0x44
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ca2:	61bb      	str	r3, [r7, #24]
 8005ca4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca6:	6979      	ldr	r1, [r7, #20]
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	e841 2300 	strex	r3, r2, [r1]
 8005cae:	613b      	str	r3, [r7, #16]
   return(result);
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1e6      	bne.n	8005c84 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005cca:	bf00      	nop
 8005ccc:	3754      	adds	r7, #84	; 0x54
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <std>:
 8005cd8:	2300      	movs	r3, #0
 8005cda:	b510      	push	{r4, lr}
 8005cdc:	4604      	mov	r4, r0
 8005cde:	e9c0 3300 	strd	r3, r3, [r0]
 8005ce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ce6:	6083      	str	r3, [r0, #8]
 8005ce8:	8181      	strh	r1, [r0, #12]
 8005cea:	6643      	str	r3, [r0, #100]	; 0x64
 8005cec:	81c2      	strh	r2, [r0, #14]
 8005cee:	6183      	str	r3, [r0, #24]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	2208      	movs	r2, #8
 8005cf4:	305c      	adds	r0, #92	; 0x5c
 8005cf6:	f000 f91f 	bl	8005f38 <memset>
 8005cfa:	4b0d      	ldr	r3, [pc, #52]	; (8005d30 <std+0x58>)
 8005cfc:	6263      	str	r3, [r4, #36]	; 0x24
 8005cfe:	4b0d      	ldr	r3, [pc, #52]	; (8005d34 <std+0x5c>)
 8005d00:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d02:	4b0d      	ldr	r3, [pc, #52]	; (8005d38 <std+0x60>)
 8005d04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d06:	4b0d      	ldr	r3, [pc, #52]	; (8005d3c <std+0x64>)
 8005d08:	6323      	str	r3, [r4, #48]	; 0x30
 8005d0a:	4b0d      	ldr	r3, [pc, #52]	; (8005d40 <std+0x68>)
 8005d0c:	6224      	str	r4, [r4, #32]
 8005d0e:	429c      	cmp	r4, r3
 8005d10:	d006      	beq.n	8005d20 <std+0x48>
 8005d12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005d16:	4294      	cmp	r4, r2
 8005d18:	d002      	beq.n	8005d20 <std+0x48>
 8005d1a:	33d0      	adds	r3, #208	; 0xd0
 8005d1c:	429c      	cmp	r4, r3
 8005d1e:	d105      	bne.n	8005d2c <std+0x54>
 8005d20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d28:	f000 b938 	b.w	8005f9c <__retarget_lock_init_recursive>
 8005d2c:	bd10      	pop	{r4, pc}
 8005d2e:	bf00      	nop
 8005d30:	080067fd 	.word	0x080067fd
 8005d34:	0800681f 	.word	0x0800681f
 8005d38:	08006857 	.word	0x08006857
 8005d3c:	0800687b 	.word	0x0800687b
 8005d40:	20000518 	.word	0x20000518

08005d44 <stdio_exit_handler>:
 8005d44:	4a02      	ldr	r2, [pc, #8]	; (8005d50 <stdio_exit_handler+0xc>)
 8005d46:	4903      	ldr	r1, [pc, #12]	; (8005d54 <stdio_exit_handler+0x10>)
 8005d48:	4803      	ldr	r0, [pc, #12]	; (8005d58 <stdio_exit_handler+0x14>)
 8005d4a:	f000 b869 	b.w	8005e20 <_fwalk_sglue>
 8005d4e:	bf00      	nop
 8005d50:	20000230 	.word	0x20000230
 8005d54:	08006795 	.word	0x08006795
 8005d58:	2000023c 	.word	0x2000023c

08005d5c <cleanup_stdio>:
 8005d5c:	6841      	ldr	r1, [r0, #4]
 8005d5e:	4b0c      	ldr	r3, [pc, #48]	; (8005d90 <cleanup_stdio+0x34>)
 8005d60:	4299      	cmp	r1, r3
 8005d62:	b510      	push	{r4, lr}
 8005d64:	4604      	mov	r4, r0
 8005d66:	d001      	beq.n	8005d6c <cleanup_stdio+0x10>
 8005d68:	f000 fd14 	bl	8006794 <_fflush_r>
 8005d6c:	68a1      	ldr	r1, [r4, #8]
 8005d6e:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <cleanup_stdio+0x38>)
 8005d70:	4299      	cmp	r1, r3
 8005d72:	d002      	beq.n	8005d7a <cleanup_stdio+0x1e>
 8005d74:	4620      	mov	r0, r4
 8005d76:	f000 fd0d 	bl	8006794 <_fflush_r>
 8005d7a:	68e1      	ldr	r1, [r4, #12]
 8005d7c:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <cleanup_stdio+0x3c>)
 8005d7e:	4299      	cmp	r1, r3
 8005d80:	d004      	beq.n	8005d8c <cleanup_stdio+0x30>
 8005d82:	4620      	mov	r0, r4
 8005d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d88:	f000 bd04 	b.w	8006794 <_fflush_r>
 8005d8c:	bd10      	pop	{r4, pc}
 8005d8e:	bf00      	nop
 8005d90:	20000518 	.word	0x20000518
 8005d94:	20000580 	.word	0x20000580
 8005d98:	200005e8 	.word	0x200005e8

08005d9c <global_stdio_init.part.0>:
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	4b0b      	ldr	r3, [pc, #44]	; (8005dcc <global_stdio_init.part.0+0x30>)
 8005da0:	4c0b      	ldr	r4, [pc, #44]	; (8005dd0 <global_stdio_init.part.0+0x34>)
 8005da2:	4a0c      	ldr	r2, [pc, #48]	; (8005dd4 <global_stdio_init.part.0+0x38>)
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	4620      	mov	r0, r4
 8005da8:	2200      	movs	r2, #0
 8005daa:	2104      	movs	r1, #4
 8005dac:	f7ff ff94 	bl	8005cd8 <std>
 8005db0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005db4:	2201      	movs	r2, #1
 8005db6:	2109      	movs	r1, #9
 8005db8:	f7ff ff8e 	bl	8005cd8 <std>
 8005dbc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc6:	2112      	movs	r1, #18
 8005dc8:	f7ff bf86 	b.w	8005cd8 <std>
 8005dcc:	20000650 	.word	0x20000650
 8005dd0:	20000518 	.word	0x20000518
 8005dd4:	08005d45 	.word	0x08005d45

08005dd8 <__sfp_lock_acquire>:
 8005dd8:	4801      	ldr	r0, [pc, #4]	; (8005de0 <__sfp_lock_acquire+0x8>)
 8005dda:	f000 b8e0 	b.w	8005f9e <__retarget_lock_acquire_recursive>
 8005dde:	bf00      	nop
 8005de0:	20000655 	.word	0x20000655

08005de4 <__sfp_lock_release>:
 8005de4:	4801      	ldr	r0, [pc, #4]	; (8005dec <__sfp_lock_release+0x8>)
 8005de6:	f000 b8db 	b.w	8005fa0 <__retarget_lock_release_recursive>
 8005dea:	bf00      	nop
 8005dec:	20000655 	.word	0x20000655

08005df0 <__sinit>:
 8005df0:	b510      	push	{r4, lr}
 8005df2:	4604      	mov	r4, r0
 8005df4:	f7ff fff0 	bl	8005dd8 <__sfp_lock_acquire>
 8005df8:	6a23      	ldr	r3, [r4, #32]
 8005dfa:	b11b      	cbz	r3, 8005e04 <__sinit+0x14>
 8005dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e00:	f7ff bff0 	b.w	8005de4 <__sfp_lock_release>
 8005e04:	4b04      	ldr	r3, [pc, #16]	; (8005e18 <__sinit+0x28>)
 8005e06:	6223      	str	r3, [r4, #32]
 8005e08:	4b04      	ldr	r3, [pc, #16]	; (8005e1c <__sinit+0x2c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1f5      	bne.n	8005dfc <__sinit+0xc>
 8005e10:	f7ff ffc4 	bl	8005d9c <global_stdio_init.part.0>
 8005e14:	e7f2      	b.n	8005dfc <__sinit+0xc>
 8005e16:	bf00      	nop
 8005e18:	08005d5d 	.word	0x08005d5d
 8005e1c:	20000650 	.word	0x20000650

08005e20 <_fwalk_sglue>:
 8005e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e24:	4607      	mov	r7, r0
 8005e26:	4688      	mov	r8, r1
 8005e28:	4614      	mov	r4, r2
 8005e2a:	2600      	movs	r6, #0
 8005e2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e30:	f1b9 0901 	subs.w	r9, r9, #1
 8005e34:	d505      	bpl.n	8005e42 <_fwalk_sglue+0x22>
 8005e36:	6824      	ldr	r4, [r4, #0]
 8005e38:	2c00      	cmp	r4, #0
 8005e3a:	d1f7      	bne.n	8005e2c <_fwalk_sglue+0xc>
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e42:	89ab      	ldrh	r3, [r5, #12]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d907      	bls.n	8005e58 <_fwalk_sglue+0x38>
 8005e48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	d003      	beq.n	8005e58 <_fwalk_sglue+0x38>
 8005e50:	4629      	mov	r1, r5
 8005e52:	4638      	mov	r0, r7
 8005e54:	47c0      	blx	r8
 8005e56:	4306      	orrs	r6, r0
 8005e58:	3568      	adds	r5, #104	; 0x68
 8005e5a:	e7e9      	b.n	8005e30 <_fwalk_sglue+0x10>

08005e5c <iprintf>:
 8005e5c:	b40f      	push	{r0, r1, r2, r3}
 8005e5e:	b507      	push	{r0, r1, r2, lr}
 8005e60:	4906      	ldr	r1, [pc, #24]	; (8005e7c <iprintf+0x20>)
 8005e62:	ab04      	add	r3, sp, #16
 8005e64:	6808      	ldr	r0, [r1, #0]
 8005e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e6a:	6881      	ldr	r1, [r0, #8]
 8005e6c:	9301      	str	r3, [sp, #4]
 8005e6e:	f000 f8c1 	bl	8005ff4 <_vfiprintf_r>
 8005e72:	b003      	add	sp, #12
 8005e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e78:	b004      	add	sp, #16
 8005e7a:	4770      	bx	lr
 8005e7c:	20000288 	.word	0x20000288

08005e80 <_puts_r>:
 8005e80:	6a03      	ldr	r3, [r0, #32]
 8005e82:	b570      	push	{r4, r5, r6, lr}
 8005e84:	6884      	ldr	r4, [r0, #8]
 8005e86:	4605      	mov	r5, r0
 8005e88:	460e      	mov	r6, r1
 8005e8a:	b90b      	cbnz	r3, 8005e90 <_puts_r+0x10>
 8005e8c:	f7ff ffb0 	bl	8005df0 <__sinit>
 8005e90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e92:	07db      	lsls	r3, r3, #31
 8005e94:	d405      	bmi.n	8005ea2 <_puts_r+0x22>
 8005e96:	89a3      	ldrh	r3, [r4, #12]
 8005e98:	0598      	lsls	r0, r3, #22
 8005e9a:	d402      	bmi.n	8005ea2 <_puts_r+0x22>
 8005e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e9e:	f000 f87e 	bl	8005f9e <__retarget_lock_acquire_recursive>
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	0719      	lsls	r1, r3, #28
 8005ea6:	d513      	bpl.n	8005ed0 <_puts_r+0x50>
 8005ea8:	6923      	ldr	r3, [r4, #16]
 8005eaa:	b18b      	cbz	r3, 8005ed0 <_puts_r+0x50>
 8005eac:	3e01      	subs	r6, #1
 8005eae:	68a3      	ldr	r3, [r4, #8]
 8005eb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	60a3      	str	r3, [r4, #8]
 8005eb8:	b9e9      	cbnz	r1, 8005ef6 <_puts_r+0x76>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	da2e      	bge.n	8005f1c <_puts_r+0x9c>
 8005ebe:	4622      	mov	r2, r4
 8005ec0:	210a      	movs	r1, #10
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	f000 fcdd 	bl	8006882 <__swbuf_r>
 8005ec8:	3001      	adds	r0, #1
 8005eca:	d007      	beq.n	8005edc <_puts_r+0x5c>
 8005ecc:	250a      	movs	r5, #10
 8005ece:	e007      	b.n	8005ee0 <_puts_r+0x60>
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f000 fd12 	bl	80068fc <__swsetup_r>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	d0e7      	beq.n	8005eac <_puts_r+0x2c>
 8005edc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005ee0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ee2:	07da      	lsls	r2, r3, #31
 8005ee4:	d405      	bmi.n	8005ef2 <_puts_r+0x72>
 8005ee6:	89a3      	ldrh	r3, [r4, #12]
 8005ee8:	059b      	lsls	r3, r3, #22
 8005eea:	d402      	bmi.n	8005ef2 <_puts_r+0x72>
 8005eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eee:	f000 f857 	bl	8005fa0 <__retarget_lock_release_recursive>
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	bd70      	pop	{r4, r5, r6, pc}
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	da04      	bge.n	8005f04 <_puts_r+0x84>
 8005efa:	69a2      	ldr	r2, [r4, #24]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	dc06      	bgt.n	8005f0e <_puts_r+0x8e>
 8005f00:	290a      	cmp	r1, #10
 8005f02:	d004      	beq.n	8005f0e <_puts_r+0x8e>
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	6022      	str	r2, [r4, #0]
 8005f0a:	7019      	strb	r1, [r3, #0]
 8005f0c:	e7cf      	b.n	8005eae <_puts_r+0x2e>
 8005f0e:	4622      	mov	r2, r4
 8005f10:	4628      	mov	r0, r5
 8005f12:	f000 fcb6 	bl	8006882 <__swbuf_r>
 8005f16:	3001      	adds	r0, #1
 8005f18:	d1c9      	bne.n	8005eae <_puts_r+0x2e>
 8005f1a:	e7df      	b.n	8005edc <_puts_r+0x5c>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	250a      	movs	r5, #10
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	6022      	str	r2, [r4, #0]
 8005f24:	701d      	strb	r5, [r3, #0]
 8005f26:	e7db      	b.n	8005ee0 <_puts_r+0x60>

08005f28 <puts>:
 8005f28:	4b02      	ldr	r3, [pc, #8]	; (8005f34 <puts+0xc>)
 8005f2a:	4601      	mov	r1, r0
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	f7ff bfa7 	b.w	8005e80 <_puts_r>
 8005f32:	bf00      	nop
 8005f34:	20000288 	.word	0x20000288

08005f38 <memset>:
 8005f38:	4402      	add	r2, r0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d100      	bne.n	8005f42 <memset+0xa>
 8005f40:	4770      	bx	lr
 8005f42:	f803 1b01 	strb.w	r1, [r3], #1
 8005f46:	e7f9      	b.n	8005f3c <memset+0x4>

08005f48 <__errno>:
 8005f48:	4b01      	ldr	r3, [pc, #4]	; (8005f50 <__errno+0x8>)
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	20000288 	.word	0x20000288

08005f54 <__libc_init_array>:
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	4d0d      	ldr	r5, [pc, #52]	; (8005f8c <__libc_init_array+0x38>)
 8005f58:	4c0d      	ldr	r4, [pc, #52]	; (8005f90 <__libc_init_array+0x3c>)
 8005f5a:	1b64      	subs	r4, r4, r5
 8005f5c:	10a4      	asrs	r4, r4, #2
 8005f5e:	2600      	movs	r6, #0
 8005f60:	42a6      	cmp	r6, r4
 8005f62:	d109      	bne.n	8005f78 <__libc_init_array+0x24>
 8005f64:	4d0b      	ldr	r5, [pc, #44]	; (8005f94 <__libc_init_array+0x40>)
 8005f66:	4c0c      	ldr	r4, [pc, #48]	; (8005f98 <__libc_init_array+0x44>)
 8005f68:	f000 fe46 	bl	8006bf8 <_init>
 8005f6c:	1b64      	subs	r4, r4, r5
 8005f6e:	10a4      	asrs	r4, r4, #2
 8005f70:	2600      	movs	r6, #0
 8005f72:	42a6      	cmp	r6, r4
 8005f74:	d105      	bne.n	8005f82 <__libc_init_array+0x2e>
 8005f76:	bd70      	pop	{r4, r5, r6, pc}
 8005f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f7c:	4798      	blx	r3
 8005f7e:	3601      	adds	r6, #1
 8005f80:	e7ee      	b.n	8005f60 <__libc_init_array+0xc>
 8005f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f86:	4798      	blx	r3
 8005f88:	3601      	adds	r6, #1
 8005f8a:	e7f2      	b.n	8005f72 <__libc_init_array+0x1e>
 8005f8c:	08006ce4 	.word	0x08006ce4
 8005f90:	08006ce4 	.word	0x08006ce4
 8005f94:	08006ce4 	.word	0x08006ce4
 8005f98:	08006ce8 	.word	0x08006ce8

08005f9c <__retarget_lock_init_recursive>:
 8005f9c:	4770      	bx	lr

08005f9e <__retarget_lock_acquire_recursive>:
 8005f9e:	4770      	bx	lr

08005fa0 <__retarget_lock_release_recursive>:
 8005fa0:	4770      	bx	lr

08005fa2 <__sfputc_r>:
 8005fa2:	6893      	ldr	r3, [r2, #8]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	b410      	push	{r4}
 8005faa:	6093      	str	r3, [r2, #8]
 8005fac:	da08      	bge.n	8005fc0 <__sfputc_r+0x1e>
 8005fae:	6994      	ldr	r4, [r2, #24]
 8005fb0:	42a3      	cmp	r3, r4
 8005fb2:	db01      	blt.n	8005fb8 <__sfputc_r+0x16>
 8005fb4:	290a      	cmp	r1, #10
 8005fb6:	d103      	bne.n	8005fc0 <__sfputc_r+0x1e>
 8005fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fbc:	f000 bc61 	b.w	8006882 <__swbuf_r>
 8005fc0:	6813      	ldr	r3, [r2, #0]
 8005fc2:	1c58      	adds	r0, r3, #1
 8005fc4:	6010      	str	r0, [r2, #0]
 8005fc6:	7019      	strb	r1, [r3, #0]
 8005fc8:	4608      	mov	r0, r1
 8005fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <__sfputs_r>:
 8005fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd2:	4606      	mov	r6, r0
 8005fd4:	460f      	mov	r7, r1
 8005fd6:	4614      	mov	r4, r2
 8005fd8:	18d5      	adds	r5, r2, r3
 8005fda:	42ac      	cmp	r4, r5
 8005fdc:	d101      	bne.n	8005fe2 <__sfputs_r+0x12>
 8005fde:	2000      	movs	r0, #0
 8005fe0:	e007      	b.n	8005ff2 <__sfputs_r+0x22>
 8005fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe6:	463a      	mov	r2, r7
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f7ff ffda 	bl	8005fa2 <__sfputc_r>
 8005fee:	1c43      	adds	r3, r0, #1
 8005ff0:	d1f3      	bne.n	8005fda <__sfputs_r+0xa>
 8005ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005ff4 <_vfiprintf_r>:
 8005ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff8:	460d      	mov	r5, r1
 8005ffa:	b09d      	sub	sp, #116	; 0x74
 8005ffc:	4614      	mov	r4, r2
 8005ffe:	4698      	mov	r8, r3
 8006000:	4606      	mov	r6, r0
 8006002:	b118      	cbz	r0, 800600c <_vfiprintf_r+0x18>
 8006004:	6a03      	ldr	r3, [r0, #32]
 8006006:	b90b      	cbnz	r3, 800600c <_vfiprintf_r+0x18>
 8006008:	f7ff fef2 	bl	8005df0 <__sinit>
 800600c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800600e:	07d9      	lsls	r1, r3, #31
 8006010:	d405      	bmi.n	800601e <_vfiprintf_r+0x2a>
 8006012:	89ab      	ldrh	r3, [r5, #12]
 8006014:	059a      	lsls	r2, r3, #22
 8006016:	d402      	bmi.n	800601e <_vfiprintf_r+0x2a>
 8006018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800601a:	f7ff ffc0 	bl	8005f9e <__retarget_lock_acquire_recursive>
 800601e:	89ab      	ldrh	r3, [r5, #12]
 8006020:	071b      	lsls	r3, r3, #28
 8006022:	d501      	bpl.n	8006028 <_vfiprintf_r+0x34>
 8006024:	692b      	ldr	r3, [r5, #16]
 8006026:	b99b      	cbnz	r3, 8006050 <_vfiprintf_r+0x5c>
 8006028:	4629      	mov	r1, r5
 800602a:	4630      	mov	r0, r6
 800602c:	f000 fc66 	bl	80068fc <__swsetup_r>
 8006030:	b170      	cbz	r0, 8006050 <_vfiprintf_r+0x5c>
 8006032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006034:	07dc      	lsls	r4, r3, #31
 8006036:	d504      	bpl.n	8006042 <_vfiprintf_r+0x4e>
 8006038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800603c:	b01d      	add	sp, #116	; 0x74
 800603e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006042:	89ab      	ldrh	r3, [r5, #12]
 8006044:	0598      	lsls	r0, r3, #22
 8006046:	d4f7      	bmi.n	8006038 <_vfiprintf_r+0x44>
 8006048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800604a:	f7ff ffa9 	bl	8005fa0 <__retarget_lock_release_recursive>
 800604e:	e7f3      	b.n	8006038 <_vfiprintf_r+0x44>
 8006050:	2300      	movs	r3, #0
 8006052:	9309      	str	r3, [sp, #36]	; 0x24
 8006054:	2320      	movs	r3, #32
 8006056:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800605a:	f8cd 800c 	str.w	r8, [sp, #12]
 800605e:	2330      	movs	r3, #48	; 0x30
 8006060:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006214 <_vfiprintf_r+0x220>
 8006064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006068:	f04f 0901 	mov.w	r9, #1
 800606c:	4623      	mov	r3, r4
 800606e:	469a      	mov	sl, r3
 8006070:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006074:	b10a      	cbz	r2, 800607a <_vfiprintf_r+0x86>
 8006076:	2a25      	cmp	r2, #37	; 0x25
 8006078:	d1f9      	bne.n	800606e <_vfiprintf_r+0x7a>
 800607a:	ebba 0b04 	subs.w	fp, sl, r4
 800607e:	d00b      	beq.n	8006098 <_vfiprintf_r+0xa4>
 8006080:	465b      	mov	r3, fp
 8006082:	4622      	mov	r2, r4
 8006084:	4629      	mov	r1, r5
 8006086:	4630      	mov	r0, r6
 8006088:	f7ff ffa2 	bl	8005fd0 <__sfputs_r>
 800608c:	3001      	adds	r0, #1
 800608e:	f000 80a9 	beq.w	80061e4 <_vfiprintf_r+0x1f0>
 8006092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006094:	445a      	add	r2, fp
 8006096:	9209      	str	r2, [sp, #36]	; 0x24
 8006098:	f89a 3000 	ldrb.w	r3, [sl]
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 80a1 	beq.w	80061e4 <_vfiprintf_r+0x1f0>
 80060a2:	2300      	movs	r3, #0
 80060a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060ac:	f10a 0a01 	add.w	sl, sl, #1
 80060b0:	9304      	str	r3, [sp, #16]
 80060b2:	9307      	str	r3, [sp, #28]
 80060b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060b8:	931a      	str	r3, [sp, #104]	; 0x68
 80060ba:	4654      	mov	r4, sl
 80060bc:	2205      	movs	r2, #5
 80060be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060c2:	4854      	ldr	r0, [pc, #336]	; (8006214 <_vfiprintf_r+0x220>)
 80060c4:	f7fa f884 	bl	80001d0 <memchr>
 80060c8:	9a04      	ldr	r2, [sp, #16]
 80060ca:	b9d8      	cbnz	r0, 8006104 <_vfiprintf_r+0x110>
 80060cc:	06d1      	lsls	r1, r2, #27
 80060ce:	bf44      	itt	mi
 80060d0:	2320      	movmi	r3, #32
 80060d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060d6:	0713      	lsls	r3, r2, #28
 80060d8:	bf44      	itt	mi
 80060da:	232b      	movmi	r3, #43	; 0x2b
 80060dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060e0:	f89a 3000 	ldrb.w	r3, [sl]
 80060e4:	2b2a      	cmp	r3, #42	; 0x2a
 80060e6:	d015      	beq.n	8006114 <_vfiprintf_r+0x120>
 80060e8:	9a07      	ldr	r2, [sp, #28]
 80060ea:	4654      	mov	r4, sl
 80060ec:	2000      	movs	r0, #0
 80060ee:	f04f 0c0a 	mov.w	ip, #10
 80060f2:	4621      	mov	r1, r4
 80060f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060f8:	3b30      	subs	r3, #48	; 0x30
 80060fa:	2b09      	cmp	r3, #9
 80060fc:	d94d      	bls.n	800619a <_vfiprintf_r+0x1a6>
 80060fe:	b1b0      	cbz	r0, 800612e <_vfiprintf_r+0x13a>
 8006100:	9207      	str	r2, [sp, #28]
 8006102:	e014      	b.n	800612e <_vfiprintf_r+0x13a>
 8006104:	eba0 0308 	sub.w	r3, r0, r8
 8006108:	fa09 f303 	lsl.w	r3, r9, r3
 800610c:	4313      	orrs	r3, r2
 800610e:	9304      	str	r3, [sp, #16]
 8006110:	46a2      	mov	sl, r4
 8006112:	e7d2      	b.n	80060ba <_vfiprintf_r+0xc6>
 8006114:	9b03      	ldr	r3, [sp, #12]
 8006116:	1d19      	adds	r1, r3, #4
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	9103      	str	r1, [sp, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	bfbb      	ittet	lt
 8006120:	425b      	neglt	r3, r3
 8006122:	f042 0202 	orrlt.w	r2, r2, #2
 8006126:	9307      	strge	r3, [sp, #28]
 8006128:	9307      	strlt	r3, [sp, #28]
 800612a:	bfb8      	it	lt
 800612c:	9204      	strlt	r2, [sp, #16]
 800612e:	7823      	ldrb	r3, [r4, #0]
 8006130:	2b2e      	cmp	r3, #46	; 0x2e
 8006132:	d10c      	bne.n	800614e <_vfiprintf_r+0x15a>
 8006134:	7863      	ldrb	r3, [r4, #1]
 8006136:	2b2a      	cmp	r3, #42	; 0x2a
 8006138:	d134      	bne.n	80061a4 <_vfiprintf_r+0x1b0>
 800613a:	9b03      	ldr	r3, [sp, #12]
 800613c:	1d1a      	adds	r2, r3, #4
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	9203      	str	r2, [sp, #12]
 8006142:	2b00      	cmp	r3, #0
 8006144:	bfb8      	it	lt
 8006146:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800614a:	3402      	adds	r4, #2
 800614c:	9305      	str	r3, [sp, #20]
 800614e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006224 <_vfiprintf_r+0x230>
 8006152:	7821      	ldrb	r1, [r4, #0]
 8006154:	2203      	movs	r2, #3
 8006156:	4650      	mov	r0, sl
 8006158:	f7fa f83a 	bl	80001d0 <memchr>
 800615c:	b138      	cbz	r0, 800616e <_vfiprintf_r+0x17a>
 800615e:	9b04      	ldr	r3, [sp, #16]
 8006160:	eba0 000a 	sub.w	r0, r0, sl
 8006164:	2240      	movs	r2, #64	; 0x40
 8006166:	4082      	lsls	r2, r0
 8006168:	4313      	orrs	r3, r2
 800616a:	3401      	adds	r4, #1
 800616c:	9304      	str	r3, [sp, #16]
 800616e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006172:	4829      	ldr	r0, [pc, #164]	; (8006218 <_vfiprintf_r+0x224>)
 8006174:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006178:	2206      	movs	r2, #6
 800617a:	f7fa f829 	bl	80001d0 <memchr>
 800617e:	2800      	cmp	r0, #0
 8006180:	d03f      	beq.n	8006202 <_vfiprintf_r+0x20e>
 8006182:	4b26      	ldr	r3, [pc, #152]	; (800621c <_vfiprintf_r+0x228>)
 8006184:	bb1b      	cbnz	r3, 80061ce <_vfiprintf_r+0x1da>
 8006186:	9b03      	ldr	r3, [sp, #12]
 8006188:	3307      	adds	r3, #7
 800618a:	f023 0307 	bic.w	r3, r3, #7
 800618e:	3308      	adds	r3, #8
 8006190:	9303      	str	r3, [sp, #12]
 8006192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006194:	443b      	add	r3, r7
 8006196:	9309      	str	r3, [sp, #36]	; 0x24
 8006198:	e768      	b.n	800606c <_vfiprintf_r+0x78>
 800619a:	fb0c 3202 	mla	r2, ip, r2, r3
 800619e:	460c      	mov	r4, r1
 80061a0:	2001      	movs	r0, #1
 80061a2:	e7a6      	b.n	80060f2 <_vfiprintf_r+0xfe>
 80061a4:	2300      	movs	r3, #0
 80061a6:	3401      	adds	r4, #1
 80061a8:	9305      	str	r3, [sp, #20]
 80061aa:	4619      	mov	r1, r3
 80061ac:	f04f 0c0a 	mov.w	ip, #10
 80061b0:	4620      	mov	r0, r4
 80061b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061b6:	3a30      	subs	r2, #48	; 0x30
 80061b8:	2a09      	cmp	r2, #9
 80061ba:	d903      	bls.n	80061c4 <_vfiprintf_r+0x1d0>
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0c6      	beq.n	800614e <_vfiprintf_r+0x15a>
 80061c0:	9105      	str	r1, [sp, #20]
 80061c2:	e7c4      	b.n	800614e <_vfiprintf_r+0x15a>
 80061c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80061c8:	4604      	mov	r4, r0
 80061ca:	2301      	movs	r3, #1
 80061cc:	e7f0      	b.n	80061b0 <_vfiprintf_r+0x1bc>
 80061ce:	ab03      	add	r3, sp, #12
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	462a      	mov	r2, r5
 80061d4:	4b12      	ldr	r3, [pc, #72]	; (8006220 <_vfiprintf_r+0x22c>)
 80061d6:	a904      	add	r1, sp, #16
 80061d8:	4630      	mov	r0, r6
 80061da:	f3af 8000 	nop.w
 80061de:	4607      	mov	r7, r0
 80061e0:	1c78      	adds	r0, r7, #1
 80061e2:	d1d6      	bne.n	8006192 <_vfiprintf_r+0x19e>
 80061e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061e6:	07d9      	lsls	r1, r3, #31
 80061e8:	d405      	bmi.n	80061f6 <_vfiprintf_r+0x202>
 80061ea:	89ab      	ldrh	r3, [r5, #12]
 80061ec:	059a      	lsls	r2, r3, #22
 80061ee:	d402      	bmi.n	80061f6 <_vfiprintf_r+0x202>
 80061f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061f2:	f7ff fed5 	bl	8005fa0 <__retarget_lock_release_recursive>
 80061f6:	89ab      	ldrh	r3, [r5, #12]
 80061f8:	065b      	lsls	r3, r3, #25
 80061fa:	f53f af1d 	bmi.w	8006038 <_vfiprintf_r+0x44>
 80061fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006200:	e71c      	b.n	800603c <_vfiprintf_r+0x48>
 8006202:	ab03      	add	r3, sp, #12
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	462a      	mov	r2, r5
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <_vfiprintf_r+0x22c>)
 800620a:	a904      	add	r1, sp, #16
 800620c:	4630      	mov	r0, r6
 800620e:	f000 f919 	bl	8006444 <_printf_i>
 8006212:	e7e4      	b.n	80061de <_vfiprintf_r+0x1ea>
 8006214:	08006ca8 	.word	0x08006ca8
 8006218:	08006cb2 	.word	0x08006cb2
 800621c:	00000000 	.word	0x00000000
 8006220:	08005fd1 	.word	0x08005fd1
 8006224:	08006cae 	.word	0x08006cae

08006228 <sbrk_aligned>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	4e0e      	ldr	r6, [pc, #56]	; (8006264 <sbrk_aligned+0x3c>)
 800622c:	460c      	mov	r4, r1
 800622e:	6831      	ldr	r1, [r6, #0]
 8006230:	4605      	mov	r5, r0
 8006232:	b911      	cbnz	r1, 800623a <sbrk_aligned+0x12>
 8006234:	f000 fc72 	bl	8006b1c <_sbrk_r>
 8006238:	6030      	str	r0, [r6, #0]
 800623a:	4621      	mov	r1, r4
 800623c:	4628      	mov	r0, r5
 800623e:	f000 fc6d 	bl	8006b1c <_sbrk_r>
 8006242:	1c43      	adds	r3, r0, #1
 8006244:	d00a      	beq.n	800625c <sbrk_aligned+0x34>
 8006246:	1cc4      	adds	r4, r0, #3
 8006248:	f024 0403 	bic.w	r4, r4, #3
 800624c:	42a0      	cmp	r0, r4
 800624e:	d007      	beq.n	8006260 <sbrk_aligned+0x38>
 8006250:	1a21      	subs	r1, r4, r0
 8006252:	4628      	mov	r0, r5
 8006254:	f000 fc62 	bl	8006b1c <_sbrk_r>
 8006258:	3001      	adds	r0, #1
 800625a:	d101      	bne.n	8006260 <sbrk_aligned+0x38>
 800625c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006260:	4620      	mov	r0, r4
 8006262:	bd70      	pop	{r4, r5, r6, pc}
 8006264:	2000065c 	.word	0x2000065c

08006268 <_malloc_r>:
 8006268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800626c:	1ccd      	adds	r5, r1, #3
 800626e:	f025 0503 	bic.w	r5, r5, #3
 8006272:	3508      	adds	r5, #8
 8006274:	2d0c      	cmp	r5, #12
 8006276:	bf38      	it	cc
 8006278:	250c      	movcc	r5, #12
 800627a:	2d00      	cmp	r5, #0
 800627c:	4607      	mov	r7, r0
 800627e:	db01      	blt.n	8006284 <_malloc_r+0x1c>
 8006280:	42a9      	cmp	r1, r5
 8006282:	d905      	bls.n	8006290 <_malloc_r+0x28>
 8006284:	230c      	movs	r3, #12
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	2600      	movs	r6, #0
 800628a:	4630      	mov	r0, r6
 800628c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006290:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006364 <_malloc_r+0xfc>
 8006294:	f000 faa6 	bl	80067e4 <__malloc_lock>
 8006298:	f8d8 3000 	ldr.w	r3, [r8]
 800629c:	461c      	mov	r4, r3
 800629e:	bb5c      	cbnz	r4, 80062f8 <_malloc_r+0x90>
 80062a0:	4629      	mov	r1, r5
 80062a2:	4638      	mov	r0, r7
 80062a4:	f7ff ffc0 	bl	8006228 <sbrk_aligned>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	4604      	mov	r4, r0
 80062ac:	d155      	bne.n	800635a <_malloc_r+0xf2>
 80062ae:	f8d8 4000 	ldr.w	r4, [r8]
 80062b2:	4626      	mov	r6, r4
 80062b4:	2e00      	cmp	r6, #0
 80062b6:	d145      	bne.n	8006344 <_malloc_r+0xdc>
 80062b8:	2c00      	cmp	r4, #0
 80062ba:	d048      	beq.n	800634e <_malloc_r+0xe6>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	4631      	mov	r1, r6
 80062c0:	4638      	mov	r0, r7
 80062c2:	eb04 0903 	add.w	r9, r4, r3
 80062c6:	f000 fc29 	bl	8006b1c <_sbrk_r>
 80062ca:	4581      	cmp	r9, r0
 80062cc:	d13f      	bne.n	800634e <_malloc_r+0xe6>
 80062ce:	6821      	ldr	r1, [r4, #0]
 80062d0:	1a6d      	subs	r5, r5, r1
 80062d2:	4629      	mov	r1, r5
 80062d4:	4638      	mov	r0, r7
 80062d6:	f7ff ffa7 	bl	8006228 <sbrk_aligned>
 80062da:	3001      	adds	r0, #1
 80062dc:	d037      	beq.n	800634e <_malloc_r+0xe6>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	442b      	add	r3, r5
 80062e2:	6023      	str	r3, [r4, #0]
 80062e4:	f8d8 3000 	ldr.w	r3, [r8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d038      	beq.n	800635e <_malloc_r+0xf6>
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	42a2      	cmp	r2, r4
 80062f0:	d12b      	bne.n	800634a <_malloc_r+0xe2>
 80062f2:	2200      	movs	r2, #0
 80062f4:	605a      	str	r2, [r3, #4]
 80062f6:	e00f      	b.n	8006318 <_malloc_r+0xb0>
 80062f8:	6822      	ldr	r2, [r4, #0]
 80062fa:	1b52      	subs	r2, r2, r5
 80062fc:	d41f      	bmi.n	800633e <_malloc_r+0xd6>
 80062fe:	2a0b      	cmp	r2, #11
 8006300:	d917      	bls.n	8006332 <_malloc_r+0xca>
 8006302:	1961      	adds	r1, r4, r5
 8006304:	42a3      	cmp	r3, r4
 8006306:	6025      	str	r5, [r4, #0]
 8006308:	bf18      	it	ne
 800630a:	6059      	strne	r1, [r3, #4]
 800630c:	6863      	ldr	r3, [r4, #4]
 800630e:	bf08      	it	eq
 8006310:	f8c8 1000 	streq.w	r1, [r8]
 8006314:	5162      	str	r2, [r4, r5]
 8006316:	604b      	str	r3, [r1, #4]
 8006318:	4638      	mov	r0, r7
 800631a:	f104 060b 	add.w	r6, r4, #11
 800631e:	f000 fa67 	bl	80067f0 <__malloc_unlock>
 8006322:	f026 0607 	bic.w	r6, r6, #7
 8006326:	1d23      	adds	r3, r4, #4
 8006328:	1af2      	subs	r2, r6, r3
 800632a:	d0ae      	beq.n	800628a <_malloc_r+0x22>
 800632c:	1b9b      	subs	r3, r3, r6
 800632e:	50a3      	str	r3, [r4, r2]
 8006330:	e7ab      	b.n	800628a <_malloc_r+0x22>
 8006332:	42a3      	cmp	r3, r4
 8006334:	6862      	ldr	r2, [r4, #4]
 8006336:	d1dd      	bne.n	80062f4 <_malloc_r+0x8c>
 8006338:	f8c8 2000 	str.w	r2, [r8]
 800633c:	e7ec      	b.n	8006318 <_malloc_r+0xb0>
 800633e:	4623      	mov	r3, r4
 8006340:	6864      	ldr	r4, [r4, #4]
 8006342:	e7ac      	b.n	800629e <_malloc_r+0x36>
 8006344:	4634      	mov	r4, r6
 8006346:	6876      	ldr	r6, [r6, #4]
 8006348:	e7b4      	b.n	80062b4 <_malloc_r+0x4c>
 800634a:	4613      	mov	r3, r2
 800634c:	e7cc      	b.n	80062e8 <_malloc_r+0x80>
 800634e:	230c      	movs	r3, #12
 8006350:	603b      	str	r3, [r7, #0]
 8006352:	4638      	mov	r0, r7
 8006354:	f000 fa4c 	bl	80067f0 <__malloc_unlock>
 8006358:	e797      	b.n	800628a <_malloc_r+0x22>
 800635a:	6025      	str	r5, [r4, #0]
 800635c:	e7dc      	b.n	8006318 <_malloc_r+0xb0>
 800635e:	605b      	str	r3, [r3, #4]
 8006360:	deff      	udf	#255	; 0xff
 8006362:	bf00      	nop
 8006364:	20000658 	.word	0x20000658

08006368 <_printf_common>:
 8006368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800636c:	4616      	mov	r6, r2
 800636e:	4699      	mov	r9, r3
 8006370:	688a      	ldr	r2, [r1, #8]
 8006372:	690b      	ldr	r3, [r1, #16]
 8006374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006378:	4293      	cmp	r3, r2
 800637a:	bfb8      	it	lt
 800637c:	4613      	movlt	r3, r2
 800637e:	6033      	str	r3, [r6, #0]
 8006380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006384:	4607      	mov	r7, r0
 8006386:	460c      	mov	r4, r1
 8006388:	b10a      	cbz	r2, 800638e <_printf_common+0x26>
 800638a:	3301      	adds	r3, #1
 800638c:	6033      	str	r3, [r6, #0]
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	0699      	lsls	r1, r3, #26
 8006392:	bf42      	ittt	mi
 8006394:	6833      	ldrmi	r3, [r6, #0]
 8006396:	3302      	addmi	r3, #2
 8006398:	6033      	strmi	r3, [r6, #0]
 800639a:	6825      	ldr	r5, [r4, #0]
 800639c:	f015 0506 	ands.w	r5, r5, #6
 80063a0:	d106      	bne.n	80063b0 <_printf_common+0x48>
 80063a2:	f104 0a19 	add.w	sl, r4, #25
 80063a6:	68e3      	ldr	r3, [r4, #12]
 80063a8:	6832      	ldr	r2, [r6, #0]
 80063aa:	1a9b      	subs	r3, r3, r2
 80063ac:	42ab      	cmp	r3, r5
 80063ae:	dc26      	bgt.n	80063fe <_printf_common+0x96>
 80063b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063b4:	1e13      	subs	r3, r2, #0
 80063b6:	6822      	ldr	r2, [r4, #0]
 80063b8:	bf18      	it	ne
 80063ba:	2301      	movne	r3, #1
 80063bc:	0692      	lsls	r2, r2, #26
 80063be:	d42b      	bmi.n	8006418 <_printf_common+0xb0>
 80063c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063c4:	4649      	mov	r1, r9
 80063c6:	4638      	mov	r0, r7
 80063c8:	47c0      	blx	r8
 80063ca:	3001      	adds	r0, #1
 80063cc:	d01e      	beq.n	800640c <_printf_common+0xa4>
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	6922      	ldr	r2, [r4, #16]
 80063d2:	f003 0306 	and.w	r3, r3, #6
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	bf02      	ittt	eq
 80063da:	68e5      	ldreq	r5, [r4, #12]
 80063dc:	6833      	ldreq	r3, [r6, #0]
 80063de:	1aed      	subeq	r5, r5, r3
 80063e0:	68a3      	ldr	r3, [r4, #8]
 80063e2:	bf0c      	ite	eq
 80063e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063e8:	2500      	movne	r5, #0
 80063ea:	4293      	cmp	r3, r2
 80063ec:	bfc4      	itt	gt
 80063ee:	1a9b      	subgt	r3, r3, r2
 80063f0:	18ed      	addgt	r5, r5, r3
 80063f2:	2600      	movs	r6, #0
 80063f4:	341a      	adds	r4, #26
 80063f6:	42b5      	cmp	r5, r6
 80063f8:	d11a      	bne.n	8006430 <_printf_common+0xc8>
 80063fa:	2000      	movs	r0, #0
 80063fc:	e008      	b.n	8006410 <_printf_common+0xa8>
 80063fe:	2301      	movs	r3, #1
 8006400:	4652      	mov	r2, sl
 8006402:	4649      	mov	r1, r9
 8006404:	4638      	mov	r0, r7
 8006406:	47c0      	blx	r8
 8006408:	3001      	adds	r0, #1
 800640a:	d103      	bne.n	8006414 <_printf_common+0xac>
 800640c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006414:	3501      	adds	r5, #1
 8006416:	e7c6      	b.n	80063a6 <_printf_common+0x3e>
 8006418:	18e1      	adds	r1, r4, r3
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	2030      	movs	r0, #48	; 0x30
 800641e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006422:	4422      	add	r2, r4
 8006424:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006428:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800642c:	3302      	adds	r3, #2
 800642e:	e7c7      	b.n	80063c0 <_printf_common+0x58>
 8006430:	2301      	movs	r3, #1
 8006432:	4622      	mov	r2, r4
 8006434:	4649      	mov	r1, r9
 8006436:	4638      	mov	r0, r7
 8006438:	47c0      	blx	r8
 800643a:	3001      	adds	r0, #1
 800643c:	d0e6      	beq.n	800640c <_printf_common+0xa4>
 800643e:	3601      	adds	r6, #1
 8006440:	e7d9      	b.n	80063f6 <_printf_common+0x8e>
	...

08006444 <_printf_i>:
 8006444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006448:	7e0f      	ldrb	r7, [r1, #24]
 800644a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800644c:	2f78      	cmp	r7, #120	; 0x78
 800644e:	4691      	mov	r9, r2
 8006450:	4680      	mov	r8, r0
 8006452:	460c      	mov	r4, r1
 8006454:	469a      	mov	sl, r3
 8006456:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800645a:	d807      	bhi.n	800646c <_printf_i+0x28>
 800645c:	2f62      	cmp	r7, #98	; 0x62
 800645e:	d80a      	bhi.n	8006476 <_printf_i+0x32>
 8006460:	2f00      	cmp	r7, #0
 8006462:	f000 80d4 	beq.w	800660e <_printf_i+0x1ca>
 8006466:	2f58      	cmp	r7, #88	; 0x58
 8006468:	f000 80c0 	beq.w	80065ec <_printf_i+0x1a8>
 800646c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006474:	e03a      	b.n	80064ec <_printf_i+0xa8>
 8006476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800647a:	2b15      	cmp	r3, #21
 800647c:	d8f6      	bhi.n	800646c <_printf_i+0x28>
 800647e:	a101      	add	r1, pc, #4	; (adr r1, 8006484 <_printf_i+0x40>)
 8006480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006484:	080064dd 	.word	0x080064dd
 8006488:	080064f1 	.word	0x080064f1
 800648c:	0800646d 	.word	0x0800646d
 8006490:	0800646d 	.word	0x0800646d
 8006494:	0800646d 	.word	0x0800646d
 8006498:	0800646d 	.word	0x0800646d
 800649c:	080064f1 	.word	0x080064f1
 80064a0:	0800646d 	.word	0x0800646d
 80064a4:	0800646d 	.word	0x0800646d
 80064a8:	0800646d 	.word	0x0800646d
 80064ac:	0800646d 	.word	0x0800646d
 80064b0:	080065f5 	.word	0x080065f5
 80064b4:	0800651d 	.word	0x0800651d
 80064b8:	080065af 	.word	0x080065af
 80064bc:	0800646d 	.word	0x0800646d
 80064c0:	0800646d 	.word	0x0800646d
 80064c4:	08006617 	.word	0x08006617
 80064c8:	0800646d 	.word	0x0800646d
 80064cc:	0800651d 	.word	0x0800651d
 80064d0:	0800646d 	.word	0x0800646d
 80064d4:	0800646d 	.word	0x0800646d
 80064d8:	080065b7 	.word	0x080065b7
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	1d1a      	adds	r2, r3, #4
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	602a      	str	r2, [r5, #0]
 80064e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064ec:	2301      	movs	r3, #1
 80064ee:	e09f      	b.n	8006630 <_printf_i+0x1ec>
 80064f0:	6820      	ldr	r0, [r4, #0]
 80064f2:	682b      	ldr	r3, [r5, #0]
 80064f4:	0607      	lsls	r7, r0, #24
 80064f6:	f103 0104 	add.w	r1, r3, #4
 80064fa:	6029      	str	r1, [r5, #0]
 80064fc:	d501      	bpl.n	8006502 <_printf_i+0xbe>
 80064fe:	681e      	ldr	r6, [r3, #0]
 8006500:	e003      	b.n	800650a <_printf_i+0xc6>
 8006502:	0646      	lsls	r6, r0, #25
 8006504:	d5fb      	bpl.n	80064fe <_printf_i+0xba>
 8006506:	f9b3 6000 	ldrsh.w	r6, [r3]
 800650a:	2e00      	cmp	r6, #0
 800650c:	da03      	bge.n	8006516 <_printf_i+0xd2>
 800650e:	232d      	movs	r3, #45	; 0x2d
 8006510:	4276      	negs	r6, r6
 8006512:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006516:	485a      	ldr	r0, [pc, #360]	; (8006680 <_printf_i+0x23c>)
 8006518:	230a      	movs	r3, #10
 800651a:	e012      	b.n	8006542 <_printf_i+0xfe>
 800651c:	682b      	ldr	r3, [r5, #0]
 800651e:	6820      	ldr	r0, [r4, #0]
 8006520:	1d19      	adds	r1, r3, #4
 8006522:	6029      	str	r1, [r5, #0]
 8006524:	0605      	lsls	r5, r0, #24
 8006526:	d501      	bpl.n	800652c <_printf_i+0xe8>
 8006528:	681e      	ldr	r6, [r3, #0]
 800652a:	e002      	b.n	8006532 <_printf_i+0xee>
 800652c:	0641      	lsls	r1, r0, #25
 800652e:	d5fb      	bpl.n	8006528 <_printf_i+0xe4>
 8006530:	881e      	ldrh	r6, [r3, #0]
 8006532:	4853      	ldr	r0, [pc, #332]	; (8006680 <_printf_i+0x23c>)
 8006534:	2f6f      	cmp	r7, #111	; 0x6f
 8006536:	bf0c      	ite	eq
 8006538:	2308      	moveq	r3, #8
 800653a:	230a      	movne	r3, #10
 800653c:	2100      	movs	r1, #0
 800653e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006542:	6865      	ldr	r5, [r4, #4]
 8006544:	60a5      	str	r5, [r4, #8]
 8006546:	2d00      	cmp	r5, #0
 8006548:	bfa2      	ittt	ge
 800654a:	6821      	ldrge	r1, [r4, #0]
 800654c:	f021 0104 	bicge.w	r1, r1, #4
 8006550:	6021      	strge	r1, [r4, #0]
 8006552:	b90e      	cbnz	r6, 8006558 <_printf_i+0x114>
 8006554:	2d00      	cmp	r5, #0
 8006556:	d04b      	beq.n	80065f0 <_printf_i+0x1ac>
 8006558:	4615      	mov	r5, r2
 800655a:	fbb6 f1f3 	udiv	r1, r6, r3
 800655e:	fb03 6711 	mls	r7, r3, r1, r6
 8006562:	5dc7      	ldrb	r7, [r0, r7]
 8006564:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006568:	4637      	mov	r7, r6
 800656a:	42bb      	cmp	r3, r7
 800656c:	460e      	mov	r6, r1
 800656e:	d9f4      	bls.n	800655a <_printf_i+0x116>
 8006570:	2b08      	cmp	r3, #8
 8006572:	d10b      	bne.n	800658c <_printf_i+0x148>
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	07de      	lsls	r6, r3, #31
 8006578:	d508      	bpl.n	800658c <_printf_i+0x148>
 800657a:	6923      	ldr	r3, [r4, #16]
 800657c:	6861      	ldr	r1, [r4, #4]
 800657e:	4299      	cmp	r1, r3
 8006580:	bfde      	ittt	le
 8006582:	2330      	movle	r3, #48	; 0x30
 8006584:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006588:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800658c:	1b52      	subs	r2, r2, r5
 800658e:	6122      	str	r2, [r4, #16]
 8006590:	f8cd a000 	str.w	sl, [sp]
 8006594:	464b      	mov	r3, r9
 8006596:	aa03      	add	r2, sp, #12
 8006598:	4621      	mov	r1, r4
 800659a:	4640      	mov	r0, r8
 800659c:	f7ff fee4 	bl	8006368 <_printf_common>
 80065a0:	3001      	adds	r0, #1
 80065a2:	d14a      	bne.n	800663a <_printf_i+0x1f6>
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065a8:	b004      	add	sp, #16
 80065aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	f043 0320 	orr.w	r3, r3, #32
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	4833      	ldr	r0, [pc, #204]	; (8006684 <_printf_i+0x240>)
 80065b8:	2778      	movs	r7, #120	; 0x78
 80065ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	6829      	ldr	r1, [r5, #0]
 80065c2:	061f      	lsls	r7, r3, #24
 80065c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80065c8:	d402      	bmi.n	80065d0 <_printf_i+0x18c>
 80065ca:	065f      	lsls	r7, r3, #25
 80065cc:	bf48      	it	mi
 80065ce:	b2b6      	uxthmi	r6, r6
 80065d0:	07df      	lsls	r7, r3, #31
 80065d2:	bf48      	it	mi
 80065d4:	f043 0320 	orrmi.w	r3, r3, #32
 80065d8:	6029      	str	r1, [r5, #0]
 80065da:	bf48      	it	mi
 80065dc:	6023      	strmi	r3, [r4, #0]
 80065de:	b91e      	cbnz	r6, 80065e8 <_printf_i+0x1a4>
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	f023 0320 	bic.w	r3, r3, #32
 80065e6:	6023      	str	r3, [r4, #0]
 80065e8:	2310      	movs	r3, #16
 80065ea:	e7a7      	b.n	800653c <_printf_i+0xf8>
 80065ec:	4824      	ldr	r0, [pc, #144]	; (8006680 <_printf_i+0x23c>)
 80065ee:	e7e4      	b.n	80065ba <_printf_i+0x176>
 80065f0:	4615      	mov	r5, r2
 80065f2:	e7bd      	b.n	8006570 <_printf_i+0x12c>
 80065f4:	682b      	ldr	r3, [r5, #0]
 80065f6:	6826      	ldr	r6, [r4, #0]
 80065f8:	6961      	ldr	r1, [r4, #20]
 80065fa:	1d18      	adds	r0, r3, #4
 80065fc:	6028      	str	r0, [r5, #0]
 80065fe:	0635      	lsls	r5, r6, #24
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	d501      	bpl.n	8006608 <_printf_i+0x1c4>
 8006604:	6019      	str	r1, [r3, #0]
 8006606:	e002      	b.n	800660e <_printf_i+0x1ca>
 8006608:	0670      	lsls	r0, r6, #25
 800660a:	d5fb      	bpl.n	8006604 <_printf_i+0x1c0>
 800660c:	8019      	strh	r1, [r3, #0]
 800660e:	2300      	movs	r3, #0
 8006610:	6123      	str	r3, [r4, #16]
 8006612:	4615      	mov	r5, r2
 8006614:	e7bc      	b.n	8006590 <_printf_i+0x14c>
 8006616:	682b      	ldr	r3, [r5, #0]
 8006618:	1d1a      	adds	r2, r3, #4
 800661a:	602a      	str	r2, [r5, #0]
 800661c:	681d      	ldr	r5, [r3, #0]
 800661e:	6862      	ldr	r2, [r4, #4]
 8006620:	2100      	movs	r1, #0
 8006622:	4628      	mov	r0, r5
 8006624:	f7f9 fdd4 	bl	80001d0 <memchr>
 8006628:	b108      	cbz	r0, 800662e <_printf_i+0x1ea>
 800662a:	1b40      	subs	r0, r0, r5
 800662c:	6060      	str	r0, [r4, #4]
 800662e:	6863      	ldr	r3, [r4, #4]
 8006630:	6123      	str	r3, [r4, #16]
 8006632:	2300      	movs	r3, #0
 8006634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006638:	e7aa      	b.n	8006590 <_printf_i+0x14c>
 800663a:	6923      	ldr	r3, [r4, #16]
 800663c:	462a      	mov	r2, r5
 800663e:	4649      	mov	r1, r9
 8006640:	4640      	mov	r0, r8
 8006642:	47d0      	blx	sl
 8006644:	3001      	adds	r0, #1
 8006646:	d0ad      	beq.n	80065a4 <_printf_i+0x160>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	079b      	lsls	r3, r3, #30
 800664c:	d413      	bmi.n	8006676 <_printf_i+0x232>
 800664e:	68e0      	ldr	r0, [r4, #12]
 8006650:	9b03      	ldr	r3, [sp, #12]
 8006652:	4298      	cmp	r0, r3
 8006654:	bfb8      	it	lt
 8006656:	4618      	movlt	r0, r3
 8006658:	e7a6      	b.n	80065a8 <_printf_i+0x164>
 800665a:	2301      	movs	r3, #1
 800665c:	4632      	mov	r2, r6
 800665e:	4649      	mov	r1, r9
 8006660:	4640      	mov	r0, r8
 8006662:	47d0      	blx	sl
 8006664:	3001      	adds	r0, #1
 8006666:	d09d      	beq.n	80065a4 <_printf_i+0x160>
 8006668:	3501      	adds	r5, #1
 800666a:	68e3      	ldr	r3, [r4, #12]
 800666c:	9903      	ldr	r1, [sp, #12]
 800666e:	1a5b      	subs	r3, r3, r1
 8006670:	42ab      	cmp	r3, r5
 8006672:	dcf2      	bgt.n	800665a <_printf_i+0x216>
 8006674:	e7eb      	b.n	800664e <_printf_i+0x20a>
 8006676:	2500      	movs	r5, #0
 8006678:	f104 0619 	add.w	r6, r4, #25
 800667c:	e7f5      	b.n	800666a <_printf_i+0x226>
 800667e:	bf00      	nop
 8006680:	08006cb9 	.word	0x08006cb9
 8006684:	08006cca 	.word	0x08006cca

08006688 <__sflush_r>:
 8006688:	898a      	ldrh	r2, [r1, #12]
 800668a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800668e:	4605      	mov	r5, r0
 8006690:	0710      	lsls	r0, r2, #28
 8006692:	460c      	mov	r4, r1
 8006694:	d458      	bmi.n	8006748 <__sflush_r+0xc0>
 8006696:	684b      	ldr	r3, [r1, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	dc05      	bgt.n	80066a8 <__sflush_r+0x20>
 800669c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800669e:	2b00      	cmp	r3, #0
 80066a0:	dc02      	bgt.n	80066a8 <__sflush_r+0x20>
 80066a2:	2000      	movs	r0, #0
 80066a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066aa:	2e00      	cmp	r6, #0
 80066ac:	d0f9      	beq.n	80066a2 <__sflush_r+0x1a>
 80066ae:	2300      	movs	r3, #0
 80066b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066b4:	682f      	ldr	r7, [r5, #0]
 80066b6:	6a21      	ldr	r1, [r4, #32]
 80066b8:	602b      	str	r3, [r5, #0]
 80066ba:	d032      	beq.n	8006722 <__sflush_r+0x9a>
 80066bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066be:	89a3      	ldrh	r3, [r4, #12]
 80066c0:	075a      	lsls	r2, r3, #29
 80066c2:	d505      	bpl.n	80066d0 <__sflush_r+0x48>
 80066c4:	6863      	ldr	r3, [r4, #4]
 80066c6:	1ac0      	subs	r0, r0, r3
 80066c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066ca:	b10b      	cbz	r3, 80066d0 <__sflush_r+0x48>
 80066cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066ce:	1ac0      	subs	r0, r0, r3
 80066d0:	2300      	movs	r3, #0
 80066d2:	4602      	mov	r2, r0
 80066d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066d6:	6a21      	ldr	r1, [r4, #32]
 80066d8:	4628      	mov	r0, r5
 80066da:	47b0      	blx	r6
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	89a3      	ldrh	r3, [r4, #12]
 80066e0:	d106      	bne.n	80066f0 <__sflush_r+0x68>
 80066e2:	6829      	ldr	r1, [r5, #0]
 80066e4:	291d      	cmp	r1, #29
 80066e6:	d82b      	bhi.n	8006740 <__sflush_r+0xb8>
 80066e8:	4a29      	ldr	r2, [pc, #164]	; (8006790 <__sflush_r+0x108>)
 80066ea:	410a      	asrs	r2, r1
 80066ec:	07d6      	lsls	r6, r2, #31
 80066ee:	d427      	bmi.n	8006740 <__sflush_r+0xb8>
 80066f0:	2200      	movs	r2, #0
 80066f2:	6062      	str	r2, [r4, #4]
 80066f4:	04d9      	lsls	r1, r3, #19
 80066f6:	6922      	ldr	r2, [r4, #16]
 80066f8:	6022      	str	r2, [r4, #0]
 80066fa:	d504      	bpl.n	8006706 <__sflush_r+0x7e>
 80066fc:	1c42      	adds	r2, r0, #1
 80066fe:	d101      	bne.n	8006704 <__sflush_r+0x7c>
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	b903      	cbnz	r3, 8006706 <__sflush_r+0x7e>
 8006704:	6560      	str	r0, [r4, #84]	; 0x54
 8006706:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006708:	602f      	str	r7, [r5, #0]
 800670a:	2900      	cmp	r1, #0
 800670c:	d0c9      	beq.n	80066a2 <__sflush_r+0x1a>
 800670e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006712:	4299      	cmp	r1, r3
 8006714:	d002      	beq.n	800671c <__sflush_r+0x94>
 8006716:	4628      	mov	r0, r5
 8006718:	f000 fa22 	bl	8006b60 <_free_r>
 800671c:	2000      	movs	r0, #0
 800671e:	6360      	str	r0, [r4, #52]	; 0x34
 8006720:	e7c0      	b.n	80066a4 <__sflush_r+0x1c>
 8006722:	2301      	movs	r3, #1
 8006724:	4628      	mov	r0, r5
 8006726:	47b0      	blx	r6
 8006728:	1c41      	adds	r1, r0, #1
 800672a:	d1c8      	bne.n	80066be <__sflush_r+0x36>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0c5      	beq.n	80066be <__sflush_r+0x36>
 8006732:	2b1d      	cmp	r3, #29
 8006734:	d001      	beq.n	800673a <__sflush_r+0xb2>
 8006736:	2b16      	cmp	r3, #22
 8006738:	d101      	bne.n	800673e <__sflush_r+0xb6>
 800673a:	602f      	str	r7, [r5, #0]
 800673c:	e7b1      	b.n	80066a2 <__sflush_r+0x1a>
 800673e:	89a3      	ldrh	r3, [r4, #12]
 8006740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006744:	81a3      	strh	r3, [r4, #12]
 8006746:	e7ad      	b.n	80066a4 <__sflush_r+0x1c>
 8006748:	690f      	ldr	r7, [r1, #16]
 800674a:	2f00      	cmp	r7, #0
 800674c:	d0a9      	beq.n	80066a2 <__sflush_r+0x1a>
 800674e:	0793      	lsls	r3, r2, #30
 8006750:	680e      	ldr	r6, [r1, #0]
 8006752:	bf08      	it	eq
 8006754:	694b      	ldreq	r3, [r1, #20]
 8006756:	600f      	str	r7, [r1, #0]
 8006758:	bf18      	it	ne
 800675a:	2300      	movne	r3, #0
 800675c:	eba6 0807 	sub.w	r8, r6, r7
 8006760:	608b      	str	r3, [r1, #8]
 8006762:	f1b8 0f00 	cmp.w	r8, #0
 8006766:	dd9c      	ble.n	80066a2 <__sflush_r+0x1a>
 8006768:	6a21      	ldr	r1, [r4, #32]
 800676a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800676c:	4643      	mov	r3, r8
 800676e:	463a      	mov	r2, r7
 8006770:	4628      	mov	r0, r5
 8006772:	47b0      	blx	r6
 8006774:	2800      	cmp	r0, #0
 8006776:	dc06      	bgt.n	8006786 <__sflush_r+0xfe>
 8006778:	89a3      	ldrh	r3, [r4, #12]
 800677a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800677e:	81a3      	strh	r3, [r4, #12]
 8006780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006784:	e78e      	b.n	80066a4 <__sflush_r+0x1c>
 8006786:	4407      	add	r7, r0
 8006788:	eba8 0800 	sub.w	r8, r8, r0
 800678c:	e7e9      	b.n	8006762 <__sflush_r+0xda>
 800678e:	bf00      	nop
 8006790:	dfbffffe 	.word	0xdfbffffe

08006794 <_fflush_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	690b      	ldr	r3, [r1, #16]
 8006798:	4605      	mov	r5, r0
 800679a:	460c      	mov	r4, r1
 800679c:	b913      	cbnz	r3, 80067a4 <_fflush_r+0x10>
 800679e:	2500      	movs	r5, #0
 80067a0:	4628      	mov	r0, r5
 80067a2:	bd38      	pop	{r3, r4, r5, pc}
 80067a4:	b118      	cbz	r0, 80067ae <_fflush_r+0x1a>
 80067a6:	6a03      	ldr	r3, [r0, #32]
 80067a8:	b90b      	cbnz	r3, 80067ae <_fflush_r+0x1a>
 80067aa:	f7ff fb21 	bl	8005df0 <__sinit>
 80067ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d0f3      	beq.n	800679e <_fflush_r+0xa>
 80067b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067b8:	07d0      	lsls	r0, r2, #31
 80067ba:	d404      	bmi.n	80067c6 <_fflush_r+0x32>
 80067bc:	0599      	lsls	r1, r3, #22
 80067be:	d402      	bmi.n	80067c6 <_fflush_r+0x32>
 80067c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067c2:	f7ff fbec 	bl	8005f9e <__retarget_lock_acquire_recursive>
 80067c6:	4628      	mov	r0, r5
 80067c8:	4621      	mov	r1, r4
 80067ca:	f7ff ff5d 	bl	8006688 <__sflush_r>
 80067ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067d0:	07da      	lsls	r2, r3, #31
 80067d2:	4605      	mov	r5, r0
 80067d4:	d4e4      	bmi.n	80067a0 <_fflush_r+0xc>
 80067d6:	89a3      	ldrh	r3, [r4, #12]
 80067d8:	059b      	lsls	r3, r3, #22
 80067da:	d4e1      	bmi.n	80067a0 <_fflush_r+0xc>
 80067dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067de:	f7ff fbdf 	bl	8005fa0 <__retarget_lock_release_recursive>
 80067e2:	e7dd      	b.n	80067a0 <_fflush_r+0xc>

080067e4 <__malloc_lock>:
 80067e4:	4801      	ldr	r0, [pc, #4]	; (80067ec <__malloc_lock+0x8>)
 80067e6:	f7ff bbda 	b.w	8005f9e <__retarget_lock_acquire_recursive>
 80067ea:	bf00      	nop
 80067ec:	20000654 	.word	0x20000654

080067f0 <__malloc_unlock>:
 80067f0:	4801      	ldr	r0, [pc, #4]	; (80067f8 <__malloc_unlock+0x8>)
 80067f2:	f7ff bbd5 	b.w	8005fa0 <__retarget_lock_release_recursive>
 80067f6:	bf00      	nop
 80067f8:	20000654 	.word	0x20000654

080067fc <__sread>:
 80067fc:	b510      	push	{r4, lr}
 80067fe:	460c      	mov	r4, r1
 8006800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006804:	f000 f978 	bl	8006af8 <_read_r>
 8006808:	2800      	cmp	r0, #0
 800680a:	bfab      	itete	ge
 800680c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800680e:	89a3      	ldrhlt	r3, [r4, #12]
 8006810:	181b      	addge	r3, r3, r0
 8006812:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006816:	bfac      	ite	ge
 8006818:	6563      	strge	r3, [r4, #84]	; 0x54
 800681a:	81a3      	strhlt	r3, [r4, #12]
 800681c:	bd10      	pop	{r4, pc}

0800681e <__swrite>:
 800681e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006822:	461f      	mov	r7, r3
 8006824:	898b      	ldrh	r3, [r1, #12]
 8006826:	05db      	lsls	r3, r3, #23
 8006828:	4605      	mov	r5, r0
 800682a:	460c      	mov	r4, r1
 800682c:	4616      	mov	r6, r2
 800682e:	d505      	bpl.n	800683c <__swrite+0x1e>
 8006830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006834:	2302      	movs	r3, #2
 8006836:	2200      	movs	r2, #0
 8006838:	f000 f94c 	bl	8006ad4 <_lseek_r>
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006846:	81a3      	strh	r3, [r4, #12]
 8006848:	4632      	mov	r2, r6
 800684a:	463b      	mov	r3, r7
 800684c:	4628      	mov	r0, r5
 800684e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006852:	f000 b973 	b.w	8006b3c <_write_r>

08006856 <__sseek>:
 8006856:	b510      	push	{r4, lr}
 8006858:	460c      	mov	r4, r1
 800685a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800685e:	f000 f939 	bl	8006ad4 <_lseek_r>
 8006862:	1c43      	adds	r3, r0, #1
 8006864:	89a3      	ldrh	r3, [r4, #12]
 8006866:	bf15      	itete	ne
 8006868:	6560      	strne	r0, [r4, #84]	; 0x54
 800686a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800686e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006872:	81a3      	strheq	r3, [r4, #12]
 8006874:	bf18      	it	ne
 8006876:	81a3      	strhne	r3, [r4, #12]
 8006878:	bd10      	pop	{r4, pc}

0800687a <__sclose>:
 800687a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800687e:	f000 b8f7 	b.w	8006a70 <_close_r>

08006882 <__swbuf_r>:
 8006882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006884:	460e      	mov	r6, r1
 8006886:	4614      	mov	r4, r2
 8006888:	4605      	mov	r5, r0
 800688a:	b118      	cbz	r0, 8006894 <__swbuf_r+0x12>
 800688c:	6a03      	ldr	r3, [r0, #32]
 800688e:	b90b      	cbnz	r3, 8006894 <__swbuf_r+0x12>
 8006890:	f7ff faae 	bl	8005df0 <__sinit>
 8006894:	69a3      	ldr	r3, [r4, #24]
 8006896:	60a3      	str	r3, [r4, #8]
 8006898:	89a3      	ldrh	r3, [r4, #12]
 800689a:	071a      	lsls	r2, r3, #28
 800689c:	d525      	bpl.n	80068ea <__swbuf_r+0x68>
 800689e:	6923      	ldr	r3, [r4, #16]
 80068a0:	b31b      	cbz	r3, 80068ea <__swbuf_r+0x68>
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	6922      	ldr	r2, [r4, #16]
 80068a6:	1a98      	subs	r0, r3, r2
 80068a8:	6963      	ldr	r3, [r4, #20]
 80068aa:	b2f6      	uxtb	r6, r6
 80068ac:	4283      	cmp	r3, r0
 80068ae:	4637      	mov	r7, r6
 80068b0:	dc04      	bgt.n	80068bc <__swbuf_r+0x3a>
 80068b2:	4621      	mov	r1, r4
 80068b4:	4628      	mov	r0, r5
 80068b6:	f7ff ff6d 	bl	8006794 <_fflush_r>
 80068ba:	b9e0      	cbnz	r0, 80068f6 <__swbuf_r+0x74>
 80068bc:	68a3      	ldr	r3, [r4, #8]
 80068be:	3b01      	subs	r3, #1
 80068c0:	60a3      	str	r3, [r4, #8]
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	6022      	str	r2, [r4, #0]
 80068c8:	701e      	strb	r6, [r3, #0]
 80068ca:	6962      	ldr	r2, [r4, #20]
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d004      	beq.n	80068dc <__swbuf_r+0x5a>
 80068d2:	89a3      	ldrh	r3, [r4, #12]
 80068d4:	07db      	lsls	r3, r3, #31
 80068d6:	d506      	bpl.n	80068e6 <__swbuf_r+0x64>
 80068d8:	2e0a      	cmp	r6, #10
 80068da:	d104      	bne.n	80068e6 <__swbuf_r+0x64>
 80068dc:	4621      	mov	r1, r4
 80068de:	4628      	mov	r0, r5
 80068e0:	f7ff ff58 	bl	8006794 <_fflush_r>
 80068e4:	b938      	cbnz	r0, 80068f6 <__swbuf_r+0x74>
 80068e6:	4638      	mov	r0, r7
 80068e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ea:	4621      	mov	r1, r4
 80068ec:	4628      	mov	r0, r5
 80068ee:	f000 f805 	bl	80068fc <__swsetup_r>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d0d5      	beq.n	80068a2 <__swbuf_r+0x20>
 80068f6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80068fa:	e7f4      	b.n	80068e6 <__swbuf_r+0x64>

080068fc <__swsetup_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4b2a      	ldr	r3, [pc, #168]	; (80069a8 <__swsetup_r+0xac>)
 8006900:	4605      	mov	r5, r0
 8006902:	6818      	ldr	r0, [r3, #0]
 8006904:	460c      	mov	r4, r1
 8006906:	b118      	cbz	r0, 8006910 <__swsetup_r+0x14>
 8006908:	6a03      	ldr	r3, [r0, #32]
 800690a:	b90b      	cbnz	r3, 8006910 <__swsetup_r+0x14>
 800690c:	f7ff fa70 	bl	8005df0 <__sinit>
 8006910:	89a3      	ldrh	r3, [r4, #12]
 8006912:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006916:	0718      	lsls	r0, r3, #28
 8006918:	d422      	bmi.n	8006960 <__swsetup_r+0x64>
 800691a:	06d9      	lsls	r1, r3, #27
 800691c:	d407      	bmi.n	800692e <__swsetup_r+0x32>
 800691e:	2309      	movs	r3, #9
 8006920:	602b      	str	r3, [r5, #0]
 8006922:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006926:	81a3      	strh	r3, [r4, #12]
 8006928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800692c:	e034      	b.n	8006998 <__swsetup_r+0x9c>
 800692e:	0758      	lsls	r0, r3, #29
 8006930:	d512      	bpl.n	8006958 <__swsetup_r+0x5c>
 8006932:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006934:	b141      	cbz	r1, 8006948 <__swsetup_r+0x4c>
 8006936:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800693a:	4299      	cmp	r1, r3
 800693c:	d002      	beq.n	8006944 <__swsetup_r+0x48>
 800693e:	4628      	mov	r0, r5
 8006940:	f000 f90e 	bl	8006b60 <_free_r>
 8006944:	2300      	movs	r3, #0
 8006946:	6363      	str	r3, [r4, #52]	; 0x34
 8006948:	89a3      	ldrh	r3, [r4, #12]
 800694a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800694e:	81a3      	strh	r3, [r4, #12]
 8006950:	2300      	movs	r3, #0
 8006952:	6063      	str	r3, [r4, #4]
 8006954:	6923      	ldr	r3, [r4, #16]
 8006956:	6023      	str	r3, [r4, #0]
 8006958:	89a3      	ldrh	r3, [r4, #12]
 800695a:	f043 0308 	orr.w	r3, r3, #8
 800695e:	81a3      	strh	r3, [r4, #12]
 8006960:	6923      	ldr	r3, [r4, #16]
 8006962:	b94b      	cbnz	r3, 8006978 <__swsetup_r+0x7c>
 8006964:	89a3      	ldrh	r3, [r4, #12]
 8006966:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800696a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800696e:	d003      	beq.n	8006978 <__swsetup_r+0x7c>
 8006970:	4621      	mov	r1, r4
 8006972:	4628      	mov	r0, r5
 8006974:	f000 f840 	bl	80069f8 <__smakebuf_r>
 8006978:	89a0      	ldrh	r0, [r4, #12]
 800697a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800697e:	f010 0301 	ands.w	r3, r0, #1
 8006982:	d00a      	beq.n	800699a <__swsetup_r+0x9e>
 8006984:	2300      	movs	r3, #0
 8006986:	60a3      	str	r3, [r4, #8]
 8006988:	6963      	ldr	r3, [r4, #20]
 800698a:	425b      	negs	r3, r3
 800698c:	61a3      	str	r3, [r4, #24]
 800698e:	6923      	ldr	r3, [r4, #16]
 8006990:	b943      	cbnz	r3, 80069a4 <__swsetup_r+0xa8>
 8006992:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006996:	d1c4      	bne.n	8006922 <__swsetup_r+0x26>
 8006998:	bd38      	pop	{r3, r4, r5, pc}
 800699a:	0781      	lsls	r1, r0, #30
 800699c:	bf58      	it	pl
 800699e:	6963      	ldrpl	r3, [r4, #20]
 80069a0:	60a3      	str	r3, [r4, #8]
 80069a2:	e7f4      	b.n	800698e <__swsetup_r+0x92>
 80069a4:	2000      	movs	r0, #0
 80069a6:	e7f7      	b.n	8006998 <__swsetup_r+0x9c>
 80069a8:	20000288 	.word	0x20000288

080069ac <__swhatbuf_r>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	460c      	mov	r4, r1
 80069b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b4:	2900      	cmp	r1, #0
 80069b6:	b096      	sub	sp, #88	; 0x58
 80069b8:	4615      	mov	r5, r2
 80069ba:	461e      	mov	r6, r3
 80069bc:	da0d      	bge.n	80069da <__swhatbuf_r+0x2e>
 80069be:	89a3      	ldrh	r3, [r4, #12]
 80069c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80069c4:	f04f 0100 	mov.w	r1, #0
 80069c8:	bf0c      	ite	eq
 80069ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80069ce:	2340      	movne	r3, #64	; 0x40
 80069d0:	2000      	movs	r0, #0
 80069d2:	6031      	str	r1, [r6, #0]
 80069d4:	602b      	str	r3, [r5, #0]
 80069d6:	b016      	add	sp, #88	; 0x58
 80069d8:	bd70      	pop	{r4, r5, r6, pc}
 80069da:	466a      	mov	r2, sp
 80069dc:	f000 f858 	bl	8006a90 <_fstat_r>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	dbec      	blt.n	80069be <__swhatbuf_r+0x12>
 80069e4:	9901      	ldr	r1, [sp, #4]
 80069e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80069ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80069ee:	4259      	negs	r1, r3
 80069f0:	4159      	adcs	r1, r3
 80069f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069f6:	e7eb      	b.n	80069d0 <__swhatbuf_r+0x24>

080069f8 <__smakebuf_r>:
 80069f8:	898b      	ldrh	r3, [r1, #12]
 80069fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069fc:	079d      	lsls	r5, r3, #30
 80069fe:	4606      	mov	r6, r0
 8006a00:	460c      	mov	r4, r1
 8006a02:	d507      	bpl.n	8006a14 <__smakebuf_r+0x1c>
 8006a04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a08:	6023      	str	r3, [r4, #0]
 8006a0a:	6123      	str	r3, [r4, #16]
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	6163      	str	r3, [r4, #20]
 8006a10:	b002      	add	sp, #8
 8006a12:	bd70      	pop	{r4, r5, r6, pc}
 8006a14:	ab01      	add	r3, sp, #4
 8006a16:	466a      	mov	r2, sp
 8006a18:	f7ff ffc8 	bl	80069ac <__swhatbuf_r>
 8006a1c:	9900      	ldr	r1, [sp, #0]
 8006a1e:	4605      	mov	r5, r0
 8006a20:	4630      	mov	r0, r6
 8006a22:	f7ff fc21 	bl	8006268 <_malloc_r>
 8006a26:	b948      	cbnz	r0, 8006a3c <__smakebuf_r+0x44>
 8006a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a2c:	059a      	lsls	r2, r3, #22
 8006a2e:	d4ef      	bmi.n	8006a10 <__smakebuf_r+0x18>
 8006a30:	f023 0303 	bic.w	r3, r3, #3
 8006a34:	f043 0302 	orr.w	r3, r3, #2
 8006a38:	81a3      	strh	r3, [r4, #12]
 8006a3a:	e7e3      	b.n	8006a04 <__smakebuf_r+0xc>
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	6020      	str	r0, [r4, #0]
 8006a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a44:	81a3      	strh	r3, [r4, #12]
 8006a46:	9b00      	ldr	r3, [sp, #0]
 8006a48:	6163      	str	r3, [r4, #20]
 8006a4a:	9b01      	ldr	r3, [sp, #4]
 8006a4c:	6120      	str	r0, [r4, #16]
 8006a4e:	b15b      	cbz	r3, 8006a68 <__smakebuf_r+0x70>
 8006a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a54:	4630      	mov	r0, r6
 8006a56:	f000 f82d 	bl	8006ab4 <_isatty_r>
 8006a5a:	b128      	cbz	r0, 8006a68 <__smakebuf_r+0x70>
 8006a5c:	89a3      	ldrh	r3, [r4, #12]
 8006a5e:	f023 0303 	bic.w	r3, r3, #3
 8006a62:	f043 0301 	orr.w	r3, r3, #1
 8006a66:	81a3      	strh	r3, [r4, #12]
 8006a68:	89a3      	ldrh	r3, [r4, #12]
 8006a6a:	431d      	orrs	r5, r3
 8006a6c:	81a5      	strh	r5, [r4, #12]
 8006a6e:	e7cf      	b.n	8006a10 <__smakebuf_r+0x18>

08006a70 <_close_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	4d06      	ldr	r5, [pc, #24]	; (8006a8c <_close_r+0x1c>)
 8006a74:	2300      	movs	r3, #0
 8006a76:	4604      	mov	r4, r0
 8006a78:	4608      	mov	r0, r1
 8006a7a:	602b      	str	r3, [r5, #0]
 8006a7c:	f7fa fd11 	bl	80014a2 <_close>
 8006a80:	1c43      	adds	r3, r0, #1
 8006a82:	d102      	bne.n	8006a8a <_close_r+0x1a>
 8006a84:	682b      	ldr	r3, [r5, #0]
 8006a86:	b103      	cbz	r3, 8006a8a <_close_r+0x1a>
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	20000660 	.word	0x20000660

08006a90 <_fstat_r>:
 8006a90:	b538      	push	{r3, r4, r5, lr}
 8006a92:	4d07      	ldr	r5, [pc, #28]	; (8006ab0 <_fstat_r+0x20>)
 8006a94:	2300      	movs	r3, #0
 8006a96:	4604      	mov	r4, r0
 8006a98:	4608      	mov	r0, r1
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	602b      	str	r3, [r5, #0]
 8006a9e:	f7fa fd0c 	bl	80014ba <_fstat>
 8006aa2:	1c43      	adds	r3, r0, #1
 8006aa4:	d102      	bne.n	8006aac <_fstat_r+0x1c>
 8006aa6:	682b      	ldr	r3, [r5, #0]
 8006aa8:	b103      	cbz	r3, 8006aac <_fstat_r+0x1c>
 8006aaa:	6023      	str	r3, [r4, #0]
 8006aac:	bd38      	pop	{r3, r4, r5, pc}
 8006aae:	bf00      	nop
 8006ab0:	20000660 	.word	0x20000660

08006ab4 <_isatty_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	4d06      	ldr	r5, [pc, #24]	; (8006ad0 <_isatty_r+0x1c>)
 8006ab8:	2300      	movs	r3, #0
 8006aba:	4604      	mov	r4, r0
 8006abc:	4608      	mov	r0, r1
 8006abe:	602b      	str	r3, [r5, #0]
 8006ac0:	f7fa fd0b 	bl	80014da <_isatty>
 8006ac4:	1c43      	adds	r3, r0, #1
 8006ac6:	d102      	bne.n	8006ace <_isatty_r+0x1a>
 8006ac8:	682b      	ldr	r3, [r5, #0]
 8006aca:	b103      	cbz	r3, 8006ace <_isatty_r+0x1a>
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	bd38      	pop	{r3, r4, r5, pc}
 8006ad0:	20000660 	.word	0x20000660

08006ad4 <_lseek_r>:
 8006ad4:	b538      	push	{r3, r4, r5, lr}
 8006ad6:	4d07      	ldr	r5, [pc, #28]	; (8006af4 <_lseek_r+0x20>)
 8006ad8:	4604      	mov	r4, r0
 8006ada:	4608      	mov	r0, r1
 8006adc:	4611      	mov	r1, r2
 8006ade:	2200      	movs	r2, #0
 8006ae0:	602a      	str	r2, [r5, #0]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	f7fa fd04 	bl	80014f0 <_lseek>
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	d102      	bne.n	8006af2 <_lseek_r+0x1e>
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	b103      	cbz	r3, 8006af2 <_lseek_r+0x1e>
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	bd38      	pop	{r3, r4, r5, pc}
 8006af4:	20000660 	.word	0x20000660

08006af8 <_read_r>:
 8006af8:	b538      	push	{r3, r4, r5, lr}
 8006afa:	4d07      	ldr	r5, [pc, #28]	; (8006b18 <_read_r+0x20>)
 8006afc:	4604      	mov	r4, r0
 8006afe:	4608      	mov	r0, r1
 8006b00:	4611      	mov	r1, r2
 8006b02:	2200      	movs	r2, #0
 8006b04:	602a      	str	r2, [r5, #0]
 8006b06:	461a      	mov	r2, r3
 8006b08:	f7fa fc92 	bl	8001430 <_read>
 8006b0c:	1c43      	adds	r3, r0, #1
 8006b0e:	d102      	bne.n	8006b16 <_read_r+0x1e>
 8006b10:	682b      	ldr	r3, [r5, #0]
 8006b12:	b103      	cbz	r3, 8006b16 <_read_r+0x1e>
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	20000660 	.word	0x20000660

08006b1c <_sbrk_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	4d06      	ldr	r5, [pc, #24]	; (8006b38 <_sbrk_r+0x1c>)
 8006b20:	2300      	movs	r3, #0
 8006b22:	4604      	mov	r4, r0
 8006b24:	4608      	mov	r0, r1
 8006b26:	602b      	str	r3, [r5, #0]
 8006b28:	f7fa fcf0 	bl	800150c <_sbrk>
 8006b2c:	1c43      	adds	r3, r0, #1
 8006b2e:	d102      	bne.n	8006b36 <_sbrk_r+0x1a>
 8006b30:	682b      	ldr	r3, [r5, #0]
 8006b32:	b103      	cbz	r3, 8006b36 <_sbrk_r+0x1a>
 8006b34:	6023      	str	r3, [r4, #0]
 8006b36:	bd38      	pop	{r3, r4, r5, pc}
 8006b38:	20000660 	.word	0x20000660

08006b3c <_write_r>:
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	4d07      	ldr	r5, [pc, #28]	; (8006b5c <_write_r+0x20>)
 8006b40:	4604      	mov	r4, r0
 8006b42:	4608      	mov	r0, r1
 8006b44:	4611      	mov	r1, r2
 8006b46:	2200      	movs	r2, #0
 8006b48:	602a      	str	r2, [r5, #0]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	f7fa fc8d 	bl	800146a <_write>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	d102      	bne.n	8006b5a <_write_r+0x1e>
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	b103      	cbz	r3, 8006b5a <_write_r+0x1e>
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}
 8006b5c:	20000660 	.word	0x20000660

08006b60 <_free_r>:
 8006b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b62:	2900      	cmp	r1, #0
 8006b64:	d044      	beq.n	8006bf0 <_free_r+0x90>
 8006b66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b6a:	9001      	str	r0, [sp, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f1a1 0404 	sub.w	r4, r1, #4
 8006b72:	bfb8      	it	lt
 8006b74:	18e4      	addlt	r4, r4, r3
 8006b76:	f7ff fe35 	bl	80067e4 <__malloc_lock>
 8006b7a:	4a1e      	ldr	r2, [pc, #120]	; (8006bf4 <_free_r+0x94>)
 8006b7c:	9801      	ldr	r0, [sp, #4]
 8006b7e:	6813      	ldr	r3, [r2, #0]
 8006b80:	b933      	cbnz	r3, 8006b90 <_free_r+0x30>
 8006b82:	6063      	str	r3, [r4, #4]
 8006b84:	6014      	str	r4, [r2, #0]
 8006b86:	b003      	add	sp, #12
 8006b88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b8c:	f7ff be30 	b.w	80067f0 <__malloc_unlock>
 8006b90:	42a3      	cmp	r3, r4
 8006b92:	d908      	bls.n	8006ba6 <_free_r+0x46>
 8006b94:	6825      	ldr	r5, [r4, #0]
 8006b96:	1961      	adds	r1, r4, r5
 8006b98:	428b      	cmp	r3, r1
 8006b9a:	bf01      	itttt	eq
 8006b9c:	6819      	ldreq	r1, [r3, #0]
 8006b9e:	685b      	ldreq	r3, [r3, #4]
 8006ba0:	1949      	addeq	r1, r1, r5
 8006ba2:	6021      	streq	r1, [r4, #0]
 8006ba4:	e7ed      	b.n	8006b82 <_free_r+0x22>
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	b10b      	cbz	r3, 8006bb0 <_free_r+0x50>
 8006bac:	42a3      	cmp	r3, r4
 8006bae:	d9fa      	bls.n	8006ba6 <_free_r+0x46>
 8006bb0:	6811      	ldr	r1, [r2, #0]
 8006bb2:	1855      	adds	r5, r2, r1
 8006bb4:	42a5      	cmp	r5, r4
 8006bb6:	d10b      	bne.n	8006bd0 <_free_r+0x70>
 8006bb8:	6824      	ldr	r4, [r4, #0]
 8006bba:	4421      	add	r1, r4
 8006bbc:	1854      	adds	r4, r2, r1
 8006bbe:	42a3      	cmp	r3, r4
 8006bc0:	6011      	str	r1, [r2, #0]
 8006bc2:	d1e0      	bne.n	8006b86 <_free_r+0x26>
 8006bc4:	681c      	ldr	r4, [r3, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	6053      	str	r3, [r2, #4]
 8006bca:	440c      	add	r4, r1
 8006bcc:	6014      	str	r4, [r2, #0]
 8006bce:	e7da      	b.n	8006b86 <_free_r+0x26>
 8006bd0:	d902      	bls.n	8006bd8 <_free_r+0x78>
 8006bd2:	230c      	movs	r3, #12
 8006bd4:	6003      	str	r3, [r0, #0]
 8006bd6:	e7d6      	b.n	8006b86 <_free_r+0x26>
 8006bd8:	6825      	ldr	r5, [r4, #0]
 8006bda:	1961      	adds	r1, r4, r5
 8006bdc:	428b      	cmp	r3, r1
 8006bde:	bf04      	itt	eq
 8006be0:	6819      	ldreq	r1, [r3, #0]
 8006be2:	685b      	ldreq	r3, [r3, #4]
 8006be4:	6063      	str	r3, [r4, #4]
 8006be6:	bf04      	itt	eq
 8006be8:	1949      	addeq	r1, r1, r5
 8006bea:	6021      	streq	r1, [r4, #0]
 8006bec:	6054      	str	r4, [r2, #4]
 8006bee:	e7ca      	b.n	8006b86 <_free_r+0x26>
 8006bf0:	b003      	add	sp, #12
 8006bf2:	bd30      	pop	{r4, r5, pc}
 8006bf4:	20000658 	.word	0x20000658

08006bf8 <_init>:
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfa:	bf00      	nop
 8006bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfe:	bc08      	pop	{r3}
 8006c00:	469e      	mov	lr, r3
 8006c02:	4770      	bx	lr

08006c04 <_fini>:
 8006c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c06:	bf00      	nop
 8006c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0a:	bc08      	pop	{r3}
 8006c0c:	469e      	mov	lr, r3
 8006c0e:	4770      	bx	lr
